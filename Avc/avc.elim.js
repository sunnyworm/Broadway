"use strict";
if (!this["Module"]) {
  this["Module"] = {};
}
if (!Module.arguments) {
  try {
    Module.arguments = scriptArgs;
  } catch (e) {
    try {
      Module.arguments = arguments;
    } catch (e) {
      Module.arguments = [];
    }
  }
}
var Runtime = {
  stackSave: (function() {
    return STACKTOP;
  }),
  stackRestore: (function(stackTop) {
    STACKTOP = stackTop;
  }),
  forceAlign: (function(target, quantum) {
    quantum = quantum || 4;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target / quantum) * quantum;
    } else {
      return "Math.ceil((" + target + ")/" + quantum + ")*" + quantum;
    }
  }),
  isNumberType: (function(type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  }),
  isPointerType: function isPointerType(type) {
    return pointingLevels(type) > 0;
  },
  isStructType: function isStructType(type) {
    if (isPointerType(type)) return false;
    if ((new RegExp(/^\[\d+\ x\ (.*)\]/g)).test(type)) return true;
    if ((new RegExp(/<?{ [^}]* }>?/g)).test(type)) return true;
    return !Runtime.isNumberType(type) && type[0] == "%";
  },
  INT_TYPES: {
    "i1": 0,
    "i8": 0,
    "i16": 0,
    "i32": 0,
    "i64": 0
  },
  FLOAT_TYPES: {
    "float": 0,
    "double": 0
  },
  or64: (function(x, y) {
    var l = x | 0 | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  }),
  and64: (function(x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  }),
  xor64: (function(x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  }),
  getNativeFieldSize: function getNativeFieldSize(type) {
    return Math.max(Runtime.getNativeTypeSize(type), 4);
  },
  getNativeTypeSize: function getNativeTypeSize(type) {
    if (4 == 1) return 1;
    var size = {
      "_i1": 1,
      "_i8": 1,
      "_i16": 2,
      "_i32": 4,
      "_i64": 8,
      "_float": 4,
      "_double": 8
    }["_" + type];
    if (!size && type[type.length - 1] == "*") {
      size = 4;
    }
    return size;
  },
  dedup: function dedup(items, ident) {
    var seen = {};
    if (ident) {
      return items.filter((function(item) {
        if (seen[item[ident]]) return false;
        seen[item[ident]] = true;
        return true;
      }));
    } else {
      return items.filter((function(item) {
        if (seen[item]) return false;
        seen[item] = true;
        return true;
      }));
    }
  },
  set: function set() {
    var args = typeof arguments[0] === "object" ? arguments[0] : arguments;
    var ret = {};
    for (var i = 0; i < args.length; i++) {
      ret[args[i]] = 0;
    }
    return ret;
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map((function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field);
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        dprint("Unclear type in struct: " + field + ", in " + type.name_ + " :: " + dump(Types.types[type.name_]));
        assert(0);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, 4);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize);
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr - prev);
      }
      prev = curr;
      return curr;
    }));
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = type.flatFactor != 1;
    return type.flatIndexes;
  },
  generateStructInfo: (function(struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === "undefined" ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (!struct) struct = (typeof Types === "undefined" ? Runtime : Types).structMetadata[typeName.replace(/.*\./, "")];
      if (!struct) return null;
      assert(type.fields.length === struct.length, "Number of named fields must match the type for " + typeName + ". Perhaps due to inheritance, which is not supported yet?");
      alignment = type.flatIndexes;
    } else {
      var type = {
        fields: struct.map((function(item) {
          return item[0];
        }))
      };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach((function(item, i) {
        if (typeof item === "string") {
          ret[item] = alignment[i] + offset;
        } else {
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      }));
    } else {
      struct.forEach((function(item, i) {
        ret[item[1]] = alignment[i];
      }));
    }
    return ret;
  }),
  stackAlloc: function stackAlloc(size) {
    var ret = STACKTOP;
    STACKTOP += size;
    STACKTOP = Math.ceil(STACKTOP / 4) * 4;
    return ret;
  },
  staticAlloc: function staticAlloc(size) {
    var ret = STATICTOP;
    STATICTOP += size;
    STATICTOP = Math.ceil(STATICTOP / 4) * 4;
    return ret;
  },
  alignMemory: function alignMemory(size, quantum) {
    var ret = size = Math.ceil(size / (quantum ? quantum : 4)) * (quantum ? quantum : 4);
    return ret;
  },
  __dummy__: 0
};
var CorrectionsMonitor = {
  MAX_ALLOWED: 0,
  corrections: 0,
  sigs: {},
  note: (function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort("\n\nToo many corrections!");
    }
  }),
  print: (function() {
    var items = [];
    for (var sig in this.sigs) {
      items.push({
        sig: sig,
        fails: this.sigs[sig][0],
        succeeds: this.sigs[sig][1],
        total: this.sigs[sig][0] + this.sigs[sig][1]
      });
    }
    items.sort((function(x, y) {
      return y.total - x.total;
    }));
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      print(item.sig + " : " + item.total + " hits, %" + Math.ceil(100 * item.fails / item.total) + " failures");
    }
  })
};
function cRound(x) {
  return x >= 0 ? Math.floor(x) : Math.ceil(x);
}
var __globalConstructor__ = function globalConstructor() {};
var __THREW__ = false;
var __ATEXIT__ = [];
var ABORT = false;
var undef = 0;
var tempValue, tempInt, tempBigInt;
function abort(text) {
  print(text + ":\n" + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}
function assert(condition, text) {
  if (!condition) {
    abort("Assertion failed: " + text);
  }
}
function setValue(ptr, value, type) {
  if (type[type.length - 1] === "*") type = "i32";
  switch (type) {
   case "i1":
    HEAP8[ptr >> 0] = value;
    break;
   case "i8":
    HEAP8[ptr >> 0] = value;
    break;
   case "i16":
    HEAP16[ptr >> 1] = value;
    break;
   case "i32":
    HEAP32[ptr >> 2] = value;
    break;
   case "i64":
    HEAP32[ptr >> 2] = value;
    break;
   case "float":
    HEAPF32[ptr >> 2] = value;
    break;
   case "double":
    HEAPF32[ptr >> 2] = value;
    break;
   default:
    abort("invalid type for setValue: " + type);
  }
}
Module["setValue"] = setValue;
function getValue(ptr, type) {
  if (type[type.length - 1] === "*") type = "i32";
  switch (type) {
   case "i1":
    return HEAP8[ptr >> 0];
   case "i8":
    return HEAP8[ptr >> 0];
   case "i16":
    return HEAP16[ptr >> 1];
   case "i32":
    return HEAP32[ptr >> 2];
   case "i64":
    return HEAP32[ptr >> 2];
   case "float":
    return HEAPF32[ptr >> 2];
   case "double":
    return HEAPF32[ptr >> 2];
   default:
    abort("invalid type for setValue: " + type);
  }
  return null;
}
Module["getValue"] = getValue;
var ALLOC_NORMAL = 0;
var ALLOC_STACK = 1;
var ALLOC_STATIC = 2;
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
function allocate(slab, types, allocator) {
  var zeroinit, size;
  if (typeof slab === "number") {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var ret = [ _malloc, Runtime.stackAlloc, Runtime.staticAlloc ][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, 1));
  var singleType = typeof types === "string" ? types : null;
  var i = 0, type;
  while (i < size) {
    var curr = zeroinit ? 0 : slab[i];
    if (typeof curr === "function") {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    setValue(ret + i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }
  return ret;
}
Module["allocate"] = allocate;
function Pointer_stringify(ptr) {
  var ret = "";
  var i = 0;
  var t;
  var nullByte = String.fromCharCode(0);
  while (1) {
    t = String.fromCharCode(HEAPU8[ptr + i >> 0]);
    if (t == nullByte) {
      break;
    } else {}
    ret += t;
    i += 1;
  }
  return ret;
}
Module["Pointer_stringify"] = Pointer_stringify;
function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module["Array_stringify"] = Array_stringify;
var FUNCTION_TABLE;
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return Math.ceil(x / PAGE_SIZE) * PAGE_SIZE;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32;
var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
var HAS_TYPED_ARRAYS = false;
var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 52428800;
var FAST_MEMORY = Module["FAST_MEMORY"] || 12582912;
HAS_TYPED_ARRAYS = false;
try {
  HAS_TYPED_ARRAYS = !!Int32Array && !!Float64Array && !!(new Int32Array(1))["subarray"];
} catch (e) {}
if (HAS_TYPED_ARRAYS) {
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, "Typed arrays 2 must be run on a little-endian system");
} else {
  HEAP = new Array(TOTAL_MEMORY);
  for (var i = 0; i < FAST_MEMORY; i++) {
    HEAP[i] = 0;
  }
  abort("Cannot fallback to non-typed array case in USE_TYPED_ARRAYS == 2: Code is too specialized");
}
var base = intArrayFromString("(null)");
for (var i = 0; i < base.length; i++) {
  HEAP8[i >> 0] = base[i];
}
Module["HEAP"] = HEAP;
Module["HEAP8"] = HEAP8;
Module["HEAP16"] = HEAP16;
Module["HEAP32"] = HEAP32;
Module["HEAPU8"] = HEAPU8;
Module["HEAPU16"] = HEAPU16;
Module["HEAPU32"] = HEAPU32;
Module["HEAPF32"] = HEAPF32;
STACK_ROOT = STACKTOP = alignMemoryPage(10);
var TOTAL_STACK = 1024 * 1024;
STACK_MAX = STACK_ROOT + TOTAL_STACK;
STATICTOP = alignMemoryPage(STACK_MAX);
function __shutdownRuntime__() {
  while (__ATEXIT__.length > 0) {
    var atexit = __ATEXIT__.pop();
    var func = atexit.func;
    if (typeof func === "number") {
      func = FUNCTION_TABLE[func];
    }
    func(atexit.arg === undefined ? null : atexit.arg);
  }
  CorrectionsMonitor.print();
}
function Array_copy(ptr, num) {
  if (HAS_TYPED_ARRAYS) {
    return Array.prototype.slice.call(HEAP8.subarray(ptr, ptr + num));
  } else {
    return HEAP8.slice(ptr, ptr + num);
  }
  return HEAP.slice(ptr, ptr + num);
}
Module["Array_copy"] = Array_copy;
function String_len(ptr) {
  var i = 0;
  while (HEAP8[ptr + i >> 0]) i++;
  return i;
}
Module["String_len"] = String_len;
function String_copy(ptr, addZero) {
  var len = String_len(ptr);
  if (addZero) len++;
  var ret = Array_copy(ptr, len);
  if (addZero) ret[len - 1] = 0;
  return ret;
}
Module["String_copy"] = String_copy;
if (typeof console === "object" && typeof console.log === "function") {
  this["print"] = (function(x) {
    console.log(x);
  });
} else if (typeof print === "undefined") {
  this["print"] = (function() {});
}
function intArrayFromString(stringy, dontAddNull) {
  var ret = [];
  
  var i = 0;
  while (i < stringy.length) {
    var chr = stringy.charCodeAt(i);
    if (chr > 255) {
      chr &= 255;
    }
    ret.push(chr);
    i = i + 1;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module["intArrayFromString"] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 255) {
      chr &= 255;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join("");
}
Module["intArrayToString"] = intArrayToString;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
  if (value >= half && (bits <= 32 || value > half)) {
    value = -2 * half + value;
  }
  return value;
}
Runtime.QUANTUM_SIZE = 4;
var $struct_SDL_Surface___SIZE = 60;
var $struct_SDL_Surface___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 40, 44, 48, 52, 56 ];
var $struct_SDL_PixelFormat___SIZE = 40;
var $struct_SDL_PixelFormat___FLATTENER = [ 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 20, 24, 28, 32, 36 ];
var $struct_SDL_Palette___SIZE = 8;
var $struct_SDL_Color___SIZE = 4;
var $struct_private_hwdata___SIZE = 0;
var $struct_private_hwdata___FLATTENER = [];
var $struct_SDL_Rect___SIZE = 8;
var $struct_SDL_BlitMap___SIZE = 0;
var $struct_SDL_BlitMap___FLATTENER = [];
var $struct_tagAVCHandle_98___SIZE = 36;
var $struct__IO_FILE___SIZE = 148;
var $struct__IO_FILE___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 70, 71, 72, 76, 84, 88, 92, 96, 100, 104, 108 ];
var $struct__IO_marker___SIZE = 12;
var $struct_tagAVCHandle___SIZE = 36;
var $struct_tagCommonObj___SIZE = 2084;
var $struct_tagCommonObj___FLATTENER = [ 0, 768, 772, 776, 780, 784, 788, 792, 796, 800, 804, 808, 812, 816, 820, 824, 828, 832, 836, 840, 844, 848, 852, 856, 860, 864, 868, 872, 876, 880, 884, 888, 892, 896, 900, 904, 908, 912, 916, 920, 924, 928, 932, 1060, 1188, 1192, 1196, 1200, 1204, 1208, 1212, 1216, 1220, 1224, 1228, 1232, 1236, 1240, 1244, 1248, 1252, 1256, 1260, 1264, 1268, 1272, 1276, 1280, 1284, 1288, 1292, 1296, 1300, 1304, 1308, 1312, 1316, 1320, 1324, 1328, 1332, 1336, 1340, 1344, 1348, 1352, 1356, 1360, 1364, 1368, 1372, 1376, 1380, 1384, 1388, 1392, 1396, 1400, 1404, 1408, 1412, 1416, 1548, 1680, 1808, 1936, 2064, 2068, 2072, 2076, 2080 ];
var $struct_tagDecPicBuffer___SIZE = 84;
var $struct_tagDecPicBuffer___FLATTENER = [ 0, 4, 8, 12, 80 ];
var $struct_tagFrameStore___SIZE = 88;
var $struct_tagFrameStore___FLATTENER = [ 0, 4, 8, 12, 16, 72, 76, 80, 84 ];
var $struct_tagPictureData___SIZE = 56;
var $struct_tagSeqParamSet___SIZE = 2084;
var $struct_tagSeqParamSet___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 1080, 1084, 1088, 1092, 1096, 1100, 1104, 1108, 1112, 1116, 1120, 1124, 1128, 1132 ];
var $struct_tagVUIParam___SIZE = 952;
var $struct_tagVUIParam___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 496, 500, 912, 916, 920, 924, 928, 932, 936, 940, 944, 948 ];
var $struct_tagHRDParams___SIZE = 412;
var $struct_tagHRDParams___FLATTENER = [ 0, 4, 8, 12, 140, 268, 396, 400, 404, 408 ];
var $struct_tagPicParamSet___SIZE = 168;
var $struct_tagPicParamSet___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 56, 84, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164 ];
var $struct_tagSliceHeader___SIZE = 2164;
var $struct_tagSliceHeader___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 44, 48, 52, 56, 60, 64, 68, 196, 324, 452, 456, 584, 712, 840, 844, 848, 852, 1108, 1364, 1620, 1876, 2132, 2136, 2140, 2144, 2148, 2152, 2156, 2160 ];
var $struct_tagMacroblock___SIZE = 420;
var $struct_tagMacroblock___FLATTENER = [ 0, 4, 68, 132, 140, 148, 156, 160, 164, 168, 184, 188, 192, 256, 260, 324, 328, 332, 348, 364, 380, 404, 408, 412, 416 ];
var $struct_tagDecBitstream___SIZE = 44;
var $struct_tagDecObject___SIZE = 1208;
var $struct_tagDecObject___FLATTENER = [ 0, 4, 8, 136, 1160, 1176, 1192, 1196, 1200, 1204 ];
var $struct_tagCommonObj_21___SIZE = 2084;
var $struct_tagCommonObj_21___FLATTENER = [ 0, 768, 772, 776, 780, 784, 788, 792, 796, 800, 804, 808, 812, 816, 820, 824, 828, 832, 836, 840, 844, 848, 852, 856, 860, 864, 868, 872, 876, 880, 884, 888, 892, 896, 900, 904, 908, 912, 916, 920, 924, 928, 932, 1060, 1188, 1192, 1196, 1200, 1204, 1208, 1212, 1216, 1220, 1224, 1228, 1232, 1236, 1240, 1244, 1248, 1252, 1256, 1260, 1264, 1268, 1272, 1276, 1280, 1284, 1288, 1292, 1296, 1300, 1304, 1308, 1312, 1316, 1320, 1324, 1328, 1332, 1336, 1340, 1344, 1348, 1352, 1356, 1360, 1364, 1368, 1372, 1376, 1380, 1384, 1388, 1392, 1396, 1400, 1404, 1408, 1412, 1416, 1548, 1680, 1808, 1936, 2064, 2068, 2072, 2076, 2080 ];
var $struct_tagDecPicBuffer_14___SIZE = 84;
var $struct_tagDecPicBuffer_14___FLATTENER = [ 0, 4, 8, 12, 80 ];
var $struct_tagFrameStore_13___SIZE = 88;
var $struct_tagFrameStore_13___FLATTENER = [ 0, 4, 8, 12, 16, 72, 76, 80, 84 ];
var $struct_tagPictureData_12___SIZE = 56;
var $struct_tagSeqParamSet_17___SIZE = 2084;
var $struct_tagSeqParamSet_17___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 1080, 1084, 1088, 1092, 1096, 1100, 1104, 1108, 1112, 1116, 1120, 1124, 1128, 1132 ];
var $struct_tagVUIParam_16___SIZE = 952;
var $struct_tagVUIParam_16___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 496, 500, 912, 916, 920, 924, 928, 932, 936, 940, 944, 948 ];
var $struct_tagHRDParams_15___SIZE = 412;
var $struct_tagHRDParams_15___FLATTENER = [ 0, 4, 8, 12, 140, 268, 396, 400, 404, 408 ];
var $struct_tagPicParamSet_18___SIZE = 168;
var $struct_tagPicParamSet_18___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 56, 84, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164 ];
var $struct_tagSliceHeader_19___SIZE = 2164;
var $struct_tagSliceHeader_19___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 44, 48, 52, 56, 60, 64, 68, 196, 324, 452, 456, 584, 712, 840, 844, 848, 852, 1108, 1364, 1620, 1876, 2132, 2136, 2140, 2144, 2148, 2152, 2156, 2160 ];
var $struct_tagMacroblock_20___SIZE = 420;
var $struct_tagMacroblock_20___FLATTENER = [ 0, 4, 68, 132, 140, 148, 156, 160, 164, 168, 184, 188, 192, 256, 260, 324, 328, 332, 348, 364, 380, 404, 408, 412, 416 ];
var $struct_tagCommonObj_31___SIZE = 2084;
var $struct_tagCommonObj_31___FLATTENER = [ 0, 768, 772, 776, 780, 784, 788, 792, 796, 800, 804, 808, 812, 816, 820, 824, 828, 832, 836, 840, 844, 848, 852, 856, 860, 864, 868, 872, 876, 880, 884, 888, 892, 896, 900, 904, 908, 912, 916, 920, 924, 928, 932, 1060, 1188, 1192, 1196, 1200, 1204, 1208, 1212, 1216, 1220, 1224, 1228, 1232, 1236, 1240, 1244, 1248, 1252, 1256, 1260, 1264, 1268, 1272, 1276, 1280, 1284, 1288, 1292, 1296, 1300, 1304, 1308, 1312, 1316, 1320, 1324, 1328, 1332, 1336, 1340, 1344, 1348, 1352, 1356, 1360, 1364, 1368, 1372, 1376, 1380, 1384, 1388, 1392, 1396, 1400, 1404, 1408, 1412, 1416, 1548, 1680, 1808, 1936, 2064, 2068, 2072, 2076, 2080 ];
var $struct_tagDecPicBuffer_24___SIZE = 84;
var $struct_tagDecPicBuffer_24___FLATTENER = [ 0, 4, 8, 12, 80 ];
var $struct_tagFrameStore_23___SIZE = 88;
var $struct_tagFrameStore_23___FLATTENER = [ 0, 4, 8, 12, 16, 72, 76, 80, 84 ];
var $struct_tagPictureData_22___SIZE = 56;
var $struct_tagSeqParamSet_27___SIZE = 2084;
var $struct_tagSeqParamSet_27___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 1080, 1084, 1088, 1092, 1096, 1100, 1104, 1108, 1112, 1116, 1120, 1124, 1128, 1132 ];
var $struct_tagVUIParam_26___SIZE = 952;
var $struct_tagVUIParam_26___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 496, 500, 912, 916, 920, 924, 928, 932, 936, 940, 944, 948 ];
var $struct_tagHRDParams_25___SIZE = 412;
var $struct_tagHRDParams_25___FLATTENER = [ 0, 4, 8, 12, 140, 268, 396, 400, 404, 408 ];
var $struct_tagPicParamSet_28___SIZE = 168;
var $struct_tagPicParamSet_28___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 56, 84, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164 ];
var $struct_tagSliceHeader_29___SIZE = 2164;
var $struct_tagSliceHeader_29___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 44, 48, 52, 56, 60, 64, 68, 196, 324, 452, 456, 584, 712, 840, 844, 848, 852, 1108, 1364, 1620, 1876, 2132, 2136, 2140, 2144, 2148, 2152, 2156, 2160 ];
var $struct_tagMacroblock_30___SIZE = 420;
var $struct_tagMacroblock_30___FLATTENER = [ 0, 4, 68, 132, 140, 148, 156, 160, 164, 168, 184, 188, 192, 256, 260, 324, 328, 332, 348, 364, 380, 404, 408, 412, 416 ];
var $struct_tagNeighborAvailability___SIZE = 12;
var $struct_tagDecObject_54___SIZE = 1208;
var $struct_tagDecObject_54___FLATTENER = [ 0, 4, 8, 136, 1160, 1176, 1192, 1196, 1200, 1204 ];
var $struct_tagAVCHandle_53___SIZE = 36;
var $struct_tagCommonObj_77___SIZE = 2084;
var $struct_tagCommonObj_77___FLATTENER = [ 0, 768, 772, 776, 780, 784, 788, 792, 796, 800, 804, 808, 812, 816, 820, 824, 828, 832, 836, 840, 844, 848, 852, 856, 860, 864, 868, 872, 876, 880, 884, 888, 892, 896, 900, 904, 908, 912, 916, 920, 924, 928, 932, 1060, 1188, 1192, 1196, 1200, 1204, 1208, 1212, 1216, 1220, 1224, 1228, 1232, 1236, 1240, 1244, 1248, 1252, 1256, 1260, 1264, 1268, 1272, 1276, 1280, 1284, 1288, 1292, 1296, 1300, 1304, 1308, 1312, 1316, 1320, 1324, 1328, 1332, 1336, 1340, 1344, 1348, 1352, 1356, 1360, 1364, 1368, 1372, 1376, 1380, 1384, 1388, 1392, 1396, 1400, 1404, 1408, 1412, 1416, 1548, 1680, 1808, 1936, 2064, 2068, 2072, 2076, 2080 ];
var $struct_tagDecPicBuffer_70___SIZE = 84;
var $struct_tagDecPicBuffer_70___FLATTENER = [ 0, 4, 8, 12, 80 ];
var $struct_tagFrameStore_69___SIZE = 88;
var $struct_tagFrameStore_69___FLATTENER = [ 0, 4, 8, 12, 16, 72, 76, 80, 84 ];
var $struct_tagPictureData_68___SIZE = 56;
var $struct_tagSeqParamSet_73___SIZE = 2084;
var $struct_tagSeqParamSet_73___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 1080, 1084, 1088, 1092, 1096, 1100, 1104, 1108, 1112, 1116, 1120, 1124, 1128, 1132 ];
var $struct_tagVUIParam_72___SIZE = 952;
var $struct_tagVUIParam_72___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 496, 500, 912, 916, 920, 924, 928, 932, 936, 940, 944, 948 ];
var $struct_tagHRDParams_71___SIZE = 412;
var $struct_tagHRDParams_71___FLATTENER = [ 0, 4, 8, 12, 140, 268, 396, 400, 404, 408 ];
var $struct_tagPicParamSet_74___SIZE = 168;
var $struct_tagPicParamSet_74___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 56, 84, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164 ];
var $struct_tagSliceHeader_75___SIZE = 2164;
var $struct_tagSliceHeader_75___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 44, 48, 52, 56, 60, 64, 68, 196, 324, 452, 456, 584, 712, 840, 844, 848, 852, 1108, 1364, 1620, 1876, 2132, 2136, 2140, 2144, 2148, 2152, 2156, 2160 ];
var $struct_tagCommonObj_87___SIZE = 2084;
var $struct_tagCommonObj_87___FLATTENER = [ 0, 768, 772, 776, 780, 784, 788, 792, 796, 800, 804, 808, 812, 816, 820, 824, 828, 832, 836, 840, 844, 848, 852, 856, 860, 864, 868, 872, 876, 880, 884, 888, 892, 896, 900, 904, 908, 912, 916, 920, 924, 928, 932, 1060, 1188, 1192, 1196, 1200, 1204, 1208, 1212, 1216, 1220, 1224, 1228, 1232, 1236, 1240, 1244, 1248, 1252, 1256, 1260, 1264, 1268, 1272, 1276, 1280, 1284, 1288, 1292, 1296, 1300, 1304, 1308, 1312, 1316, 1320, 1324, 1328, 1332, 1336, 1340, 1344, 1348, 1352, 1356, 1360, 1364, 1368, 1372, 1376, 1380, 1384, 1388, 1392, 1396, 1400, 1404, 1408, 1412, 1416, 1548, 1680, 1808, 1936, 2064, 2068, 2072, 2076, 2080 ];
var $struct_tagDecPicBuffer_80___SIZE = 84;
var $struct_tagDecPicBuffer_80___FLATTENER = [ 0, 4, 8, 12, 80 ];
var $struct_tagFrameStore_79___SIZE = 88;
var $struct_tagFrameStore_79___FLATTENER = [ 0, 4, 8, 12, 16, 72, 76, 80, 84 ];
var $struct_tagPictureData_78___SIZE = 56;
var $struct_tagSeqParamSet_83___SIZE = 2084;
var $struct_tagSeqParamSet_83___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 1080, 1084, 1088, 1092, 1096, 1100, 1104, 1108, 1112, 1116, 1120, 1124, 1128, 1132 ];
var $struct_tagVUIParam_82___SIZE = 952;
var $struct_tagVUIParam_82___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 496, 500, 912, 916, 920, 924, 928, 932, 936, 940, 944, 948 ];
var $struct_tagHRDParams_81___SIZE = 412;
var $struct_tagHRDParams_81___FLATTENER = [ 0, 4, 8, 12, 140, 268, 396, 400, 404, 408 ];
var $struct_tagPicParamSet_84___SIZE = 168;
var $struct_tagPicParamSet_84___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 56, 84, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164 ];
var $struct_tagSliceHeader_85___SIZE = 2164;
var $struct_tagSliceHeader_85___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 44, 48, 52, 56, 60, 64, 68, 196, 324, 452, 456, 584, 712, 840, 844, 848, 852, 1108, 1364, 1620, 1876, 2132, 2136, 2140, 2144, 2148, 2152, 2156, 2160 ];
var $struct_tagMacroblock_86___SIZE = 420;
var $struct_tagMacroblock_86___FLATTENER = [ 0, 4, 68, 132, 140, 148, 156, 160, 164, 168, 184, 188, 192, 256, 260, 324, 328, 332, 348, 364, 380, 404, 408, 412, 416 ];
var $struct_tagCommonObj_97___SIZE = 2084;
var $struct_tagCommonObj_97___FLATTENER = [ 0, 768, 772, 776, 780, 784, 788, 792, 796, 800, 804, 808, 812, 816, 820, 824, 828, 832, 836, 840, 844, 848, 852, 856, 860, 864, 868, 872, 876, 880, 884, 888, 892, 896, 900, 904, 908, 912, 916, 920, 924, 928, 932, 1060, 1188, 1192, 1196, 1200, 1204, 1208, 1212, 1216, 1220, 1224, 1228, 1232, 1236, 1240, 1244, 1248, 1252, 1256, 1260, 1264, 1268, 1272, 1276, 1280, 1284, 1288, 1292, 1296, 1300, 1304, 1308, 1312, 1316, 1320, 1324, 1328, 1332, 1336, 1340, 1344, 1348, 1352, 1356, 1360, 1364, 1368, 1372, 1376, 1380, 1384, 1388, 1392, 1396, 1400, 1404, 1408, 1412, 1416, 1548, 1680, 1808, 1936, 2064, 2068, 2072, 2076, 2080 ];
var $struct_tagDecPicBuffer_90___SIZE = 84;
var $struct_tagDecPicBuffer_90___FLATTENER = [ 0, 4, 8, 12, 80 ];
var $struct_tagFrameStore_89___SIZE = 88;
var $struct_tagFrameStore_89___FLATTENER = [ 0, 4, 8, 12, 16, 72, 76, 80, 84 ];
var $struct_tagPictureData_88___SIZE = 56;
var $struct_tagSeqParamSet_93___SIZE = 2084;
var $struct_tagSeqParamSet_93___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 1080, 1084, 1088, 1092, 1096, 1100, 1104, 1108, 1112, 1116, 1120, 1124, 1128, 1132 ];
var $struct_tagVUIParam_92___SIZE = 952;
var $struct_tagVUIParam_92___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 496, 500, 912, 916, 920, 924, 928, 932, 936, 940, 944, 948 ];
var $struct_tagHRDParams_91___SIZE = 412;
var $struct_tagHRDParams_91___FLATTENER = [ 0, 4, 8, 12, 140, 268, 396, 400, 404, 408 ];
var $struct_tagPicParamSet_94___SIZE = 168;
var $struct_tagPicParamSet_94___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 56, 84, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164 ];
var $struct_tagSliceHeader_95___SIZE = 2164;
var $struct_tagSliceHeader_95___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 44, 48, 52, 56, 60, 64, 68, 196, 324, 452, 456, 584, 712, 840, 844, 848, 852, 1108, 1364, 1620, 1876, 2132, 2136, 2140, 2144, 2148, 2152, 2156, 2160 ];
var $struct_tagMacroblock_96___SIZE = 420;
var $struct_tagMacroblock_96___FLATTENER = [ 0, 4, 68, 132, 140, 148, 156, 160, 164, 168, 184, 188, 192, 256, 260, 324, 328, 332, 348, 364, 380, 404, 408, 412, 416 ];
var $struct_tagAVCFrameIO___SIZE = 56;
var $struct_tagAVCFrameIO___FLATTENER = [ 0, 4, 16, 20, 24, 28, 32, 40, 44, 48, 52 ];
var $union_SDL_Event___SIZE = 20;
var $struct_SDL_KeyboardEvent___SIZE = 20;
var $struct_SDL_KeyboardEvent___FLATTENER = [ 0, 1, 2, 4 ];
var $struct_SDL_keysym___SIZE = 16;
var $struct_tagDecObject_113___SIZE = 1208;
var $struct_tagDecObject_113___FLATTENER = [ 0, 4, 8, 136, 1160, 1176, 1192, 1196, 1200, 1204 ];
var $struct_tagAVCDecSPSInfo___SIZE = 28;
var __ZL10mapLev2Idx;
var __ZL8MaxDPBX2;
var __ZL10mapLev2Idx1;
var __ZL13trailing_bits;
var __ZL10mapLev2Idx2;
var __ZL10mapQPi2QPc;
var __ZL10mapLev2Idx3;
var __ZZ24GetMotionVectorPredictorP12tagCommonObjiE1C;
var __ZL10mapLev2Idx4;
var __ZL15dequant_coefres;
var __ZL10mapLev2Idx5;
var __ZL11BlkTopRight;
var __ZL10mapLev2Idx6;
var __ZL13ChromaMC_SIMD;
var __ZL10mapLev2Idx7;
var __ZL10mapQPi2QPc8;
var __ZL13mbPart2raster;
var __ZZ16InterpretMBModePP13tagMacroblockjE13map2PartWidth;
var __ZZ16InterpretMBModePP13tagMacroblockjE14map2PartHeight;
var __ZZ16InterpretMBModePP13tagMacroblockjE11map2NumPart;
var __ZZ16InterpretMBModePP13tagMacroblockjE10map2mbMode;
var __ZZ16InterpretMBModeBP13tagMacroblockjE13map2PartWidth;
var __ZZ16InterpretMBModeBP13tagMacroblockjE14map2PartHeight;
var __ZZ16InterpretMBModeBP13tagMacroblockjE10map2mbMode;
var __ZZ16InterpretMBModeBP13tagMacroblockjE13map2PredMode1;
var __ZZ16InterpretMBModeBP13tagMacroblockjE13map2PredMode2;
var __ZZ16InterpretMBModeBP13tagMacroblockjE11map2NumPart;
var __ZZ19InterpretSubMBModePP13tagMacroblockPjE16map2subPartWidth;
var __ZZ19InterpretSubMBModePP13tagMacroblockPjE17map2subPartHeight;
var __ZZ19InterpretSubMBModePP13tagMacroblockPjE14map2numSubPart;
var __ZZ19InterpretSubMBModeBP13tagMacroblockPjE13map2subMbMode;
var __ZZ19InterpretSubMBModeBP13tagMacroblockPjE16map2subPartWidth;
var __ZZ19InterpretSubMBModeBP13tagMacroblockPjE17map2subPartHeight;
var __ZZ19InterpretSubMBModeBP13tagMacroblockPjE14map2numSubPart;
var __ZZ19InterpretSubMBModeBP13tagMacroblockPjE12map2predMode;
var __ZL10mapLev2Idx9;
var __ZL13ZZ_SCAN_BLOCK;
var __ZL15dequant_coefres10;
var __ZL10mapLev2Idx15;
var __ZL11QP_CLIP_TAB;
var __ZL11ALPHA_TABLE;
var __ZL10BETA_TABLE;
var __ZL8CLIP_TAB;
var __ZL14ININT_STRENGTH;
var __ZL10mapLev2Idx16;
var __ZL10mapLev2Idx17;
var __ZL10mapLev2Idx18;
var _screen;
var _decoder;
var _size;
var _stream;
var _buffer;
var _nal_unit;
var _remaining;
var _nal_size;
var __str;
var _stderr;
var __str1;
var __str2;
var __str3;
var __str4;
var __ZL10mapLev2Idx19;
var __ZL6MapCBP;
var __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail1;
var __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail2;
var __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail3;
var __ZZ33ce_TotalCoeffTrailingOnesChromaDCP15tagDecBitstreamPiS1_E13TotCofNTrail5;
var __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE8TotZero1;
var __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE10TotZero2n3;
var __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE8TotZero4;
var __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE8TotZero5;
var __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE12TotZero6to10;
var __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE9TotZero11;
var __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE13TotZero12to15;
var __ZZ21ce_TotalZerosChromaDCP15tagDecBitstreamPiiE16TotZeroChrom1to3;
var __ZZ12ce_RunBeforeP15tagDecBitstreamPiiE6codlen;
var __ZZ12ce_RunBeforeP15tagDecBitstreamPiiE12RunBeforeTab;
var __ZL10mapLev2Idx42;
var _llvm_dbg_declare;
function _memset(ptr, value, num) {
  var $dest$, $stop$, $stop4$, $value4$;
  $dest$ = ptr;
  $stop$ = $dest$ + num;
  $value4$ = value;
  if ($value4$ < 0) $value4$ += 256;
  $value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + $value4$ * 16777216;
  while ($dest$ % 4 !== 0 && $dest$ < $stop$) {
    HEAP8[$dest$++] = value;
  }
  $dest$ >>= 2;
  $stop4$ = $stop$ >> 2;
  while ($dest$ < $stop4$) {
    HEAP32[$dest$++] = $value4$;
  }
  $dest$ <<= 2;
  while ($dest$ < $stop$) {
    HEAP8[$dest$++] = value;
  }
}
var _llvm_memset_p0i8_i32 = _memset;
var ERRNO_CODES = {
  E2BIG: 7,
  EACCES: 13,
  EADDRINUSE: 98,
  EADDRNOTAVAIL: 99,
  EAFNOSUPPORT: 97,
  EAGAIN: 11,
  EALREADY: 114,
  EBADF: 9,
  EBADMSG: 74,
  EBUSY: 16,
  ECANCELED: 125,
  ECHILD: 10,
  ECONNABORTED: 103,
  ECONNREFUSED: 111,
  ECONNRESET: 104,
  EDEADLK: 35,
  EDESTADDRREQ: 89,
  EDOM: 33,
  EDQUOT: 122,
  EEXIST: 17,
  EFAULT: 14,
  EFBIG: 27,
  EHOSTUNREACH: 113,
  EIDRM: 43,
  EILSEQ: 84,
  EINPROGRESS: 115,
  EINTR: 4,
  EINVAL: 22,
  EIO: 5,
  EISCONN: 106,
  EISDIR: 21,
  ELOOP: 40,
  EMFILE: 24,
  EMLINK: 31,
  EMSGSIZE: 90,
  EMULTIHOP: 72,
  ENAMETOOLONG: 36,
  ENETDOWN: 100,
  ENETRESET: 102,
  ENETUNREACH: 101,
  ENFILE: 23,
  ENOBUFS: 105,
  ENODATA: 61,
  ENODEV: 19,
  ENOENT: 2,
  ENOEXEC: 8,
  ENOLCK: 37,
  ENOLINK: 67,
  ENOMEM: 12,
  ENOMSG: 42,
  ENOPROTOOPT: 92,
  ENOSPC: 28,
  ENOSR: 63,
  ENOSTR: 60,
  ENOSYS: 38,
  ENOTCONN: 107,
  ENOTDIR: 20,
  ENOTEMPTY: 39,
  ENOTRECOVERABLE: 131,
  ENOTSOCK: 88,
  ENOTSUP: 95,
  ENOTTY: 25,
  ENXIO: 6,
  EOVERFLOW: 75,
  EOWNERDEAD: 130,
  EPERM: 1,
  EPIPE: 32,
  EPROTO: 71,
  EPROTONOSUPPORT: 93,
  EPROTOTYPE: 91,
  ERANGE: 34,
  EROFS: 30,
  ESPIPE: 29,
  ESRCH: 3,
  ESTALE: 116,
  ETIME: 62,
  ETIMEDOUT: 110,
  ETXTBSY: 26,
  EWOULDBLOCK: 11,
  EXDEV: 18
};
function ___setErrNo(value) {
  if (!___setErrNo.ret) ___setErrNo.ret = allocate([ 0 ], "i32", ALLOC_STATIC);
  HEAP32[___setErrNo.ret >> 2] = value;
  return value;
}
var _stdin = 0;
var _stdout = 0;
var _stderr = 0;
var __impure_ptr = 0;
var FS = {
  currentPath: "/",
  nextInode: 2,
  streams: [ null ],
  ignorePermissions: true,
  absolutePath: (function(relative, base) {
    if (typeof relative !== "string") return null;
    if (base === undefined) base = FS.currentPath;
    if (relative && relative[0] == "/") base = "";
    var full = base + "/" + relative;
    var parts = full.split("/").reverse();
    var absolute = [ "" ];
    while (parts.length) {
      var part = parts.pop();
      if (part == "" || part == ".") {} else if (part == "..") {
        if (absolute.length > 1) absolute.pop();
      } else {
        absolute.push(part);
      }
    }
    return absolute.length == 1 ? "/" : absolute.join("/");
  }),
  analyzePath: (function(path, dontResolveLastLink, linksVisited) {
    var ret = {
      isRoot: false,
      exists: false,
      error: 0,
      name: null,
      path: null,
      object: null,
      parentExists: false,
      parentPath: null,
      parentObject: null
    };
    path = FS.absolutePath(path);
    if (path == "/") {
      ret.isRoot = true;
      ret.exists = ret.parentExists = true;
      ret.name = "/";
      ret.path = ret.parentPath = "/";
      ret.object = ret.parentObject = FS.root;
    } else if (path !== null) {
      linksVisited = linksVisited || 0;
      path = path.slice(1).split("/");
      var current = FS.root;
      var traversed = [ "" ];
      while (path.length) {
        if (path.length == 1 && current.isFolder) {
          ret.parentExists = true;
          ret.parentPath = traversed.length == 1 ? "/" : traversed.join("/");
          ret.parentObject = current;
          ret.name = path[0];
        }
        var target = path.shift();
        if (!current.isFolder) {
          ret.error = ERRNO_CODES.ENOTDIR;
          break;
        } else if (!current.read) {
          ret.error = ERRNO_CODES.EACCES;
          break;
        } else if (!current.contents.hasOwnProperty(target)) {
          ret.error = ERRNO_CODES.ENOENT;
          break;
        }
        current = current.contents[target];
        if (current.link && !(dontResolveLastLink && path.length == 0)) {
          if (linksVisited > 40) {
            ret.error = ERRNO_CODES.ELOOP;
            break;
          }
          var link = FS.absolutePath(current.link, traversed.join("/"));
          return FS.analyzePath([ link ].concat(path).join("/"), dontResolveLastLink, linksVisited + 1);
        }
        traversed.push(target);
        if (path.length == 0) {
          ret.exists = true;
          ret.path = traversed.join("/");
          ret.object = current;
        }
      }
      return ret;
    }
    return ret;
  }),
  findObject: (function(path, dontResolveLastLink) {
    FS.ensureRoot();
    var ret = FS.analyzePath(path, dontResolveLastLink);
    if (ret.exists) {
      return ret.object;
    } else {
      ___setErrNo(ret.error);
      return null;
    }
  }),
  createObject: (function(parent, name, properties, canRead, canWrite) {
    if (!parent) parent = "/";
    if (typeof parent === "string") parent = FS.findObject(parent);
    if (!parent) {
      ___setErrNo(ERRNO_CODES.EACCES);
      throw new Error("Parent path must exist.");
    }
    if (!parent.isFolder) {
      ___setErrNo(ERRNO_CODES.ENOTDIR);
      throw new Error("Parent must be a folder.");
    }
    if (!parent.write && !FS.ignorePermissions) {
      ___setErrNo(ERRNO_CODES.EACCES);
      throw new Error("Parent folder must be writeable.");
    }
    if (!name || name == "." || name == "..") {
      ___setErrNo(ERRNO_CODES.ENOENT);
      throw new Error("Name must not be empty.");
    }
    if (parent.contents.hasOwnProperty(name)) {
      ___setErrNo(ERRNO_CODES.EEXIST);
      throw new Error("Can't overwrite object.");
    }
    parent.contents[name] = {
      read: canRead === undefined ? true : canRead,
      write: canWrite === undefined ? false : canWrite,
      timestamp: Date.now(),
      inodeNumber: FS.nextInode++
    };
    for (var key in properties) {
      if (properties.hasOwnProperty(key)) {
        parent.contents[name][key] = properties[key];
      }
    }
    return parent.contents[name];
  }),
  createFolder: (function(parent, name, canRead, canWrite) {
    var properties = {
      isFolder: true,
      isDevice: false,
      contents: {}
    };
    return FS.createObject(parent, name, properties, canRead, canWrite);
  }),
  createPath: (function(parent, path, canRead, canWrite) {
    var current = FS.findObject(parent);
    if (current === null) throw new Error("Invalid parent.");
    path = path.split("/").reverse();
    while (path.length) {
      var part = path.pop();
      if (!part) continue;
      if (!current.contents.hasOwnProperty(part)) {
        FS.createFolder(current, part, canRead, canWrite);
      }
      current = current.contents[part];
    }
    return current;
  }),
  createFile: (function(parent, name, properties, canRead, canWrite) {
    properties.isFolder = false;
    return FS.createObject(parent, name, properties, canRead, canWrite);
  }),
  createDataFile: (function(parent, name, data, canRead, canWrite) {
    if (typeof data === "string") {
      var dataArray = [];
      for (var i = 0; i < data.length; i++) dataArray.push(data.charCodeAt(i));
      data = dataArray;
    }
    var properties = {
      isDevice: false,
      contents: data
    };
    return FS.createFile(parent, name, properties, canRead, canWrite);
  }),
  createLazyFile: (function(parent, name, url, canRead, canWrite) {
    var properties = {
      isDevice: false,
      url: url
    };
    return FS.createFile(parent, name, properties, canRead, canWrite);
  }),
  createLink: (function(parent, name, target, canRead, canWrite) {
    var properties = {
      isDevice: false,
      link: target
    };
    return FS.createFile(parent, name, properties, canRead, canWrite);
  }),
  createDevice: (function(parent, name, input, output) {
    if (!(input || output)) {
      throw new Error("A device must have at least one callback defined.");
    }
    var ops = {
      isDevice: true,
      input: input,
      output: output
    };
    return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
  }),
  forceLoadFile: (function(obj) {
    if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
    var success = true;
    if (typeof XMLHttpRequest !== "undefined") {
      var xhr = new XMLHttpRequest;
      xhr.open("GET", obj.url, false);
      if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer";
      if (xhr.overrideMimeType) {
        xhr.overrideMimeType("text/plain; charset=x-user-defined");
      }
      xhr.send(null);
      if (xhr.status != 200 && xhr.status != 0) success = false;
      if (xhr.response !== undefined) {
        obj.contents = new Uint8Array(xhr.response || []);
      } else {
        obj.contents = intArrayFromString(xhr.responseText || "", true);
      }
    } else if (typeof read !== "undefined") {
      try {
        obj.contents = intArrayFromString(read(obj.url), true);
      } catch (e) {
        success = false;
      }
    } else {
      throw new Error("Cannot load without read() or XMLHttpRequest.");
    }
    if (!success) ___setErrNo(ERRNO_CODES.EIO);
    return success;
  }),
  ensureRoot: (function() {
    if (FS.root) return;
    FS.root = {
      read: true,
      write: false,
      isFolder: true,
      isDevice: false,
      timestamp: Date.now(),
      inodeNumber: 1,
      contents: {}
    };
  }),
  init: (function(input, output, error) {
    if (FS.init.initialized) return;
    FS.init.initialized = true;
    FS.ensureRoot();
    if (!input) input = (function() {
      if (!input.cache || !input.cache.length) {
        var result;
        if (typeof window != "undefined" && typeof window.prompt == "function") {
          result = window.prompt("Input: ");
        } else if (typeof readline == "function") {
          result = readline();
        }
        if (!result) result = "";
        input.cache = intArrayFromString(result + "\n", true);
      }
      return input.cache.shift();
    });
    if (!output) output = (function(val) {
      if (val === null || val === "\n".charCodeAt(0)) {
        output.printer(output.buffer.join(""));
        output.buffer = [];
      } else {
        output.buffer.push(String.fromCharCode(val));
      }
    });
    if (!output.printer) output.printer = print;
    if (!output.buffer) output.buffer = [];
    if (!error) error = output;
    FS.createFolder("/", "tmp", true, true);
    var devFolder = FS.createFolder("/", "dev", true, false);
    var stdin = FS.createDevice(devFolder, "stdin", input);
    var stdout = FS.createDevice(devFolder, "stdout", null, output);
    var stderr = FS.createDevice(devFolder, "stderr", null, error);
    FS.createDevice(devFolder, "tty", input, output);
    FS.streams[1] = {
      path: "/dev/stdin",
      object: stdin,
      position: 0,
      isRead: true,
      isWrite: false,
      isAppend: false,
      error: false,
      eof: false,
      ungotten: []
    };
    FS.streams[2] = {
      path: "/dev/stdout",
      object: stdout,
      position: 0,
      isRead: false,
      isWrite: true,
      isAppend: false,
      error: false,
      eof: false,
      ungotten: []
    };
    FS.streams[3] = {
      path: "/dev/stderr",
      object: stderr,
      position: 0,
      isRead: false,
      isWrite: true,
      isAppend: false,
      error: false,
      eof: false,
      ungotten: []
    };
    _stdin = allocate([ 1 ], "void*", ALLOC_STATIC);
    _stdout = allocate([ 2 ], "void*", ALLOC_STATIC);
    _stderr = allocate([ 3 ], "void*", ALLOC_STATIC);
    FS.streams[_stdin] = FS.streams[1];
    FS.streams[_stdout] = FS.streams[2];
    FS.streams[_stderr] = FS.streams[3];
    __impure_ptr = allocate([ allocate([ 0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0 ], "void*", ALLOC_STATIC) ], "void*", ALLOC_STATIC);
    FS.ignorePermissions = false;
  }),
  quit: (function() {
    if (FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output("\n".charCodeAt(0));
    if (FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output("\n".charCodeAt(0));
  })
};
var ___dirent_struct_layout = null;
function _open(path, oflag, varargs) {
  var mode = HEAP32[varargs >> 2];
  
  var isWrite = (oflag & 3) != 0;
  var isRead = (oflag & 3) != 1;
  var isCreate = Boolean(oflag & 512);
  var isExistCheck = Boolean(oflag & 2048);
  var isTruncate = Boolean(oflag & 1024);
  var isAppend = Boolean(oflag & 8);
  
  path = FS.analyzePath(Pointer_stringify(path));
  if (!path.parentExists) {
    ___setErrNo(path.error);
    return -1;
  }
  var target = path.object || null;
  var finalPath;
  if (target) {
    if (isCreate && isExistCheck) {
      ___setErrNo(ERRNO_CODES.EEXIST);
      return -1;
    }
    if ((isWrite || isCreate || isTruncate) && target.isFolder) {
      ___setErrNo(ERRNO_CODES.EISDIR);
      return -1;
    }
    if (isRead && !target.read || isWrite && !target.write) {
      ___setErrNo(ERRNO_CODES.EACCES);
      return -1;
    }
    if (isTruncate && !target.isDevice) {
      target.contents = [];
    } else {
      if (!FS.forceLoadFile(target)) {
        ___setErrNo(ERRNO_CODES.EIO);
        return -1;
      }
    }
    finalPath = path.path;
  } else {
    if (!isCreate) {
      ___setErrNo(ERRNO_CODES.ENOENT);
      return -1;
    }
    if (!path.parentObject.write) {
      ___setErrNo(ERRNO_CODES.EACCES);
      return -1;
    }
    target = FS.createDataFile(path.parentObject, path.name, [], mode & 256, mode & 128);
    finalPath = path.parentPath + "/" + path.name;
  }
  var id = FS.streams.length;
  if (target.isFolder) {
    var entryBuffer = 0;
    if (___dirent_struct_layout) {
      entryBuffer = _malloc(___dirent_struct_layout.__size__);
    }
    var contents = [];
    for (var key in target.contents) contents.push(key);
    FS.streams[id] = {
      path: finalPath,
      object: target,
      position: -2,
      isRead: true,
      isWrite: false,
      isAppend: false,
      error: false,
      eof: false,
      ungotten: [],
      contents: contents,
      currentEntry: entryBuffer
    };
  } else {
    FS.streams[id] = {
      path: finalPath,
      object: target,
      position: 0,
      isRead: isRead,
      isWrite: isWrite,
      isAppend: isAppend,
      error: false,
      eof: false,
      ungotten: []
    };
  }
  return id;
}
function _fopen(filename, mode) {
  var flags;
  mode = Pointer_stringify(mode);
  if (mode[0] == "r") {
    if (mode.indexOf("+") != -1) {
      flags = 2;
    } else {
      flags = 0;
    }
  } else if (mode[0] == "w") {
    if (mode.indexOf("+") != -1) {
      flags = 2;
    } else {
      flags = 1;
    }
    flags |= 512;
    flags |= 1024;
  } else if (mode[0] == "a") {
    if (mode.indexOf("+") != -1) {
      flags = 2;
    } else {
      flags = 1;
    }
    flags |= 512;
    flags |= 8;
  } else {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return 0;
  }
  var ret = _open(filename, flags, allocate([ 511, 0, 0, 0 ], "i32", ALLOC_STACK));
  return ret == -1 ? 0 : ret;
}
function _pwrite(fildes, buf, nbyte, offset) {
  var stream = FS.streams[fildes];
  if (!stream || stream.object.isDevice) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isWrite) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (stream.object.isFolder) {
    ___setErrNo(ERRNO_CODES.EISDIR);
    return -1;
  } else if (nbyte < 0 || offset < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    var contents = stream.object.contents;
    while (contents.length < offset) contents.push(0);
    for (var i = 0; i < nbyte; i++) {
      contents[offset + i] = HEAP8[buf + i >> 0];
    }
    stream.object.timestamp = Date.now();
    return i;
  }
}
function _write(fildes, buf, nbyte) {
  var stream = FS.streams[fildes];
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isWrite) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (nbyte < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    if (stream.object.isDevice) {
      if (stream.object.output) {
        for (var i = 0; i < nbyte; i++) {
          try {
            stream.object.output(HEAP8[buf + i >> 0]);
          } catch (e) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        stream.object.timestamp = Date.now();
        return i;
      } else {
        ___setErrNo(ERRNO_CODES.ENXIO);
        return -1;
      }
    } else {
      var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
      if (bytesWritten != -1) stream.position += bytesWritten;
      return bytesWritten;
    }
  }
}
function _fwrite(ptr, size, nitems, stream) {
  var bytesToWrite = nitems * size;
  if (bytesToWrite == 0) return 0;
  var bytesWritten = _write(stream, ptr, bytesToWrite);
  if (bytesWritten == -1) {
    if (FS.streams[stream]) FS.streams[stream].error = true;
    return -1;
  } else {
    return Math.floor(bytesWritten / size);
  }
}
function __formatString(format, varargs) {
  var textIndex = format;
  var argIndex = 0;
  var getNextArg = (function(type) {
    var ret;
    if (type === "float" || type === "double") {
      ret = HEAPF32[varargs + argIndex >> 2];
    } else {
      ret = HEAP32[varargs + argIndex >> 2];
    }
    argIndex += Runtime.getNativeFieldSize(type);
    return Number(ret);
  });
  var ret = [];
  var curr, next, currArg;
  while (1) {
    var startTextIndex = textIndex;
    curr = HEAP8[textIndex >> 0];
    if (curr === 0) break;
    next = HEAP8[textIndex + 1 >> 0];
    if (curr == "%".charCodeAt(0)) {
      var flagAlwaysSigned = false;
      var flagLeftAlign = false;
      var flagAlternative = false;
      var flagZeroPad = false;
      flagsLoop : while (1) {
        switch (next) {
         case "+".charCodeAt(0):
          flagAlwaysSigned = true;
          break;
         case "-".charCodeAt(0):
          flagLeftAlign = true;
          break;
         case "#".charCodeAt(0):
          flagAlternative = true;
          break;
         case "0".charCodeAt(0):
          if (flagZeroPad) {
            break flagsLoop;
          } else {
            flagZeroPad = true;
            break;
          }
         default:
          break flagsLoop;
        }
        textIndex++;
        next = HEAP8[textIndex + 1 >> 0];
      }
      var width = 0;
      if (next == "*".charCodeAt(0)) {
        width = getNextArg("i32");
        textIndex++;
        next = HEAP8[textIndex + 1 >> 0];
      } else {
        while (next >= "0".charCodeAt(0) && next <= "9".charCodeAt(0)) {
          width = width * 10 + (next - "0".charCodeAt(0));
          textIndex++;
          next = HEAP8[textIndex + 1 >> 0];
        }
      }
      var precisionSet = false;
      if (next == ".".charCodeAt(0)) {
        var precision = 0;
        precisionSet = true;
        textIndex++;
        next = HEAP8[textIndex + 1 >> 0];
        if (next == "*".charCodeAt(0)) {
          precision = getNextArg("i32");
          textIndex++;
        } else {
          while (1) {
            var precisionChr = HEAP8[textIndex + 1 >> 0];
            if (precisionChr < "0".charCodeAt(0) || precisionChr > "9".charCodeAt(0)) break;
            precision = precision * 10 + (precisionChr - "0".charCodeAt(0));
            textIndex++;
          }
        }
        next = HEAP8[textIndex + 1 >> 0];
      } else {
        var precision = 6;
      }
      var argSize;
      switch (String.fromCharCode(next)) {
       case "h":
        var nextNext = HEAP8[textIndex + 2 >> 0];
        if (nextNext == "h".charCodeAt(0)) {
          textIndex++;
          argSize = 1;
        } else {
          argSize = 2;
        }
        break;
       case "l":
        var nextNext = HEAP8[textIndex + 2 >> 0];
        if (nextNext == "l".charCodeAt(0)) {
          textIndex++;
          argSize = 8;
        } else {
          argSize = 4;
        }
        break;
       case "L":
       case "q":
       case "j":
        argSize = 8;
        break;
       case "z":
       case "t":
       case "I":
        argSize = 4;
        break;
       default:
        argSize = undefined;
      }
      if (argSize !== undefined) textIndex++;
      next = HEAP8[textIndex + 1 >> 0];
      if ([ "d", "i", "u", "o", "x", "X", "p" ].indexOf(String.fromCharCode(next)) != -1) {
        var signed = next == "d".charCodeAt(0) || next == "i".charCodeAt(0);
        argSize = argSize || 4;
        var currArg = getNextArg("i" + argSize * 8);
        if (argSize <= 4) {
          var limit = Math.pow(256, argSize) - 1;
          currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
        }
        var currAbsArg = Math.abs(currArg);
        var argText;
        var prefix = "";
        if (next == "d".charCodeAt(0) || next == "i".charCodeAt(0)) {
          argText = reSign(currArg, 8 * argSize, 1).toString(10);
        } else if (next == "u".charCodeAt(0)) {
          argText = unSign(currArg, 8 * argSize, 1).toString(10);
          currArg = Math.abs(currArg);
        } else if (next == "o".charCodeAt(0)) {
          argText = (flagAlternative ? "0" : "") + currAbsArg.toString(8);
        } else if (next == "x".charCodeAt(0) || next == "X".charCodeAt(0)) {
          prefix = flagAlternative ? "0x" : "";
          if (currArg < 0) {
            currArg = -currArg;
            argText = (currAbsArg - 1).toString(16);
            var buffer = [];
            for (var i = 0; i < argText.length; i++) {
              buffer.push((15 - parseInt(argText[i], 16)).toString(16));
            }
            argText = buffer.join("");
            while (argText.length < argSize * 2) argText = "f" + argText;
          } else {
            argText = currAbsArg.toString(16);
          }
          if (next == "X".charCodeAt(0)) {
            prefix = prefix.toUpperCase();
            argText = argText.toUpperCase();
          }
        } else if (next == "p".charCodeAt(0)) {
          if (currAbsArg === 0) {
            argText = "(nil)";
          } else {
            prefix = "0x";
            argText = currAbsArg.toString(16);
          }
        }
        if (precisionSet) {
          while (argText.length < precision) {
            argText = "0" + argText;
          }
        }
        if (flagAlwaysSigned) {
          if (currArg < 0) {
            prefix = "-" + prefix;
          } else {
            prefix = "+" + prefix;
          }
        }
        while (prefix.length + argText.length < width) {
          if (flagLeftAlign) {
            argText += " ";
          } else {
            if (flagZeroPad) {
              argText = "0" + argText;
            } else {
              prefix = " " + prefix;
            }
          }
        }
        argText = prefix + argText;
        argText.split("").forEach((function(chr) {
          ret.push(chr.charCodeAt(0));
        }));
      } else if ([ "f", "F", "e", "E", "g", "G" ].indexOf(String.fromCharCode(next)) != -1) {
        var currArg = getNextArg(argSize === 4 ? "float" : "double");
        var argText;
        if (isNaN(currArg)) {
          argText = "nan";
          flagZeroPad = false;
        } else if (!isFinite(currArg)) {
          argText = (currArg < 0 ? "-" : "") + "inf";
          flagZeroPad = false;
        } else {
          var isGeneral = false;
          var effectivePrecision = Math.min(precision, 20);
          if (next == "g".charCodeAt(0) || next == "G".charCodeAt(0)) {
            isGeneral = true;
            precision = precision || 1;
            var exponent = parseInt(currArg.toExponential(effectivePrecision).split("e")[1], 10);
            if (precision > exponent && exponent >= -4) {
              next = (next == "g".charCodeAt(0) ? "f" : "F").charCodeAt(0);
              precision -= exponent + 1;
            } else {
              next = (next == "g".charCodeAt(0) ? "e" : "E").charCodeAt(0);
              precision--;
            }
            effectivePrecision = Math.min(precision, 20);
          }
          if (next == "e".charCodeAt(0) || next == "E".charCodeAt(0)) {
            argText = currArg.toExponential(effectivePrecision);
            if (/[eE][-+]\d$/.test(argText)) {
              argText = argText.slice(0, -1) + "0" + argText.slice(-1);
            }
          } else if (next == "f".charCodeAt(0) || next == "F".charCodeAt(0)) {
            argText = currArg.toFixed(effectivePrecision);
          }
          var parts = argText.split("e");
          if (isGeneral && !flagAlternative) {
            while (parts[0].length > 1 && parts[0].indexOf(".") != -1 && (parts[0].slice(-1) == "0" || parts[0].slice(-1) == ".")) {
              parts[0] = parts[0].slice(0, -1);
            }
          } else {
            if (flagAlternative && argText.indexOf(".") == -1) parts[0] += ".";
            while (precision > effectivePrecision++) parts[0] += "0";
          }
          argText = parts[0] + (parts.length > 1 ? "e" + parts[1] : "");
          if (next == "E".charCodeAt(0)) argText = argText.toUpperCase();
          if (flagAlwaysSigned && currArg >= 0) {
            argText = "+" + argText;
          }
        }
        while (argText.length < width) {
          if (flagLeftAlign) {
            argText += " ";
          } else {
            if (flagZeroPad && (argText[0] == "-" || argText[0] == "+")) {
              argText = argText[0] + "0" + argText.slice(1);
            } else {
              argText = (flagZeroPad ? "0" : " ") + argText;
            }
          }
        }
        if (next < "a".charCodeAt(0)) argText = argText.toUpperCase();
        argText.split("").forEach((function(chr) {
          ret.push(chr.charCodeAt(0));
        }));
      } else if (next == "s".charCodeAt(0)) {
        var arg = getNextArg("i8*");
        var copiedString;
        if (arg) {
          copiedString = String_copy(arg);
          if (precisionSet && copiedString.length > precision) {
            copiedString = copiedString.slice(0, precision);
          }
        } else {
          copiedString = intArrayFromString("(null)", true);
        }
        if (!flagLeftAlign) {
          while (copiedString.length < width--) {
            ret.push(" ".charCodeAt(0));
          }
        }
        ret = ret.concat(copiedString);
        if (flagLeftAlign) {
          while (copiedString.length < width--) {
            ret.push(" ".charCodeAt(0));
          }
        }
      } else if (next == "c".charCodeAt(0)) {
        if (flagLeftAlign) ret.push(getNextArg("i8"));
        while (--width > 0) {
          ret.push(" ".charCodeAt(0));
        }
        if (!flagLeftAlign) ret.push(getNextArg("i8"));
      } else if (next == "n".charCodeAt(0)) {
        var ptr = getNextArg("i32*");
        HEAP32[ptr >> 2] = ret.length;
      } else if (next == "%".charCodeAt(0)) {
        ret.push(curr);
      } else {
        for (var i = startTextIndex; i < textIndex + 2; i++) {
          ret.push(HEAP8[i >> 0]);
        }
      }
      textIndex += 2;
    } else {
      ret.push(curr);
      textIndex += 1;
    }
  }
  return ret;
}
function _fprintf(stream, format, varargs) {
  var result = __formatString(format, varargs);
  var stack = Runtime.stackSave();
  var ret = _fwrite(allocate(result, "i8", ALLOC_STACK), 1, result.length, stream);
  Runtime.stackRestore(stack);
  return ret;
}
function _lseek(fildes, offset, whence) {
  if (FS.streams[fildes] && !FS.streams[fildes].isDevice) {
    var stream = FS.streams[fildes];
    var position = offset;
    if (whence === 1) {
      position += stream.position;
    } else if (whence === 2) {
      position += stream.object.contents.length;
    }
    if (position < 0) {
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    } else {
      stream.ungotten = [];
      stream.position = position;
      return position;
    }
  } else {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
}
function _fseek(stream, offset, whence) {
  var ret = _lseek(stream, offset, whence);
  if (ret == -1) {
    return -1;
  } else {
    FS.streams[stream].eof = false;
    return 0;
  }
}
function _ftell(stream) {
  if (stream in FS.streams) {
    stream = FS.streams[stream];
    if (stream.object.isDevice) {
      ___setErrNo(ERRNO_CODES.ESPIPE);
      return -1;
    } else {
      return stream.position;
    }
  } else {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
}
function _malloc(size) {
  var ret = STATICTOP;
  STATICTOP += size;
  STATICTOP = Math.ceil(STATICTOP / 4) * 4;
  return ret;
}
function _close(fildes) {
  if (FS.streams[fildes]) {
    if (FS.streams[fildes].currentEntry) {
      _free(FS.streams[fildes].currentEntry);
    }
    delete FS.streams[fildes];
    return 0;
  } else {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
}
function _fsync(fildes) {
  if (FS.streams[fildes]) {
    return 0;
  } else {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
}
function _fclose(stream) {
  _fsync(stream);
  return _close(stream);
}
function _pread(fildes, buf, nbyte, offset) {
  var stream = FS.streams[fildes];
  if (!stream || stream.object.isDevice) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isRead) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (stream.object.isFolder) {
    ___setErrNo(ERRNO_CODES.EISDIR);
    return -1;
  } else if (nbyte < 0 || offset < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    var bytesRead = 0;
    while (stream.ungotten.length && nbyte > 0) {
      HEAP8[buf++ >> 0] = stream.ungotten.pop();
      nbyte--;
      bytesRead++;
    }
    var contents = stream.object.contents;
    var size = Math.min(contents.length - offset, nbyte);
    for (var i = 0; i < size; i++) {
      HEAP8[buf + i >> 0] = contents[offset + i];
      bytesRead++;
    }
    return bytesRead;
  }
}
function _read(fildes, buf, nbyte) {
  var stream = FS.streams[fildes];
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isRead) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (nbyte < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    var bytesRead;
    if (stream.object.isDevice) {
      if (stream.object.input) {
        bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[buf++ >> 0] = stream.ungotten.pop();
          nbyte--;
          bytesRead++;
        }
        for (var i = 0; i < nbyte; i++) {
          try {
            var result = stream.object.input();
          } catch (e) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
          if (result === null || result === undefined) break;
          bytesRead++;
          HEAP8[buf + i >> 0] = result;
        }
        return bytesRead;
      } else {
        ___setErrNo(ERRNO_CODES.ENXIO);
        return -1;
      }
    } else {
      var ungotSize = stream.ungotten.length;
      bytesRead = _pread(fildes, buf, nbyte, stream.position);
      if (bytesRead != -1) {
        stream.position += stream.ungotten.length - ungotSize + bytesRead;
      }
      return bytesRead;
    }
  }
}
function _fread(ptr, size, nitems, stream) {
  var bytesToRead = nitems * size;
  if (bytesToRead == 0) return 0;
  var bytesRead = _read(stream, ptr, bytesToRead);
  var streamObj = FS.streams[stream];
  if (bytesRead == -1) {
    if (streamObj) streamObj.error = true;
    return -1;
  } else {
    if (bytesRead < bytesToRead) streamObj.eof = true;
    return Math.floor(bytesRead / size);
  }
}
function _free() {}
var Browser = {
  decodeImage: (function(pixels, format) {
    function encodeBase64(data) {
      var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      
      var ret = "";
      var leftchar = 0;
      var leftbits = 0;
      for (var i = 0; i < data.length; i++) {
        leftchar = leftchar << 8 | data[i];
        leftbits += 8;
        while (leftbits >= 6) {
          var curr = leftchar >> leftbits - 6 & 63;
          leftbits -= 6;
          ret += BASE[curr];
        }
      }
      if (leftbits == 2) {
        ret += BASE[(leftchar & 3) << 4];
        ret += "=" + "=";
      } else if (leftbits == 4) {
        ret += BASE[(leftchar & 15) << 2];
        ret += "=";
      }
      return ret;
    }
    var img = new Image;
    var canvas = document.createElement("canvas");
    img.src = "data:image/" + format + ";base64," + encodeBase64(pixels);
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    return imageData;
  })
};
var SDL = {
  defaults: {
    "width": 320,
    "height": 200,
    "copyScreenOnLock": false
  },
  surfaces: {},
  events: [],
  keyCodes: {
    "16": 304,
    "17": 305,
    "18": 308,
    "37": 276,
    "38": 273,
    "39": 275,
    "40": 274,
    "109": 45
  },
  structs: {
    "Rect": {
      "__size__": 8,
      "x": 0,
      "y": 2,
      "w": 4,
      "h": 6
    },
    "PixelFormat": {
      "__size__": 32,
      "palette": 0,
      "BitsPerPixel": 4,
      "BytesPerPixel": 5,
      "Rloss": 6,
      "Gloss": 7,
      "Bloss": 8,
      "Aloss": 9,
      "Rshift": 10,
      "Gshift": 11,
      "Bshift": 12,
      "Ashift": 13,
      "Rmask": 16,
      "Gmask": 20,
      "Bmask": 24,
      "Amask": 28
    },
    "KeyboardEvent": {
      "__size__": 8,
      "type": 0,
      "which": 1,
      "state": 2,
      "keysym": 4
    },
    "keysym": {
      "__size__": 16,
      "scancode": 0,
      "sym": 4,
      "mod": 8,
      "unicode": 12
    },
    "AudioSpec": {
      "__size__": 24,
      "freq": 0,
      "format": 4,
      "channels": 6,
      "silence": 7,
      "samples": 8,
      "size": 12,
      "callback": 16,
      "userdata": 20
    }
  },
  makeSurface: (function(width, height, flags) {
    var surf = _malloc(14 * 4);
    var buffer = _malloc(width * height * 4);
    var pixelFormat = _malloc(18 * 4);
    flags |= 1;
    HEAP32[surf + 4 * 0 >> 2] = flags;
    HEAP32[surf + 4 * 1 >> 2] = pixelFormat;
    HEAP32[surf + 4 * 2 >> 2] = width;
    HEAP32[surf + 4 * 3 >> 2] = height;
    HEAP16[surf + 4 * 4 >> 1] = width * 4;
    HEAP32[surf + 4 * 5 >> 2] = buffer;
    HEAP32[surf + 4 * 6 >> 2] = 0;
    HEAP32[pixelFormat + SDL.structs.PixelFormat.palette >> 2] = 0;
    HEAP8[pixelFormat + SDL.structs.PixelFormat.BitsPerPixel >> 0] = 32;
    HEAP8[pixelFormat + SDL.structs.PixelFormat.BytesPerPixel >> 0] = 4;
    HEAP32[pixelFormat + SDL.structs.PixelFormat.Rmask >> 2] = 255;
    HEAP32[pixelFormat + SDL.structs.PixelFormat.Gmask >> 2] = 255;
    HEAP32[pixelFormat + SDL.structs.PixelFormat.Bmask >> 2] = 255;
    HEAP32[pixelFormat + SDL.structs.PixelFormat.Amask >> 2] = 255;
    SDL.surfaces[surf] = {
      width: width,
      height: height,
      canvas: Module["canvas"],
      ctx: Module["ctx2D"],
      surf: surf,
      buffer: buffer,
      pixelFormat: pixelFormat,
      alpha: 255
    };
    return surf;
  }),
  freeSurface: (function(surf) {
    _free(SDL.surfaces[surf].buffer);
    _free(SDL.surfaces[surf].pixelFormat);
    _free(surf);
    delete SDL.surfaces[surf];
  }),
  receiveEvent: (function(event) {
    switch (event.type) {
     case "keydown":
     case "keyup":
      SDL.events.push(event);
    }
    return false;
  }),
  makeCEvent: (function(event, ptr) {
    if (typeof event === "number") {
      _memcpy(ptr, event, SDL.structs.KeyboardEvent.__size__);
      return;
    }
    switch (event.type) {
     case "keydown":
     case "keyup":
      var down = event.type === "keydown";
      var key = SDL.keyCodes[event.keyCode] || event.keyCode;
      if (key >= 65 && key <= 90) {
        key = String.fromCharCode(key).toLowerCase().charCodeAt(0);
      }
      HEAP8[ptr + SDL.structs.KeyboardEvent.type >> 0] = down ? 2 : 3;
      HEAP8[ptr + SDL.structs.KeyboardEvent.which >> 0] = 1;
      HEAP8[ptr + SDL.structs.KeyboardEvent.state >> 0] = down ? 1 : 0;
      HEAP8[ptr + SDL.structs.KeyboardEvent.keysym + SDL.structs.keysym.scancode >> 0] = key;
      HEAP32[ptr + SDL.structs.KeyboardEvent.keysym + SDL.structs.keysym.sym >> 2] = key;
      HEAP32[ptr + SDL.structs.KeyboardEvent.keysym + SDL.structs.keysym.mod >> 2] = 0;
      break;
     case "keypress":
      break;
     default:
      throw "Unhandled SDL event: " + event.type;
    }
  })
};
function _SDL_Init(what) {
  SDL.startTime = Date.now();
  [ "keydown", "keyup", "keypress" ].forEach((function(event) {
    addEventListener(event, SDL.receiveEvent, true);
  }));
  return 0;
}
function _SDL_Delay(delay) {
  print("SDL_Delay called! - potential infinite loop");
}
function _SDL_Quit() {
  var surfData = SDL.surfaces[SDL.screen];
  if (surfData) {
    surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
    var num = surfData.image.data.length;
    for (var i = 0; i < num; i++) {
      surfData.image.data[i] = Math.floor(Math.random() * 255);
    }
    surfData.ctx.putImageData(surfData.image, 0, 0);
  }
  if (SDL.audio) _SDL_CloseAudio();
  __shutdownRuntime__();
  throw "SDL_Quit!";
}
function _SDL_SetVideoMode(width, height, depth, flags) {
  Module["canvas"].width = width;
  Module["canvas"].height = height;
  return SDL.screen = SDL.makeSurface(width, height, flags);
}
function _SDL_LockSurface(surf) {
  var surfData = SDL.surfaces[surf];
  if (!surfData.image) {
    surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
    var data = surfData.image.data;
    var num = data.length;
    for (var i = 0; i < num / 4; i++) {
      data[i * 4 + 3] = 255;
    }
  }
  if (SDL.defaults.copyScreenOnLock) {
    var num2 = surfData.image.data.length;
    for (var i = 0; i < num2; i++) {
      HEAP8[surfData.buffer + i >> 0] = surfData.image.data[i];
    }
  }
  HEAP32[surf + 5 * 4 >> 2] = surfData.buffer;
}
function _SDL_MapRGB(fmt, r, g, b) {
  return r + (g << 8) + (b << 16);
}
function _SDL_UnlockSurface(surf) {
  var surfData = SDL.surfaces[surf];
  var num = surfData.image.data.length;
  if (!surfData.colors) {
    var data = surfData.image.data;
    var buffer = surfData.buffer;
    assert(buffer % 4 == 0, "Invalid buffer offset: " + buffer);
    var src = buffer >> 2;
    var dst = 0;
    while (dst < num) {
      var val = HEAP32[src];
      data[dst] = val & 255;
      data[dst + 1] = val >> 8 & 255;
      data[dst + 2] = val >> 16 & 255;
      data[dst + 3] = 255;
      src++;
      dst += 4;
    }
  } else {
    var width = Module["canvas"].width;
    var height = Module["canvas"].height;
    var s = surfData.buffer;
    var data = surfData.image.data;
    var colors = surfData.colors;
    for (var y = 0; y < height; y++) {
      var base = y * width * 4;
      for (var x = 0; x < width; x++) {
        var val = HEAP8[s++ >> 0] & 255;
        var color = colors[val] || [ Math.floor(Math.random() * 255), Math.floor(Math.random() * 255), Math.floor(Math.random() * 255) ];
        
        data[base + x * 4] = color[0];
        data[base + x * 4 + 1] = color[1];
        data[base + x * 4 + 2] = color[2];
      }
      s += width * 3;
    }
  }
  surfData.ctx.putImageData(surfData.image, 0, 0);
}
function _SDL_Flip(surf) {}
function _SDL_PollEvent(ptr) {
  if (SDL.events.length === 0) return 0;
  if (ptr) {
    SDL.makeCEvent(SDL.events.shift(), ptr);
  }
  return 1;
}
function __exit(status) {
  __shutdownRuntime__();
  ABORT = true;
  throw "exit(" + status + ") called, at " + (new Error).stack;
}
function _exit(status) {
  __exit(status);
}
function _printf(format, varargs) {
  var stdout = HEAP32[_stdout >> 2];
  return _fprintf(stdout, format, varargs);
}
function __Z7InitDPBP12tagAVCHandleP12tagCommonObjiib($avcHandle, $video, $FrameHeightInMbs, $PicWidthInMbs, $padding) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $avcHandle_addr;
  var $video_addr;
  var $FrameHeightInMbs_addr;
  var $PicWidthInMbs_addr;
  var $padding_addr;
  var $dpb;
  var $level;
  var $framesize;
  var $num_fs;
  var $userData;
  
  var $refIdx;
  $avcHandle_addr = $avcHandle;
  $video_addr = $video;
  $FrameHeightInMbs_addr = $FrameHeightInMbs;
  $PicWidthInMbs_addr = $PicWidthInMbs;
  
  $padding_addr = $padding & 1;
  
  
  
  $dpb = HEAP32[$video_addr + 864 >> 2];
  
  
  
  $userData = HEAP32[$avcHandle_addr + 4 >> 2];
  $refIdx = 0;
  
  
  
  
  
  $level = HEAP32[HEAP32[$video_addr + 868 >> 2] + 24 >> 2];
  $num_fs = 0;
  $for_cond$2 : while (1) {
    
    var $cmp = ($num_fs | 0) < 17;
    if (!$cmp) {
      __label__ = 4;
      break $for_cond$2;
    }
    
    
    
    
    HEAP32[$dpb + 12 + $num_fs * 4 >> 2] = 0;
    
    var $inc = $num_fs + 1;
    $num_fs = $inc;
    __label__ = 1;
    continue $for_cond$2;
  }
  
  
  
  
  
  $framesize = ($FrameHeightInMbs_addr * $PicWidthInMbs_addr << 7) * 3;
  
  
  if ($padding_addr & 1) {
    __label__ = 5;
  } else {
    __label__ = 6;
  }
  if (__label__ == 5) {
    
    
    
    
    
    
    
    
    
    
    
    HEAP32[$video_addr + 1236 >> 2] = (($FrameHeightInMbs_addr + 2) * ($PicWidthInMbs_addr + 2) << 7) * 3 - $framesize;
  } else if (__label__ == 6) {
    
    
    HEAP32[$video_addr + 1236 >> 2] = 0;
  }
  
  
  
  
  if ((HEAP32[$dpb >> 2] | 0) != 0) {
    __label__ = 8;
  } else {
    __label__ = 9;
  }
  if (__label__ == 8) {
    
    
    var $22 = HEAP32[$avcHandle_addr + 24 >> 2];
    
    
    
    
    var $26 = HEAP32[$dpb >> 2];
    FUNCTION_TABLE[$22]($userData, $26);
    
    
    HEAP32[$dpb >> 2] = 0;
  }
  
  
  
  
  
  
  var $shl15 = HEAP32[__ZL8MaxDPBX2 + (HEAPU8[__ZL10mapLev2Idx + $level >> 0] & 255) * 4 >> 2] << 2;
  
  
  
  
  var $div = Math.floor(($shl15 >>> 0) / (3 * $FrameHeightInMbs_addr * $PicWidthInMbs_addr >>> 0));
  var $add18 = $div + 1;
  
  
  HEAP32[$dpb + 80 >> 2] = $add18;
  
  
  
  
  if ((HEAP32[$dpb + 80 >> 2] | 0) > 17) {
    __label__ = 10;
  } else {
    __label__ = 11;
  }
  if (__label__ == 10) {
    
    
    HEAP32[$dpb + 80 >> 2] = 17;
  }
  
  
  
  
  
  
  
  
  
  
  if (HEAP32[HEAP32[$video_addr + 868 >> 2] + 1080 >> 2] + 1 >>> 0 > HEAPU32[$dpb + 80 >> 2] >>> 0) {
    __label__ = 12;
  } else {
    __label__ = 13;
  }
  if (__label__ == 12) {
    
    
    
    
    
    var $add32 = HEAP32[HEAP32[$video_addr + 868 >> 2] + 1080 >> 2] + 1;
    
    
    HEAP32[$dpb + 80 >> 2] = $add32;
  }
  
  
  
  
  
  
  
  
  var $mul38 = HEAP32[$dpb + 80 >> 2] * ($framesize + HEAP32[$video_addr + 1236 >> 2]);
  
  
  HEAP32[$dpb + 4 >> 2] = $mul38;
  
  
  var $53 = HEAP32[$avcHandle_addr + 20 >> 2];
  
  
  
  var $56 = HEAP32[$dpb + 4 >> 2];
  var $call = FUNCTION_TABLE[$53]($userData, $56, 100);
  var $57 = $call;
  
  
  HEAP32[$dpb >> 2] = $57;
  
  
  
  
  if ((HEAP32[$dpb >> 2] | 0) == 0) {
    __label__ = 15;
  } else {
    __label__ = 14;
  }
  $if_then45$$lor_lhs_false$20 : do {
    if (__label__ == 14) {
      
      
      
      
      
      
      if ((HEAP32[$dpb >> 2] & 3 | 0) != 0) {
        __label__ = 15;
        break $if_then45$$lor_lhs_false$20;
      }
      
      
      HEAP32[$dpb + 8 >> 2] = 0;
      $num_fs = 0;
      while (1) {
        
        
        
        
        var $cmp48 = ($num_fs | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
        if (!$cmp48) {
          __label__ = 21;
          break;
        }
        
        
        var $69 = HEAP32[$avcHandle_addr + 20 >> 2];
        
        var $call50 = FUNCTION_TABLE[$69]($userData, 88, 101);
        var $71 = $call50;
        
        
        
        
        HEAP32[$dpb + 12 + $num_fs * 4 >> 2] = $71;
        
        
        
        
        
        
        if ((HEAP32[$dpb + 12 + $num_fs * 4 >> 2] | 0) == 0) {
          __label__ = 19;
          break;
        }
        
        
        
        
        
        
        var $add_ptr = HEAP32[$dpb >> 2] + HEAP32[$dpb + 8 >> 2];
        
        
        
        
        
        var $base_dpb = HEAP32[$dpb + 12 + $num_fs * 4 >> 2];
        HEAP32[$base_dpb >> 2] = $add_ptr;
        
        
        
        
        
        var $IsReference = HEAP32[$dpb + 12 + $num_fs * 4 >> 2] + 4;
        HEAP32[$IsReference >> 2] = 0;
        
        
        
        
        
        var $IsLongTerm = HEAP32[$dpb + 12 + $num_fs * 4 >> 2] + 8;
        HEAP32[$IsLongTerm >> 2] = 0;
        
        
        
        
        
        var $IsOutputted = HEAP32[$dpb + 12 + $num_fs * 4 >> 2] + 12;
        HEAP32[$IsOutputted >> 2] = 3;
        var $93 = $refIdx;
        var $inc68 = $93 + 1;
        $refIdx = $inc68;
        
        
        
        
        
        
        
        HEAP16[HEAP32[$dpb + 12 + $num_fs * 4 >> 2] + 16 >> 1] = $93;
        
        
        
        
        
        
        var $picType = HEAP32[$dpb + 12 + $num_fs * 4 >> 2] + 16 + 16;
        HEAP32[$picType >> 2] = 3;
        
        
        
        
        
        
        var $isLongTerm = HEAP32[$dpb + 12 + $num_fs * 4 >> 2] + 16 + 24;
        HEAP32[$isLongTerm >> 2] = 0;
        
        
        
        
        
        
        var $isReference = HEAP32[$dpb + 12 + $num_fs * 4 >> 2] + 16 + 20;
        HEAP32[$isReference >> 2] = 0;
        
        
        
        
        
        var $frame82 = HEAP32[$dpb + 12 + $num_fs * 4 >> 2] + 16;
        
        
        
        
        HEAP32[$video_addr + 1416 + $num_fs * 4 >> 2] = $frame82;
        
        
        
        
        
        
        var $padded = HEAP32[$dpb + 12 + $num_fs * 4 >> 2] + 16 + 52;
        HEAP32[$padded >> 2] = 0;
        
        
        
        
        
        
        
        
        var $add90 = HEAP32[$dpb + 8 >> 2] + ($framesize + HEAP32[$video_addr + 1236 >> 2]);
        HEAP32[$dpb + 8 >> 2] = $add90;
        
        var $inc91 = $num_fs + 1;
        $num_fs = $inc91;
        __label__ = 17;
        continue;
      }
      if (__label__ == 21) {
        $retval = 1;
        __label__ = 22;
        break $if_then45$$lor_lhs_false$20;
      } else if (__label__ == 19) {
        $retval = -1;
        __label__ = 22;
        break $if_then45$$lor_lhs_false$20;
      }
    }
  } while (0);
  if (__label__ == 15) {
    $retval = -1;
  }
  var $120 = $retval;
  STACKTOP = __stackBase__;
  return $120;
  return null;
}
function __Z20AVCConfigureSequenceP12tagAVCHandleP12tagCommonObjb($avcHandle, $video, $padding) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $avcHandle_addr;
  var $video_addr;
  var $padding_addr;
  var $userData;
  var $dpb;
  var $framesize;
  var $ii;
  var $PicWidthInMbs;
  var $PicHeightInMapUnits;
  var $FrameHeightInMbs;
  var $PicSizeInMapUnits;
  var $num_fs;
  $avcHandle_addr = $avcHandle;
  $video_addr = $video;
  
  $padding_addr = $padding & 1;
  
  
  
  $userData = HEAP32[$avcHandle_addr + 4 >> 2];
  
  
  
  $dpb = HEAP32[$video_addr + 864 >> 2];
  
  
  
  
  
  
  $PicWidthInMbs = HEAP32[HEAP32[$video_addr + 868 >> 2] + 1088 >> 2] + 1;
  
  
  
  
  
  
  $PicHeightInMapUnits = HEAP32[HEAP32[$video_addr + 868 >> 2] + 1092 >> 2] + 1;
  
  
  
  
  
  
  
  
  $FrameHeightInMbs = (2 - HEAP32[HEAP32[$video_addr + 868 >> 2] + 1096 >> 2]) * $PicHeightInMapUnits;
  
  
  
  $PicSizeInMapUnits = $PicWidthInMbs * $PicHeightInMapUnits;
  
  
  
  
  
  if ((HEAP32[$video_addr + 1264 >> 2] | 0) != ($PicSizeInMapUnits | 0)) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $if_then$$lor_lhs_false$2 : do {
    if (__label__ == 1) {
      
      
      
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$video_addr + 868 >> 2] + 24 >> 2] | 0) != (HEAP32[$video_addr + 1312 >> 2] | 0)) {
        __label__ = 2;
        break $if_then$$lor_lhs_false$2;
      } else {
        __label__ = 23;
        break $if_then$$lor_lhs_false$2;
      }
    }
  } while (0);
  $if_then$$if_end66$4 : do {
    if (__label__ == 2) {
      $ii = 0;
      $for_cond$6 : while (1) {
        
        
        
        
        var $cmp11 = ($ii | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
        if (!$cmp11) {
          __label__ = 6;
          break $for_cond$6;
        }
        
        
        
        
        
        var $IsReference = HEAP32[$dpb + 12 + $ii * 4 >> 2] + 4;
        HEAP32[$IsReference >> 2] = 0;
        
        
        
        
        
        var $IsOutputted = HEAP32[$dpb + 12 + $ii * 4 >> 2] + 12;
        
        var $or = HEAP32[$IsOutputted >> 2] | 2;
        HEAP32[$IsOutputted >> 2] = $or;
        
        var $inc = $ii + 1;
        $ii = $inc;
        __label__ = 3;
        continue $for_cond$6;
      }
      
      
      
      
      
      
      
      
      
      
      var $shl = HEAP32[__ZL8MaxDPBX2 + (HEAPU8[__ZL10mapLev2Idx + HEAP32[HEAP32[$video_addr + 868 >> 2] + 24 >> 2] >> 0] & 255) * 4 >> 2] << 2;
      
      
      var $div = Math.floor(($shl >>> 0) / (3 * $PicSizeInMapUnits >>> 0));
      
      $num_fs = $div + 1;
      
      
      if ($num_fs >>> 0 >= 17) {
        __label__ = 7;
      } else {
        __label__ = 8;
      }
      if (__label__ == 7) {
        $num_fs = 17;
      }
      
      
      var $call = __Z10CleanUpDPBP12tagAVCHandleP12tagCommonObj($avcHandle_addr, $video_addr);
      
      
      
      
      
      
      var $call22 = __Z7InitDPBP12tagAVCHandleP12tagCommonObjiib($avcHandle_addr, $video_addr, $FrameHeightInMbs, $PicWidthInMbs, $padding_addr & 1);
      
      if (($call22 | 0) != 1) {
        __label__ = 9;
      } else {
        __label__ = 10;
      }
      if (__label__ == 9) {
        $retval = 0;
        __label__ = 24;
        break $if_then$$if_end66$4;
      } else if (__label__ == 10) {
        
        
        
        $framesize = $FrameHeightInMbs * $PicWidthInMbs;
        
        
        
        
        if ((HEAP32[$video_addr + 908 >> 2] | 0) != 0) {
          __label__ = 11;
        } else {
          __label__ = 12;
        }
        if (__label__ == 11) {
          
          
          var $54 = HEAP32[$avcHandle_addr + 24 >> 2];
          
          
          
          
          var $58 = HEAP32[$video_addr + 908 >> 2];
          FUNCTION_TABLE[$54]($userData, $58);
          
          
          HEAP32[$video_addr + 908 >> 2] = 0;
        }
        
        
        var $61 = HEAP32[$avcHandle_addr + 20 >> 2];
        
        
        
        var $call33 = FUNCTION_TABLE[$61]($userData, 420 * $framesize, 0);
        var $64 = $call33;
        
        
        HEAP32[$video_addr + 908 >> 2] = $64;
        
        
        
        
        if ((HEAP32[$video_addr + 908 >> 2] | 0) == 0) {
          __label__ = 13;
        } else {
          __label__ = 14;
        }
        if (__label__ == 13) {
          $retval = 0;
          __label__ = 24;
          break $if_then$$if_end66$4;
        } else if (__label__ == 14) {
          $ii = 0;
          while (1) {
            
            
            var $cmp40 = ($ii | 0) < ($framesize | 0);
            if (!$cmp40) {
              __label__ = 18;
              break;
            }
            
            
            
            
            
            var $slice_id = HEAP32[$video_addr + 908 >> 2] + 420 * $ii + 416;
            HEAP32[$slice_id >> 2] = -1;
            
            var $inc45 = $ii + 1;
            $ii = $inc45;
            __label__ = 15;
            continue;
          }
          
          
          
          
          if ((HEAP32[$video_addr + 1412 >> 2] | 0) != 0) {
            __label__ = 19;
          } else {
            __label__ = 20;
          }
          if (__label__ == 19) {
            
            
            var $77 = HEAP32[$avcHandle_addr + 24 >> 2];
            
            
            
            
            var $81 = HEAP32[$video_addr + 1412 >> 2];
            FUNCTION_TABLE[$77]($userData, $81);
            
            
            HEAP32[$video_addr + 1412 >> 2] = 0;
          }
          
          
          var $84 = HEAP32[$avcHandle_addr + 20 >> 2];
          
          
          
          
          var $call56 = FUNCTION_TABLE[$84]($userData, 4 * $PicSizeInMapUnits * 2, 7);
          var $87 = $call56;
          
          
          HEAP32[$video_addr + 1412 >> 2] = $87;
          
          
          
          
          if ((HEAP32[$video_addr + 1412 >> 2] | 0) == 0) {
            __label__ = 21;
          } else {
            __label__ = 22;
          }
          if (__label__ == 21) {
            $retval = 0;
            __label__ = 24;
            break $if_then$$if_end66$4;
          } else if (__label__ == 22) {
            
            
            
            HEAP32[$video_addr + 1264 >> 2] = $PicSizeInMapUnits;
            
            
            
            
            var $95 = HEAP32[HEAP32[$video_addr + 868 >> 2] + 24 >> 2];
            
            
            HEAP32[$video_addr + 1312 >> 2] = $95;
            __label__ = 23;
            break $if_then$$if_end66$4;
          }
        }
      }
    }
  } while (0);
  if (__label__ == 23) {
    $retval = 1;
  }
  var $97 = $retval;
  STACKTOP = __stackBase__;
  return $97;
  return null;
}
function __Z10CleanUpDPBP12tagAVCHandleP12tagCommonObj($avcHandle, $video) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $avcHandle_addr;
  var $video_addr;
  var $dpb;
  var $ii;
  var $userData;
  $avcHandle_addr = $avcHandle;
  $video_addr = $video;
  
  
  
  $dpb = HEAP32[$video_addr + 864 >> 2];
  
  
  
  $userData = HEAP32[$avcHandle_addr + 4 >> 2];
  $ii = 0;
  while (1) {
    
    var $cmp = ($ii | 0) < 17;
    if (!$cmp) {
      __label__ = 6;
      break;
    }
    
    
    
    
    
    
    if ((HEAP32[$dpb + 12 + $ii * 4 >> 2] | 0) != 0) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    if (__label__ == 3) {
      
      
      var $9 = HEAP32[$avcHandle_addr + 24 >> 2];
      
      
      
      
      
      
      var $14 = HEAP32[$dpb + 12 + $ii * 4 >> 2];
      FUNCTION_TABLE[$9]($userData, $14);
      
      
      
      
      HEAP32[$dpb + 12 + $ii * 4 >> 2] = 0;
    }
    
    var $inc = $ii + 1;
    $ii = $inc;
    __label__ = 1;
    continue;
  }
  
  
  
  
  if ((HEAP32[$dpb >> 2] | 0) != 0) {
    __label__ = 7;
  } else {
    __label__ = 8;
  }
  if (__label__ == 7) {
    
    
    var $21 = HEAP32[$avcHandle_addr + 24 >> 2];
    
    
    
    
    var $25 = HEAP32[$dpb >> 2];
    FUNCTION_TABLE[$21]($userData, $25);
    
    
    HEAP32[$dpb >> 2] = 0;
  }
  
  
  HEAP32[$dpb + 8 >> 2] = 0;
  
  
  HEAP32[$dpb + 4 >> 2] = 0;
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z13DPBInitBufferP12tagAVCHandleP12tagCommonObj($avcHandle, $video) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $avcHandle_addr;
  var $video_addr;
  var $dpb;
  var $ii;
  
  $avcHandle_addr = $avcHandle;
  $video_addr = $video;
  
  
  
  $dpb = HEAP32[$video_addr + 864 >> 2];
  $ii = 0;
  while (1) {
    
    
    
    
    var $cmp = ($ii | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
    if (!$cmp) {
      __label__ = 7;
      break;
    }
    
    
    
    
    
    
    
    
    if ((HEAP32[HEAP32[$dpb + 12 + $ii * 4 >> 2] + 4 >> 2] | 0) == 0) {
      __label__ = 3;
    } else {
      __label__ = 5;
    }
    if (__label__ == 3) {
      
      
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$dpb + 12 + $ii * 4 >> 2] + 12 >> 2] | 0) == 3) {
        __label__ = 4;
        break;
      }
    }
    
    var $inc = $ii + 1;
    $ii = $inc;
    __label__ = 1;
    continue;
  }
  if (__label__ == 4) {
    
    
    
    
    var $15 = HEAP32[$dpb + 12 + $ii * 4 >> 2];
    
    
    HEAP32[$video_addr + 888 >> 2] = $15;
  }
  
  
  
  
  
  if (($ii | 0) == (HEAP32[$dpb + 80 >> 2] | 0)) {
    __label__ = 8;
  } else {
    __label__ = 9;
  }
  if (__label__ == 8) {
    $retval = 2;
  } else if (__label__ == 9) {
    $retval = 1;
  }
  var $21 = $retval;
  STACKTOP = __stackBase__;
  return $21;
  return null;
}
function __Z10DPBInitPicP12tagCommonObji($video, $CurrPicNum) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $video_addr;
  var $CurrPicNum_addr;
  var $offset;
  var $offsetc;
  var $luma_framesize;
  $video_addr = $video;
  $CurrPicNum_addr = $CurrPicNum;
  $offset = 0;
  $offsetc = 0;
  
  
  var $1 = HEAP32[$video_addr + 1356 >> 2];
  
  
  
  var $PicOrderCnt1 = HEAP32[$video_addr + 888 >> 2] + 84;
  HEAP32[$PicOrderCnt1 >> 2] = $1;
  
  
  
  
  var $6 = HEAP32[HEAP32[$video_addr + 880 >> 2] + 12 >> 2];
  
  
  
  var $FrameNum = HEAP32[$video_addr + 888 >> 2] + 72;
  HEAP32[$FrameNum >> 2] = $6;
  
  
  
  
  var $FrameNumWrap = HEAP32[$video_addr + 888 >> 2] + 76;
  HEAP32[$FrameNumWrap >> 2] = $CurrPicNum_addr;
  
  
  
  var $IsOutputted = HEAP32[$video_addr + 888 >> 2] + 12;
  HEAP32[$IsOutputted >> 2] = 0;
  
  
  
  var $IsReference = HEAP32[$video_addr + 888 >> 2] + 4;
  HEAP32[$IsReference >> 2] = 0;
  
  
  
  var $IsLongTerm = HEAP32[$video_addr + 888 >> 2] + 8;
  HEAP32[$IsLongTerm >> 2] = 0;
  
  
  
  
  var $isReference = HEAP32[$video_addr + 888 >> 2] + 16 + 20;
  HEAP32[$isReference >> 2] = 0;
  
  
  
  
  var $isLongTerm = HEAP32[$video_addr + 888 >> 2] + 16 + 24;
  HEAP32[$isLongTerm >> 2] = 0;
  
  
  
  
  var $Scr = HEAP32[$video_addr + 888 >> 2] + 16 + 12;
  HEAP32[$Scr >> 2] = 0;
  
  
  
  
  var $Scb = HEAP32[$video_addr + 888 >> 2] + 16 + 8;
  HEAP32[$Scb >> 2] = 0;
  
  
  
  
  var $Sl = HEAP32[$video_addr + 888 >> 2] + 16 + 4;
  HEAP32[$Sl >> 2] = 0;
  
  
  
  var $frame17 = HEAP32[$video_addr + 888 >> 2] + 16;
  
  
  HEAP32[$video_addr + 884 >> 2] = $frame17;
  
  
  
  var $padded = HEAP32[$video_addr + 884 >> 2] + 52;
  HEAP32[$padded >> 2] = 0;
  
  
  
  
  if ((HEAP32[$video_addr + 1236 >> 2] | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    
    
    
    
    $offset = (HEAP32[$video_addr + 1252 >> 2] + 32 << 4) + 16;
    
    
    
    $offsetc = ($offset >> 2) + 4;
    
    
    
    
    
    
    
    
    
    
    $luma_framesize = (HEAP32[$video_addr + 1268 >> 2] + 2) * (HEAP32[$video_addr + 1248 >> 2] + 2) << 8;
  } else if (__label__ == 2) {
    
    
    
    
    $luma_framesize = HEAP32[$video_addr + 1308 >> 2] << 8;
  }
  
  
  
  
  
  
  var $add_ptr = HEAP32[HEAP32[$video_addr + 888 >> 2] >> 2] + $offset;
  
  
  
  var $Sl27 = HEAP32[$video_addr + 884 >> 2] + 4;
  HEAP32[$Sl27 >> 2] = $add_ptr;
  
  
  
  
  
  
  
  
  var $add_ptr31 = HEAP32[HEAP32[$video_addr + 888 >> 2] >> 2] + $luma_framesize + $offsetc;
  
  
  
  var $Scb33 = HEAP32[$video_addr + 884 >> 2] + 8;
  HEAP32[$Scb33 >> 2] = $add_ptr31;
  
  
  
  
  
  
  
  var $add_ptr37 = HEAP32[HEAP32[$video_addr + 884 >> 2] + 8 >> 2] + ($luma_framesize >> 2);
  
  
  
  var $Scr39 = HEAP32[$video_addr + 884 >> 2] + 12;
  HEAP32[$Scr39 >> 2] = $add_ptr37;
  
  
  
  
  
  
  
  var $cond = (HEAP32[$video_addr + 1236 >> 2] | 0) == 0 ? 0 : 32;
  var $add42 = HEAP32[$video_addr + 1252 >> 2] + $cond;
  
  
  
  var $pitch = HEAP32[$video_addr + 884 >> 2] + 48;
  HEAP32[$pitch >> 2] = $add42;
  
  
  var $70 = HEAP32[$video_addr + 1300 >> 2];
  
  
  
  var $height = HEAP32[$video_addr + 884 >> 2] + 44;
  HEAP32[$height >> 2] = $70;
  
  
  var $74 = HEAP32[$video_addr + 1252 >> 2];
  
  
  
  var $width = HEAP32[$video_addr + 884 >> 2] + 40;
  HEAP32[$width >> 2] = $74;
  
  
  
  
  var $PicNum = HEAP32[$video_addr + 884 >> 2] + 32;
  HEAP32[$PicNum >> 2] = $CurrPicNum_addr;
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z22DPBReleaseCurrentFrameP12tagAVCHandleP12tagCommonObj($avcHandle, $video) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  
  var $avcHandle_addr;
  var $video_addr;
  var $dpb;
  
  $avcHandle_addr = $avcHandle;
  $video_addr = $video;
  
  
  
  $dpb = HEAP32[$video_addr + 864 >> 2];
  
  
  
  var $IsOutputted = HEAP32[$video_addr + 888 >> 2] + 12;
  HEAP32[$IsOutputted >> 2] = 3;
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z17StorePictureInDPBP12tagAVCHandleP12tagCommonObj($avcHandle, $video) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $avcHandle_addr;
  var $video_addr;
  var $status;
  var $dpb;
  var $sliceHdr;
  var $ii;
  var $num_ref;
  $avcHandle_addr = $avcHandle;
  $video_addr = $video;
  
  
  
  $dpb = HEAP32[$video_addr + 864 >> 2];
  
  
  
  $sliceHdr = HEAP32[$video_addr + 880 >> 2];
  
  
  
  
  if ((HEAP32[$video_addr + 848 >> 2] | 0) == 5) {
    __label__ = 1;
  } else {
    __label__ = 19;
  }
  $if_then$$if_else43$2 : do {
    if (__label__ == 1) {
      $ii = 0;
      $for_cond$4 : while (1) {
        
        
        
        
        var $cmp2 = ($ii | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
        if (!$cmp2) {
          __label__ = 7;
          break $for_cond$4;
        }
        
        
        
        
        
        
        
        
        
        if ((HEAP32[$dpb + 12 + $ii * 4 >> 2] | 0) != (HEAP32[$video_addr + 888 >> 2] | 0)) {
          __label__ = 4;
        } else {
          __label__ = 5;
        }
        if (__label__ == 4) {
          
          
          
          
          
          var $IsReference = HEAP32[$dpb + 12 + $ii * 4 >> 2] + 4;
          HEAP32[$IsReference >> 2] = 0;
          
          
          
          
          
          var $IsLongTerm = HEAP32[$dpb + 12 + $ii * 4 >> 2] + 8;
          HEAP32[$IsLongTerm >> 2] = 0;
          
          
          
          
          
          var $IsOutputted = HEAP32[$dpb + 12 + $ii * 4 >> 2] + 12;
          
          var $or = HEAP32[$IsOutputted >> 2] | 2;
          HEAP32[$IsOutputted >> 2] = $or;
        }
        
        var $inc = $ii + 1;
        $ii = $inc;
        __label__ = 2;
        continue $for_cond$4;
      }
      
      
      
      var $isReference = HEAP32[$video_addr + 884 >> 2] + 20;
      HEAP32[$isReference >> 2] = 1;
      
      
      
      var $IsReference12 = HEAP32[$video_addr + 888 >> 2] + 4;
      HEAP32[$IsReference12 >> 2] = 3;
      
      
      
      
      if ((HEAP32[$sliceHdr + 844 >> 2] | 0) == 0) {
        __label__ = 8;
      } else {
        __label__ = 9;
      }
      if (__label__ == 8) {
        
        
        
        var $isLongTerm = HEAP32[$video_addr + 884 >> 2] + 24;
        HEAP32[$isLongTerm >> 2] = 0;
        
        
        
        var $IsLongTerm17 = HEAP32[$video_addr + 888 >> 2] + 8;
        HEAP32[$IsLongTerm17 >> 2] = 0;
        
        
        HEAP32[$video_addr + 1344 >> 2] = -1;
      } else if (__label__ == 9) {
        
        
        
        var $isLongTerm19 = HEAP32[$video_addr + 884 >> 2] + 24;
        HEAP32[$isLongTerm19 >> 2] = 1;
        
        
        
        var $IsLongTerm21 = HEAP32[$video_addr + 888 >> 2] + 8;
        HEAP32[$IsLongTerm21 >> 2] = 3;
        
        
        
        var $LongTermFrameIdx = HEAP32[$video_addr + 888 >> 2] + 80;
        HEAP32[$LongTermFrameIdx >> 2] = 0;
        
        
        HEAP32[$video_addr + 1344 >> 2] = 0;
      }
      
      
      
      
      if ((HEAP32[$sliceHdr + 840 >> 2] | 0) != 0) {
        __label__ = 11;
      } else {
        __label__ = 18;
      }
      if (__label__ == 11) {
        $ii = 0;
        while (1) {
          
          
          
          
          var $cmp28 = ($ii | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
          if (!$cmp28) {
            __label__ = 17;
            break;
          }
          
          
          
          
          
          
          
          
          
          if ((HEAP32[$dpb + 12 + $ii * 4 >> 2] | 0) != (HEAP32[$video_addr + 888 >> 2] | 0)) {
            __label__ = 14;
          } else {
            __label__ = 15;
          }
          if (__label__ == 14) {
            
            
            
            
            
            var $IsOutputted37 = HEAP32[$dpb + 12 + $ii * 4 >> 2] + 12;
            HEAP32[$IsOutputted37 >> 2] = 3;
          }
          
          var $inc40 = $ii + 1;
          $ii = $inc40;
          __label__ = 12;
          continue;
        }
      }
      
      
      HEAP32[$video_addr + 1352 >> 2] = 1;
      __label__ = 27;
      break $if_then$$if_else43$2;
    } else if (__label__ == 19) {
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$video_addr + 884 >> 2] + 20 >> 2] | 0) == 1) {
        __label__ = 20;
      } else {
        __label__ = 26;
      }
      if (__label__ == 20) {
        
        
        
        
        if ((HEAP32[$sliceHdr + 848 >> 2] | 0) == 0) {
          __label__ = 21;
        } else {
          __label__ = 22;
        }
        if (__label__ == 21) {
          
          
          
          var $call = __Z22sliding_window_processP12tagAVCHandleP12tagCommonObjP15tagDecPicBuffer($avcHandle_addr, $video_addr, $dpb);
          $status = $call;
        } else if (__label__ == 22) {
          
          
          
          
          var $call51 = __Z23adaptive_memory_markingP12tagAVCHandleP12tagCommonObjP15tagDecPicBufferP14tagSliceHeader($avcHandle_addr, $video_addr, $dpb, $sliceHdr);
          $status = $call51;
        }
        
        
        if (($status | 0) != 1) {
          __label__ = 24;
        } else {
          __label__ = 25;
        }
        if (__label__ == 24) {
          
          $retval = $status;
          __label__ = 42;
          break $if_then$$if_else43$2;
        } else if (__label__ == 25) {

        }
      }
      __label__ = 27;
      break $if_then$$if_else43$2;
    }
  } while (0);
  if (__label__ == 27) {
    
    
    
    
    if ((HEAP32[$video_addr + 848 >> 2] | 0) != 5) {
      __label__ = 28;
    } else {
      __label__ = 33;
    }
    $land_lhs_true$$if_end76$40 : do {
      if (__label__ == 28) {
        
        
        
        
        
        var $cmp62 = (HEAP32[HEAP32[$video_addr + 884 >> 2] + 24 >> 2] | 0) == 0;
        if (!$cmp62) {
          __label__ = 33;
          break $land_lhs_true$$if_end76$40;
        }
        
        
        
        
        
        
        if ((HEAP32[HEAP32[$video_addr + 884 >> 2] + 20 >> 2] | 0) != 0) {
          __label__ = 30;
        } else {
          __label__ = 31;
        }
        if (__label__ == 30) {
          
          
          
          var $IsReference69 = HEAP32[$video_addr + 888 >> 2] + 4;
          HEAP32[$IsReference69 >> 2] = 3;
        } else if (__label__ == 31) {
          
          
          
          var $IsReference72 = HEAP32[$video_addr + 888 >> 2] + 4;
          HEAP32[$IsReference72 >> 2] = 0;
        }
        
        
        
        var $IsLongTerm75 = HEAP32[$video_addr + 888 >> 2] + 8;
        HEAP32[$IsLongTerm75 >> 2] = 0;
      }
    } while (0);
    $num_ref = 0;
    $ii = 0;
    while (1) {
      
      
      
      
      var $cmp79 = ($ii | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
      if (!$cmp79) {
        __label__ = 39;
        break;
      }
      
      
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$dpb + 12 + $ii * 4 >> 2] + 4 >> 2] | 0) != 0) {
        __label__ = 36;
      } else {
        __label__ = 37;
      }
      if (__label__ == 36) {
        
        var $inc86 = $num_ref + 1;
        $num_ref = $inc86;
      }
      
      var $inc89 = $ii + 1;
      $ii = $inc89;
      __label__ = 34;
      continue;
    }
    
    
    
    
    
    
    
    if (($num_ref | 0) > (HEAP32[HEAP32[$video_addr + 868 >> 2] + 1080 >> 2] | 0)) {
      __label__ = 40;
    } else {
      __label__ = 41;
    }
    if (__label__ == 40) {
      $retval = 0;
    } else if (__label__ == 41) {
      $retval = 1;
    }
  }
  var $99 = $retval;
  STACKTOP = __stackBase__;
  return $99;
  return null;
}
function __Z22sliding_window_processP12tagAVCHandleP12tagCommonObjP15tagDecPicBuffer($avcHandle, $video, $dpb) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $avcHandle_addr;
  var $video_addr;
  var $dpb_addr;
  var $ii;
  var $numShortTerm;
  var $numLongTerm;
  var $MinFrameNumWrap;
  var $MinIdx;
  $avcHandle_addr = $avcHandle;
  $video_addr = $video;
  $dpb_addr = $dpb;
  $numShortTerm = 0;
  $numLongTerm = 0;
  $ii = 0;
  $for_cond$2 : while (1) {
    
    
    
    
    var $cmp = ($ii | 0) < (HEAP32[$dpb_addr + 80 >> 2] | 0);
    if (!$cmp) {
      __label__ = 11;
      break $for_cond$2;
    }
    
    
    
    
    
    
    
    
    
    if ((HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] | 0) != (HEAP32[$video_addr + 888 >> 2] | 0)) {
      __label__ = 3;
    } else {
      __label__ = 9;
    }
    if (__label__ == 3) {
      
      
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 8 >> 2] | 0) != 0) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      if (__label__ == 4) {
        
        var $inc = $numLongTerm + 1;
        $numLongTerm = $inc;
      } else if (__label__ == 5) {
        
        
        
        
        
        
        
        
        if ((HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 4 >> 2] | 0) != 0) {
          __label__ = 6;
        } else {
          __label__ = 7;
        }
        if (__label__ == 6) {
          
          var $inc9 = $numShortTerm + 1;
          $numShortTerm = $inc9;
        }
      }
    }
    
    var $inc12 = $ii + 1;
    $ii = $inc12;
    __label__ = 1;
    continue $for_cond$2;
  }
  $while_cond$17 : while (1) {
    
    
    
    
    
    
    
    
    var $cmp13 = ($numShortTerm + $numLongTerm | 0) >= (HEAP32[HEAP32[$video_addr + 868 >> 2] + 1080 >> 2] | 0);
    if (!$cmp13) {
      __label__ = 25;
      break $while_cond$17;
    }
    $MinFrameNumWrap = 2147483647;
    $MinIdx = -1;
    $ii = 0;
    $for_cond14$20 : while (1) {
      
      
      
      
      var $cmp16 = ($ii | 0) < (HEAP32[$dpb_addr + 80 >> 2] | 0);
      if (!$cmp16) {
        __label__ = 22;
        break $for_cond14$20;
      }
      
      
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 4 >> 2] | 0) != 0) {
        __label__ = 16;
      } else {
        __label__ = 20;
      }
      $land_lhs_true$$if_end35$23 : do {
        if (__label__ == 16) {
          
          
          
          
          
          
          
          
          if ((HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 8 >> 2] | 0) != 0) {
            __label__ = 20;
            break $land_lhs_true$$if_end35$23;
          }
          
          
          
          
          
          
          
          
          
          if ((HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 76 >> 2] | 0) < ($MinFrameNumWrap | 0)) {
            __label__ = 18;
          } else {
            __label__ = 19;
          }
          if (__label__ == 18) {
            
            
            
            
            
            
            
            $MinFrameNumWrap = HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 76 >> 2];
            
            $MinIdx = $ii;
          }
        }
      } while (0);
      
      var $inc37 = $ii + 1;
      $ii = $inc37;
      __label__ = 14;
      continue $for_cond14$20;
    }
    
    
    if (($MinIdx | 0) < 0) {
      __label__ = 23;
      break $while_cond$17;
    }
    
    
    
    
    
    var $IsReference44 = HEAP32[$dpb_addr + 12 + $MinIdx * 4 >> 2] + 4;
    HEAP32[$IsReference44 >> 2] = 0;
    
    
    
    
    
    var $IsLongTerm47 = HEAP32[$dpb_addr + 12 + $MinIdx * 4 >> 2] + 8;
    HEAP32[$IsLongTerm47 >> 2] = 0;
    
    
    
    
    
    
    var $isReference = HEAP32[$dpb_addr + 12 + $MinIdx * 4 >> 2] + 16 + 20;
    HEAP32[$isReference >> 2] = 0;
    
    
    
    
    
    
    var $isLongTerm = HEAP32[$dpb_addr + 12 + $MinIdx * 4 >> 2] + 16 + 24;
    HEAP32[$isLongTerm >> 2] = 0;
    
    
    
    
    
    var $IsOutputted = HEAP32[$dpb_addr + 12 + $MinIdx * 4 >> 2] + 12;
    
    var $or = HEAP32[$IsOutputted >> 2] | 2;
    HEAP32[$IsOutputted >> 2] = $or;
    
    var $dec = $numShortTerm + -1;
    $numShortTerm = $dec;
    __label__ = 12;
    continue $while_cond$17;
  }
  if (__label__ == 25) {
    $retval = 1;
  } else if (__label__ == 23) {
    $retval = 0;
  }
  var $64 = $retval;
  STACKTOP = __stackBase__;
  return $64;
  return null;
}
function __Z23adaptive_memory_markingP12tagAVCHandleP12tagCommonObjP15tagDecPicBufferP14tagSliceHeader($avcHandle, $video, $dpb, $sliceHdr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $retval;
  var $avcHandle_addr;
  var $video_addr;
  var $dpb_addr;
  var $sliceHdr_addr;
  var $ii;
  $avcHandle_addr = $avcHandle;
  $video_addr = $video;
  $dpb_addr = $dpb;
  $sliceHdr_addr = $sliceHdr;
  $ii = 0;
  while (1) {
    
    
    if (($ii | 0) < 64) {
      __lastLabel__ = 1;
      __label__ = 2;
    } else {
      __lastLabel__ = 1;
      __label__ = 3;
    }
    if (__label__ == 2) {
      
      
      
      
      
      var $cmp1 = (HEAP32[$sliceHdr_addr + 852 + $ii * 4 >> 2] | 0) != 0;
      __lastLabel__ = 2;
    }
    var $4 = __lastLabel__ == 1 ? 0 : $cmp1;
    if (!$4) {
      __label__ = 12;
      break;
    }
    
    
    
    
    var $7 = HEAP32[$sliceHdr_addr + 852 + $ii * 4 >> 2];
    if ($7 == 1) {
      __label__ = 5;
    } else if ($7 == 2) {
      __label__ = 6;
    } else if ($7 == 3) {
      __label__ = 7;
    } else if ($7 == 4) {
      __label__ = 8;
    } else if ($7 == 5) {
      __label__ = 9;
    } else if ($7 == 6) {
      __label__ = 10;
    } else {
      __label__ = 11;
    }
    if (__label__ == 5) {
      
      
      
      
      
      
      
      var $13 = HEAP32[$sliceHdr_addr + 1108 + $ii * 4 >> 2];
      __Z13MemMgrCtrlOp1P12tagAVCHandleP12tagCommonObjP15tagDecPicBufferi($avcHandle_addr, $video_addr, $dpb_addr, $13);
    } else if (__label__ == 6) {
      
      
      
      
      
      
      var $18 = HEAP32[$sliceHdr_addr + 1364 + $ii * 4 >> 2];
      __Z13MemMgrCtrlOp2P12tagAVCHandleP15tagDecPicBufferi($avcHandle_addr, $dpb_addr, $18);
    } else if (__label__ == 7) {
      
      
      
      
      
      
      
      var $24 = HEAP32[$sliceHdr_addr + 1108 + $ii * 4 >> 2];
      
      
      
      
      var $27 = HEAP32[$sliceHdr_addr + 1620 + $ii * 4 >> 2];
      __Z13MemMgrCtrlOp3P12tagAVCHandleP12tagCommonObjP15tagDecPicBufferjj($avcHandle_addr, $video_addr, $dpb_addr, $24, $27);
    } else if (__label__ == 8) {
      
      
      
      
      
      
      
      var $33 = HEAP32[$sliceHdr_addr + 1876 + $ii * 4 >> 2];
      __Z13MemMgrCtrlOp4P12tagAVCHandleP12tagCommonObjP15tagDecPicBufferj($avcHandle_addr, $video_addr, $dpb_addr, $33);
    } else if (__label__ == 9) {
      
      
      
      __Z13MemMgrCtrlOp5P12tagAVCHandleP12tagCommonObjP15tagDecPicBuffer($avcHandle_addr, $video_addr, $dpb_addr);
      
      
      
      var $FrameNum = HEAP32[$video_addr + 888 >> 2] + 72;
      HEAP32[$FrameNum >> 2] = 0;
      
      
      
      var $PicOrderCnt = HEAP32[$video_addr + 888 >> 2] + 84;
      HEAP32[$PicOrderCnt >> 2] = 0;
    } else if (__label__ == 10) {
      
      
      
      
      
      
      
      var $46 = HEAP32[$sliceHdr_addr + 1620 + $ii * 4 >> 2];
      __Z13MemMgrCtrlOp6P12tagAVCHandleP12tagCommonObjP15tagDecPicBufferj($avcHandle_addr, $video_addr, $dpb_addr, $46);
    }
    
    var $inc = $ii + 1;
    $ii = $inc;
    __label__ = 1;
    continue;
  }
  
  
  if (($ii | 0) == 64) {
    __label__ = 13;
  } else {
    __label__ = 14;
  }
  if (__label__ == 13) {
    $retval = 0;
  } else if (__label__ == 14) {
    $retval = 1;
  }
  var $49 = $retval;
  STACKTOP = __stackBase__;
  return $49;
  return null;
}
function __Z13MemMgrCtrlOp1P12tagAVCHandleP12tagCommonObjP15tagDecPicBufferi($avcHandle, $video, $dpb, $difference_of_pic_nums_minus1) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $avcHandle_addr;
  var $video_addr;
  var $dpb_addr;
  var $difference_of_pic_nums_minus1_addr;
  var $picNumX;
  var $ii;
  $avcHandle_addr = $avcHandle;
  $video_addr = $video;
  $dpb_addr = $dpb;
  $difference_of_pic_nums_minus1_addr = $difference_of_pic_nums_minus1;
  
  
  
  
  
  
  $picNumX = HEAP32[$video_addr + 1324 >> 2] - ($difference_of_pic_nums_minus1_addr + 1);
  $ii = 0;
  $for_cond$2 : while (1) {
    
    
    
    
    var $cmp = ($ii | 0) < (HEAP32[$dpb_addr + 80 >> 2] | 0);
    if (!$cmp) {
      __label__ = 9;
      break $for_cond$2;
    }
    
    
    
    
    
    
    
    
    if ((HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 4 >> 2] | 0) == 3) {
      __label__ = 3;
    } else {
      __label__ = 7;
    }
    $land_lhs_true$$if_end9$5 : do {
      if (__label__ == 3) {
        
        
        
        
        
        
        
        var $cmp4 = (HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 8 >> 2] | 0) == 0;
        if (!$cmp4) {
          __label__ = 7;
          break $land_lhs_true$$if_end9$5;
        }
        
        
        
        
        
        
        
        
        
        
        if ((HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 16 + 32 >> 2] | 0) == ($picNumX | 0)) {
          __label__ = 5;
          break $for_cond$2;
        }
      }
    } while (0);
    
    var $inc = $ii + 1;
    $ii = $inc;
    __label__ = 1;
    continue $for_cond$2;
  }
  if (__label__ == 9) {

  } else if (__label__ == 5) {
    
    
    
    __Z20unmark_for_referenceP12tagAVCHandleP15tagDecPicBufferj($avcHandle_addr, $dpb_addr, $ii);
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z13MemMgrCtrlOp2P12tagAVCHandleP15tagDecPicBufferi($avcHandle, $dpb, $long_term_pic_num) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $avcHandle_addr;
  var $dpb_addr;
  var $long_term_pic_num_addr;
  var $ii;
  $avcHandle_addr = $avcHandle;
  $dpb_addr = $dpb;
  $long_term_pic_num_addr = $long_term_pic_num;
  $ii = 0;
  while (1) {
    
    
    
    
    var $cmp = ($ii | 0) < (HEAP32[$dpb_addr + 80 >> 2] | 0);
    if (!$cmp) {
      __label__ = 8;
      break;
    }
    
    
    
    
    
    
    
    
    if ((HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 8 >> 2] | 0) == 3) {
      __label__ = 3;
    } else {
      __label__ = 6;
    }
    if (__label__ == 3) {
      
      
      
      
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 16 + 36 >> 2] | 0) == ($long_term_pic_num_addr | 0)) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      if (__label__ == 4) {
        
        
        
        __Z20unmark_for_referenceP12tagAVCHandleP15tagDecPicBufferj($avcHandle_addr, $dpb_addr, $ii);
      }
    }
    
    var $inc = $ii + 1;
    $ii = $inc;
    __label__ = 1;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z13MemMgrCtrlOp3P12tagAVCHandleP12tagCommonObjP15tagDecPicBufferjj($avcHandle, $video, $dpb, $difference_of_pic_nums_minus1, $long_term_frame_idx) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $avcHandle_addr;
  var $video_addr;
  var $dpb_addr;
  var $difference_of_pic_nums_minus1_addr;
  var $long_term_frame_idx_addr;
  var $picNumX;
  var $ii;
  $avcHandle_addr = $avcHandle;
  $video_addr = $video;
  $dpb_addr = $dpb;
  $difference_of_pic_nums_minus1_addr = $difference_of_pic_nums_minus1;
  $long_term_frame_idx_addr = $long_term_frame_idx;
  
  
  
  
  
  
  $picNumX = HEAP32[$video_addr + 1324 >> 2] - ($difference_of_pic_nums_minus1_addr + 1);
  
  
  
  __Z49unmark_long_term_frame_for_reference_by_frame_idxP12tagAVCHandleP15tagDecPicBufferj($avcHandle_addr, $dpb_addr, $long_term_frame_idx_addr);
  $ii = 0;
  while (1) {
    
    
    
    
    var $cmp = ($ii | 0) < (HEAP32[$dpb_addr + 80 >> 2] | 0);
    if (!$cmp) {
      __label__ = 9;
      break;
    }
    
    
    
    
    
    
    
    
    if ((HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 4 >> 2] | 0) == 3) {
      __label__ = 3;
    } else {
      __label__ = 7;
    }
    if (__label__ == 3) {
      
      
      
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 16 + 24 >> 2] | 0) == 0) {
        __label__ = 4;
      } else {
        __label__ = 6;
      }
      if (__label__ == 4) {
        
        
        
        
        
        
        
        
        
        
        if ((HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 16 + 32 >> 2] | 0) == ($picNumX | 0)) {
          __label__ = 5;
          break;
        }
      }
    }
    
    var $inc = $ii + 1;
    $ii = $inc;
    __label__ = 1;
    continue;
  }
  if (__label__ == 5) {
    
    
    
    
    
    
    var $LongTermFrameIdx = HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 80;
    HEAP32[$LongTermFrameIdx >> 2] = $long_term_frame_idx_addr;
    
    
    
    
    
    
    
    var $LongTermPicNum = HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 16 + 36;
    HEAP32[$LongTermPicNum >> 2] = $long_term_frame_idx_addr;
    
    
    
    
    
    
    var $isLongTerm18 = HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 16 + 24;
    HEAP32[$isLongTerm18 >> 2] = 1;
    
    
    
    
    
    var $IsLongTerm = HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 8;
    HEAP32[$IsLongTerm >> 2] = 3;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z13MemMgrCtrlOp4P12tagAVCHandleP12tagCommonObjP15tagDecPicBufferj($avcHandle, $video, $dpb, $max_long_term_frame_idx_plus1) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $avcHandle_addr;
  var $video_addr;
  var $dpb_addr;
  var $max_long_term_frame_idx_plus1_addr;
  var $ii;
  $avcHandle_addr = $avcHandle;
  $video_addr = $video;
  $dpb_addr = $dpb;
  $max_long_term_frame_idx_plus1_addr = $max_long_term_frame_idx_plus1;
  
  
  
  
  HEAP32[$video_addr + 1344 >> 2] = $max_long_term_frame_idx_plus1_addr - 1;
  $ii = 0;
  $for_cond$2 : while (1) {
    
    
    
    
    var $cmp = ($ii | 0) < (HEAP32[$dpb_addr + 80 >> 2] | 0);
    if (!$cmp) {
      __label__ = 9;
      break $for_cond$2;
    }
    
    
    
    
    
    
    
    
    if ((HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 8 >> 2] | 0) != 0) {
      __label__ = 3;
    } else {
      __label__ = 7;
    }
    $land_lhs_true$$if_end9$5 : do {
      if (__label__ == 3) {
        
        
        
        
        
        
        
        
        var $cmp3 = (HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] | 0) != (HEAP32[$video_addr + 888 >> 2] | 0);
        if (!$cmp3) {
          __label__ = 7;
          break $land_lhs_true$$if_end9$5;
        }
        
        
        
        
        
        
        
        
        
        
        
        if ((HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 80 >> 2] | 0) > (HEAP32[$video_addr + 1344 >> 2] | 0)) {
          __label__ = 5;
        } else {
          __label__ = 6;
        }
        if (__label__ == 5) {
          
          
          
          __Z20unmark_for_referenceP12tagAVCHandleP15tagDecPicBufferj($avcHandle_addr, $dpb_addr, $ii);
        }
      }
    } while (0);
    
    var $inc = $ii + 1;
    $ii = $inc;
    __label__ = 1;
    continue $for_cond$2;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z13MemMgrCtrlOp5P12tagAVCHandleP12tagCommonObjP15tagDecPicBuffer($avcHandle, $video, $dpb) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $avcHandle_addr;
  var $video_addr;
  var $dpb_addr;
  var $ii;
  $avcHandle_addr = $avcHandle;
  $video_addr = $video;
  $dpb_addr = $dpb;
  
  
  HEAP32[$video_addr + 1344 >> 2] = -1;
  $ii = 0;
  while (1) {
    
    
    
    
    var $cmp = ($ii | 0) < (HEAP32[$dpb_addr + 80 >> 2] | 0);
    if (!$cmp) {
      __label__ = 6;
      break;
    }
    
    
    
    
    
    
    
    
    
    if ((HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] | 0) != (HEAP32[$video_addr + 888 >> 2] | 0)) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    if (__label__ == 3) {
      
      
      
      __Z20unmark_for_referenceP12tagAVCHandleP15tagDecPicBufferj($avcHandle_addr, $dpb_addr, $ii);
    }
    
    var $inc = $ii + 1;
    $ii = $inc;
    __label__ = 1;
    continue;
  }
  
  
  HEAP32[$video_addr + 1352 >> 2] = 1;
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z13MemMgrCtrlOp6P12tagAVCHandleP12tagCommonObjP15tagDecPicBufferj($avcHandle, $video, $dpb, $long_term_frame_idx) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  
  var $avcHandle_addr;
  var $video_addr;
  var $dpb_addr;
  var $long_term_frame_idx_addr;
  $avcHandle_addr = $avcHandle;
  $video_addr = $video;
  $dpb_addr = $dpb;
  $long_term_frame_idx_addr = $long_term_frame_idx;
  
  
  
  __Z49unmark_long_term_frame_for_reference_by_frame_idxP12tagAVCHandleP15tagDecPicBufferj($avcHandle_addr, $dpb_addr, $long_term_frame_idx_addr);
  
  
  
  var $IsLongTerm = HEAP32[$video_addr + 888 >> 2] + 8;
  HEAP32[$IsLongTerm >> 2] = 3;
  
  
  
  var $IsReference = HEAP32[$video_addr + 888 >> 2] + 4;
  HEAP32[$IsReference >> 2] = 3;
  
  
  
  var $isLongTerm = HEAP32[$video_addr + 884 >> 2] + 24;
  HEAP32[$isLongTerm >> 2] = 1;
  
  
  
  var $isReference = HEAP32[$video_addr + 884 >> 2] + 20;
  HEAP32[$isReference >> 2] = 1;
  
  
  
  
  var $LongTermFrameIdx = HEAP32[$video_addr + 888 >> 2] + 80;
  HEAP32[$LongTermFrameIdx >> 2] = $long_term_frame_idx_addr;
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z20unmark_for_referenceP12tagAVCHandleP15tagDecPicBufferj($avcHandle, $dpb, $idx) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  
  var $avcHandle_addr;
  var $dpb_addr;
  var $idx_addr;
  var $fs;
  $avcHandle_addr = $avcHandle;
  $dpb_addr = $dpb;
  $idx_addr = $idx;
  
  
  
  
  
  $fs = HEAP32[$dpb_addr + 12 + $idx_addr * 4 >> 2];
  
  
  
  HEAP32[$fs + 16 + 20 >> 2] = 0;
  
  
  
  HEAP32[$fs + 16 + 24 >> 2] = 0;
  
  
  HEAP32[$fs + 8 >> 2] = 0;
  
  
  HEAP32[$fs + 4 >> 2] = 0;
  
  
  
  var $or = HEAP32[$fs + 12 >> 2] | 2;
  HEAP32[$fs + 12 >> 2] = $or;
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z49unmark_long_term_frame_for_reference_by_frame_idxP12tagAVCHandleP15tagDecPicBufferj($avcHandle, $dpb, $long_term_frame_idx) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $avcHandle_addr;
  var $dpb_addr;
  var $long_term_frame_idx_addr;
  var $ii;
  $avcHandle_addr = $avcHandle;
  $dpb_addr = $dpb;
  $long_term_frame_idx_addr = $long_term_frame_idx;
  $ii = 0;
  $for_cond$2 : while (1) {
    
    
    
    
    var $cmp = ($ii | 0) < (HEAP32[$dpb_addr + 80 >> 2] | 0);
    if (!$cmp) {
      __label__ = 7;
      break $for_cond$2;
    }
    
    
    
    
    
    
    
    
    if ((HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 8 >> 2] | 0) != 0) {
      __label__ = 3;
    } else {
      __label__ = 5;
    }
    $land_lhs_true$$if_end$5 : do {
      if (__label__ == 3) {
        
        
        
        
        
        
        
        
        var $cmp3 = (HEAP32[HEAP32[$dpb_addr + 12 + $ii * 4 >> 2] + 80 >> 2] | 0) == ($long_term_frame_idx_addr | 0);
        if (!$cmp3) {
          __label__ = 5;
          break $land_lhs_true$$if_end$5;
        }
        
        
        
        __Z20unmark_for_referenceP12tagAVCHandleP15tagDecPicBufferj($avcHandle_addr, $dpb_addr, $ii);
      }
    } while (0);
    
    var $inc = $ii + 1;
    $ii = $inc;
    __label__ = 1;
    continue $for_cond$2;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function _BitstreamInit($stream, $buffer, $size) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  
  var $stream_addr;
  var $buffer_addr;
  var $size_addr = __stackBase__;
  $stream_addr = $stream;
  $buffer_addr = $buffer;
  HEAP32[$size_addr >> 2] = $size;
  
  var $call = __Z10EBSPtoRBSPPhPi($buffer_addr, $size_addr);
  
  
  HEAP32[$stream_addr + 28 >> 2] = 0;
  
  
  HEAP32[$stream_addr + 32 >> 2] = 0;
  
  
  HEAP32[$stream_addr + 36 >> 2] = 0;
  
  
  HEAP32[$stream_addr + 24 >> 2] = 0;
  
  
  HEAP32[$stream_addr + 16 >> 2] = 0;
  
  
  HEAP32[$stream_addr + 12 >> 2] = 0;
  
  
  
  HEAP32[$stream_addr >> 2] = $buffer_addr;
  var $9 = HEAP32[$size_addr >> 2];
  
  
  HEAP32[$stream_addr + 8 >> 2] = $9;
  var $11 = HEAP32[$size_addr >> 2];
  
  
  HEAP32[$stream_addr + 4 >> 2] = $11;
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function _AVC_BitstreamFillCache($stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $stream_addr;
  var $bitstreamBuffer;
  var $v;
  var $num_bits;
  var $i;
  $stream_addr = $stream;
  
  
  
  $bitstreamBuffer = HEAP32[$stream_addr >> 2];
  
  
  
  
  
  
  
  
  
  
  var $or = HEAP32[$stream_addr + 16 >> 2] | HEAPU32[$stream_addr + 24 >> 2] >>> (HEAPU32[$stream_addr + 28 >> 2] >>> 0);
  HEAP32[$stream_addr + 16 >> 2] = $or;
  
  
  
  
  
  
  
  var $shl = HEAP32[$stream_addr + 24 >> 2] << 31 - HEAP32[$stream_addr + 28 >> 2];
  HEAP32[$stream_addr + 24 >> 2] = $shl;
  
  
  
  var $shl5 = HEAP32[$stream_addr + 24 >> 2] << 1;
  HEAP32[$stream_addr + 24 >> 2] = $shl5;
  
  
  
  
  
  
  
  $num_bits = HEAP32[$stream_addr + 32 >> 2] + HEAP32[$stream_addr + 28 >> 2];
  
  
  if (($num_bits | 0) >= 32) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    
    
    
    
    
    var $sub10 = HEAP32[$stream_addr + 32 >> 2] - (32 - HEAP32[$stream_addr + 28 >> 2]);
    HEAP32[$stream_addr + 32 >> 2] = $sub10;
    
    
    HEAP32[$stream_addr + 28 >> 2] = 32;
    $retval = 1;
  } else if (__label__ == 2) {
    
    
    
    
    
    $v = $bitstreamBuffer + HEAP32[$stream_addr + 12 >> 2];
    
    
    
    
    
    
    
    
    if ((HEAP32[$stream_addr + 12 >> 2] | 0) > (HEAP32[$stream_addr + 8 >> 2] - 4 | 0)) {
      __label__ = 3;
    } else {
      __label__ = 13;
    }
    if (__label__ == 3) {
      
      
      
      
      
      
      
      if ((HEAP32[$stream_addr + 8 >> 2] | 0) <= (HEAP32[$stream_addr + 12 >> 2] | 0)) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      if (__label__ == 4) {
        
        
        
        HEAP32[$stream_addr + 28 >> 2] = $num_bits;
        
        
        HEAP32[$stream_addr + 32 >> 2] = 0;
        $retval = 1;
      } else if (__label__ == 5) {
        
        
        HEAP32[$stream_addr + 24 >> 2] = 0;
        $i = 0;
        while (1) {
          
          
          
          
          
          
          
          
          var $cmp27 = ($i | 0) < (HEAP32[$stream_addr + 8 >> 2] - HEAP32[$stream_addr + 12 >> 2] | 0);
          if (!$cmp27) {
            __label__ = 9;
            break;
          }
          
          
          
          
          
          
          
          
          
          
          
          
          var $or32 = HEAP32[$stream_addr + 24 >> 2] | (HEAPU8[$v + $i >> 0] & 255) << (3 - $i << 3);
          HEAP32[$stream_addr + 24 >> 2] = $or32;
          
          var $inc = $i + 1;
          $i = $inc;
          __label__ = 6;
          continue;
        }
        
        
        var $52 = HEAP32[$stream_addr + 8 >> 2];
        
        
        HEAP32[$stream_addr + 12 >> 2] = $52;
        
        
        
        
        
        
        
        
        var $or38 = HEAP32[$stream_addr + 16 >> 2] | HEAPU32[$stream_addr + 24 >> 2] >>> ($num_bits >>> 0);
        HEAP32[$stream_addr + 16 >> 2] = $or38;
        
        
        
        
        
        var $shl41 = HEAP32[$stream_addr + 24 >> 2] << 31 - $num_bits;
        HEAP32[$stream_addr + 24 >> 2] = $shl41;
        
        
        
        var $shl43 = HEAP32[$stream_addr + 24 >> 2] << 1;
        HEAP32[$stream_addr + 24 >> 2] = $shl43;
        
        
        $num_bits = $i << 3;
        
        
        
        
        
        
        var $add47 = HEAP32[$stream_addr + 28 >> 2] + HEAP32[$stream_addr + 32 >> 2];
        HEAP32[$stream_addr + 28 >> 2] = $add47;
        
        
        
        
        
        var $sub50 = $num_bits - (32 - HEAP32[$stream_addr + 28 >> 2]);
        
        
        HEAP32[$stream_addr + 32 >> 2] = $sub50;
        
        
        
        
        if ((HEAP32[$stream_addr + 32 >> 2] | 0) < 0) {
          __label__ = 10;
        } else {
          __label__ = 11;
        }
        if (__label__ == 10) {
          
          
          
          
          var $add56 = HEAP32[$stream_addr + 28 >> 2] + $num_bits;
          HEAP32[$stream_addr + 28 >> 2] = $add56;
          
          
          HEAP32[$stream_addr + 32 >> 2] = 0;
        } else if (__label__ == 11) {
          
          
          HEAP32[$stream_addr + 28 >> 2] = 32;
        }
        $retval = 1;
      }
    } else if (__label__ == 13) {
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      HEAP32[$stream_addr + 24 >> 2] = (HEAPU8[$v >> 0] & 255) << 24 | (HEAPU8[$v + 1 >> 0] & 255) << 16 | (HEAPU8[$v + 2 >> 0] & 255) << 8 | HEAPU8[$v + 3 >> 0] & 255;
      
      
      
      var $add77 = HEAP32[$stream_addr + 12 >> 2] + 4;
      HEAP32[$stream_addr + 12 >> 2] = $add77;
      
      
      
      
      
      
      
      
      var $or81 = HEAP32[$stream_addr + 16 >> 2] | HEAPU32[$stream_addr + 24 >> 2] >>> ($num_bits >>> 0);
      HEAP32[$stream_addr + 16 >> 2] = $or81;
      
      
      
      
      
      var $shl84 = HEAP32[$stream_addr + 24 >> 2] << 31 - $num_bits;
      HEAP32[$stream_addr + 24 >> 2] = $shl84;
      
      
      
      var $shl86 = HEAP32[$stream_addr + 24 >> 2] << 1;
      HEAP32[$stream_addr + 24 >> 2] = $shl86;
      
      
      
      
      
      
      var $add89 = HEAP32[$stream_addr + 32 >> 2] + HEAP32[$stream_addr + 28 >> 2];
      HEAP32[$stream_addr + 32 >> 2] = $add89;
      
      
      HEAP32[$stream_addr + 28 >> 2] = 32;
      $retval = 1;
    }
  }
  var $106 = $retval;
  STACKTOP = __stackBase__;
  return $106;
  return null;
}
function _BitstreamReadBits($stream, $nBits, $code) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $stream_addr;
  var $nBits_addr;
  var $code_addr;
  $stream_addr = $stream;
  $nBits_addr = $nBits;
  $code_addr = $code;
  
  
  
  
  
  if ((HEAP32[$stream_addr + 28 >> 2] | 0) < ($nBits_addr | 0)) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    var $call = _AVC_BitstreamFillCache($stream_addr);
  }
  
  
  
  
  
  
  
  HEAP32[$code_addr >> 2] = HEAPU32[$stream_addr + 16 >> 2] >>> (32 - $nBits_addr >>> 0);
  
  
  
  
  var $add = HEAP32[$stream_addr + 36 >> 2] + $nBits_addr;
  HEAP32[$stream_addr + 36 >> 2] = $add;
  
  
  
  
  var $sub2 = HEAP32[$stream_addr + 28 >> 2] - $nBits_addr;
  HEAP32[$stream_addr + 28 >> 2] = $sub2;
  
  
  
  
  var $shl = HEAP32[$stream_addr + 16 >> 2] << $nBits_addr;
  HEAP32[$stream_addr + 16 >> 2] = $shl;
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function _BitstreamShowBits($stream, $nBits, $code) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $stream_addr;
  var $nBits_addr;
  var $code_addr;
  $stream_addr = $stream;
  $nBits_addr = $nBits;
  $code_addr = $code;
  
  
  
  
  
  if ((HEAP32[$stream_addr + 28 >> 2] | 0) < ($nBits_addr | 0)) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    var $call = _AVC_BitstreamFillCache($stream_addr);
  }
  
  
  
  
  
  
  
  HEAP32[$code_addr >> 2] = HEAPU32[$stream_addr + 16 >> 2] >>> (32 - $nBits_addr >>> 0);
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function _BitstreamRead1Bit($stream, $code) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $stream_addr;
  var $code_addr;
  $stream_addr = $stream;
  $code_addr = $code;
  
  
  
  
  if ((HEAP32[$stream_addr + 28 >> 2] | 0) < 1) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    var $call = _AVC_BitstreamFillCache($stream_addr);
  }
  
  
  
  
  
  HEAP32[$code_addr >> 2] = HEAPU32[$stream_addr + 16 >> 2] >>> 31;
  
  
  
  var $add = HEAP32[$stream_addr + 36 >> 2] + 1;
  HEAP32[$stream_addr + 36 >> 2] = $add;
  
  
  
  var $sub = HEAP32[$stream_addr + 28 >> 2] - 1;
  HEAP32[$stream_addr + 28 >> 2] = $sub;
  
  
  
  var $shl = HEAP32[$stream_addr + 16 >> 2] << 1;
  HEAP32[$stream_addr + 16 >> 2] = $shl;
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function _BitstreamByteAlign($stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $stream_addr;
  var $n_stuffed;
  $stream_addr = $stream;
  
  
  
  
  
  
  $n_stuffed = 8 - (HEAP32[$stream_addr + 36 >> 2] & 7) & 7;
  
  
  
  
  var $add = HEAP32[$stream_addr + 36 >> 2] + $n_stuffed;
  HEAP32[$stream_addr + 36 >> 2] = $add;
  
  
  
  
  var $sub3 = HEAP32[$stream_addr + 28 >> 2] - $n_stuffed;
  HEAP32[$stream_addr + 28 >> 2] = $sub3;
  
  
  
  
  if ((HEAP32[$stream_addr + 28 >> 2] | 0) < 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    
    
    
    
    var $add7 = HEAP32[$stream_addr + 36 >> 2] + HEAP32[$stream_addr + 28 >> 2];
    HEAP32[$stream_addr + 36 >> 2] = $add7;
    
    
    HEAP32[$stream_addr + 28 >> 2] = 0;
  }
  
  
  
  
  var $shl = HEAP32[$stream_addr + 16 >> 2] << $n_stuffed;
  HEAP32[$stream_addr + 16 >> 2] = $shl;
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function _more_rbsp_data($stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $retval;
  var $stream_addr;
  var $total_bit_left;
  var $code = __stackBase__;
  $stream_addr = $stream;
  
  
  
  
  
  
  
  if ((HEAP32[$stream_addr + 12 >> 2] | 0) >= (HEAP32[$stream_addr + 4 >> 2] | 0)) {
    __label__ = 1;
  } else {
    __label__ = 9;
  }
  $if_then$$if_end9$2 : do {
    if (__label__ == 1) {
      
      
      
      
      
      
      
      $total_bit_left = HEAP32[$stream_addr + 32 >> 2] + HEAP32[$stream_addr + 28 >> 2];
      
      
      if (($total_bit_left | 0) <= 0) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      if (__label__ == 2) {
        $retval = 0;
        __label__ = 10;
        break $if_then$$if_end9$2;
      } else if (__label__ == 3) {
        
        
        if (($total_bit_left | 0) <= 8) {
          __label__ = 4;
        } else {
          __label__ = 7;
        }
        if (__label__ == 4) {
          
          
          var $call = _BitstreamShowBits($stream_addr, $total_bit_left, $code);
          
          
          
          
          
          
          if ((HEAP32[$code >> 2] | 0) == (HEAPU8[__ZL13trailing_bits + $total_bit_left >> 0] & 255 | 0)) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          if (__label__ == 5) {
            $retval = 0;
            __label__ = 10;
            break $if_then$$if_end9$2;
          } else if (__label__ == 6) {

          }
        }
        __label__ = 9;
        break $if_then$$if_end9$2;
      }
    }
  } while (0);
  if (__label__ == 9) {
    $retval = 1;
  }
  var $15 = $retval;
  STACKTOP = __stackBase__;
  return $15;
  return null;
}
function __Z9DecodeSPSP12tagDecObjectP15tagDecBitstream($decvid, $stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 28;
  var __label__;
  var $retval;
  var $decvid_addr;
  var $stream_addr;
  var $status;
  var $seqParam;
  var $temp = __stackBase__;
  var $i;
  var $profile_idc = __stackBase__ + 4;
  var $constrained_set0_flag = __stackBase__ + 8;
  var $constrained_set1_flag = __stackBase__ + 12;
  var $constrained_set2_flag = __stackBase__ + 16;
  var $level_idc = __stackBase__ + 20;
  var $seq_parameter_set_id = __stackBase__ + 24;
  var $userData;
  var $avcHandle2;
  $decvid_addr = $decvid;
  $stream_addr = $stream;
  $status = 1;
  
  
  
  
  
  $userData = HEAP32[HEAP32[$decvid_addr + 1196 >> 2] + 4 >> 2];
  
  
  
  $avcHandle2 = HEAP32[$decvid_addr + 1196 >> 2];
  
  var $call = _BitstreamReadBits($stream_addr, 8, $profile_idc);
  
  var $call4 = _BitstreamRead1Bit($stream_addr, $constrained_set0_flag);
  
  var $call5 = _BitstreamRead1Bit($stream_addr, $constrained_set1_flag);
  
  var $call6 = _BitstreamRead1Bit($stream_addr, $constrained_set2_flag);
  
  var $call7 = _BitstreamReadBits($stream_addr, 5, $temp);
  
  var $call8 = _BitstreamReadBits($stream_addr, 8, $level_idc);
  
  
  if (HEAPU32[$level_idc >> 2] >>> 0 > 51) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $if_then$$if_end$2 : do {
    if (__label__ == 1) {
      $retval = 0;
    } else if (__label__ == 2) {
      
      
      
      
      
      if ((HEAPU8[__ZL10mapLev2Idx2 + HEAP32[$level_idc >> 2] >> 0] & 255 | 0) == 255) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      if (__label__ == 3) {
        $retval = 0;
      } else if (__label__ == 4) {
        
        var $call12 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $seq_parameter_set_id);
        
        
        if (HEAPU32[$seq_parameter_set_id >> 2] >>> 0 > 31) {
          __label__ = 5;
        } else {
          __label__ = 6;
        }
        if (__label__ == 5) {
          $retval = 0;
        } else if (__label__ == 6) {
          
          
          
          
          
          
          if ((HEAP32[$decvid_addr + 8 + HEAP32[$seq_parameter_set_id >> 2] * 4 >> 2] | 0) == 0) {
            __label__ = 7;
          } else {
            __label__ = 10;
          }
          if (__label__ == 7) {
            
            
            var $20 = HEAP32[$avcHandle2 + 20 >> 2];
            
            var $call19 = FUNCTION_TABLE[$20]($userData, 2084, 0);
            var $22 = $call19;
            
            
            
            var $arrayidx21 = $decvid_addr + 8 + HEAP32[$seq_parameter_set_id >> 2] * 4;
            HEAP32[$arrayidx21 >> 2] = $22;
            
            
            
            
            
            
            if ((HEAP32[$decvid_addr + 8 + HEAP32[$seq_parameter_set_id >> 2] * 4 >> 2] | 0) == 0) {
              __label__ = 8;
            } else {
              __label__ = 9;
            }
            if (__label__ == 8) {
              $retval = -1;
              __label__ = 32;
              break $if_then$$if_end$2;
            } else if (__label__ == 9) {

            }
          }
          
          
          
          
          
          $seqParam = HEAP32[$decvid_addr + 8 + HEAP32[$seq_parameter_set_id >> 2] * 4 >> 2];
          var $31 = HEAP32[$profile_idc >> 2];
          
          
          HEAP32[$seqParam + 4 >> 2] = $31;
          var $33 = HEAP32[$constrained_set0_flag >> 2];
          
          
          HEAP32[$seqParam + 8 >> 2] = $33;
          var $35 = HEAP32[$constrained_set1_flag >> 2];
          
          
          HEAP32[$seqParam + 12 >> 2] = $35;
          var $37 = HEAP32[$constrained_set2_flag >> 2];
          
          
          HEAP32[$seqParam + 16 >> 2] = $37;
          var $39 = HEAP32[$level_idc >> 2];
          
          
          HEAP32[$seqParam + 24 >> 2] = $39;
          var $41 = HEAP32[$seq_parameter_set_id >> 2];
          
          
          HEAP32[$seqParam + 28 >> 2] = $41;
          
          
          
          var $call36 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $seqParam + 32);
          
          
          
          
          if (HEAPU32[$seqParam + 32 >> 2] >>> 0 > 12) {
            __label__ = 11;
          } else {
            __label__ = 12;
          }
          if (__label__ == 11) {
            $retval = 0;
          } else if (__label__ == 12) {
            
            
            
            var $call41 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $seqParam + 36);
            
            
            
            
            if ((HEAP32[$seqParam + 36 >> 2] | 0) == 0) {
              __label__ = 13;
            } else {
              __label__ = 14;
            }
            if (__label__ == 13) {
              
              
              
              var $call45 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $seqParam + 40);
            } else if (__label__ == 14) {
              
              
              
              
              if ((HEAP32[$seqParam + 36 >> 2] | 0) == 1) {
                __label__ = 15;
              } else {
                __label__ = 20;
              }
              if (__label__ == 15) {
                
                
                
                var $call49 = _BitstreamRead1Bit($stream_addr, $seqParam + 44);
                
                
                
                var $call50 = __Z9se_v32bitP15tagDecBitstreamPi($stream_addr, $seqParam + 48);
                
                
                
                var $call51 = __Z9se_v32bitP15tagDecBitstreamPi($stream_addr, $seqParam + 52);
                
                
                
                var $call52 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $seqParam + 56);
                $i = 0;
                while (1) {
                  
                  
                  
                  
                  var $cmp54 = ($i | 0) < (HEAP32[$seqParam + 56 >> 2] | 0);
                  if (!$cmp54) {
                    __label__ = 19;
                    break;
                  }
                  
                  
                  
                  
                  
                  var $call56 = __Z9se_v32bitP15tagDecBitstreamPi($stream_addr, $seqParam + 60 + $i * 4);
                  
                  var $inc = $i + 1;
                  $i = $inc;
                  __label__ = 16;
                  continue;
                }
              }
            }
            
            
            
            var $call59 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $seqParam + 1080);
            
            
            
            
            if (HEAPU32[$seqParam + 1080 >> 2] >>> 0 > 16) {
              __label__ = 22;
            } else {
              __label__ = 23;
            }
            if (__label__ == 22) {
              $retval = 0;
            } else if (__label__ == 23) {
              
              
              
              var $call64 = _BitstreamRead1Bit($stream_addr, $seqParam + 1084);
              
              
              
              var $call65 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $seqParam + 1088);
              
              
              
              var $call66 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $seqParam + 1092);
              
              
              
              var $call67 = _BitstreamRead1Bit($stream_addr, $seqParam + 1096);
              
              
              HEAP32[$seqParam + 1100 >> 2] = 0;
              
              
              
              
              if ((HEAP32[$seqParam + 1096 >> 2] | 0) != 0) {
                __label__ = 25;
              } else {
                __label__ = 24;
              }
              if (__label__ == 24) {
                
                
                
                var $call71 = _BitstreamRead1Bit($stream_addr, $seqParam + 1100);
              }
              
              
              
              var $call73 = _BitstreamRead1Bit($stream_addr, $seqParam + 1104);
              
              
              
              var $call74 = _BitstreamRead1Bit($stream_addr, $seqParam + 1108);
              
              
              HEAP32[$seqParam + 1112 >> 2] = 0;
              
              
              HEAP32[$seqParam + 1116 >> 2] = 0;
              
              
              HEAP32[$seqParam + 1120 >> 2] = 0;
              
              
              HEAP32[$seqParam + 1124 >> 2] = 0;
              
              
              
              
              if ((HEAP32[$seqParam + 1108 >> 2] | 0) != 0) {
                __label__ = 26;
              } else {
                __label__ = 27;
              }
              if (__label__ == 26) {
                
                
                
                var $call79 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $seqParam + 1112);
                
                
                
                var $call81 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $seqParam + 1116);
                
                
                
                var $call83 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $seqParam + 1120);
                
                
                
                var $call85 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $seqParam + 1124);
              }
              
              
              
              var $call87 = _BitstreamRead1Bit($stream_addr, $seqParam + 1128);
              
              
              
              
              if ((HEAP32[$seqParam + 1128 >> 2] | 0) != 0) {
                __label__ = 28;
              } else {
                __label__ = 31;
              }
              if (__label__ == 28) {
                
                
                
                var $call91 = __Z14vui_parametersP12tagDecObjectP15tagDecBitstreamP14tagSeqParamSet($decvid_addr, $stream_addr, $seqParam);
                $status = $call91;
                
                
                if (($status | 0) != 1) {
                  __label__ = 29;
                } else {
                  __label__ = 30;
                }
                if (__label__ == 29) {
                  $retval = 0;
                  __label__ = 32;
                  break $if_then$$if_end$2;
                } else if (__label__ == 30) {

                }
              }
              
              $retval = $status;
            }
          }
        }
      }
    }
  } while (0);
  var $114 = $retval;
  STACKTOP = __stackBase__;
  return $114;
  return null;
}
function __Z14vui_parametersP12tagDecObjectP15tagDecBitstreamP14tagSeqParamSet($decvid, $stream, $currSPS) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  var $decvid_addr;
  var $stream_addr;
  var $currSPS_addr;
  var $temp = __stackBase__;
  var $temp32 = __stackBase__ + 4;
  var $aspect_ratio_idc = __stackBase__ + 8;
  var $overscan_appopriate_flag = __stackBase__ + 12;
  var $video_format = __stackBase__ + 16;
  var $video_full_range_flag = __stackBase__ + 20;
  $decvid_addr = $decvid;
  $stream_addr = $stream;
  $currSPS_addr = $currSPS;
  
  var $call = _BitstreamRead1Bit($stream_addr, $temp);
  
  
  if ((HEAP32[$temp >> 2] | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 4;
  }
  if (__label__ == 1) {
    
    var $call1 = _BitstreamReadBits($stream_addr, 8, $aspect_ratio_idc);
    
    
    if ((HEAP32[$aspect_ratio_idc >> 2] | 0) == 255) {
      __label__ = 2;
    } else {
      __label__ = 3;
    }
    if (__label__ == 2) {
      
      var $call3 = _BitstreamReadBits($stream_addr, 16, $temp);
      
      var $call4 = _BitstreamReadBits($stream_addr, 16, $temp);
    }
  }
  
  var $call6 = _BitstreamRead1Bit($stream_addr, $temp);
  
  
  if ((HEAP32[$temp >> 2] | 0) != 0) {
    __label__ = 5;
  } else {
    __label__ = 6;
  }
  if (__label__ == 5) {
    
    var $call9 = _BitstreamRead1Bit($stream_addr, $overscan_appopriate_flag);
  }
  
  var $call11 = _BitstreamRead1Bit($stream_addr, $temp);
  
  
  if ((HEAP32[$temp >> 2] | 0) != 0) {
    __label__ = 7;
  } else {
    __label__ = 10;
  }
  if (__label__ == 7) {
    
    var $call14 = _BitstreamReadBits($stream_addr, 3, $video_format);
    
    var $call15 = _BitstreamRead1Bit($stream_addr, $video_full_range_flag);
    
    var $call16 = _BitstreamRead1Bit($stream_addr, $temp);
    
    
    if ((HEAP32[$temp >> 2] | 0) != 0) {
      __label__ = 8;
    } else {
      __label__ = 9;
    }
    if (__label__ == 8) {
      
      var $call19 = _BitstreamReadBits($stream_addr, 8, $temp);
      
      var $call20 = _BitstreamReadBits($stream_addr, 8, $temp);
      
      var $call21 = _BitstreamReadBits($stream_addr, 8, $temp);
    }
  }
  
  var $call24 = _BitstreamRead1Bit($stream_addr, $temp);
  
  
  if ((HEAP32[$temp >> 2] | 0) != 0) {
    __label__ = 11;
  } else {
    __label__ = 12;
  }
  if (__label__ == 11) {
    
    var $call27 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $temp);
    
    var $call28 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $temp);
  }
  
  var $call30 = _BitstreamRead1Bit($stream_addr, $temp);
  
  
  if ((HEAP32[$temp >> 2] | 0) != 0) {
    __label__ = 13;
  } else {
    __label__ = 14;
  }
  if (__label__ == 13) {
    
    var $call33 = _BitstreamReadBits($stream_addr, 32, $temp32);
    
    var $call34 = _BitstreamReadBits($stream_addr, 32, $temp32);
    
    var $call35 = _BitstreamRead1Bit($stream_addr, $temp);
  }
  
  var $call37 = _BitstreamRead1Bit($stream_addr, $temp);
  var $28 = HEAP32[$temp >> 2];
  
  
  
  HEAP32[$currSPS_addr + 1132 + 80 >> 2] = $28;
  
  
  if ((HEAP32[$temp >> 2] | 0) != 0) {
    __label__ = 15;
  } else {
    __label__ = 16;
  }
  if (__label__ == 15) {
    
    
    
    
    
    var $call41 = __Z14hrd_parametersP12tagDecObjectP15tagDecBitstreamP12tagHRDParams($decvid_addr, $stream_addr, $currSPS_addr + 1132 + 84);
  }
  
  var $call43 = _BitstreamRead1Bit($stream_addr, $temp);
  var $35 = HEAP32[$temp >> 2];
  
  
  
  HEAP32[$currSPS_addr + 1132 + 496 >> 2] = $35;
  
  
  if ((HEAP32[$temp >> 2] | 0) != 0) {
    __label__ = 17;
  } else {
    __label__ = 18;
  }
  if (__label__ == 17) {
    
    
    
    
    
    var $call48 = __Z14hrd_parametersP12tagDecObjectP15tagDecBitstreamP12tagHRDParams($decvid_addr, $stream_addr, $currSPS_addr + 1132 + 500);
  }
  
  
  
  
  
  if ((HEAP32[$currSPS_addr + 1132 + 80 >> 2] | 0) != 0) {
    __label__ = 20;
  } else {
    __label__ = 19;
  }
  $if_then56$$lor_lhs_false$29 : do {
    if (__label__ == 19) {
      
      
      
      
      
      if ((HEAP32[$currSPS_addr + 1132 + 496 >> 2] | 0) != 0) {
        __label__ = 20;
        break $if_then56$$lor_lhs_false$29;
      } else {
        __label__ = 21;
        break $if_then56$$lor_lhs_false$29;
      }
    }
  } while (0);
  if (__label__ == 20) {
    
    var $call57 = _BitstreamRead1Bit($stream_addr, $temp);
  }
  
  var $call59 = _BitstreamRead1Bit($stream_addr, $temp);
  var $47 = HEAP32[$temp >> 2];
  
  
  
  HEAP32[$currSPS_addr + 1132 + 916 >> 2] = $47;
  
  var $call61 = _BitstreamRead1Bit($stream_addr, $temp);
  
  
  if ((HEAP32[$temp >> 2] | 0) != 0) {
    __label__ = 22;
  } else {
    __label__ = 23;
  }
  if (__label__ == 22) {
    
    var $call64 = _BitstreamRead1Bit($stream_addr, $temp);
    
    var $call65 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $temp);
    
    var $call66 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $temp);
    
    var $call67 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $temp);
    
    var $call68 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $temp);
    
    var $call69 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $temp);
    
    var $call70 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $temp);
  }
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z14hrd_parametersP12tagDecObjectP15tagDecBitstreamP12tagHRDParams($decvid, $stream, $HRDParam) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  var $decvid_addr;
  var $stream_addr;
  var $HRDParam_addr;
  var $temp = __stackBase__;
  var $cpb_cnt_minus1 = __stackBase__ + 4;
  var $i;
  $decvid_addr = $decvid;
  $stream_addr = $stream;
  $HRDParam_addr = $HRDParam;
  
  var $call = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $cpb_cnt_minus1);
  var $1 = HEAP32[$cpb_cnt_minus1 >> 2];
  
  
  HEAP32[$HRDParam_addr >> 2] = $1;
  
  var $call2 = _BitstreamReadBits($stream_addr, 4, $temp);
  
  var $call3 = _BitstreamReadBits($stream_addr, 4, $temp);
  $i = 0;
  while (1) {
    
    
    var $cmp = $i >>> 0 <= HEAPU32[$cpb_cnt_minus1 >> 2] >>> 0;
    if (!$cmp) {
      __label__ = 4;
      break;
    }
    
    var $call4 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $temp);
    
    var $call5 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $temp);
    
    var $call6 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $temp);
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 1;
    continue;
  }
  
  var $call7 = _BitstreamReadBits($stream_addr, 5, $temp);
  
  var $call8 = _BitstreamReadBits($stream_addr, 5, $temp);
  var $13 = HEAP32[$temp >> 2];
  
  
  HEAP32[$HRDParam_addr + 400 >> 2] = $13;
  
  var $call9 = _BitstreamReadBits($stream_addr, 5, $temp);
  var $16 = HEAP32[$temp >> 2];
  
  
  HEAP32[$HRDParam_addr + 404 >> 2] = $16;
  
  var $call10 = _BitstreamReadBits($stream_addr, 5, $temp);
  var $19 = HEAP32[$temp >> 2];
  
  
  HEAP32[$HRDParam_addr + 408 >> 2] = $19;
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z9DecodePPSP12tagDecObjectP12tagCommonObjP15tagDecBitstream($decvid, $video, $stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  var $retval;
  var $decvid_addr;
  var $video_addr;
  var $stream_addr;
  var $picParam;
  var $status;
  var $i;
  var $iGroup;
  var $numBits;
  var $PicWidthInMbs;
  var $PicHeightInMapUnits;
  var $PicSizeInMapUnits;
  var $pic_parameter_set_id = __stackBase__;
  var $seq_parameter_set_id = __stackBase__ + 4;
  var $userData;
  var $avcHandle2;
  $decvid_addr = $decvid;
  $video_addr = $video;
  $stream_addr = $stream;
  
  
  
  
  
  $userData = HEAP32[HEAP32[$decvid_addr + 1196 >> 2] + 4 >> 2];
  
  
  
  $avcHandle2 = HEAP32[$decvid_addr + 1196 >> 2];
  
  var $call = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $pic_parameter_set_id);
  
  
  if (HEAPU32[$pic_parameter_set_id >> 2] >>> 0 > 255) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $if_then$$if_end$2 : do {
    if (__label__ == 1) {
      $retval = 0;
    } else if (__label__ == 2) {
      
      var $call4 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $seq_parameter_set_id);
      
      
      if (HEAPU32[$seq_parameter_set_id >> 2] >>> 0 > 31) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      if (__label__ == 3) {
        $retval = 0;
      } else if (__label__ == 4) {
        
        
        
        
        
        
        if ((HEAP32[$decvid_addr + 136 + HEAP32[$pic_parameter_set_id >> 2] * 4 >> 2] | 0) == 0) {
          __label__ = 5;
        } else {
          __label__ = 8;
        }
        if (__label__ == 5) {
          
          
          var $13 = HEAP32[$avcHandle2 + 20 >> 2];
          
          var $call10 = FUNCTION_TABLE[$13]($userData, 168, 0);
          var $15 = $call10;
          
          
          
          var $arrayidx12 = $decvid_addr + 136 + HEAP32[$pic_parameter_set_id >> 2] * 4;
          HEAP32[$arrayidx12 >> 2] = $15;
          
          
          
          
          
          
          if ((HEAP32[$decvid_addr + 136 + HEAP32[$pic_parameter_set_id >> 2] * 4 >> 2] | 0) == 0) {
            __label__ = 6;
          } else {
            __label__ = 7;
          }
          if (__label__ == 6) {
            $retval = -1;
            __label__ = 71;
            break $if_then$$if_end$2;
          } else if (__label__ == 7) {
            
            
            
            
            
            var $slice_group_id = HEAP32[$decvid_addr + 136 + HEAP32[$pic_parameter_set_id >> 2] * 4 >> 2] + 124;
            HEAP32[$slice_group_id >> 2] = 0;
          }
        }
        
        
        
        
        var $26 = HEAP32[$decvid_addr + 136 + HEAP32[$pic_parameter_set_id >> 2] * 4 >> 2];
        $picParam = $26;
        
        
        HEAP32[$video_addr + 872 >> 2] = $26;
        var $28 = HEAP32[$seq_parameter_set_id >> 2];
        
        
        HEAP32[$picParam + 4 >> 2] = $28;
        var $30 = HEAP32[$pic_parameter_set_id >> 2];
        
        
        HEAP32[$picParam >> 2] = $30;
        
        
        
        var $call25 = _BitstreamRead1Bit($stream_addr, $picParam + 8);
        
        
        
        
        if ((HEAP32[$picParam + 8 >> 2] | 0) != 0) {
          __label__ = 9;
        } else {
          __label__ = 10;
        }
        $if_then27$$if_end28$14 : do {
          if (__label__ == 9) {
            $status = 0;
          } else if (__label__ == 10) {
            
            
            
            var $call29 = _BitstreamRead1Bit($stream_addr, $picParam + 12);
            
            
            
            var $call30 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $picParam + 16);
            
            
            
            
            if (HEAPU32[$picParam + 16 >> 2] >>> 0 > 7) {
              __label__ = 11;
            } else {
              __label__ = 12;
            }
            if (__label__ == 11) {
              $status = 0;
            } else if (__label__ == 12) {
              
              
              HEAP32[$picParam + 116 >> 2] = 0;
              
              
              
              
              if (HEAPU32[$picParam + 16 >> 2] >>> 0 > 0) {
                __label__ = 13;
              } else {
                __label__ = 50;
              }
              if (__label__ == 13) {
                
                
                
                var $call38 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $picParam + 20);
                
                
                
                
                if ((HEAP32[$picParam + 20 >> 2] | 0) == 0) {
                  __label__ = 14;
                } else {
                  __label__ = 19;
                }
                if (__label__ == 14) {
                  $iGroup = 0;
                  while (1) {
                    
                    
                    
                    
                    var $cmp43 = ($iGroup | 0) <= (HEAP32[$picParam + 16 >> 2] | 0);
                    if (!$cmp43) {
                      __label__ = 18;
                      break;
                    }
                    
                    
                    
                    
                    
                    var $call45 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $picParam + 24 + $iGroup * 4);
                    
                    var $inc = $iGroup + 1;
                    $iGroup = $inc;
                    __label__ = 15;
                    continue;
                  }
                } else if (__label__ == 19) {
                  
                  
                  
                  
                  if ((HEAP32[$picParam + 20 >> 2] | 0) == 2) {
                    __label__ = 20;
                  } else {
                    __label__ = 25;
                  }
                  if (__label__ == 20) {
                    $iGroup = 0;
                    while (1) {
                      
                      
                      
                      
                      var $cmp51 = ($iGroup | 0) < (HEAP32[$picParam + 16 >> 2] | 0);
                      if (!$cmp51) {
                        __label__ = 24;
                        break;
                      }
                      
                      
                      
                      
                      
                      var $call54 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $picParam + 56 + $iGroup * 4);
                      
                      
                      
                      
                      
                      var $call56 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $picParam + 84 + $iGroup * 4);
                      
                      var $inc58 = $iGroup + 1;
                      $iGroup = $inc58;
                      __label__ = 21;
                      continue;
                    }
                  } else if (__label__ == 25) {
                    
                    
                    
                    
                    if ((HEAP32[$picParam + 20 >> 2] | 0) == 3) {
                      __label__ = 28;
                    } else {
                      __label__ = 26;
                    }
                    $if_then68$$lor_lhs_false$38 : do {
                      if (__label__ == 26) {
                        
                        
                        
                        
                        if ((HEAP32[$picParam + 20 >> 2] | 0) == 4) {
                          __label__ = 28;
                          break $if_then68$$lor_lhs_false$38;
                        }
                        
                        
                        
                        
                        if ((HEAP32[$picParam + 20 >> 2] | 0) == 5) {
                          __label__ = 28;
                          break $if_then68$$lor_lhs_false$38;
                        }
                        
                        
                        
                        
                        if ((HEAP32[$picParam + 20 >> 2] | 0) == 6) {
                          __label__ = 30;
                        } else {
                          __label__ = 46;
                        }
                        if (__label__ == 30) {
                          
                          
                          
                          var $call76 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $picParam + 120);
                          $numBits = 0;
                          
                          
                          
                          $i = HEAP32[$picParam + 16 >> 2];
                          $while_cond$44 : while (1) {
                            
                            var $cmp78 = ($i | 0) > 0;
                            if (!$cmp78) {
                              __label__ = 33;
                              break $while_cond$44;
                            }
                            
                            var $inc79 = $numBits + 1;
                            $numBits = $inc79;
                            
                            var $shr = $i >> 1;
                            $i = $shr;
                            __label__ = 31;
                            continue $while_cond$44;
                          }
                          
                          
                          
                          $i = HEAP32[$picParam + 4 >> 2];
                          
                          
                          
                          
                          
                          
                          if ((HEAP32[$decvid_addr + 8 + $i * 4 >> 2] | 0) == 0) {
                            __label__ = 34;
                          } else {
                            __label__ = 35;
                          }
                          if (__label__ == 34) {
                            $status = 0;
                            __label__ = 66;
                            break $if_then27$$if_end28$14;
                          } else if (__label__ == 35) {
                            
                            
                            
                            
                            
                            
                            
                            
                            $PicWidthInMbs = HEAP32[HEAP32[$decvid_addr + 8 + $i * 4 >> 2] + 1088 >> 2] + 1;
                            
                            
                            
                            
                            
                            
                            
                            
                            $PicHeightInMapUnits = HEAP32[HEAP32[$decvid_addr + 8 + $i * 4 >> 2] + 1092 >> 2] + 1;
                            
                            
                            
                            $PicSizeInMapUnits = $PicWidthInMbs * $PicHeightInMapUnits;
                            
                            
                            
                            
                            
                            
                            if ((HEAP32[$picParam + 120 >> 2] | 0) != ($PicSizeInMapUnits - 1 | 0)) {
                              __label__ = 36;
                            } else {
                              __label__ = 37;
                            }
                            if (__label__ == 36) {
                              $status = 0;
                              __label__ = 66;
                              break $if_then27$$if_end28$14;
                            } else if (__label__ == 37) {
                              
                              
                              
                              
                              if ((HEAP32[$picParam + 124 >> 2] | 0) != 0) {
                                __label__ = 38;
                              } else {
                                __label__ = 39;
                              }
                              if (__label__ == 38) {
                                
                                
                                var $108 = HEAP32[$avcHandle2 + 24 >> 2];
                                
                                
                                
                                
                                var $112 = HEAP32[$picParam + 124 >> 2];
                                FUNCTION_TABLE[$108]($userData, $112);
                              }
                              
                              
                              var $114 = HEAP32[$avcHandle2 + 20 >> 2];
                              
                              
                              
                              var $call101 = FUNCTION_TABLE[$114]($userData, 4 * $PicSizeInMapUnits, 0);
                              var $117 = $call101;
                              
                              
                              HEAP32[$picParam + 124 >> 2] = $117;
                              
                              
                              
                              
                              if ((HEAP32[$picParam + 124 >> 2] | 0) == 0) {
                                __label__ = 40;
                              } else {
                                __label__ = 41;
                              }
                              if (__label__ == 40) {
                                $status = -1;
                                __label__ = 66;
                                break $if_then27$$if_end28$14;
                              } else if (__label__ == 41) {
                                $i = 0;
                                while (1) {
                                  
                                  
                                  var $cmp108 = ($i | 0) < ($PicSizeInMapUnits | 0);
                                  if (!$cmp108) {
                                    __label__ = 45;
                                    break;
                                  }
                                  
                                  
                                  
                                  
                                  
                                  
                                  var $arrayidx111 = HEAP32[$picParam + 124 >> 2] + 4 * $i;
                                  var $call112 = _BitstreamReadBits($stream_addr, $numBits, $arrayidx111);
                                  
                                  var $inc114 = $i + 1;
                                  $i = $inc114;
                                  __label__ = 42;
                                  continue;
                                }
                              }
                            }
                          }
                        }
                        __label__ = 47;
                        break $if_then68$$lor_lhs_false$38;
                      }
                    } while (0);
                    if (__label__ == 28) {
                      
                      
                      
                      var $call69 = _BitstreamRead1Bit($stream_addr, $picParam + 112);
                      
                      
                      
                      var $call71 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $picParam + 116);
                    }
                  }
                }
              }
              
              
              
              var $call121 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $picParam + 128);
              
              
              
              
              if (HEAPU32[$picParam + 128 >> 2] >>> 0 > 31) {
                __label__ = 51;
              } else {
                __label__ = 52;
              }
              if (__label__ == 51) {
                $status = 0;
              } else if (__label__ == 52) {
                
                
                
                var $call126 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $picParam + 132);
                
                
                
                
                if (HEAPU32[$picParam + 132 >> 2] >>> 0 > 31) {
                  __label__ = 53;
                } else {
                  __label__ = 54;
                }
                if (__label__ == 53) {
                  $status = 0;
                } else if (__label__ == 54) {
                  
                  
                  
                  var $call131 = _BitstreamRead1Bit($stream_addr, $picParam + 136);
                  
                  
                  
                  var $call132 = _BitstreamReadBits($stream_addr, 2, $picParam + 140);
                  
                  
                  
                  
                  if (HEAPU32[$picParam + 140 >> 2] >>> 0 > 2) {
                    __label__ = 55;
                  } else {
                    __label__ = 56;
                  }
                  if (__label__ == 55) {
                    $status = 0;
                  } else if (__label__ == 56) {
                    
                    
                    
                    var $call137 = __Z4se_vP15tagDecBitstreamPi($stream_addr, $picParam + 144);
                    
                    
                    
                    var $cmp139 = (HEAP32[$picParam + 144 >> 2] | 0) < -26;
                    if ($cmp139) {
                      __label__ = 58;
                    } else {
                      __label__ = 57;
                    }
                    $if_then143$$lor_lhs_false140$81 : do {
                      if (__label__ == 57) {
                        
                        
                        
                        
                        if ((HEAP32[$picParam + 144 >> 2] | 0) > 25) {
                          __label__ = 58;
                          break $if_then143$$lor_lhs_false140$81;
                        }
                        
                        
                        
                        var $call145 = __Z4se_vP15tagDecBitstreamPi($stream_addr, $picParam + 148);
                        
                        
                        
                        var $cmp147 = (HEAP32[$picParam + 148 >> 2] | 0) < -26;
                        if ($cmp147) {
                          __label__ = 61;
                        } else {
                          __label__ = 60;
                        }
                        $if_then151$$lor_lhs_false148$84 : do {
                          if (__label__ == 60) {
                            
                            
                            
                            
                            if ((HEAP32[$picParam + 148 >> 2] | 0) > 25) {
                              __label__ = 61;
                              break $if_then151$$lor_lhs_false148$84;
                            }
                            
                            
                            
                            var $call153 = __Z4se_vP15tagDecBitstreamPi($stream_addr, $picParam + 152);
                            
                            
                            
                            var $cmp155 = (HEAP32[$picParam + 152 >> 2] | 0) < -12;
                            if ($cmp155) {
                              __label__ = 64;
                            } else {
                              __label__ = 63;
                            }
                            $if_then159$$lor_lhs_false156$87 : do {
                              if (__label__ == 63) {
                                
                                
                                
                                
                                if ((HEAP32[$picParam + 152 >> 2] | 0) > 12) {
                                  __label__ = 64;
                                  break $if_then159$$lor_lhs_false156$87;
                                }
                                
                                var $call161 = _BitstreamReadBits($stream_addr, 3, $pic_parameter_set_id);
                                
                                
                                
                                
                                HEAP32[$picParam + 156 >> 2] = HEAPU32[$pic_parameter_set_id >> 2] >>> 2;
                                
                                
                                
                                
                                
                                HEAP32[$picParam + 160 >> 2] = HEAPU32[$pic_parameter_set_id >> 2] >>> 1 & 1;
                                
                                var $and164 = HEAP32[$pic_parameter_set_id >> 2] & 1;
                                
                                
                                HEAP32[$picParam + 164 >> 2] = $and164;
                                $retval = 1;
                                __label__ = 71;
                                break $if_then$$if_end$2;
                              }
                            } while (0);
                            $status = 0;
                            $status = 0;
                            __label__ = 66;
                            break $if_then27$$if_end28$14;
                          }
                        } while (0);
                        $status = 0;
                        __label__ = 66;
                        break $if_then27$$if_end28$14;
                      }
                    } while (0);
                    $status = 0;
                  }
                }
              }
            }
          }
        } while (0);
        
        
        
        
        
        
        if ((HEAP32[$decvid_addr + 136 + HEAP32[$pic_parameter_set_id >> 2] * 4 >> 2] | 0) != 0) {
          __label__ = 67;
        } else {
          __label__ = 70;
        }
        if (__label__ == 67) {
          
          
          
          
          if ((HEAP32[$picParam + 124 >> 2] | 0) != 0) {
            __label__ = 68;
          } else {
            __label__ = 69;
          }
          if (__label__ == 68) {
            
            
            var $174 = HEAP32[$avcHandle2 + 24 >> 2];
            
            
            
            
            var $178 = HEAP32[$picParam + 124 >> 2];
            FUNCTION_TABLE[$174]($userData, $178);
          }
          
          
          
          
          
          var $slice_group_id177 = HEAP32[$decvid_addr + 136 + HEAP32[$pic_parameter_set_id >> 2] * 4 >> 2] + 124;
          HEAP32[$slice_group_id177 >> 2] = 0;
          
          
          var $183 = HEAP32[$avcHandle2 + 24 >> 2];
          
          
          
          
          
          
          var $188 = HEAP32[$decvid_addr + 136 + HEAP32[$pic_parameter_set_id >> 2] * 4 >> 2];
          FUNCTION_TABLE[$183]($userData, $188);
          
          
          
          var $arrayidx182 = $decvid_addr + 136 + HEAP32[$pic_parameter_set_id >> 2] * 4;
          HEAP32[$arrayidx182 >> 2] = 0;
          
          $retval = $status;
        } else if (__label__ == 70) {
          $retval = 1;
        }
      }
    }
  } while (0);
  var $192 = $retval;
  STACKTOP = __stackBase__;
  return $192;
  return null;
}
function __Z17DecodeSliceHeaderP12tagDecObjectP12tagCommonObjP15tagDecBitstream($decvid, $video, $stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  var __lastLabel__ = null;
  var $retval;
  var $decvid_addr;
  var $video_addr;
  var $stream_addr;
  var $sliceHdr;
  var $currPPS;
  var $currSPS;
  var $status;
  var $idr_pic_id = __stackBase__;
  var $slice_type = __stackBase__ + 4;
  var $temp;
  var $i;
  $decvid_addr = $decvid;
  $video_addr = $video;
  $stream_addr = $stream;
  
  
  
  $sliceHdr = HEAP32[$video_addr + 880 >> 2];
  
  
  
  var $call = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $sliceHdr);
  
  var $call2 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $slice_type);
  
  
  
  
  if ((HEAP32[$sliceHdr >> 2] | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 5;
  }
  $if_then$$if_end9$2 : do {
    if (__label__ == 1) {
      
      
      
      
      if ((HEAP32[$sliceHdr + 4 >> 2] | 0) >= 5) {
        __label__ = 2;
      } else {
        __label__ = 4;
      }
      $land_lhs_true$$if_end$4 : do {
        if (__label__ == 2) {
          
          
          
          
          
          var $cmp7 = (HEAP32[$slice_type >> 2] | 0) != (HEAP32[$sliceHdr + 4 >> 2] - 5 | 0);
          if (!$cmp7) {
            __label__ = 4;
            break $land_lhs_true$$if_end$4;
          }
          $retval = 0;
          __label__ = 111;
          break $if_then$$if_end9$2;
        }
      } while (0);
      __label__ = 5;
      break $if_then$$if_end9$2;
    }
  } while (0);
  $return$$if_end9$8 : do {
    if (__label__ == 5) {
      var $12 = HEAP32[$slice_type >> 2];
      
      
      HEAP32[$sliceHdr + 4 >> 2] = $12;
      
      
      if ((HEAP32[$slice_type >> 2] | 0) > 4) {
        __label__ = 6;
      } else {
        __label__ = 7;
      }
      if (__label__ == 6) {
        
        var $sub13 = HEAP32[$slice_type >> 2] - 5;
        HEAP32[$slice_type >> 2] = $sub13;
      }
      
      
      if ((HEAP32[$slice_type >> 2] | 0) == 1) {
        __label__ = 9;
      } else {
        __label__ = 8;
      }
      $if_then17$$lor_lhs_false$13 : do {
        if (__label__ == 8) {
          
          
          if ((HEAP32[$slice_type >> 2] | 0) > 2) {
            __label__ = 9;
            break $if_then17$$lor_lhs_false$13;
          }
          var $18 = HEAP32[$slice_type >> 2];
          
          
          HEAP32[$video_addr + 860 >> 2] = $18;
          
          
          
          var $call20 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $sliceHdr + 8);
          
          
          
          
          if (HEAPU32[$sliceHdr + 8 >> 2] >>> 0 > 255) {
            __label__ = 11;
          } else {
            __label__ = 12;
          }
          if (__label__ == 11) {
            $retval = 0;
            __label__ = 111;
            break $return$$if_end9$8;
          } else if (__label__ == 12) {
            
            
            
            
            
            
            
            
            if ((HEAP32[$decvid_addr + 136 + HEAP32[$sliceHdr + 8 >> 2] * 4 >> 2] | 0) == 0) {
              __label__ = 13;
            } else {
              __label__ = 14;
            }
            if (__label__ == 13) {
              $retval = 0;
              __label__ = 111;
              break $return$$if_end9$8;
            } else if (__label__ == 14) {
              
              
              
              
              
              
              var $31 = HEAP32[$decvid_addr + 136 + HEAP32[$sliceHdr + 8 >> 2] * 4 >> 2];
              
              
              HEAP32[$video_addr + 872 >> 2] = $31;
              $currPPS = $31;
              
              
              
              
              
              
              
              
              if ((HEAP32[$decvid_addr + 8 + HEAP32[$currPPS + 4 >> 2] * 4 >> 2] | 0) == 0) {
                __label__ = 15;
              } else {
                __label__ = 16;
              }
              if (__label__ == 15) {
                $retval = 0;
                __label__ = 111;
                break $return$$if_end9$8;
              } else if (__label__ == 16) {
                
                
                
                
                
                
                var $40 = HEAP32[$decvid_addr + 8 + HEAP32[$currPPS + 4 >> 2] * 4 >> 2];
                
                
                HEAP32[$video_addr + 868 >> 2] = $40;
                $currSPS = $40;
                
                
                
                
                
                
                
                if ((HEAP32[$currPPS + 4 >> 2] | 0) != (HEAP32[$video_addr + 876 >> 2] | 0)) {
                  __label__ = 17;
                } else {
                  __label__ = 20;
                }
                if (__label__ == 17) {
                  
                  
                  var $47 = HEAP32[$currPPS + 4 >> 2];
                  
                  
                  HEAP32[$video_addr + 876 >> 2] = $47;
                  
                  
                  var $50 = HEAP32[$decvid_addr + 1196 >> 2];
                  
                  var $call45 = __Z20AVCConfigureSequenceP12tagAVCHandleP12tagCommonObjb($50, $video_addr, 0);
                  $status = $call45;
                  
                  
                  if (($status | 0) != 1) {
                    __label__ = 18;
                  } else {
                    __label__ = 19;
                  }
                  if (__label__ == 18) {
                    
                    $retval = $status;
                    __label__ = 111;
                    break $return$$if_end9$8;
                  } else if (__label__ == 19) {
                    
                    
                    var $55 = HEAP32[$currSPS + 24 >> 2];
                    
                    
                    HEAP32[$video_addr + 1312 >> 2] = $55;
                  }
                }
                
                
                
                
                var $shl = 1 << HEAP32[$currSPS + 32 >> 2] + 4;
                
                
                HEAP32[$video_addr + 1240 >> 2] = $shl;
                
                
                
                var $add51 = HEAP32[$currSPS + 1088 >> 2] + 1;
                
                
                HEAP32[$video_addr + 1248 >> 2] = $add51;
                
                
                
                var $mul = HEAP32[$video_addr + 1248 >> 2] * 16;
                
                
                HEAP32[$video_addr + 1252 >> 2] = $mul;
                
                
                
                var $mul54 = HEAP32[$video_addr + 1248 >> 2] * 8;
                
                
                HEAP32[$video_addr + 1256 >> 2] = $mul54;
                
                
                
                var $add55 = HEAP32[$currSPS + 1092 >> 2] + 1;
                
                
                HEAP32[$video_addr + 1260 >> 2] = $add55;
                
                
                
                
                
                
                var $mul58 = HEAP32[$video_addr + 1248 >> 2] * HEAP32[$video_addr + 1260 >> 2];
                
                
                HEAP32[$video_addr + 1264 >> 2] = $mul58;
                
                
                
                
                
                
                
                var $mul61 = (2 - HEAP32[$currSPS + 1096 >> 2]) * HEAP32[$video_addr + 1260 >> 2];
                
                
                HEAP32[$video_addr + 1268 >> 2] = $mul61;
                
                
                
                var $add62 = HEAP32[$currPPS + 116 >> 2] + 1;
                
                
                HEAP32[$video_addr + 1272 >> 2] = $add62;
                
                
                
                
                var $add64 = HEAP32[$currSPS + 32 >> 2] + 4;
                
                
                var $call65 = _BitstreamReadBits($stream_addr, $add64, $sliceHdr + 12);
                
                
                
                
                if ((HEAP32[$video_addr + 888 >> 2] | 0) == 0) {
                  __label__ = 21;
                } else {
                  __label__ = 23;
                }
                $land_lhs_true67$$if_end73$31 : do {
                  if (__label__ == 21) {
                    
                    
                    
                    var $cmp69 = (HEAP32[$sliceHdr + 12 >> 2] | 0) != 0;
                    if (!$cmp69) {
                      __label__ = 23;
                      break $land_lhs_true67$$if_end73$31;
                    }
                    
                    
                    
                    var $sub72 = HEAP32[$sliceHdr + 12 >> 2] - 1;
                    
                    
                    HEAP32[$video_addr + 1288 >> 2] = $sub72;
                    
                    
                    HEAP32[$video_addr + 1388 >> 2] = $sub72;
                  }
                } while (0);
                
                
                
                
                if ((HEAP32[$currSPS + 1096 >> 2] | 0) != 0) {
                  __label__ = 27;
                } else {
                  __label__ = 24;
                }
                if (__label__ == 24) {
                  
                  
                  
                  var $call76 = _BitstreamRead1Bit($stream_addr, $sliceHdr + 16);
                  
                  
                  
                  
                  if ((HEAP32[$sliceHdr + 16 >> 2] | 0) != 0) {
                    __label__ = 25;
                  } else {
                    __label__ = 26;
                  }
                  if (__label__ == 25) {
                    $retval = 0;
                    __label__ = 111;
                    break $return$$if_end9$8;
                  } else if (__label__ == 26) {

                  }
                }
                
                
                var $104 = HEAP32[$video_addr + 1268 >> 2];
                
                
                HEAP32[$video_addr + 1296 >> 2] = $104;
                
                
                
                var $mul84 = HEAP32[$video_addr + 1296 >> 2] * 16;
                
                
                HEAP32[$video_addr + 1300 >> 2] = $mul84;
                
                
                
                var $mul86 = HEAP32[$video_addr + 1296 >> 2] * 8;
                
                
                HEAP32[$video_addr + 1304 >> 2] = $mul86;
                
                
                
                
                
                
                var $mul89 = HEAP32[$video_addr + 1248 >> 2] * HEAP32[$video_addr + 1296 >> 2];
                
                
                HEAP32[$video_addr + 1308 >> 2] = $mul89;
                
                
                
                
                
                
                
                if (HEAPU32[$sliceHdr >> 2] >>> 0 >= HEAPU32[$video_addr + 1308 >> 2] >>> 0) {
                  __label__ = 28;
                } else {
                  __label__ = 29;
                }
                if (__label__ == 28) {
                  $retval = 0;
                  __label__ = 111;
                  break $return$$if_end9$8;
                } else if (__label__ == 29) {
                  
                  
                  var $122 = HEAP32[$video_addr + 1240 >> 2];
                  
                  
                  HEAP32[$video_addr + 1320 >> 2] = $122;
                  
                  
                  var $125 = HEAP32[$sliceHdr + 12 >> 2];
                  
                  
                  HEAP32[$video_addr + 1324 >> 2] = $125;
                  
                  
                  
                  
                  if ((HEAP32[$video_addr + 848 >> 2] | 0) == 5) {
                    __label__ = 30;
                  } else {
                    __label__ = 33;
                  }
                  if (__label__ == 30) {
                    
                    
                    
                    
                    if ((HEAP32[$sliceHdr + 12 >> 2] | 0) != 0) {
                      __label__ = 31;
                    } else {
                      __label__ = 32;
                    }
                    if (__label__ == 31) {
                      $retval = 0;
                      __label__ = 111;
                      break $return$$if_end9$8;
                    } else if (__label__ == 32) {
                      
                      var $call103 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $idr_pic_id);
                    }
                  }
                  
                  
                  HEAP32[$sliceHdr + 32 >> 2] = 0;
                  
                  
                  
                  HEAP32[$sliceHdr + 36 >> 2] = 0;
                  
                  
                  
                  HEAP32[$sliceHdr + 36 + 4 >> 2] = 0;
                  
                  
                  
                  
                  if ((HEAP32[$currSPS + 36 >> 2] | 0) == 0) {
                    __label__ = 34;
                  } else {
                    __label__ = 39;
                  }
                  if (__label__ == 34) {
                    
                    
                    
                    
                    var $add110 = HEAP32[$currSPS + 40 >> 2] + 4;
                    
                    
                    var $call111 = _BitstreamReadBits($stream_addr, $add110, $sliceHdr + 28);
                    
                    
                    
                    
                    var $shl114 = 1 << HEAP32[$currSPS + 40 >> 2] + 4;
                    
                    
                    HEAP32[$video_addr + 1244 >> 2] = $shl114;
                    
                    
                    
                    
                    
                    
                    
                    
                    if (HEAPU32[$sliceHdr + 28 >> 2] >>> 0 > HEAP32[$video_addr + 1244 >> 2] - 1 >>> 0) {
                      __label__ = 35;
                    } else {
                      __label__ = 36;
                    }
                    if (__label__ == 35) {
                      $retval = 0;
                      __label__ = 111;
                      break $return$$if_end9$8;
                    } else if (__label__ == 36) {
                      
                      
                      
                      
                      if ((HEAP32[$currPPS + 12 >> 2] | 0) != 0) {
                        __label__ = 37;
                      } else {
                        __label__ = 38;
                      }
                      if (__label__ == 37) {
                        
                        
                        
                        var $call124 = __Z9se_v32bitP15tagDecBitstreamPi($stream_addr, $sliceHdr + 32);
                      }
                    }
                  }
                  
                  
                  
                  
                  if ((HEAP32[$currSPS + 36 >> 2] | 0) == 1) {
                    __label__ = 40;
                  } else {
                    __label__ = 44;
                  }
                  $land_lhs_true129$$if_end142$59 : do {
                    if (__label__ == 40) {
                      
                      
                      
                      
                      if ((HEAP32[$currSPS + 44 >> 2] | 0) != 0) {
                        __label__ = 44;
                        break $land_lhs_true129$$if_end142$59;
                      }
                      
                      
                      
                      
                      var $call134 = __Z9se_v32bitP15tagDecBitstreamPi($stream_addr, $sliceHdr + 36);
                      
                      
                      
                      
                      if ((HEAP32[$currPPS + 12 >> 2] | 0) != 0) {
                        __label__ = 42;
                      } else {
                        __label__ = 43;
                      }
                      if (__label__ == 42) {
                        
                        
                        
                        
                        var $call140 = __Z9se_v32bitP15tagDecBitstreamPi($stream_addr, $sliceHdr + 36 + 4);
                      }
                    }
                  } while (0);
                  
                  
                  HEAP32[$sliceHdr + 44 >> 2] = 0;
                  
                  
                  
                  
                  if ((HEAP32[$currPPS + 164 >> 2] | 0) != 0) {
                    __label__ = 45;
                  } else {
                    __label__ = 50;
                  }
                  if (__label__ == 45) {
                    
                    
                    
                    var $call146 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $sliceHdr + 44);
                    
                    
                    
                    
                    if (HEAPU32[$sliceHdr + 44 >> 2] >>> 0 > 127) {
                      __label__ = 46;
                    } else {
                      __label__ = 47;
                    }
                    if (__label__ == 46) {
                      $retval = 0;
                      __label__ = 111;
                      break $return$$if_end9$8;
                    } else if (__label__ == 47) {
                      
                      
                      
                      
                      if (HEAPU32[$sliceHdr + 44 >> 2] >>> 0 > 0) {
                        __label__ = 48;
                      } else {
                        __label__ = 49;
                      }
                      if (__label__ == 48) {
                        $retval = 0;
                        __label__ = 111;
                        break $return$$if_end9$8;
                      } else if (__label__ == 49) {

                      }
                    }
                  }
                  
                  
                  var $172 = HEAP32[$currPPS + 128 >> 2];
                  
                  
                  HEAP32[$sliceHdr + 56 >> 2] = $172;
                  
                  
                  var $175 = HEAP32[$currPPS + 132 >> 2];
                  
                  
                  HEAP32[$sliceHdr + 60 >> 2] = $175;
                  
                  
                  if ((HEAP32[$slice_type >> 2] | 0) == 0) {
                    __label__ = 51;
                  } else {
                    __label__ = 58;
                  }
                  if (__label__ == 51) {
                    
                    
                    
                    var $call160 = _BitstreamRead1Bit($stream_addr, $sliceHdr + 52);
                    
                    
                    
                    
                    if ((HEAP32[$sliceHdr + 52 >> 2] | 0) != 0) {
                      __label__ = 52;
                    } else {
                      __label__ = 53;
                    }
                    if (__label__ == 52) {
                      
                      
                      
                      var $call165 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $sliceHdr + 56);
                    } else if (__label__ == 53) {
                      
                      
                      if ((HEAP32[$slice_type >> 2] | 0) == 0) {
                        __label__ = 54;
                      } else {
                        __label__ = 56;
                      }
                      $land_lhs_true167$$if_end171$80 : do {
                        if (__label__ == 54) {
                          
                          
                          
                          var $cmp169 = HEAPU32[$currPPS + 128 >> 2] >>> 0 > 15;
                          if (!$cmp169) {
                            __label__ = 56;
                            break $land_lhs_true167$$if_end171$80;
                          }
                          $retval = 0;
                          __label__ = 111;
                          break $return$$if_end9$8;
                        }
                      } while (0);
                    }
                  }
                  
                  
                  
                  
                  if (HEAPU32[$sliceHdr + 56 >> 2] >>> 0 > 15) {
                    __label__ = 60;
                  } else {
                    __label__ = 59;
                  }
                  $if_then179$$lor_lhs_false176$86 : do {
                    if (__label__ == 59) {
                      
                      
                      
                      
                      if (HEAPU32[$sliceHdr + 60 >> 2] >>> 0 > 15) {
                        __label__ = 60;
                        break $if_then179$$lor_lhs_false176$86;
                      }
                      
                      
                      
                      var $194 = HEAP32[$slice_type >> 2];
                      var $call181 = __Z23ref_pic_list_reorderingP12tagCommonObjP15tagDecBitstreamP14tagSliceHeaderi($video_addr, $stream_addr, $sliceHdr, $194);
                      $status = $call181;
                      
                      
                      if (($status | 0) != 1) {
                        __label__ = 62;
                      } else {
                        __label__ = 63;
                      }
                      if (__label__ == 62) {
                        
                        $retval = $status;
                        __label__ = 111;
                        break $return$$if_end9$8;
                      } else if (__label__ == 63) {
                        
                        
                        
                        
                        if ((HEAP32[$video_addr + 844 >> 2] | 0) != 0) {
                          __label__ = 64;
                        } else {
                          __label__ = 65;
                        }
                        if (__label__ == 64) {
                          
                          
                          
                          var $call187 = __Z19dec_ref_pic_markingP12tagCommonObjP15tagDecBitstreamP14tagSliceHeader($video_addr, $stream_addr, $sliceHdr);
                        }
                        
                        
                        
                        var $call189 = __Z4se_vP15tagDecBitstreamPi($stream_addr, $sliceHdr + 2136);
                        
                        
                        
                        
                        
                        
                        
                        var $add192 = 26 + HEAP32[$currPPS + 144 >> 2] + HEAP32[$sliceHdr + 2136 >> 2];
                        
                        
                        HEAP32[$video_addr + 812 >> 2] = $add192;
                        
                        
                        
                        
                        if ((HEAP32[$video_addr + 812 >> 2] | 0) > 51) {
                          __label__ = 67;
                        } else {
                          __label__ = 66;
                        }
                        $if_then198$$lor_lhs_false195$95 : do {
                          if (__label__ == 66) {
                            
                            
                            
                            
                            if ((HEAP32[$video_addr + 812 >> 2] | 0) < 0) {
                              __label__ = 67;
                              break $if_then198$$lor_lhs_false195$95;
                            } else {
                              __label__ = 77;
                              break $if_then198$$lor_lhs_false195$95;
                            }
                          }
                        } while (0);
                        if (__label__ == 67) {
                          
                          
                          
                          
                          if ((HEAP32[$video_addr + 812 >> 2] | 0) < 51) {
                            __label__ = 68;
                          } else {
                            __label__ = 69;
                          }
                          if (__label__ == 68) {
                            
                            
                            var $216 = HEAP32[$video_addr + 812 >> 2];
                            __lastLabel__ = 68;
                          } else if (__label__ == 69) {
                            __lastLabel__ = 69;
                          }
                          var $cond = __lastLabel__ == 68 ? $216 : 51;
                          
                          if (0 > ($cond | 0)) {
                            __label__ = 71;
                          } else {
                            __label__ = 72;
                          }
                          if (__label__ == 71) {
                            __lastLabel__ = 71;
                          } else if (__label__ == 72) {
                            
                            
                            
                            
                            if ((HEAP32[$video_addr + 812 >> 2] | 0) < 51) {
                              __label__ = 73;
                            } else {
                              __label__ = 74;
                            }
                            if (__label__ == 73) {
                              
                              
                              var $220 = HEAP32[$video_addr + 812 >> 2];
                              __lastLabel__ = 73;
                            } else if (__label__ == 74) {
                              __lastLabel__ = 74;
                            }
                            var $cond211 = __lastLabel__ == 73 ? $220 : 51;
                            __lastLabel__ = 75;
                          }
                          var $cond213 = __lastLabel__ == 71 ? 0 : $cond211;
                          
                          
                          HEAP32[$video_addr + 812 >> 2] = $cond213;
                        }
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        if ((HEAP32[$video_addr + 812 >> 2] + HEAP32[HEAP32[$video_addr + 872 >> 2] + 152 >> 2] | 0) < 51) {
                          __label__ = 78;
                        } else {
                          __label__ = 79;
                        }
                        if (__label__ == 78) {
                          
                          
                          
                          
                          
                          
                          
                          
                          var $add224 = HEAP32[$video_addr + 812 >> 2] + HEAP32[HEAP32[$video_addr + 872 >> 2] + 152 >> 2];
                          __lastLabel__ = 78;
                        } else if (__label__ == 79) {
                          __lastLabel__ = 79;
                        }
                        var $cond227 = __lastLabel__ == 78 ? $add224 : 51;
                        
                        if (0 > ($cond227 | 0)) {
                          __label__ = 81;
                        } else {
                          __label__ = 82;
                        }
                        if (__label__ == 81) {
                          __lastLabel__ = 81;
                        } else if (__label__ == 82) {
                          
                          
                          
                          
                          
                          
                          
                          
                          
                          
                          if ((HEAP32[$video_addr + 812 >> 2] + HEAP32[HEAP32[$video_addr + 872 >> 2] + 152 >> 2] | 0) < 51) {
                            __label__ = 83;
                          } else {
                            __label__ = 84;
                          }
                          if (__label__ == 83) {
                            
                            
                            
                            
                            
                            
                            
                            
                            var $add240 = HEAP32[$video_addr + 812 >> 2] + HEAP32[HEAP32[$video_addr + 872 >> 2] + 152 >> 2];
                            __lastLabel__ = 83;
                          } else if (__label__ == 84) {
                            __lastLabel__ = 84;
                          }
                          var $cond243 = __lastLabel__ == 83 ? $add240 : 51;
                          __lastLabel__ = 85;
                        }
                        var $cond245 = __lastLabel__ == 81 ? 0 : $cond243;
                        
                        
                        var $conv = HEAPU8[__ZL10mapQPi2QPc + $cond245 >> 0] & 255;
                        
                        
                        HEAP32[$video_addr + 816 >> 2] = $conv;
                        
                        
                        
                        
                        var $shr = HEAP32[$video_addr + 812 >> 2] * 43 >> 8;
                        
                        
                        HEAP32[$video_addr + 820 >> 2] = $shr;
                        
                        
                        
                        
                        
                        
                        
                        var $sub252 = HEAP32[$video_addr + 812 >> 2] - 6 * HEAP32[$video_addr + 820 >> 2];
                        
                        
                        HEAP32[$video_addr + 824 >> 2] = $sub252;
                        
                        
                        
                        
                        var $shr255 = HEAP32[$video_addr + 816 >> 2] * 43 >> 8;
                        
                        
                        HEAP32[$video_addr + 828 >> 2] = $shr255;
                        
                        
                        
                        
                        
                        
                        
                        var $sub259 = HEAP32[$video_addr + 816 >> 2] - 6 * HEAP32[$video_addr + 828 >> 2];
                        
                        
                        HEAP32[$video_addr + 832 >> 2] = $sub259;
                        
                        
                        HEAP32[$sliceHdr + 2152 >> 2] = 0;
                        
                        
                        HEAP32[$sliceHdr + 2156 >> 2] = 0;
                        
                        
                        HEAP32[$sliceHdr + 2148 >> 2] = 0;
                        
                        
                        HEAP32[$video_addr + 1336 >> 2] = 0;
                        
                        
                        HEAP32[$video_addr + 1332 >> 2] = 0;
                        
                        
                        
                        
                        if ((HEAP32[$currPPS + 156 >> 2] | 0) != 0) {
                          __label__ = 87;
                        } else {
                          __label__ = 98;
                        }
                        if (__label__ == 87) {
                          
                          
                          
                          var $call263 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $sliceHdr + 2148);
                          
                          
                          
                          
                          if (HEAPU32[$sliceHdr + 2148 >> 2] >>> 0 > 2) {
                            __label__ = 88;
                          } else {
                            __label__ = 89;
                          }
                          if (__label__ == 88) {
                            $retval = 0;
                            __label__ = 111;
                            break $return$$if_end9$8;
                          } else if (__label__ == 89) {
                            
                            
                            
                            
                            if ((HEAP32[$sliceHdr + 2148 >> 2] | 0) != 1) {
                              __label__ = 90;
                            } else {
                              __label__ = 97;
                            }
                            $if_then270$$if_end295$129 : do {
                              if (__label__ == 90) {
                                
                                
                                
                                var $call272 = __Z4se_vP15tagDecBitstreamPi($stream_addr, $sliceHdr + 2152);
                                
                                
                                
                                var $cmp274 = (HEAP32[$sliceHdr + 2152 >> 2] | 0) < -6;
                                if ($cmp274) {
                                  __label__ = 92;
                                } else {
                                  __label__ = 91;
                                }
                                $if_then278$$lor_lhs_false275$131 : do {
                                  if (__label__ == 91) {
                                    
                                    
                                    
                                    
                                    if ((HEAP32[$sliceHdr + 2152 >> 2] | 0) > 6) {
                                      __label__ = 92;
                                      break $if_then278$$lor_lhs_false275$131;
                                    }
                                    
                                    
                                    
                                    var $shl281 = HEAP32[$sliceHdr + 2152 >> 2] << 1;
                                    
                                    
                                    HEAP32[$video_addr + 1332 >> 2] = $shl281;
                                    
                                    
                                    
                                    var $call284 = __Z4se_vP15tagDecBitstreamPi($stream_addr, $sliceHdr + 2156);
                                    
                                    
                                    
                                    var $cmp286 = (HEAP32[$sliceHdr + 2156 >> 2] | 0) < -6;
                                    if ($cmp286) {
                                      __label__ = 95;
                                    } else {
                                      __label__ = 94;
                                    }
                                    $if_then290$$lor_lhs_false287$134 : do {
                                      if (__label__ == 94) {
                                        
                                        
                                        
                                        
                                        if ((HEAP32[$sliceHdr + 2156 >> 2] | 0) > 6) {
                                          __label__ = 95;
                                          break $if_then290$$lor_lhs_false287$134;
                                        }
                                        
                                        
                                        
                                        var $shl293 = HEAP32[$sliceHdr + 2156 >> 2] << 1;
                                        
                                        
                                        HEAP32[$video_addr + 1336 >> 2] = $shl293;
                                        __label__ = 97;
                                        break $if_then270$$if_end295$129;
                                      }
                                    } while (0);
                                    $retval = 0;
                                    __label__ = 111;
                                    break $return$$if_end9$8;
                                  }
                                } while (0);
                                $retval = 0;
                                __label__ = 111;
                                break $return$$if_end9$8;
                              }
                            } while (0);
                          }
                        }
                        
                        
                        
                        
                        if (HEAPU32[$currPPS + 16 >> 2] >>> 0 > 0) {
                          __label__ = 99;
                        } else {
                          __label__ = 110;
                        }
                        $land_lhs_true298$$if_end329$141 : do {
                          if (__label__ == 99) {
                            
                            
                            
                            var $cmp299 = HEAPU32[$currPPS + 20 >> 2] >>> 0 >= 3;
                            if (!$cmp299) {
                              __label__ = 110;
                              break $land_lhs_true298$$if_end329$141;
                            }
                            
                            
                            
                            var $cmp302 = HEAPU32[$currPPS + 20 >> 2] >>> 0 <= 5;
                            if (!$cmp302) {
                              __label__ = 110;
                              break $land_lhs_true298$$if_end329$141;
                            }
                            
                            
                            var $298 = HEAPU32[$video_addr + 1264 >> 2];
                            
                            
                            var $300 = HEAPU32[$video_addr + 1272 >> 2];
                            var $div = Math.floor(($298 >>> 0) / ($300 >>> 0));
                            $temp = $div;
                            
                            
                            
                            
                            
                            
                            
                            
                            if (((HEAPU32[$video_addr + 1264 >> 2] >>> 0) % (HEAPU32[$video_addr + 1272 >> 2] >>> 0) | 0) != 0) {
                              __label__ = 102;
                            } else {
                              __label__ = 103;
                            }
                            if (__label__ == 102) {
                              
                              var $inc = $temp + 1;
                              $temp = $inc;
                            }
                            $i = 0;
                            
                            var $inc311 = $temp + 1;
                            $temp = $inc311;
                            while (1) {
                              
                              var $tobool312 = ($temp | 0) != 0;
                              if (!$tobool312) {
                                __label__ = 106;
                                break;
                              }
                              
                              var $shr313 = $temp >> 1;
                              $temp = $shr313;
                              
                              var $inc314 = $i + 1;
                              $i = $inc314;
                              __label__ = 104;
                              continue;
                            }
                            
                            
                            
                            
                            var $call315 = _BitstreamReadBits($stream_addr, $i, $sliceHdr + 2160);
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            if (HEAP32[$sliceHdr + 2160 >> 2] * HEAP32[$video_addr + 1272 >> 2] >>> 0 < HEAPU32[$video_addr + 1264 >> 2] >>> 0) {
                              __label__ = 107;
                            } else {
                              __label__ = 108;
                            }
                            if (__label__ == 107) {
                              
                              
                              
                              
                              
                              
                              var $mul324 = HEAP32[$sliceHdr + 2160 >> 2] * HEAP32[$video_addr + 1272 >> 2];
                              __lastLabel__ = 107;
                            } else if (__label__ == 108) {
                              
                              
                              var $324 = HEAP32[$video_addr + 1264 >> 2];
                              __lastLabel__ = 108;
                            }
                            var $cond328 = __lastLabel__ == 107 ? $mul324 : $324;
                            
                            
                            HEAP32[$video_addr + 1340 >> 2] = $cond328;
                          }
                        } while (0);
                        $retval = 1;
                        __label__ = 111;
                        break $return$$if_end9$8;
                      }
                    }
                  } while (0);
                  $retval = 0;
                  __label__ = 111;
                  break $return$$if_end9$8;
                }
              }
            }
          }
        }
      } while (0);
      $retval = 0;
    }
  } while (0);
  var $326 = $retval;
  STACKTOP = __stackBase__;
  return $326;
  return null;
}
function __Z23ref_pic_list_reorderingP12tagCommonObjP15tagDecBitstreamP14tagSliceHeaderi($video, $stream, $sliceHdr, $slice_type) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $retval;
  var $video_addr;
  var $stream_addr;
  var $sliceHdr_addr;
  var $slice_type_addr;
  var $i;
  $video_addr = $video;
  $stream_addr = $stream;
  $sliceHdr_addr = $sliceHdr;
  $slice_type_addr = $slice_type;
  
  
  if (($slice_type_addr | 0) != 2) {
    __label__ = 1;
  } else {
    __label__ = 21;
  }
  $if_then$$if_end46$2 : do {
    if (__label__ == 1) {
      
      
      
      var $call = _BitstreamRead1Bit($stream_addr, $sliceHdr_addr + 64);
      
      
      
      
      if ((HEAP32[$sliceHdr_addr + 64 >> 2] | 0) != 0) {
        __label__ = 2;
      } else {
        __label__ = 20;
      }
      if (__label__ == 2) {
        $i = 0;
        $do_body$6 : while (1) {
          
          
          
          
          
          var $call3 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $sliceHdr_addr + 68 + $i * 4);
          
          
          
          
          
          
          if ((HEAP32[$sliceHdr_addr + 68 + $i * 4 >> 2] | 0) == 0) {
            __label__ = 5;
          } else {
            __label__ = 4;
          }
          $if_then10$$lor_lhs_false$8 : do {
            if (__label__ == 4) {
              
              
              
              
              
              
              if ((HEAP32[$sliceHdr_addr + 68 + $i * 4 >> 2] | 0) == 1) {
                __label__ = 5;
                break $if_then10$$lor_lhs_false$8;
              }
              
              
              
              
              
              
              if ((HEAP32[$sliceHdr_addr + 68 + $i * 4 >> 2] | 0) == 2) {
                __label__ = 13;
              } else {
                __label__ = 14;
              }
              if (__label__ == 13) {
                
                
                
                
                
                var $call37 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $sliceHdr_addr + 324 + $i * 4);
              }
              __label__ = 15;
              break $if_then10$$lor_lhs_false$8;
            }
          } while (0);
          if (__label__ == 5) {
            
            
            
            
            
            var $call12 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $sliceHdr_addr + 196 + $i * 4);
            
            
            
            
            
            
            if ((HEAP32[$sliceHdr_addr + 68 + $i * 4 >> 2] | 0) == 0) {
              __label__ = 6;
            } else {
              __label__ = 8;
            }
            if (__label__ == 6) {
              
              
              
              
              var $22 = HEAPU32[$sliceHdr_addr + 196 + $i * 4 >> 2];
              
              
              var $24 = HEAPU32[$video_addr + 1320 >> 2];
              var $div = Math.floor(($24 >>> 0) / 2);
              
              
              if ($22 >>> 0 > $div - 1 >>> 0) {
                __label__ = 7;
                break $do_body$6;
              }
            }
            
            
            
            
            
            
            if ((HEAP32[$sliceHdr_addr + 68 + $i * 4 >> 2] | 0) == 1) {
              __label__ = 9;
            } else {
              __label__ = 11;
            }
            if (__label__ == 9) {
              
              
              
              
              var $30 = HEAPU32[$sliceHdr_addr + 196 + $i * 4 >> 2];
              
              
              var $32 = HEAPU32[$video_addr + 1320 >> 2];
              var $div27 = Math.floor(($32 >>> 0) / 2);
              
              
              if ($30 >>> 0 > $div27 - 2 >>> 0) {
                __label__ = 10;
                break $do_body$6;
              }
            }
          }
          
          var $inc = $i + 1;
          $i = $inc;
          
          
          
          
          
          
          
          if ((HEAP32[$sliceHdr_addr + 68 + ($i - 1) * 4 >> 2] | 0) != 3) {
            __lastLabel__ = 16;
            __label__ = 17;
          } else {
            __lastLabel__ = 16;
            __label__ = 18;
          }
          if (__label__ == 17) {
            
            
            
            
            
            var $cmp44 = ($i | 0) <= (HEAP32[$sliceHdr_addr + 56 >> 2] + 1 | 0);
            __lastLabel__ = 17;
          }
          var $46 = __lastLabel__ == 16 ? 0 : $cmp44;
          if ($46) {
            __label__ = 3;
            continue $do_body$6;
          } else {
            __label__ = 19;
            break $do_body$6;
          }
        }
        if (__label__ == 7) {
          $retval = 0;
          __label__ = 22;
          break $if_then$$if_end46$2;
        } else if (__label__ == 10) {
          $retval = 0;
          __label__ = 22;
          break $if_then$$if_end46$2;
        } else if (__label__ == 19) {

        }
      }
      __label__ = 21;
      break $if_then$$if_end46$2;
    }
  } while (0);
  if (__label__ == 21) {
    $retval = 1;
  }
  var $47 = $retval;
  STACKTOP = __stackBase__;
  return $47;
  return null;
}
function __Z19dec_ref_pic_markingP12tagCommonObjP15tagDecBitstreamP14tagSliceHeader($video, $stream, $sliceHdr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $retval;
  var $video_addr;
  var $stream_addr;
  var $sliceHdr_addr;
  var $i;
  $video_addr = $video;
  $stream_addr = $stream;
  $sliceHdr_addr = $sliceHdr;
  
  
  
  
  if ((HEAP32[$video_addr + 848 >> 2] | 0) == 5) {
    __label__ = 1;
  } else {
    __label__ = 5;
  }
  $if_then$$if_else6$2 : do {
    if (__label__ == 1) {
      
      
      
      var $call = _BitstreamRead1Bit($stream_addr, $sliceHdr_addr + 840);
      
      
      
      var $call1 = _BitstreamRead1Bit($stream_addr, $sliceHdr_addr + 844);
      
      
      
      
      if ((HEAP32[$sliceHdr_addr + 844 >> 2] | 0) == 0) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      if (__label__ == 2) {
        
        
        HEAP32[$video_addr + 1344 >> 2] = -1;
      } else if (__label__ == 3) {
        
        
        HEAP32[$video_addr + 1344 >> 2] = 0;
        
        
        HEAP32[$video_addr + 1348 >> 2] = 0;
      }
      __label__ = 25;
      break $if_then$$if_else6$2;
    } else if (__label__ == 5) {
      
      
      
      var $call7 = _BitstreamRead1Bit($stream_addr, $sliceHdr_addr + 848);
      
      
      
      
      if ((HEAP32[$sliceHdr_addr + 848 >> 2] | 0) != 0) {
        __label__ = 6;
      } else {
        __label__ = 24;
      }
      if (__label__ == 6) {
        $i = 0;
        $do_body$11 : while (1) {
          
          
          
          
          
          var $call10 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $sliceHdr_addr + 852 + $i * 4);
          
          
          
          
          
          
          if ((HEAP32[$sliceHdr_addr + 852 + $i * 4 >> 2] | 0) == 1) {
            __label__ = 9;
          } else {
            __label__ = 8;
          }
          $if_then17$$lor_lhs_false$13 : do {
            if (__label__ == 8) {
              
              
              
              
              
              
              if ((HEAP32[$sliceHdr_addr + 852 + $i * 4 >> 2] | 0) == 3) {
                __label__ = 9;
                break $if_then17$$lor_lhs_false$13;
              } else {
                __label__ = 10;
                break $if_then17$$lor_lhs_false$13;
              }
            }
          } while (0);
          if (__label__ == 9) {
            
            
            
            
            
            var $call19 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $sliceHdr_addr + 1108 + $i * 4);
          }
          
          
          
          
          
          
          if ((HEAP32[$sliceHdr_addr + 852 + $i * 4 >> 2] | 0) == 2) {
            __label__ = 11;
          } else {
            __label__ = 12;
          }
          if (__label__ == 11) {
            
            
            
            
            
            var $call26 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $sliceHdr_addr + 1364 + $i * 4);
          }
          
          
          
          
          
          
          if ((HEAP32[$sliceHdr_addr + 852 + $i * 4 >> 2] | 0) == 3) {
            __label__ = 14;
          } else {
            __label__ = 13;
          }
          $if_then35$$lor_lhs_false31$21 : do {
            if (__label__ == 13) {
              
              
              
              
              
              
              if ((HEAP32[$sliceHdr_addr + 852 + $i * 4 >> 2] | 0) == 6) {
                __label__ = 14;
                break $if_then35$$lor_lhs_false31$21;
              } else {
                __label__ = 15;
                break $if_then35$$lor_lhs_false31$21;
              }
            }
          } while (0);
          if (__label__ == 14) {
            
            
            
            
            
            var $call37 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $sliceHdr_addr + 1620 + $i * 4);
          }
          
          
          
          
          
          
          if ((HEAP32[$sliceHdr_addr + 852 + $i * 4 >> 2] | 0) == 4) {
            __label__ = 16;
          } else {
            __label__ = 17;
          }
          if (__label__ == 16) {
            
            
            
            
            
            var $call44 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $sliceHdr_addr + 1876 + $i * 4);
          }
          
          var $inc = $i + 1;
          $i = $inc;
          
          
          
          
          
          
          
          if ((HEAP32[$sliceHdr_addr + 852 + ($i - 1) * 4 >> 2] | 0) != 0) {
            __lastLabel__ = 18;
            __label__ = 19;
          } else {
            __lastLabel__ = 18;
            __label__ = 20;
          }
          if (__label__ == 19) {
            
            var $cmp49 = ($i | 0) < 64;
            __lastLabel__ = 19;
          }
          var $53 = __lastLabel__ == 18 ? 0 : $cmp49;
          if ($53) {
            __label__ = 7;
            continue $do_body$11;
          } else {
            __label__ = 21;
            break $do_body$11;
          }
        }
        
        
        if (($i | 0) >= 64) {
          __label__ = 22;
        } else {
          __label__ = 23;
        }
        if (__label__ == 22) {
          $retval = 0;
          __label__ = 26;
          break $if_then$$if_else6$2;
        } else if (__label__ == 23) {

        }
      }
      __label__ = 25;
      break $if_then$$if_else6$2;
    }
  } while (0);
  if (__label__ == 25) {
    $retval = 1;
  }
  var $55 = $retval;
  STACKTOP = __stackBase__;
  return $55;
  return null;
}
function __Z18fill_frame_num_gapP12tagAVCHandleP12tagCommonObj($avcHandle, $video) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $avcHandle_addr;
  var $video_addr;
  var $status;
  var $CurrFrameNum;
  var $UnusedShortTermFrameNum;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $tmp4;
  $avcHandle_addr = $avcHandle;
  $video_addr = $video;
  
  
  
  
  
  
  $tmp1 = HEAP32[HEAP32[$video_addr + 880 >> 2] + 36 >> 2];
  
  
  
  
  
  
  $tmp2 = HEAP32[HEAP32[$video_addr + 880 >> 2] + 36 + 4 >> 2];
  
  
  
  $tmp3 = HEAP32[$video_addr + 1324 >> 2];
  
  
  
  
  
  $tmp4 = HEAP32[HEAP32[$video_addr + 880 >> 2] + 848 >> 2];
  
  
  
  
  
  
  
  
  $UnusedShortTermFrameNum = (HEAP32[$video_addr + 1388 >> 2] + 1 >>> 0) % (HEAPU32[$video_addr + 1240 >> 2] >>> 0);
  
  
  
  
  
  $CurrFrameNum = HEAP32[HEAP32[$video_addr + 880 >> 2] + 12 >> 2];
  
  
  
  
  var $arrayidx8 = HEAP32[$video_addr + 880 >> 2] + 36;
  HEAP32[$arrayidx8 >> 2] = 0;
  
  
  
  
  var $arrayidx11 = HEAP32[$video_addr + 880 >> 2] + 36 + 4;
  HEAP32[$arrayidx11 >> 2] = 0;
  while (1) {
    
    
    var $cmp = ($CurrFrameNum | 0) != ($UnusedShortTermFrameNum | 0);
    if (!$cmp) {
      __label__ = 7;
      break;
    }
    
    
    
    HEAP32[$video_addr + 1324 >> 2] = $UnusedShortTermFrameNum;
    
    
    
    
    var $frame_num14 = HEAP32[$video_addr + 880 >> 2] + 12;
    HEAP32[$frame_num14 >> 2] = $UnusedShortTermFrameNum;
    
    
    var $call = __Z13DPBInitBufferP12tagAVCHandleP12tagCommonObj($avcHandle_addr, $video_addr);
    $status = $call;
    
    
    if (($status | 0) != 1) {
      __label__ = 3;
      break;
    }
    
    var $call16 = __Z9DecodePOCP12tagCommonObj($video_addr);
    
    
    __Z10DPBInitPicP12tagCommonObji($video_addr, $UnusedShortTermFrameNum);
    
    
    var $37 = HEAP32[$video_addr + 1356 >> 2];
    
    
    
    var $PicOrderCnt17 = HEAP32[$video_addr + 888 >> 2] + 84;
    HEAP32[$PicOrderCnt17 >> 2] = $37;
    
    
    
    
    var $42 = HEAP32[HEAP32[$video_addr + 880 >> 2] + 12 >> 2];
    
    
    
    var $FrameNum = HEAP32[$video_addr + 888 >> 2] + 72;
    HEAP32[$FrameNum >> 2] = $42;
    
    
    
    var $IsOutputted = HEAP32[$video_addr + 888 >> 2] + 12;
    HEAP32[$IsOutputted >> 2] = 1;
    
    
    
    var $IsReference = HEAP32[$video_addr + 888 >> 2] + 4;
    HEAP32[$IsReference >> 2] = 3;
    
    
    
    var $IsLongTerm = HEAP32[$video_addr + 888 >> 2] + 8;
    HEAP32[$IsLongTerm >> 2] = 0;
    
    
    
    
    var $isReference = HEAP32[$video_addr + 888 >> 2] + 16 + 20;
    HEAP32[$isReference >> 2] = 1;
    
    
    
    
    var $isLongTerm = HEAP32[$video_addr + 888 >> 2] + 16 + 24;
    HEAP32[$isLongTerm >> 2] = 0;
    
    
    
    var $adaptive_ref_pic_marking_mode_flag28 = HEAP32[$video_addr + 880 >> 2] + 848;
    HEAP32[$adaptive_ref_pic_marking_mode_flag28 >> 2] = 0;
    
    
    var $call29 = __Z17StorePictureInDPBP12tagAVCHandleP12tagCommonObj($avcHandle_addr, $video_addr);
    $status = $call29;
    
    
    if (($status | 0) != 1) {
      __label__ = 5;
      break;
    }
    
    
    
    HEAP32[$video_addr + 1388 >> 2] = $UnusedShortTermFrameNum;
    
    
    
    
    
    var $rem36 = ($UnusedShortTermFrameNum + 1 >>> 0) % (HEAPU32[$video_addr + 1240 >> 2] >>> 0);
    $UnusedShortTermFrameNum = $rem36;
    __label__ = 1;
    continue;
  }
  if (__label__ == 7) {
    
    
    
    
    var $frame_num38 = HEAP32[$video_addr + 880 >> 2] + 12;
    HEAP32[$frame_num38 >> 2] = $CurrFrameNum;
    
    
    
    HEAP32[$video_addr + 1324 >> 2] = $tmp3;
    
    
    
    
    
    var $arrayidx42 = HEAP32[$video_addr + 880 >> 2] + 36;
    HEAP32[$arrayidx42 >> 2] = $tmp1;
    
    
    
    
    
    var $arrayidx45 = HEAP32[$video_addr + 880 >> 2] + 36 + 4;
    HEAP32[$arrayidx45 >> 2] = $tmp2;
    
    
    
    
    var $adaptive_ref_pic_marking_mode_flag47 = HEAP32[$video_addr + 880 >> 2] + 848;
    HEAP32[$adaptive_ref_pic_marking_mode_flag47 >> 2] = $tmp4;
    $retval = 1;
  } else if (__label__ == 3) {
    
    $retval = $status;
  } else if (__label__ == 5) {
    $retval = 0;
  }
  var $79 = $retval;
  STACKTOP = __stackBase__;
  return $79;
  return null;
}
function __Z9DecodePOCP12tagCommonObj($video) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $retval;
  var $video_addr;
  var $currSPS;
  var $sliceHdr;
  var $i;
  $video_addr = $video;
  
  
  
  $currSPS = HEAP32[$video_addr + 868 >> 2];
  
  
  
  $sliceHdr = HEAP32[$video_addr + 880 >> 2];
  
  
  var $5 = HEAP32[$currSPS + 36 >> 2];
  if ($5 == 0) {
    __label__ = 1;
  } else if ($5 == 1) {
    __label__ = 12;
  } else if ($5 == 2) {
    __label__ = 43;
  } else {
    __label__ = 56;
  }
  $sw_default$$sw_bb$$sw_bb35$$sw_bb120$2 : do {
    if (__label__ == 56) {
      $retval = 0;
      __label__ = 58;
      break $sw_default$$sw_bb$$sw_bb35$$sw_bb120$2;
    } else if (__label__ == 1) {
      
      
      
      
      if ((HEAP32[$video_addr + 848 >> 2] | 0) == 5) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      if (__label__ == 2) {
        
        
        HEAP32[$video_addr + 1368 >> 2] = 0;
        
        
        HEAP32[$video_addr + 1372 >> 2] = 0;
      }
      
      
      
      
      
      
      
      if (HEAPU32[$sliceHdr + 28 >> 2] >>> 0 < HEAPU32[$video_addr + 1372 >> 2] >>> 0) {
        __label__ = 4;
      } else {
        __label__ = 6;
      }
      $land_lhs_true$$if_else$8 : do {
        if (__label__ == 4) {
          
          
          
          
          
          
          var $sub = HEAP32[$video_addr + 1372 >> 2] - HEAP32[$sliceHdr + 28 >> 2];
          
          
          var $19 = HEAPU32[$video_addr + 1244 >> 2];
          var $div = Math.floor(($19 >>> 0) / 2);
          var $cmp6 = $sub >>> 0 >= $div >>> 0;
          if (!$cmp6) {
            __label__ = 6;
            break $land_lhs_true$$if_else$8;
          }
          
          
          
          
          
          
          var $add = HEAP32[$video_addr + 1368 >> 2] + HEAP32[$video_addr + 1244 >> 2];
          
          
          HEAP32[$video_addr + 1376 >> 2] = $add;
          __label__ = 11;
          break $land_lhs_true$$if_else$8;
        }
      } while (0);
      if (__label__ == 6) {
        
        
        
        
        
        
        
        if (HEAPU32[$sliceHdr + 28 >> 2] >>> 0 > HEAPU32[$video_addr + 1372 >> 2] >>> 0) {
          __label__ = 7;
        } else {
          __label__ = 9;
        }
        $land_lhs_true13$$if_else25$13 : do {
          if (__label__ == 7) {
            
            
            
            
            
            
            var $sub16 = HEAP32[$sliceHdr + 28 >> 2] - HEAP32[$video_addr + 1372 >> 2];
            
            
            var $34 = HEAPU32[$video_addr + 1244 >> 2];
            var $div18 = Math.floor(($34 >>> 0) / 2);
            var $cmp19 = $sub16 >>> 0 > $div18 >>> 0;
            if (!$cmp19) {
              __label__ = 9;
              break $land_lhs_true13$$if_else25$13;
            }
            
            
            
            
            
            
            var $sub23 = HEAP32[$video_addr + 1368 >> 2] - HEAP32[$video_addr + 1244 >> 2];
            
            
            HEAP32[$video_addr + 1376 >> 2] = $sub23;
            __label__ = 10;
            break $land_lhs_true13$$if_else25$13;
          }
        } while (0);
        if (__label__ == 9) {
          
          
          var $41 = HEAP32[$video_addr + 1368 >> 2];
          
          
          HEAP32[$video_addr + 1376 >> 2] = $41;
        }
      }
      
      
      
      
      
      
      var $add32 = HEAP32[$video_addr + 1376 >> 2] + HEAP32[$sliceHdr + 28 >> 2];
      
      
      HEAP32[$video_addr + 1364 >> 2] = $add32;
      
      
      HEAP32[$video_addr + 1356 >> 2] = $add32;
      
      
      
      
      
      
      var $add34 = HEAP32[$video_addr + 1364 >> 2] + HEAP32[$sliceHdr + 32 >> 2];
      
      
      HEAP32[$video_addr + 1360 >> 2] = $add34;
      __label__ = 57;
      break $sw_default$$sw_bb$$sw_bb35$$sw_bb120$2;
    } else if (__label__ == 12) {
      
      
      
      
      if ((HEAP32[$video_addr + 848 >> 2] | 0) == 5) {
        __label__ = 13;
      } else {
        __label__ = 14;
      }
      if (__label__ == 13) {
        
        
        HEAP32[$video_addr + 1380 >> 2] = 0;
        
        
        HEAP32[$video_addr + 1384 >> 2] = 0;
      } else if (__label__ == 14) {
        
        
        
        
        
        
        
        if (HEAPU32[$video_addr + 1388 >> 2] >>> 0 > HEAPU32[$sliceHdr + 12 >> 2] >>> 0) {
          __label__ = 15;
        } else {
          __label__ = 16;
        }
        if (__label__ == 15) {
          
          
          
          
          
          
          var $add43 = HEAP32[$video_addr + 1380 >> 2] + HEAP32[$video_addr + 1240 >> 2];
          
          
          HEAP32[$video_addr + 1384 >> 2] = $add43;
        } else if (__label__ == 16) {
          
          
          var $68 = HEAP32[$video_addr + 1380 >> 2];
          
          
          HEAP32[$video_addr + 1384 >> 2] = $68;
        }
      }
      
      
      
      
      if ((HEAP32[$currSPS + 56 >> 2] | 0) != 0) {
        __label__ = 19;
      } else {
        __label__ = 20;
      }
      if (__label__ == 19) {
        
        
        
        
        
        
        var $add53 = HEAP32[$video_addr + 1384 >> 2] + HEAP32[$sliceHdr + 12 >> 2];
        
        
        HEAP32[$video_addr + 1392 >> 2] = $add53;
      } else if (__label__ == 20) {
        
        
        HEAP32[$video_addr + 1392 >> 2] = 0;
      }
      
      
      
      
      if ((HEAP32[$video_addr + 1392 >> 2] | 0) > 0) {
        __label__ = 22;
      } else {
        __label__ = 24;
      }
      $land_lhs_true59$$if_end63$33 : do {
        if (__label__ == 22) {
          
          
          
          var $cmp60 = (HEAP32[$video_addr + 844 >> 2] | 0) == 0;
          if (!$cmp60) {
            __label__ = 24;
            break $land_lhs_true59$$if_end63$33;
          }
          
          
          
          var $dec = HEAP32[$video_addr + 1392 >> 2] + -1;
          HEAP32[$video_addr + 1392 >> 2] = $dec;
        }
      } while (0);
      
      
      
      
      if ((HEAP32[$video_addr + 1392 >> 2] | 0) > 0) {
        __label__ = 25;
      } else {
        __label__ = 26;
      }
      if (__label__ == 25) {
        
        
        
        var $sub68 = HEAP32[$video_addr + 1392 >> 2] - 1;
        
        
        var $89 = HEAPU32[$currSPS + 56 >> 2];
        var $div70 = Math.floor(($sub68 >>> 0) / ($89 >>> 0));
        
        
        HEAP32[$video_addr + 1396 >> 2] = $div70;
        
        
        
        
        
        
        
        var $rem = (HEAP32[$video_addr + 1392 >> 2] - 1 >>> 0) % (HEAPU32[$currSPS + 56 >> 2] >>> 0);
        
        
        HEAP32[$video_addr + 1400 >> 2] = $rem;
      }
      
      
      HEAP32[$video_addr + 1404 >> 2] = 0;
      $i = 0;
      $for_cond$40 : while (1) {
        
        
        
        
        var $cmp76 = ($i | 0) < (HEAP32[$currSPS + 56 >> 2] | 0);
        if (!$cmp76) {
          __label__ = 30;
          break $for_cond$40;
        }
        
        
        
        
        
        
        
        
        var $add78 = HEAP32[$video_addr + 1404 >> 2] + HEAP32[$currSPS + 60 + $i * 4 >> 2];
        HEAP32[$video_addr + 1404 >> 2] = $add78;
        
        var $inc = $i + 1;
        $i = $inc;
        __label__ = 27;
        continue $for_cond$40;
      }
      
      
      
      
      if ((HEAP32[$video_addr + 1392 >> 2] | 0) != 0) {
        __label__ = 31;
      } else {
        __label__ = 36;
      }
      if (__label__ == 31) {
        
        
        
        
        
        
        var $mul = HEAP32[$video_addr + 1396 >> 2] * HEAP32[$video_addr + 1404 >> 2];
        
        
        HEAP32[$video_addr + 1408 >> 2] = $mul;
        $i = 0;
        while (1) {
          
          
          
          
          var $cmp86 = ($i | 0) <= (HEAP32[$video_addr + 1400 >> 2] | 0);
          if (!$cmp86) {
            __label__ = 35;
            break;
          }
          
          
          
          
          
          
          
          
          var $add91 = HEAP32[$video_addr + 1408 >> 2] + HEAP32[$currSPS + 60 + $i * 4 >> 2];
          HEAP32[$video_addr + 1408 >> 2] = $add91;
          
          var $inc93 = $i + 1;
          $i = $inc93;
          __label__ = 32;
          continue;
        }
      } else if (__label__ == 36) {
        
        
        HEAP32[$video_addr + 1408 >> 2] = 0;
      }
      
      
      
      
      if ((HEAP32[$video_addr + 844 >> 2] | 0) == 0) {
        __label__ = 38;
      } else {
        __label__ = 39;
      }
      if (__label__ == 38) {
        
        
        
        
        
        
        var $add102 = HEAP32[$video_addr + 1408 >> 2] + HEAP32[$currSPS + 48 >> 2];
        HEAP32[$video_addr + 1408 >> 2] = $add102;
      }
      
      
      
      
      
      
      
      var $add106 = HEAP32[$video_addr + 1408 >> 2] + HEAP32[$sliceHdr + 36 >> 2];
      
      
      HEAP32[$video_addr + 1364 >> 2] = $add106;
      
      
      
      
      
      
      
      
      
      
      
      var $add112 = HEAP32[$video_addr + 1364 >> 2] + HEAP32[$currSPS + 52 >> 2] + HEAP32[$sliceHdr + 36 + 4 >> 2];
      
      
      HEAP32[$video_addr + 1360 >> 2] = $add112;
      
      
      
      
      
      
      
      if ((HEAP32[$video_addr + 1364 >> 2] | 0) < (HEAP32[$video_addr + 1360 >> 2] | 0)) {
        __label__ = 40;
      } else {
        __label__ = 41;
      }
      if (__label__ == 40) {
        
        
        var $146 = HEAP32[$video_addr + 1364 >> 2];
        __lastLabel__ = 40;
      } else if (__label__ == 41) {
        
        
        var $148 = HEAP32[$video_addr + 1360 >> 2];
        __lastLabel__ = 41;
      }
      var $cond = __lastLabel__ == 40 ? $146 : $148;
      
      
      HEAP32[$video_addr + 1356 >> 2] = $cond;
      __label__ = 57;
      break $sw_default$$sw_bb$$sw_bb35$$sw_bb120$2;
    } else if (__label__ == 43) {
      
      
      
      
      if ((HEAP32[$video_addr + 848 >> 2] | 0) == 5) {
        __label__ = 44;
      } else {
        __label__ = 45;
      }
      if (__label__ == 44) {
        
        
        HEAP32[$video_addr + 1384 >> 2] = 0;
      } else if (__label__ == 45) {
        
        
        
        
        
        
        
        if (HEAPU32[$video_addr + 1388 >> 2] >>> 0 > HEAPU32[$sliceHdr + 12 >> 2] >>> 0) {
          __label__ = 46;
        } else {
          __label__ = 47;
        }
        if (__label__ == 46) {
          
          
          
          
          
          
          var $add132 = HEAP32[$video_addr + 1380 >> 2] + HEAP32[$video_addr + 1240 >> 2];
          
          
          HEAP32[$video_addr + 1384 >> 2] = $add132;
        } else if (__label__ == 47) {
          
          
          var $163 = HEAP32[$video_addr + 1380 >> 2];
          
          
          HEAP32[$video_addr + 1384 >> 2] = $163;
        }
      }
      
      
      
      
      if ((HEAP32[$video_addr + 848 >> 2] | 0) == 5) {
        __label__ = 50;
      } else {
        __label__ = 51;
      }
      if (__label__ == 50) {
        
        
        HEAP32[$video_addr + 1356 >> 2] = 0;
      } else if (__label__ == 51) {
        
        
        
        
        if ((HEAP32[$video_addr + 844 >> 2] | 0) == 0) {
          __label__ = 52;
        } else {
          __label__ = 53;
        }
        if (__label__ == 52) {
          
          
          
          
          
          
          
          
          var $sub151 = 2 * (HEAP32[$video_addr + 1384 >> 2] + HEAP32[$sliceHdr + 12 >> 2]) - 1;
          
          
          HEAP32[$video_addr + 1356 >> 2] = $sub151;
        } else if (__label__ == 53) {
          
          
          
          
          
          
          
          var $mul157 = 2 * (HEAP32[$video_addr + 1384 >> 2] + HEAP32[$sliceHdr + 12 >> 2]);
          
          
          HEAP32[$video_addr + 1356 >> 2] = $mul157;
        }
      }
      
      
      var $181 = HEAP32[$video_addr + 1356 >> 2];
      
      
      HEAP32[$video_addr + 1360 >> 2] = $181;
      
      
      HEAP32[$video_addr + 1364 >> 2] = $181;
      __label__ = 57;
      break $sw_default$$sw_bb$$sw_bb35$$sw_bb120$2;
    }
  } while (0);
  if (__label__ == 57) {
    $retval = 1;
  }
  var $184 = $retval;
  STACKTOP = __stackBase__;
  return $184;
  return null;
}
function __Z9DecodeSEIP12tagDecObjectP15tagDecBitstream($decvid, $stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  
  var $decvid_addr;
  var $stream_addr;
  $decvid_addr = $decvid;
  $stream_addr = $stream;
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z11sei_payloadP12tagDecObjectP15tagDecBitstreamjj($decvid, $stream, $payloadType, $payloadSize) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $decvid_addr;
  var $stream_addr;
  var $payloadType_addr;
  var $payloadSize_addr;
  var $status;
  var $i;
  $decvid_addr = $decvid;
  $stream_addr = $stream;
  $payloadType_addr = $payloadType;
  $payloadSize_addr = $payloadSize;
  $status = 1;
  var $0 = $payloadType_addr;
  if ($0 == 0) {
    __label__ = 1;
  } else if ($0 == 1) {
    __label__ = 2;
  } else if ($0 == 2) {
    __label__ = 3;
  } else if ($0 == 3) {
    __label__ = 3;
  } else if ($0 == 4) {
    __label__ = 3;
  } else if ($0 == 5) {
    __label__ = 3;
  } else if ($0 == 8) {
    __label__ = 3;
  } else if ($0 == 9) {
    __label__ = 3;
  } else if ($0 == 10) {
    __label__ = 3;
  } else if ($0 == 11) {
    __label__ = 3;
  } else if ($0 == 12) {
    __label__ = 3;
  } else if ($0 == 13) {
    __label__ = 3;
  } else if ($0 == 14) {
    __label__ = 3;
  } else if ($0 == 15) {
    __label__ = 3;
  } else if ($0 == 16) {
    __label__ = 3;
  } else if ($0 == 17) {
    __label__ = 3;
  } else if ($0 == 6) {
    __label__ = 8;
  } else if ($0 == 7) {
    __label__ = 9;
  } else if ($0 == 18) {
    __label__ = 10;
  } else {
    __label__ = 11;
  }
  if (__label__ == 11) {
    $i = 0;
    while (1) {
      
      
      var $cmp11 = $i >>> 0 < $payloadSize_addr >>> 0;
      if (!$cmp11) {
        __label__ = 15;
        break;
      }
      
      
      
      var $add14 = HEAP32[$stream_addr + 36 >> 2] + 8;
      HEAP32[$stream_addr + 36 >> 2] = $add14;
      
      
      
      var $sub16 = HEAP32[$stream_addr + 28 >> 2] - 8;
      HEAP32[$stream_addr + 28 >> 2] = $sub16;
      
      
      
      var $shl18 = HEAP32[$stream_addr + 16 >> 2] << 8;
      HEAP32[$stream_addr + 16 >> 2] = $shl18;
      
      var $inc20 = $i + 1;
      $i = $inc20;
      __label__ = 12;
      continue;
    }
  } else if (__label__ == 1) {
    
    
    var $call = __Z16buffering_periodP12tagDecObjectP15tagDecBitstream($decvid_addr, $stream_addr);
    $status = $call;
  } else if (__label__ == 2) {
    
    
    var $call2 = __Z10pic_timingP12tagDecObjectP15tagDecBitstream($decvid_addr, $stream_addr);
    $status = $call2;
  } else if (__label__ == 3) {
    $i = 0;
    while (1) {
      
      
      var $cmp = $i >>> 0 < $payloadSize_addr >>> 0;
      if (!$cmp) {
        __label__ = 7;
        break;
      }
      
      
      
      var $add = HEAP32[$stream_addr + 36 >> 2] + 8;
      HEAP32[$stream_addr + 36 >> 2] = $add;
      
      
      
      var $sub = HEAP32[$stream_addr + 28 >> 2] - 8;
      HEAP32[$stream_addr + 28 >> 2] = $sub;
      
      
      
      var $shl = HEAP32[$stream_addr + 16 >> 2] << 8;
      HEAP32[$stream_addr + 16 >> 2] = $shl;
      
      var $inc = $i + 1;
      $i = $inc;
      __label__ = 4;
      continue;
    }
  } else if (__label__ == 8) {
    
    
    var $call5 = __Z14recovery_pointP12tagDecObjectP15tagDecBitstream($decvid_addr, $stream_addr);
    $status = $call5;
  } else if (__label__ == 9) {
    
    
    var $call7 = __Z30dec_ref_pic_marking_repetitionP12tagDecObjectP15tagDecBitstream($decvid_addr, $stream_addr);
    $status = $call7;
  } else if (__label__ == 10) {
    
    
    var $call9 = __Z34motion_constrained_slice_group_setP12tagDecObjectP15tagDecBitstream($decvid_addr, $stream_addr);
    $status = $call9;
  }
  
  var $call22 = _BitstreamByteAlign($stream_addr);
  var $30 = $status;
  STACKTOP = __stackBase__;
  return $30;
  return null;
}
function __Z16buffering_periodP12tagDecObjectP15tagDecBitstream($decvid, $stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  var $retval;
  var $decvid_addr;
  var $stream_addr;
  var $currSPS;
  var $seq_parameter_set_id = __stackBase__;
  var $temp = __stackBase__ + 4;
  var $i;
  $decvid_addr = $decvid;
  $stream_addr = $stream;
  
  var $call = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $seq_parameter_set_id);
  
  
  if (HEAPU32[$seq_parameter_set_id >> 2] >>> 0 > 31) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    $retval = 0;
  } else if (__label__ == 2) {
    
    
    
    
    
    $currSPS = HEAP32[$decvid_addr + 8 + HEAP32[$seq_parameter_set_id >> 2] * 4 >> 2];
    
    
    
    
    
    if ((HEAP32[$currSPS + 1132 + 80 >> 2] | 0) != 0) {
      __label__ = 3;
    } else {
      __label__ = 8;
    }
    if (__label__ == 3) {
      $i = 0;
      while (1) {
        
        
        
        
        
        
        var $cmp3 = $i >>> 0 <= HEAPU32[$currSPS + 1132 + 84 >> 2] >>> 0;
        if (!$cmp3) {
          __label__ = 7;
          break;
        }
        
        
        
        
        
        
        var $add = HEAP32[$currSPS + 1132 + 84 + 400 >> 2] + 1;
        var $call6 = _BitstreamReadBits($stream_addr, $add, $temp);
        
        
        
        
        
        
        var $add10 = HEAP32[$currSPS + 1132 + 84 + 400 >> 2] + 1;
        var $call11 = _BitstreamReadBits($stream_addr, $add10, $temp);
        
        var $inc = $i + 1;
        $i = $inc;
        __label__ = 4;
        continue;
      }
    }
    
    
    
    
    
    if ((HEAP32[$currSPS + 1132 + 496 >> 2] | 0) != 0) {
      __label__ = 9;
    } else {
      __label__ = 14;
    }
    if (__label__ == 9) {
      $i = 0;
      while (1) {
        
        
        
        
        
        
        var $cmp19 = $i >>> 0 <= HEAPU32[$currSPS + 1132 + 500 >> 2] >>> 0;
        if (!$cmp19) {
          __label__ = 13;
          break;
        }
        
        
        
        
        
        
        var $add24 = HEAP32[$currSPS + 1132 + 500 + 400 >> 2] + 1;
        var $call25 = _BitstreamReadBits($stream_addr, $add24, $temp);
        
        
        
        
        
        
        var $add29 = HEAP32[$currSPS + 1132 + 500 + 400 >> 2] + 1;
        var $call30 = _BitstreamReadBits($stream_addr, $add29, $temp);
        
        var $inc32 = $i + 1;
        $i = $inc32;
        __label__ = 10;
        continue;
      }
    }
    $retval = 1;
  }
  var $29 = $retval;
  STACKTOP = __stackBase__;
  return $29;
  return null;
}
function __Z10pic_timingP12tagDecObjectP15tagDecBitstream($decvid, $stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $decvid_addr;
  var $stream_addr;
  var $currSPS;
  var $temp = __stackBase__;
  var $NumClockTs;
  var $time_offset_length;
  var $full_timestamp_flag;
  var $i;
  $decvid_addr = $decvid;
  $stream_addr = $stream;
  $NumClockTs = 0;
  $time_offset_length = 24;
  
  
  
  
  
  
  
  
  
  $currSPS = HEAP32[$decvid_addr + 8 + HEAP32[HEAP32[$decvid_addr >> 2] + 876 >> 2] * 4 >> 2];
  
  
  
  
  
  if ((HEAP32[$currSPS + 1132 + 80 >> 2] | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    
    
    
    
    var $add = HEAP32[$currSPS + 1132 + 84 + 400 >> 2] + 1;
    var $call = _BitstreamReadBits($stream_addr, $add, $temp);
    
    
    
    
    
    
    var $add4 = HEAP32[$currSPS + 1132 + 84 + 404 >> 2] + 1;
    var $call5 = _BitstreamReadBits($stream_addr, $add4, $temp);
    
    
    
    
    
    $time_offset_length = HEAP32[$currSPS + 1132 + 84 + 408 >> 2];
  } else if (__label__ == 2) {
    
    
    
    
    
    if ((HEAP32[$currSPS + 1132 + 496 >> 2] | 0) != 0) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    if (__label__ == 3) {
      
      
      
      
      
      
      var $add14 = HEAP32[$currSPS + 1132 + 500 + 400 >> 2] + 1;
      var $call15 = _BitstreamReadBits($stream_addr, $add14, $temp);
      
      
      
      
      
      
      var $add19 = HEAP32[$currSPS + 1132 + 500 + 404 >> 2] + 1;
      var $call20 = _BitstreamReadBits($stream_addr, $add19, $temp);
      
      
      
      
      
      $time_offset_length = HEAP32[$currSPS + 1132 + 500 + 408 >> 2];
    }
  }
  
  
  
  
  
  if ((HEAP32[$currSPS + 1132 + 916 >> 2] | 0) != 0) {
    __label__ = 6;
  } else {
    __label__ = 30;
  }
  if (__label__ == 6) {
    
    var $call28 = _BitstreamReadBits($stream_addr, 4, $temp);
    var $28 = HEAP32[$temp >> 2];
    if ($28 == 0) {
      __label__ = 7;
    } else if ($28 == 1) {
      __label__ = 7;
    } else if ($28 == 2) {
      __label__ = 7;
    } else if ($28 == 3) {
      __label__ = 8;
    } else if ($28 == 4) {
      __label__ = 8;
    } else if ($28 == 7) {
      __label__ = 8;
    } else if ($28 == 5) {
      __label__ = 9;
    } else if ($28 == 6) {
      __label__ = 9;
    } else if ($28 == 8) {
      __label__ = 9;
    } else {
      __label__ = 10;
    }
    if (__label__ == 10) {
      $NumClockTs = 0;
    } else if (__label__ == 7) {
      $NumClockTs = 1;
    } else if (__label__ == 8) {
      $NumClockTs = 2;
    } else if (__label__ == 9) {
      $NumClockTs = 3;
    }
    $i = 0;
    while (1) {
      
      
      var $cmp = $i >>> 0 < $NumClockTs >>> 0;
      if (!$cmp) {
        __label__ = 29;
        break;
      }
      
      var $call31 = _BitstreamRead1Bit($stream_addr, $temp);
      
      
      if ((HEAP32[$temp >> 2] | 0) != 0) {
        __label__ = 14;
      } else {
        __label__ = 27;
      }
      if (__label__ == 14) {
        
        var $call34 = _BitstreamReadBits($stream_addr, 2, $temp);
        
        var $call35 = _BitstreamRead1Bit($stream_addr, $temp);
        
        var $call36 = _BitstreamReadBits($stream_addr, 5, $temp);
        
        var $call37 = _BitstreamRead1Bit($stream_addr, $temp);
        
        $full_timestamp_flag = HEAP32[$temp >> 2];
        
        var $call38 = _BitstreamRead1Bit($stream_addr, $temp);
        
        var $call39 = _BitstreamRead1Bit($stream_addr, $temp);
        
        var $call40 = _BitstreamReadBits($stream_addr, 8, $temp);
        
        
        if (($full_timestamp_flag | 0) != 0) {
          __label__ = 15;
        } else {
          __label__ = 16;
        }
        if (__label__ == 15) {
          
          var $call43 = _BitstreamReadBits($stream_addr, 6, $temp);
          
          var $call44 = _BitstreamReadBits($stream_addr, 6, $temp);
          
          var $call45 = _BitstreamReadBits($stream_addr, 5, $temp);
        } else if (__label__ == 16) {
          
          var $call47 = _BitstreamRead1Bit($stream_addr, $temp);
          
          
          if ((HEAP32[$temp >> 2] | 0) != 0) {
            __label__ = 17;
          } else {
            __label__ = 22;
          }
          if (__label__ == 17) {
            
            var $call50 = _BitstreamReadBits($stream_addr, 6, $temp);
            
            var $call51 = _BitstreamRead1Bit($stream_addr, $temp);
            
            
            if ((HEAP32[$temp >> 2] | 0) != 0) {
              __label__ = 18;
            } else {
              __label__ = 21;
            }
            if (__label__ == 18) {
              
              var $call54 = _BitstreamReadBits($stream_addr, 6, $temp);
              
              var $call55 = _BitstreamRead1Bit($stream_addr, $temp);
              
              
              if ((HEAP32[$temp >> 2] | 0) != 0) {
                __label__ = 19;
              } else {
                __label__ = 20;
              }
              if (__label__ == 19) {
                
                var $call58 = _BitstreamReadBits($stream_addr, 5, $temp);
              }
            }
          }
        }
        
        
        if (($time_offset_length | 0) != 0) {
          __label__ = 24;
        } else {
          __label__ = 25;
        }
        if (__label__ == 24) {
          
          
          var $call65 = _BitstreamReadBits($stream_addr, $time_offset_length, $temp);
        } else if (__label__ == 25) {
          HEAP32[$temp >> 2] = 0;
        }
      }
      
      var $inc = $i + 1;
      $i = $inc;
      __label__ = 12;
      continue;
    }
  }
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z14recovery_pointP12tagDecObjectP15tagDecBitstream($decvid, $stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  
  var $decvid_addr;
  var $stream_addr;
  var $temp = __stackBase__;
  $decvid_addr = $decvid;
  $stream_addr = $stream;
  
  var $call = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $temp);
  
  var $call1 = _BitstreamRead1Bit($stream_addr, $temp);
  
  var $call2 = _BitstreamRead1Bit($stream_addr, $temp);
  
  var $call3 = _BitstreamReadBits($stream_addr, 2, $temp);
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z30dec_ref_pic_marking_repetitionP12tagDecObjectP15tagDecBitstream($decvid, $stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $decvid_addr;
  var $stream_addr;
  var $currSPS;
  var $temp = __stackBase__;
  $decvid_addr = $decvid;
  $stream_addr = $stream;
  
  
  
  
  
  
  
  
  
  $currSPS = HEAP32[$decvid_addr + 8 + HEAP32[HEAP32[$decvid_addr >> 2] + 876 >> 2] * 4 >> 2];
  
  var $call = _BitstreamRead1Bit($stream_addr, $temp);
  
  var $call1 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $temp);
  
  
  
  
  if ((HEAP32[$currSPS + 1096 >> 2] | 0) == 0) {
    __label__ = 1;
  } else {
    __label__ = 4;
  }
  if (__label__ == 1) {
    
    var $call2 = _BitstreamRead1Bit($stream_addr, $temp);
    
    
    if ((HEAP32[$temp >> 2] | 0) != 0) {
      __label__ = 2;
    } else {
      __label__ = 3;
    }
    if (__label__ == 2) {
      
      var $call4 = _BitstreamRead1Bit($stream_addr, $temp);
    }
  }
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z34motion_constrained_slice_group_setP12tagDecObjectP15tagDecBitstream($decvid, $stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $decvid_addr;
  var $stream_addr;
  var $temp = __stackBase__;
  var $i;
  var $numBits;
  $decvid_addr = $decvid;
  $stream_addr = $stream;
  
  var $call = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $temp);
  $numBits = 0;
  
  $i = HEAP32[$temp >> 2];
  $while_cond$2 : while (1) {
    
    var $cmp = $i >>> 0 > 0;
    if (!$cmp) {
      __label__ = 3;
      break $while_cond$2;
    }
    
    var $inc = $numBits + 1;
    $numBits = $inc;
    
    var $shr = $i >>> 1;
    $i = $shr;
    __label__ = 1;
    continue $while_cond$2;
  }
  $i = 0;
  while (1) {
    
    
    var $cmp1 = $i >>> 0 <= HEAPU32[$temp >> 2] >>> 0;
    if (!$cmp1) {
      __label__ = 7;
      break;
    }
    
    
    var $call2 = _BitstreamReadBits($stream_addr, $numBits, $temp);
    
    var $inc3 = $i + 1;
    $i = $inc3;
    __label__ = 4;
    continue;
  }
  
  var $call4 = _BitstreamRead1Bit($stream_addr, $temp);
  
  var $call5 = _BitstreamRead1Bit($stream_addr, $temp);
  
  
  if ((HEAP32[$temp >> 2] | 0) != 0) {
    __label__ = 8;
  } else {
    __label__ = 9;
  }
  if (__label__ == 8) {
    
    var $call6 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $temp);
  }
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z24InitNeighborAvailabilityP12tagCommonObji($video, $mbNum) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $video_addr;
  var $mbNum_addr;
  var $PicWidthInMbs;
  $video_addr = $video;
  $mbNum_addr = $mbNum;
  
  
  
  $PicWidthInMbs = HEAP32[$video_addr + 1248 >> 2];
  
  
  
  
  HEAP32[$video_addr + 1188 >> 2] = $mbNum_addr - 1;
  
  
  
  
  
  HEAP32[$video_addr + 1192 >> 2] = $mbNum_addr - $PicWidthInMbs;
  
  
  
  
  
  
  HEAP32[$video_addr + 1196 >> 2] = $mbNum_addr - $PicWidthInMbs + 1;
  
  
  
  
  
  
  HEAP32[$video_addr + 1200 >> 2] = $mbNum_addr - $PicWidthInMbs - 1;
  
  
  HEAP32[$video_addr + 1216 >> 2] = 0;
  
  
  HEAP32[$video_addr + 1212 >> 2] = 0;
  
  
  HEAP32[$video_addr + 1208 >> 2] = 0;
  
  
  HEAP32[$video_addr + 1204 >> 2] = 0;
  
  
  
  
  if ((HEAP32[$video_addr + 920 >> 2] | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 4;
  }
  if (__label__ == 1) {
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    var $conv = (HEAP32[HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1188 >> 2] + 416 >> 2] | 0) == (HEAP32[HEAP32[$video_addr + 912 >> 2] + 416 >> 2] | 0) & 1;
    
    
    HEAP32[$video_addr + 1204 >> 2] = $conv;
    
    
    
    
    if ((HEAP32[$video_addr + 924 >> 2] | 0) != 0) {
      __label__ = 2;
    } else {
      __label__ = 3;
    }
    if (__label__ == 2) {
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $conv18 = (HEAP32[HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1200 >> 2] + 416 >> 2] | 0) == (HEAP32[HEAP32[$video_addr + 912 >> 2] + 416 >> 2] | 0) & 1;
      
      
      HEAP32[$video_addr + 1216 >> 2] = $conv18;
    }
  }
  
  
  
  
  if ((HEAP32[$video_addr + 924 >> 2] | 0) != 0) {
    __label__ = 5;
  } else {
    __label__ = 8;
  }
  if (__label__ == 5) {
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    var $conv31 = (HEAP32[HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1192 >> 2] + 416 >> 2] | 0) == (HEAP32[HEAP32[$video_addr + 912 >> 2] + 416 >> 2] | 0) & 1;
    
    
    HEAP32[$video_addr + 1208 >> 2] = $conv31;
    
    
    
    
    
    
    if ((HEAP32[$video_addr + 920 >> 2] | 0) < ($PicWidthInMbs - 1 | 0)) {
      __label__ = 6;
    } else {
      __label__ = 7;
    }
    if (__label__ == 6) {
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $conv44 = (HEAP32[HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1196 >> 2] + 416 >> 2] | 0) == (HEAP32[HEAP32[$video_addr + 912 >> 2] + 416 >> 2] | 0) & 1;
      
      
      HEAP32[$video_addr + 1212 >> 2] = $conv44;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z15mb_is_availableP13tagMacroblockjii($mblock, $PicSizeInMbs, $mbAddr, $currMbAddr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $mblock_addr;
  var $PicSizeInMbs_addr;
  var $mbAddr_addr;
  var $currMbAddr_addr;
  $mblock_addr = $mblock;
  $PicSizeInMbs_addr = $PicSizeInMbs;
  $mbAddr_addr = $mbAddr;
  $currMbAddr_addr = $currMbAddr;
  
  
  if (($mbAddr_addr | 0) < 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $if_then$$lor_lhs_false$2 : do {
    if (__label__ == 1) {
      
      
      
      if (($mbAddr_addr | 0) >= ($PicSizeInMbs_addr | 0)) {
        __label__ = 2;
        break $if_then$$lor_lhs_false$2;
      }
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP32[$mblock_addr + 420 * $mbAddr_addr + 416 >> 2] | 0) != (HEAP32[$mblock_addr + 420 * $currMbAddr_addr + 416 >> 2] | 0)) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      if (__label__ == 4) {
        $retval = 0;
        __label__ = 6;
        break $if_then$$lor_lhs_false$2;
      } else if (__label__ == 5) {
        $retval = 1;
        __label__ = 6;
        break $if_then$$lor_lhs_false$2;
      }
    }
  } while (0);
  if (__label__ == 2) {
    $retval = 0;
  }
  var $9 = $retval;
  STACKTOP = __stackBase__;
  return $9;
  return null;
}
function __Z11predict_nnzP12tagCommonObjii($video, $i, $j) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $video_addr;
  var $i_addr;
  var $j_addr;
  var $pred_nnz;
  var $cnt;
  var $tempMB;
  $video_addr = $video;
  $i_addr = $i;
  $j_addr = $j;
  $pred_nnz = 0;
  $cnt = 1;
  
  
  if (($i_addr | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    
    
    
    
    
    
    
    
    
    
    $pred_nnz = HEAPU8[HEAP32[$video_addr + 912 >> 2] + 380 + (($j_addr << 2) + $i_addr - 1) >> 0] & 255;
  } else if (__label__ == 2) {
    
    
    
    
    if ((HEAP32[$video_addr + 1204 >> 2] | 0) != 0) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    if (__label__ == 3) {
      
      
      
      
      
      
      
      $tempMB = HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1188 >> 2];
      
      
      
      
      
      
      
      
      $pred_nnz = HEAPU8[$tempMB + 380 + (($j_addr << 2) + 3) >> 0] & 255;
    } else if (__label__ == 4) {
      $cnt = 0;
    }
  }
  
  
  if (($j_addr | 0) != 0) {
    __label__ = 7;
  } else {
    __label__ = 8;
  }
  if (__label__ == 7) {
    
    
    
    
    
    
    
    
    
    
    
    
    
    var $add19 = $pred_nnz + (HEAPU8[HEAP32[$video_addr + 912 >> 2] + 380 + (($j_addr - 1 << 2) + $i_addr) >> 0] & 255);
    $pred_nnz = $add19;
    
    var $inc = $cnt + 1;
    $cnt = $inc;
  } else if (__label__ == 8) {
    
    
    
    
    if ((HEAP32[$video_addr + 1208 >> 2] | 0) != 0) {
      __label__ = 9;
    } else {
      __label__ = 10;
    }
    if (__label__ == 9) {
      
      
      
      
      
      
      
      $tempMB = HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1192 >> 2];
      
      
      
      
      
      
      
      
      var $add29 = $pred_nnz + (HEAPU8[$tempMB + 380 + (12 + $i_addr) >> 0] & 255);
      $pred_nnz = $add29;
      
      var $inc30 = $cnt + 1;
      $cnt = $inc30;
    }
  }
  
  
  if (($cnt | 0) == 2) {
    __label__ = 12;
  } else {
    __label__ = 13;
  }
  if (__label__ == 12) {
    
    
    var $shr = $pred_nnz + 1 >> 1;
    $pred_nnz = $shr;
  }
  var $36 = $pred_nnz;
  STACKTOP = __stackBase__;
  return $36;
  return null;
}
function __Z18predict_nnz_chromaP12tagCommonObjii($video, $i, $j) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $video_addr;
  var $i_addr;
  var $j_addr;
  var $pred_nnz;
  var $cnt;
  var $tempMB;
  $video_addr = $video;
  $i_addr = $i;
  $j_addr = $j;
  $pred_nnz = 0;
  $cnt = 1;
  
  
  
  if (($i_addr & 1 | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    
    
    
    
    
    
    
    
    
    
    $pred_nnz = HEAPU8[HEAP32[$video_addr + 912 >> 2] + 380 + (($j_addr << 2) + $i_addr - 1) >> 0] & 255;
  } else if (__label__ == 2) {
    
    
    
    
    if ((HEAP32[$video_addr + 1204 >> 2] | 0) != 0) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    if (__label__ == 3) {
      
      
      
      
      
      
      
      $tempMB = HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1188 >> 2];
      
      
      
      
      
      
      
      
      
      
      $pred_nnz = HEAPU8[$tempMB + 380 + (($j_addr << 2) + $i_addr + 1) >> 0] & 255;
    } else if (__label__ == 4) {
      $cnt = 0;
    }
  }
  
  
  
  if (($j_addr & 1 | 0) != 0) {
    __label__ = 7;
  } else {
    __label__ = 8;
  }
  if (__label__ == 7) {
    
    
    
    
    
    
    
    
    
    
    
    
    
    var $add21 = $pred_nnz + (HEAPU8[HEAP32[$video_addr + 912 >> 2] + 380 + (($j_addr - 1 << 2) + $i_addr) >> 0] & 255);
    $pred_nnz = $add21;
    
    var $inc = $cnt + 1;
    $cnt = $inc;
  } else if (__label__ == 8) {
    
    
    
    
    if ((HEAP32[$video_addr + 1208 >> 2] | 0) != 0) {
      __label__ = 9;
    } else {
      __label__ = 10;
    }
    if (__label__ == 9) {
      
      
      
      
      
      
      
      $tempMB = HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1192 >> 2];
      
      
      
      
      
      
      
      
      var $add31 = $pred_nnz + (HEAPU8[$tempMB + 380 + (20 + $i_addr) >> 0] & 255);
      $pred_nnz = $add31;
      
      var $inc32 = $cnt + 1;
      $cnt = $inc32;
    }
  }
  
  
  if (($cnt | 0) == 2) {
    __label__ = 12;
  } else {
    __label__ = 13;
  }
  if (__label__ == 12) {
    
    
    var $shr = $pred_nnz + 1 >> 1;
    $pred_nnz = $shr;
  }
  var $37 = $pred_nnz;
  STACKTOP = __stackBase__;
  return $37;
  return null;
}
function __Z24GetMotionVectorPredictorP12tagCommonObji($video, $encFlag) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $video_addr;
  var $encFlag_addr;
  var $currMB;
  var $MB_A;
  var $MB_B;
  var $MB_C;
  var $MB_D;
  var $block_x;
  var $block_y;
  var $block_x_1;
  var $block_y_1;
  var $new_block_x;
  var $mbPartIdx;
  var $subMbPartIdx;
  var $offset_indx;
  var $mv;
  var $pmv_x;
  var $pmv_y;
  var $nmSubMbHeight;
  var $nmSubMbWidth;
  var $mbPartIdx_X;
  var $mbPartIdx_Y;
  var $avail_a;
  var $avail_b;
  var $avail_c;
  var $i;
  var $j;
  var $offset_MbPart_indx;
  var $refIdxLXA;
  var $refIdxLXB;
  var $refIdxLXC;
  var $curr_ref_idx;
  var $pmv_A_x;
  var $pmv_B_x;
  var $pmv_C_x;
  var $pmv_A_y;
  var $pmv_B_y;
  var $pmv_C_y;
  $video_addr = $video;
  $encFlag_addr = $encFlag;
  
  
  
  $currMB = HEAP32[$video_addr + 912 >> 2];
  $refIdxLXC = 0;
  $pmv_C_x = 0;
  $pmv_C_y = 0;
  
  
  
  
  
  
  
  $MB_A = HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1188 >> 2];
  
  
  
  
  
  
  
  $MB_B = HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1192 >> 2];
  
  
  
  
  if ((HEAP32[$currMB + 164 >> 2] | 0) == 10) {
    __label__ = 1;
  } else {
    __label__ = 11;
  }
  $if_then$$if_end39$2 : do {
    if (__label__ == 1) {
      
      
      
      HEAP16[$currMB + 132 + 6 >> 1] = 0;
      
      
      
      HEAP16[$currMB + 132 + 4 >> 1] = 0;
      
      
      
      HEAP16[$currMB + 132 + 2 >> 1] = 0;
      
      
      
      HEAP16[$currMB + 132 >> 1] = 0;
      
      
      
      
      if ((HEAP32[$video_addr + 1204 >> 2] | 0) != 0) {
        __label__ = 2;
      } else {
        __label__ = 9;
      }
      $land_lhs_true$$if_else$4 : do {
        if (__label__ == 2) {
          
          
          
          var $tobool11 = (HEAP32[$video_addr + 1208 >> 2] | 0) != 0;
          if (!$tobool11) {
            __label__ = 9;
            break $land_lhs_true$$if_else$4;
          }
          
          
          
          
          var $conv = (tempInt = HEAP16[$MB_A + 132 + 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          if (($conv | 0) == 0) {
            __label__ = 4;
          } else {
            __label__ = 5;
          }
          $land_lhs_true16$$lor_lhs_false$7 : do {
            if (__label__ == 4) {
              
              
              
              
              
              if ((HEAP32[$MB_A + 4 + 12 >> 2] | 0) == 0) {
                __label__ = 7;
                break $land_lhs_true16$$lor_lhs_false$7;
              } else {
                __label__ = 5;
                break $land_lhs_true16$$lor_lhs_false$7;
              }
            }
          } while (0);
          $if_then27$$lor_lhs_false$9 : do {
            if (__label__ == 5) {
              
              
              
              
              var $conv21 = (tempInt = HEAP16[$MB_B + 132 + 4 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
              
              if (($conv21 | 0) == 0) {
                __label__ = 6;
              } else {
                __label__ = 8;
              }
              if (__label__ == 6) {
                
                
                
                
                
                if ((HEAP32[$MB_B + 4 + 48 >> 2] | 0) == 0) {
                  __label__ = 7;
                  break $if_then27$$lor_lhs_false$9;
                }
              }
              
              
              
              
              
              HEAP32[$video_addr + 932 >> 2] = 0;
              
              
              
              
              
              HEAP32[$video_addr + 932 + 4 >> 2] = 0;
              __label__ = 11;
              break $if_then$$if_end39$2;
            }
          } while (0);
          
          
          
          
          var $dest$, $stop$, $stop4$, $fast$, $value4$;
          $dest$ = $currMB + 4;
          $stop$ = $dest$ + 64;
          $value4$ = 0;
          if ($value4$ < 0) $value4$ += 256;
          $value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + $value4$ * 16777216;
          while ($dest$ % 4 !== 0 && $dest$ < $stop$) {
            HEAP8[$dest$++] = 0;
          }
          $dest$ >>= 2;
          $stop4$ = $stop$ >> 2;
          while ($dest$ < $stop4$) {
            HEAP32[$dest$++] = $value4$;
          }
          $dest$ <<= 2;
          while ($dest$ < $stop$) {
            HEAP8[$dest$++] = 0;
          }
          __label__ = 123;
          break $if_then$$if_end39$2;
        }
      } while (0);
      
      
      
      
      var $dest$, $stop$, $stop4$, $fast$, $value4$;
      $dest$ = $currMB + 4;
      $stop$ = $dest$ + 64;
      $value4$ = 0;
      if ($value4$ < 0) $value4$ += 256;
      $value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + $value4$ * 16777216;
      while ($dest$ % 4 !== 0 && $dest$ < $stop$) {
        HEAP8[$dest$++] = 0;
      }
      $dest$ >>= 2;
      $stop4$ = $stop$ >> 2;
      while ($dest$ < $stop4$) {
        HEAP32[$dest$++] = $value4$;
      }
      $dest$ <<= 2;
      while ($dest$ < $stop$) {
        HEAP8[$dest$++] = 0;
      }
      __label__ = 123;
      break $if_then$$if_end39$2;
    }
  } while (0);
  $for_end452$$if_end39$17 : do {
    if (__label__ == 11) {
      
      
      
      
      
      
      
      $MB_C = HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1196 >> 2];
      
      
      
      
      
      
      
      $MB_D = HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1200 >> 2];
      $offset_MbPart_indx = 0;
      $mbPartIdx = 0;
      $for_cond$19 : while (1) {
        
        
        
        
        var $cmp44 = ($mbPartIdx | 0) < (HEAP32[$currMB + 256 >> 2] | 0);
        if (!$cmp44) {
          __label__ = 123;
          break $for_end452$$if_end39$17;
        }
        $offset_indx = 0;
        
        
        
        
        
        
        $nmSubMbHeight = HEAP32[$currMB + 364 + $mbPartIdx * 4 >> 2] >> 2;
        
        
        
        
        
        
        $nmSubMbWidth = HEAP32[$currMB + 348 + $mbPartIdx * 4 >> 2] >> 2;
        
        
        
        
        
        $mbPartIdx_X = ($mbPartIdx + $offset_MbPart_indx & 1) << 1;
        
        
        
        
        $mbPartIdx_Y = $mbPartIdx + $offset_MbPart_indx & 2;
        $subMbPartIdx = 0;
        $for_cond50$22 : while (1) {
          
          
          
          
          
          
          var $cmp52 = ($subMbPartIdx | 0) < (HEAP32[$currMB + 332 + $mbPartIdx * 4 >> 2] | 0);
          if (!$cmp52) {
            __label__ = 121;
            break $for_cond50$22;
          }
          
          
          
          
          
          
          $block_x = $mbPartIdx_X + ($subMbPartIdx + $offset_indx & 1);
          
          
          
          
          
          
          
          $block_y = $mbPartIdx_Y + ($subMbPartIdx + $offset_indx >> 1 & 1);
          
          
          $block_x_1 = $block_x - 1;
          
          
          $block_y_1 = $block_y - 1;
          $refIdxLXC = -1;
          $refIdxLXB = -1;
          $refIdxLXA = -1;
          $pmv_C_y = 0;
          $pmv_C_x = 0;
          $pmv_B_y = 0;
          $pmv_B_x = 0;
          $pmv_A_y = 0;
          $pmv_A_x = 0;
          
          
          if (($block_x | 0) != 0) {
            __label__ = 16;
          } else {
            __label__ = 17;
          }
          if (__label__ == 16) {
            $avail_a = 1;
            
            
            
            
            
            
            
            
            
            var $conv69 = (tempInt = HEAP16[$currMB + 132 + (($block_y & 2) + ($block_x_1 >> 1)) * 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
            $refIdxLXA = $conv69;
            
            
            
            
            
            
            
            
            
            $mv = $currMB + 4 + 4 * ($block_y << 2) + 4 * $block_x_1;
            var $76 = $mv;
            var $incdec_ptr = $76 + 2;
            $mv = $incdec_ptr;
            
            var $conv74 = (tempInt = HEAP16[$76 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
            $pmv_A_x = $conv74;
            
            
            var $conv75 = (tempInt = HEAP16[$mv >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
            $pmv_A_y = $conv75;
          } else if (__label__ == 17) {
            
            
            
            $avail_a = HEAP32[$video_addr + 1204 >> 2];
            
            
            if (($avail_a | 0) != 0) {
              __label__ = 18;
            } else {
              __label__ = 19;
            }
            if (__label__ == 18) {
              
              
              
              
              
              
              
              var $conv84 = (tempInt = HEAP16[$MB_A + 132 + (($block_y & 2) + 1) * 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
              $refIdxLXA = $conv84;
              
              
              
              
              
              
              
              
              $mv = $MB_A + 4 + 4 * ($block_y << 2) + 12;
              var $89 = $mv;
              var $incdec_ptr90 = $89 + 2;
              $mv = $incdec_ptr90;
              
              var $conv91 = (tempInt = HEAP16[$89 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
              $pmv_A_x = $conv91;
              
              
              var $conv92 = (tempInt = HEAP16[$mv >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
              $pmv_A_y = $conv92;
            }
          }
          
          
          if (($block_y | 0) != 0) {
            __label__ = 21;
          } else {
            __label__ = 22;
          }
          if (__label__ == 21) {
            $avail_b = 1;
            
            
            
            
            
            
            
            
            
            var $conv102 = (tempInt = HEAP16[$currMB + 132 + (($block_y_1 & 2) + ($block_x >> 1)) * 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
            $refIdxLXB = $conv102;
            
            
            
            
            
            
            
            
            
            $mv = $currMB + 4 + 4 * ($block_y_1 << 2) + 4 * $block_x;
            var $102 = $mv;
            var $incdec_ptr108 = $102 + 2;
            $mv = $incdec_ptr108;
            
            var $conv109 = (tempInt = HEAP16[$102 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
            $pmv_B_x = $conv109;
            
            
            var $conv110 = (tempInt = HEAP16[$mv >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
            $pmv_B_y = $conv110;
          } else if (__label__ == 22) {
            
            
            
            $avail_b = HEAP32[$video_addr + 1208 >> 2];
            
            
            if (($avail_b | 0) != 0) {
              __label__ = 23;
            } else {
              __label__ = 24;
            }
            if (__label__ == 23) {
              
              
              
              
              
              
              
              var $conv119 = (tempInt = HEAP16[$MB_B + 132 + (2 + ($block_x >> 1)) * 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
              $refIdxLXB = $conv119;
              
              
              
              
              
              
              
              $mv = $MB_B + 4 + 48 + 4 * $block_x;
              var $115 = $mv;
              var $incdec_ptr124 = $115 + 2;
              $mv = $incdec_ptr124;
              
              var $conv125 = (tempInt = HEAP16[$115 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
              $pmv_B_x = $conv125;
              
              
              var $conv126 = (tempInt = HEAP16[$mv >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
              $pmv_B_y = $conv126;
            }
          }
          
          
          
          
          
          
          
          
          
          $new_block_x = $block_x + (HEAP32[$currMB + 348 + $mbPartIdx * 4 >> 2] >> 2) - 1;
          
          
          
          
          
          
          $avail_c = 22352 >>> (($block_y << 2) + $new_block_x >>> 0) & 1;
          
          
          if (($avail_c | 0) != 0) {
            __label__ = 26;
          } else {
            __label__ = 27;
          }
          if (__label__ == 26) {
            
            
            
            
            
            
            
            
            
            
            var $conv146 = (tempInt = HEAP16[$currMB + 132 + (($block_y_1 & 2) + ($new_block_x + 1 >> 1)) * 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
            $refIdxLXC = $conv146;
            
            
            
            
            
            
            
            
            
            
            $mv = $currMB + 4 + 4 * ($block_y_1 << 2) + 4 * ($new_block_x + 1);
            var $134 = $mv;
            var $incdec_ptr153 = $134 + 2;
            $mv = $incdec_ptr153;
            
            var $conv154 = (tempInt = HEAP16[$134 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
            $pmv_C_x = $conv154;
            
            
            var $conv155 = (tempInt = HEAP16[$mv >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
            $pmv_C_y = $conv155;
          } else if (__label__ == 27) {
            
            
            if (($block_y | 0) == 0) {
              __label__ = 28;
            } else {
              __label__ = 32;
            }
            $land_lhs_true158$$if_else179$42 : do {
              if (__label__ == 28) {
                
                var $cmp159 = ($new_block_x | 0) < 3;
                if (!$cmp159) {
                  __label__ = 32;
                  break $land_lhs_true158$$if_else179$42;
                }
                
                
                
                $avail_c = HEAP32[$video_addr + 1208 >> 2];
                
                
                if (($avail_c | 0) != 0) {
                  __label__ = 30;
                } else {
                  __label__ = 31;
                }
                if (__label__ == 30) {
                  
                  
                  
                  
                  
                  
                  
                  
                  var $conv169 = (tempInt = HEAP16[$MB_B + 132 + (2 + ($new_block_x + 1 >> 1)) * 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                  $refIdxLXC = $conv169;
                  
                  
                  
                  
                  
                  
                  
                  
                  $mv = $MB_B + 4 + 48 + 4 * ($new_block_x + 1);
                  var $149 = $mv;
                  var $incdec_ptr175 = $149 + 2;
                  $mv = $incdec_ptr175;
                  
                  var $conv176 = (tempInt = HEAP16[$149 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                  $pmv_C_x = $conv176;
                  
                  
                  var $conv177 = (tempInt = HEAP16[$mv >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                  $pmv_C_y = $conv177;
                }
                __label__ = 38;
                break $land_lhs_true158$$if_else179$42;
              }
            } while (0);
            if (__label__ == 32) {
              
              
              if (($block_y | 0) == 0) {
                __label__ = 33;
              } else {
                __label__ = 37;
              }
              $land_lhs_true181$$if_end196$50 : do {
                if (__label__ == 33) {
                  
                  var $cmp182 = ($new_block_x | 0) == 3;
                  if (!$cmp182) {
                    __label__ = 37;
                    break $land_lhs_true181$$if_end196$50;
                  }
                  
                  
                  
                  $avail_c = HEAP32[$video_addr + 1212 >> 2];
                  
                  
                  if (($avail_c | 0) != 0) {
                    __label__ = 35;
                  } else {
                    __label__ = 36;
                  }
                  if (__label__ == 35) {
                    
                    
                    
                    
                    var $conv188 = (tempInt = HEAP16[$MB_C + 132 + 4 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                    $refIdxLXC = $conv188;
                    
                    
                    
                    
                    
                    $mv = $MB_C + 4 + 48;
                    var $162 = $mv;
                    var $incdec_ptr192 = $162 + 2;
                    $mv = $incdec_ptr192;
                    
                    var $conv193 = (tempInt = HEAP16[$162 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                    $pmv_C_x = $conv193;
                    
                    
                    var $conv194 = (tempInt = HEAP16[$mv >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                    $pmv_C_y = $conv194;
                  }
                }
              } while (0);
            }
            
            
            if (($avail_c | 0) == 0) {
              __label__ = 39;
            } else {
              __label__ = 56;
            }
            if (__label__ == 39) {
              
              
              if (($block_x | 0) != 0) {
                __label__ = 40;
              } else {
                __label__ = 42;
              }
              $land_lhs_true201$$if_else218$60 : do {
                if (__label__ == 40) {
                  
                  var $tobool202 = ($block_y | 0) != 0;
                  if (!$tobool202) {
                    __label__ = 42;
                    break $land_lhs_true201$$if_else218$60;
                  }
                  $avail_c = 1;
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  var $conv209 = (tempInt = HEAP16[$currMB + 132 + (($block_y_1 & 2) + ($block_x_1 >> 1)) * 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                  $refIdxLXC = $conv209;
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  $mv = $currMB + 4 + 4 * ($block_y_1 << 2) + 4 * $block_x_1;
                  var $177 = $mv;
                  var $incdec_ptr215 = $177 + 2;
                  $mv = $incdec_ptr215;
                  
                  var $conv216 = (tempInt = HEAP16[$177 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                  $pmv_C_x = $conv216;
                  
                  
                  var $conv217 = (tempInt = HEAP16[$mv >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                  $pmv_C_y = $conv217;
                  __label__ = 55;
                  break $land_lhs_true201$$if_else218$60;
                }
              } while (0);
              if (__label__ == 42) {
                
                
                if (($block_y | 0) != 0) {
                  __label__ = 43;
                } else {
                  __label__ = 46;
                }
                if (__label__ == 43) {
                  
                  
                  
                  $avail_c = HEAP32[$video_addr + 1204 >> 2];
                  
                  
                  if (($avail_c | 0) != 0) {
                    __label__ = 44;
                  } else {
                    __label__ = 45;
                  }
                  if (__label__ == 44) {
                    
                    
                    
                    
                    
                    
                    
                    var $conv228 = (tempInt = HEAP16[$MB_A + 132 + (($block_y_1 & 2) + 1) * 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                    $refIdxLXC = $conv228;
                    
                    
                    
                    
                    
                    
                    
                    
                    $mv = $MB_A + 4 + 4 * ($block_y_1 << 2) + 12;
                    var $191 = $mv;
                    var $incdec_ptr234 = $191 + 2;
                    $mv = $incdec_ptr234;
                    
                    var $conv235 = (tempInt = HEAP16[$191 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                    $pmv_C_x = $conv235;
                    
                    
                    var $conv236 = (tempInt = HEAP16[$mv >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                    $pmv_C_y = $conv236;
                  }
                } else if (__label__ == 46) {
                  
                  
                  if (($block_x | 0) != 0) {
                    __label__ = 47;
                  } else {
                    __label__ = 50;
                  }
                  if (__label__ == 47) {
                    
                    
                    
                    $avail_c = HEAP32[$video_addr + 1208 >> 2];
                    
                    
                    if (($avail_c | 0) != 0) {
                      __label__ = 48;
                    } else {
                      __label__ = 49;
                    }
                    if (__label__ == 48) {
                      
                      
                      
                      
                      
                      
                      
                      var $conv248 = (tempInt = HEAP16[$MB_B + 132 + (2 + ($block_x_1 >> 1)) * 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                      $refIdxLXC = $conv248;
                      
                      
                      
                      
                      
                      
                      
                      $mv = $MB_B + 4 + 48 + 4 * $block_x_1;
                      var $205 = $mv;
                      var $incdec_ptr253 = $205 + 2;
                      $mv = $incdec_ptr253;
                      
                      var $conv254 = (tempInt = HEAP16[$205 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                      $pmv_C_x = $conv254;
                      
                      
                      var $conv255 = (tempInt = HEAP16[$mv >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                      $pmv_C_y = $conv255;
                    }
                  } else if (__label__ == 50) {
                    
                    
                    
                    $avail_c = HEAP32[$video_addr + 1216 >> 2];
                    
                    
                    if (($avail_c | 0) != 0) {
                      __label__ = 51;
                    } else {
                      __label__ = 52;
                    }
                    if (__label__ == 51) {
                      
                      
                      
                      
                      var $conv262 = (tempInt = HEAP16[$MB_D + 132 + 6 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                      $refIdxLXC = $conv262;
                      
                      
                      
                      
                      
                      $mv = $MB_D + 4 + 60;
                      var $216 = $mv;
                      var $incdec_ptr266 = $216 + 2;
                      $mv = $incdec_ptr266;
                      
                      var $conv267 = (tempInt = HEAP16[$216 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                      $pmv_C_x = $conv267;
                      
                      
                      var $conv268 = (tempInt = HEAP16[$mv >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
                      $pmv_C_y = $conv268;
                    }
                  }
                }
              }
            }
          }
          
          
          
          
          
          
          $offset_indx = HEAP32[$currMB + 348 + $mbPartIdx * 4 >> 2] >> 3;
          
          
          
          
          
          
          
          
          
          var $conv283 = (tempInt = HEAP16[$currMB + 132 + (($block_y & 2) + ($block_x >> 1)) * 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          $curr_ref_idx = $conv283;
          
          
          if (($avail_a | 0) != 0) {
            __label__ = 58;
          } else {
            __label__ = 61;
          }
          $land_lhs_true285$$if_else292$85 : do {
            if (__label__ == 58) {
              
              
              if (($avail_b | 0) != 0) {
                __label__ = 61;
                break $land_lhs_true285$$if_else292$85;
              }
              
              
              if (($avail_c | 0) != 0) {
                __label__ = 61;
                break $land_lhs_true285$$if_else292$85;
              }
              
              
              $pmv_x = $pmv_A_x & 65535;
              
              
              $pmv_y = $pmv_A_y & 65535;
              __label__ = 89;
              break $land_lhs_true285$$if_else292$85;
            }
          } while (0);
          if (__label__ == 61) {
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            if (((($curr_ref_idx | 0) == ($refIdxLXA | 0) & 1) + (($curr_ref_idx | 0) == ($refIdxLXB | 0) & 1) + (($curr_ref_idx | 0) == ($refIdxLXC | 0) & 1) | 0) == 1) {
              __label__ = 62;
            } else {
              __label__ = 69;
            }
            if (__label__ == 62) {
              
              
              
              if (($curr_ref_idx | 0) == ($refIdxLXA | 0)) {
                __label__ = 63;
              } else {
                __label__ = 64;
              }
              if (__label__ == 63) {
                
                
                $pmv_x = $pmv_A_x & 65535;
                
                
                $pmv_y = $pmv_A_y & 65535;
              } else if (__label__ == 64) {
                
                
                
                if (($curr_ref_idx | 0) == ($refIdxLXB | 0)) {
                  __label__ = 65;
                } else {
                  __label__ = 66;
                }
                if (__label__ == 65) {
                  
                  
                  $pmv_x = $pmv_B_x & 65535;
                  
                  
                  $pmv_y = $pmv_B_y & 65535;
                } else if (__label__ == 66) {
                  
                  
                  $pmv_x = $pmv_C_x & 65535;
                  
                  
                  $pmv_y = $pmv_C_y & 65535;
                }
              }
            } else if (__label__ == 69) {
              
              
              
              if (($pmv_A_x | 0) > ($pmv_B_x | 0)) {
                __label__ = 70;
              } else {
                __label__ = 74;
              }
              if (__label__ == 70) {
                
                
                
                if (($pmv_A_x | 0) < ($pmv_C_x | 0)) {
                  __label__ = 71;
                } else {
                  __label__ = 72;
                }
                if (__label__ == 71) {
                  var $252 = $pmv_A_x;
                  __lastLabel__ = 71;
                } else if (__label__ == 72) {
                  
                  
                  
                  
                  
                  var $cond = ($pmv_B_x | 0) > ($pmv_C_x | 0) ? $pmv_B_x : $pmv_C_x;
                  __lastLabel__ = 72;
                }
                var $cond322 = __lastLabel__ == 71 ? $252 : $cond;
                __lastLabel__ = 73;
              } else if (__label__ == 74) {
                
                
                
                if (($pmv_B_x | 0) < ($pmv_C_x | 0)) {
                  __label__ = 75;
                } else {
                  __label__ = 76;
                }
                if (__label__ == 75) {
                  var $259 = $pmv_B_x;
                  __lastLabel__ = 75;
                } else if (__label__ == 76) {
                  
                  
                  
                  
                  
                  var $cond328 = ($pmv_C_x | 0) > ($pmv_A_x | 0) ? $pmv_C_x : $pmv_A_x;
                  __lastLabel__ = 76;
                }
                var $cond330 = __lastLabel__ == 75 ? $259 : $cond328;
                __lastLabel__ = 77;
              }
              var $cond332 = __lastLabel__ == 73 ? $cond322 : $cond330;
              
              $pmv_x = $cond332 & 65535;
              
              
              
              if (($pmv_A_y | 0) > ($pmv_B_y | 0)) {
                __label__ = 79;
              } else {
                __label__ = 83;
              }
              if (__label__ == 79) {
                
                
                
                if (($pmv_A_y | 0) < ($pmv_C_y | 0)) {
                  __label__ = 80;
                } else {
                  __label__ = 81;
                }
                if (__label__ == 80) {
                  var $268 = $pmv_A_y;
                  __lastLabel__ = 80;
                } else if (__label__ == 81) {
                  
                  
                  
                  
                  
                  var $cond340 = ($pmv_B_y | 0) > ($pmv_C_y | 0) ? $pmv_B_y : $pmv_C_y;
                  __lastLabel__ = 81;
                }
                var $cond342 = __lastLabel__ == 80 ? $268 : $cond340;
                __lastLabel__ = 82;
              } else if (__label__ == 83) {
                
                
                
                if (($pmv_B_y | 0) < ($pmv_C_y | 0)) {
                  __label__ = 84;
                } else {
                  __label__ = 85;
                }
                if (__label__ == 84) {
                  var $275 = $pmv_B_y;
                  __lastLabel__ = 84;
                } else if (__label__ == 85) {
                  
                  
                  
                  
                  
                  var $cond348 = ($pmv_C_y | 0) > ($pmv_A_y | 0) ? $pmv_C_y : $pmv_A_y;
                  __lastLabel__ = 85;
                }
                var $cond350 = __lastLabel__ == 84 ? $275 : $cond348;
                __lastLabel__ = 86;
              }
              var $cond352 = __lastLabel__ == 82 ? $cond342 : $cond350;
              
              $pmv_y = $cond352 & 65535;
            }
          }
          
          
          
          
          if ((HEAP32[$currMB + 256 >> 2] | 0) == 2) {
            __label__ = 90;
          } else {
            __label__ = 108;
          }
          if (__label__ == 90) {
            
            
            
            
            if ((HEAP32[$currMB + 324 >> 2] | 0) == 16) {
              __label__ = 91;
            } else {
              __label__ = 99;
            }
            if (__label__ == 91) {
              
              
              if (($mbPartIdx | 0) == 0) {
                __label__ = 92;
              } else {
                __label__ = 95;
              }
              if (__label__ == 92) {
                
                
                
                if (($refIdxLXB | 0) == ($curr_ref_idx | 0)) {
                  __label__ = 93;
                } else {
                  __label__ = 94;
                }
                if (__label__ == 93) {
                  
                  
                  $pmv_x = $pmv_B_x & 65535;
                  
                  
                  $pmv_y = $pmv_B_y & 65535;
                }
              } else if (__label__ == 95) {
                
                
                
                if (($refIdxLXA | 0) == ($curr_ref_idx | 0)) {
                  __label__ = 96;
                } else {
                  __label__ = 97;
                }
                if (__label__ == 96) {
                  
                  
                  $pmv_x = $pmv_A_x & 65535;
                  
                  
                  $pmv_y = $pmv_A_y & 65535;
                }
              }
            } else if (__label__ == 99) {
              
              
              if (($mbPartIdx | 0) == 0) {
                __label__ = 100;
              } else {
                __label__ = 103;
              }
              if (__label__ == 100) {
                
                
                
                if (($refIdxLXA | 0) == ($curr_ref_idx | 0)) {
                  __label__ = 101;
                } else {
                  __label__ = 102;
                }
                if (__label__ == 101) {
                  
                  
                  $pmv_x = $pmv_A_x & 65535;
                  
                  
                  $pmv_y = $pmv_A_y & 65535;
                }
              } else if (__label__ == 103) {
                
                
                
                if (($refIdxLXC | 0) == ($curr_ref_idx | 0)) {
                  __label__ = 104;
                } else {
                  __label__ = 105;
                }
                if (__label__ == 104) {
                  
                  
                  $pmv_x = $pmv_C_x & 65535;
                  
                  
                  $pmv_y = $pmv_C_y & 65535;
                }
              }
            }
          }
          
          
          
          
          
          
          
          
          
          $mv = $currMB + 4 + 4 * $block_x + 4 * ($block_y << 2);
          
          
          if (($encFlag_addr | 0) != 0) {
            __label__ = 109;
          } else {
            __label__ = 110;
          }
          if (__label__ == 109) {
            var $307 = $mv;
            var $incdec_ptr399 = $307 + 2;
            $mv = $incdec_ptr399;
            
            var $conv400 = (tempInt = HEAP16[$307 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
            
            var $conv401 = (tempInt = $pmv_x, tempInt >= 32768 ? tempInt - 65536 : tempInt);
            
            
            
            
            
            
            
            
            HEAP32[$video_addr + 932 + $mbPartIdx * 32 + $subMbPartIdx * 8 >> 2] = $conv400 - $conv401;
            var $313 = $mv;
            var $incdec_ptr407 = $313 + 2;
            $mv = $incdec_ptr407;
            
            var $conv408 = (tempInt = HEAP16[$313 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
            
            var $conv409 = (tempInt = $pmv_y, tempInt >= 32768 ? tempInt - 65536 : tempInt);
            
            
            
            
            
            
            
            
            HEAP32[$video_addr + 932 + $mbPartIdx * 32 + $subMbPartIdx * 8 + 4 >> 2] = $conv408 - $conv409;
          } else if (__label__ == 110) {
            
            
            
            
            
            
            
            var $322 = HEAP32[$video_addr + 932 + $mbPartIdx * 32 + $subMbPartIdx * 8 >> 2];
            
            var $conv420 = (tempInt = $pmv_x, tempInt >= 32768 ? tempInt - 65536 : tempInt);
            
            var $conv422 = $conv420 + $322 & 65535;
            $pmv_x = $conv422;
            
            
            
            
            
            
            
            var $327 = HEAP32[$video_addr + 932 + $mbPartIdx * 32 + $subMbPartIdx * 8 + 4 >> 2];
            
            var $conv427 = (tempInt = $pmv_y, tempInt >= 32768 ? tempInt - 65536 : tempInt);
            
            var $conv429 = $conv427 + $327 & 65535;
            $pmv_y = $conv429;
            $i = 0;
            $for_cond430$158 : while (1) {
              
              
              var $cmp431 = ($i | 0) < ($nmSubMbHeight | 0);
              if (!$cmp431) {
                __label__ = 118;
                break $for_cond430$158;
              }
              $j = 0;
              while (1) {
                
                
                var $cmp434 = ($j | 0) < ($nmSubMbWidth | 0);
                if (!$cmp434) {
                  __label__ = 116;
                  break;
                }
                
                var $334 = $mv;
                var $incdec_ptr436 = $334 + 2;
                $mv = $incdec_ptr436;
                HEAP16[$334 >> 1] = $pmv_x;
                
                var $336 = $mv;
                var $incdec_ptr437 = $336 + 2;
                $mv = $incdec_ptr437;
                HEAP16[$336 >> 1] = $pmv_y;
                
                var $inc = $j + 1;
                $j = $inc;
                __label__ = 113;
                continue;
              }
              
              
              
              
              var $add_ptr440 = $mv + 2 * (8 - ($j << 1));
              $mv = $add_ptr440;
              
              var $inc442 = $i + 1;
              $i = $inc442;
              __label__ = 111;
              continue $for_cond430$158;
            }
          }
          
          var $inc446 = $subMbPartIdx + 1;
          $subMbPartIdx = $inc446;
          __label__ = 14;
          continue $for_cond50$22;
        }
        
        
        
        
        $offset_MbPart_indx = HEAP32[$currMB + 324 >> 2] >> 4;
        
        var $inc451 = $mbPartIdx + 1;
        $mbPartIdx = $inc451;
        __label__ = 12;
        continue $for_cond$19;
      }
    }
  } while (0);
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z14Intra16DCTransPsii($block, $Qq, $Rq) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $block_addr;
  var $Qq_addr;
  var $Rq_addr;
  var $m0;
  var $m1;
  var $m2;
  var $m3;
  var $j;
  var $offset;
  var $inout;
  var $scale;
  $block_addr = $block;
  $Qq_addr = $Qq;
  $Rq_addr = $Rq;
  
  
  
  
  $scale = HEAP32[__ZL15dequant_coefres + $Rq_addr * 64 >> 2];
  
  $inout = $block_addr;
  $j = 0;
  $for_cond$2 : while (1) {
    
    var $cmp = ($j | 0) < 4;
    if (!$cmp) {
      __label__ = 4;
      break $for_cond$2;
    }
    
    
    
    var $conv = (tempInt = HEAP16[$inout >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    
    var $conv4 = (tempInt = HEAP16[$inout + 8 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    $m0 = $conv + $conv4;
    
    
    
    var $conv6 = (tempInt = HEAP16[$inout >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    
    var $conv8 = (tempInt = HEAP16[$inout + 8 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    $m1 = $conv6 - $conv8;
    
    
    
    var $conv10 = (tempInt = HEAP16[$inout + 16 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    
    var $conv12 = (tempInt = HEAP16[$inout + 24 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    $m2 = $conv10 + $conv12;
    
    
    
    var $conv15 = (tempInt = HEAP16[$inout + 16 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    
    var $conv17 = (tempInt = HEAP16[$inout + 24 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    $m3 = $conv15 - $conv17;
    
    
    
    
    
    
    HEAP16[$inout >> 1] = $m0 + $m2 & 65535;
    
    
    
    
    
    
    HEAP16[$inout + 8 >> 1] = $m0 - $m2 & 65535;
    
    
    
    
    
    
    HEAP16[$inout + 16 >> 1] = $m1 - $m3 & 65535;
    
    
    
    
    
    
    HEAP16[$inout + 24 >> 1] = $m1 + $m3 & 65535;
    
    var $add_ptr = $inout + 128;
    $inout = $add_ptr;
    
    var $inc = $j + 1;
    $j = $inc;
    __label__ = 1;
    continue $for_cond$2;
  }
  
  $inout = $block_addr;
  
  
  if (($Qq_addr | 0) >= 2) {
    __label__ = 5;
  } else {
    __label__ = 10;
  }
  if (__label__ == 5) {
    
    var $sub32 = $Qq_addr - 2;
    $Qq_addr = $sub32;
    $j = 0;
    while (1) {
      
      var $cmp34 = ($j | 0) < 4;
      if (!$cmp34) {
        __label__ = 9;
        break;
      }
      
      
      
      var $conv37 = (tempInt = HEAP16[$inout >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      
      
      var $conv39 = (tempInt = HEAP16[$inout + 128 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      $m0 = $conv37 + $conv39;
      
      
      
      var $conv42 = (tempInt = HEAP16[$inout >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      
      
      var $conv44 = (tempInt = HEAP16[$inout + 128 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      $m1 = $conv42 - $conv44;
      
      
      
      var $conv47 = (tempInt = HEAP16[$inout + 256 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      
      
      var $conv49 = (tempInt = HEAP16[$inout + 384 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      $m2 = $conv47 + $conv49;
      
      
      
      var $conv52 = (tempInt = HEAP16[$inout + 256 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      
      
      var $conv54 = (tempInt = HEAP16[$inout + 384 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      $m3 = $conv52 - $conv54;
      
      
      
      
      
      
      
      
      
      
      HEAP16[$inout >> 1] = ($m0 + $m2) * $scale << $Qq_addr & 65535;
      
      
      
      
      
      
      
      
      
      
      HEAP16[$inout + 128 >> 1] = ($m0 - $m2) * $scale << $Qq_addr & 65535;
      
      
      
      
      
      
      
      
      
      
      HEAP16[$inout + 256 >> 1] = ($m1 - $m3) * $scale << $Qq_addr & 65535;
      
      
      
      
      
      
      
      
      
      
      HEAP16[$inout + 384 >> 1] = ($m1 + $m3) * $scale << $Qq_addr & 65535;
      
      var $add_ptr74 = $inout + 8;
      $inout = $add_ptr74;
      
      var $inc76 = $j + 1;
      $j = $inc76;
      __label__ = 6;
      continue;
    }
  } else if (__label__ == 10) {
    
    var $sub78 = 2 - $Qq_addr;
    $Qq_addr = $sub78;
    
    
    
    $offset = 1 << $Qq_addr - 1;
    $j = 0;
    while (1) {
      
      var $cmp82 = ($j | 0) < 4;
      if (!$cmp82) {
        __label__ = 14;
        break;
      }
      
      
      
      var $conv85 = (tempInt = HEAP16[$inout >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      
      
      var $conv87 = (tempInt = HEAP16[$inout + 128 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      $m0 = $conv85 + $conv87;
      
      
      
      var $conv90 = (tempInt = HEAP16[$inout >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      
      
      var $conv92 = (tempInt = HEAP16[$inout + 128 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      $m1 = $conv90 - $conv92;
      
      
      
      var $conv95 = (tempInt = HEAP16[$inout + 256 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      
      
      var $conv97 = (tempInt = HEAP16[$inout + 384 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      $m2 = $conv95 + $conv97;
      
      
      
      var $conv100 = (tempInt = HEAP16[$inout + 256 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      
      
      var $conv102 = (tempInt = HEAP16[$inout + 384 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      $m3 = $conv100 - $conv102;
      
      
      
      
      
      
      
      
      
      
      
      
      HEAP16[$inout >> 1] = ($m0 + $m2) * $scale + $offset >> ($Qq_addr | 0) & 65535;
      
      
      
      
      
      
      
      
      
      
      
      
      HEAP16[$inout + 128 >> 1] = ($m0 - $m2) * $scale + $offset >> ($Qq_addr | 0) & 65535;
      
      
      
      
      
      
      
      
      
      
      
      
      HEAP16[$inout + 256 >> 1] = ($m1 - $m3) * $scale + $offset >> ($Qq_addr | 0) & 65535;
      
      
      
      
      
      
      
      
      
      
      
      
      HEAP16[$inout + 384 >> 1] = ($m1 + $m3) * $scale + $offset >> ($Qq_addr | 0) & 65535;
      
      var $add_ptr127 = $inout + 8;
      $inout = $add_ptr127;
      
      var $inc129 = $j + 1;
      $j = $inc129;
      __label__ = 11;
      continue;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z6itransPsPhS0_i($block, $pred, $cur, $width) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $block_addr;
  var $pred_addr;
  var $cur_addr;
  var $width_addr;
  var $e0;
  var $e1;
  var $e2;
  var $e3;
  var $i;
  var $inout;
  $block_addr = $block;
  $pred_addr = $pred;
  $cur_addr = $cur;
  $width_addr = $width;
  
  $inout = $block_addr;
  $i = 4;
  $for_cond$2 : while (1) {
    
    var $cmp = ($i | 0) > 0;
    if (!$cmp) {
      __label__ = 4;
      break $for_cond$2;
    }
    
    
    
    var $conv = (tempInt = HEAP16[$inout >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    
    var $conv2 = (tempInt = HEAP16[$inout + 4 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    $e0 = $conv + $conv2;
    
    
    
    var $conv4 = (tempInt = HEAP16[$inout >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    
    var $conv6 = (tempInt = HEAP16[$inout + 4 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    $e1 = $conv4 - $conv6;
    
    
    
    var $conv8 = (tempInt = HEAP16[$inout + 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    var $shr = $conv8 >> 1;
    
    
    
    var $conv10 = (tempInt = HEAP16[$inout + 6 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    $e2 = $shr - $conv10;
    
    
    
    var $conv13 = (tempInt = HEAP16[$inout + 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    
    var $conv15 = (tempInt = HEAP16[$inout + 6 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    $e3 = $conv13 + ($conv15 >> 1);
    
    
    
    
    
    
    HEAP16[$inout >> 1] = $e0 + $e3 & 65535;
    
    
    
    
    
    
    HEAP16[$inout + 2 >> 1] = $e1 + $e2 & 65535;
    
    
    
    
    
    
    HEAP16[$inout + 4 >> 1] = $e1 - $e2 & 65535;
    
    
    
    
    
    
    HEAP16[$inout + 6 >> 1] = $e0 - $e3 & 65535;
    
    var $add_ptr = $inout + 32;
    $inout = $add_ptr;
    
    var $dec = $i + -1;
    $i = $dec;
    __label__ = 1;
    continue $for_cond$2;
  }
  $i = 4;
  while (1) {
    
    var $cmp31 = ($i | 0) > 0;
    if (!$cmp31) {
      __label__ = 16;
      break;
    }
    
    
    
    var $conv34 = (tempInt = HEAP16[$block_addr >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    
    var $conv36 = (tempInt = HEAP16[$block_addr + 64 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    $e0 = $conv34 + $conv36;
    
    
    
    var $conv39 = (tempInt = HEAP16[$block_addr >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    
    var $conv41 = (tempInt = HEAP16[$block_addr + 64 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    $e1 = $conv39 - $conv41;
    
    
    
    var $conv44 = (tempInt = HEAP16[$block_addr + 32 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    var $shr45 = $conv44 >> 1;
    
    
    
    var $conv47 = (tempInt = HEAP16[$block_addr + 96 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    $e2 = $shr45 - $conv47;
    
    
    
    var $conv50 = (tempInt = HEAP16[$block_addr + 32 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    
    var $conv52 = (tempInt = HEAP16[$block_addr + 96 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    $e3 = $conv50 + ($conv52 >> 1);
    
    
    var $add55 = $e0 + $e3;
    $e0 = $add55;
    
    
    
    var $sub56 = $e0 - ($e3 << 1);
    $e3 = $sub56;
    
    
    var $add57 = $e1 + $e2;
    $e1 = $add57;
    
    
    
    var $sub59 = $e1 - ($e2 << 1);
    $e2 = $sub59;
    
    var $add60 = $e0 + 32;
    $e0 = $add60;
    
    var $add61 = $e1 + 32;
    $e1 = $add61;
    
    var $add62 = $e2 + 32;
    $e2 = $add62;
    
    var $add63 = $e3 + 32;
    $e3 = $add63;
    
    
    
    
    
    var $add66 = (HEAPU8[$cur_addr >> 0] & 255) + ($e0 >> 6);
    $e0 = $add66;
    
    
    if ($e0 >>> 0 > 255) {
      __label__ = 7;
    } else {
      __label__ = 8;
    }
    if (__label__ == 7) {
      
      
      var $neg = $e0 >> 31 ^ -1;
      var $and = 255 & $neg;
      $e0 = $and;
    }
    
    
    
    HEAP8[$cur_addr >> 0] = $e0 & 255;
    
    
    var $add_ptr70 = $cur_addr + $width_addr;
    $cur_addr = $add_ptr70;
    
    
    
    
    var $add73 = (HEAPU8[$add_ptr70 >> 0] & 255) + ($e1 >> 6);
    $e1 = $add73;
    
    
    if ($e1 >>> 0 > 255) {
      __label__ = 9;
    } else {
      __label__ = 10;
    }
    if (__label__ == 9) {
      
      
      var $neg77 = $e1 >> 31 ^ -1;
      var $and78 = 255 & $neg77;
      $e1 = $and78;
    }
    
    
    
    HEAP8[$cur_addr >> 0] = $e1 & 255;
    
    
    var $add_ptr81 = $cur_addr + $width_addr;
    $cur_addr = $add_ptr81;
    
    
    
    
    var $add84 = (HEAPU8[$add_ptr81 >> 0] & 255) + ($e2 >> 6);
    $e2 = $add84;
    
    
    if ($e2 >>> 0 > 255) {
      __label__ = 11;
    } else {
      __label__ = 12;
    }
    if (__label__ == 11) {
      
      
      var $neg88 = $e2 >> 31 ^ -1;
      var $and89 = 255 & $neg88;
      $e2 = $and89;
    }
    
    
    
    HEAP8[$cur_addr >> 0] = $e2 & 255;
    
    
    
    
    
    
    
    var $add95 = (HEAPU8[$cur_addr + $width_addr >> 0] & 255) + ($e3 >> 6);
    $e3 = $add95;
    
    
    if ($e3 >>> 0 > 255) {
      __label__ = 13;
    } else {
      __label__ = 14;
    }
    if (__label__ == 13) {
      
      
      var $neg99 = $e3 >> 31 ^ -1;
      var $and100 = 255 & $neg99;
      $e3 = $and100;
    }
    
    
    
    
    
    HEAP8[$cur_addr + $width_addr >> 0] = $e3 & 255;
    
    
    
    
    var $add_ptr105 = $cur_addr + (0 - ($width_addr << 1));
    $cur_addr = $add_ptr105;
    
    var $incdec_ptr = $cur_addr + 1;
    $cur_addr = $incdec_ptr;
    
    var $incdec_ptr106 = $block_addr + 2;
    $block_addr = $incdec_ptr106;
    
    var $dec108 = $i + -1;
    $i = $dec108;
    __label__ = 5;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z7ictransPsPhS0_i($block, $pred, $cur, $width) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $block_addr;
  var $pred_addr;
  var $cur_addr;
  var $width_addr;
  var $e0;
  var $e1;
  var $e2;
  var $e3;
  var $i;
  var $inout;
  $block_addr = $block;
  $pred_addr = $pred;
  $cur_addr = $cur;
  $width_addr = $width;
  
  $inout = $block_addr;
  $i = 4;
  $for_cond$2 : while (1) {
    
    var $cmp = ($i | 0) > 0;
    if (!$cmp) {
      __label__ = 4;
      break $for_cond$2;
    }
    
    
    
    var $conv = (tempInt = HEAP16[$inout >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    
    var $conv2 = (tempInt = HEAP16[$inout + 4 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    $e0 = $conv + $conv2;
    
    
    
    var $conv4 = (tempInt = HEAP16[$inout >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    
    var $conv6 = (tempInt = HEAP16[$inout + 4 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    $e1 = $conv4 - $conv6;
    
    
    
    var $conv8 = (tempInt = HEAP16[$inout + 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    var $shr = $conv8 >> 1;
    
    
    
    var $conv10 = (tempInt = HEAP16[$inout + 6 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    $e2 = $shr - $conv10;
    
    
    
    var $conv13 = (tempInt = HEAP16[$inout + 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    
    var $conv15 = (tempInt = HEAP16[$inout + 6 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    $e3 = $conv13 + ($conv15 >> 1);
    
    
    
    
    
    
    HEAP16[$inout >> 1] = $e0 + $e3 & 65535;
    
    
    
    
    
    
    HEAP16[$inout + 2 >> 1] = $e1 + $e2 & 65535;
    
    
    
    
    
    
    HEAP16[$inout + 4 >> 1] = $e1 - $e2 & 65535;
    
    
    
    
    
    
    HEAP16[$inout + 6 >> 1] = $e0 - $e3 & 65535;
    
    var $add_ptr = $inout + 32;
    $inout = $add_ptr;
    
    var $dec = $i + -1;
    $i = $dec;
    __label__ = 1;
    continue $for_cond$2;
  }
  $i = 4;
  while (1) {
    
    var $cmp31 = ($i | 0) > 0;
    if (!$cmp31) {
      __label__ = 16;
      break;
    }
    
    
    
    var $conv34 = (tempInt = HEAP16[$block_addr >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    
    var $conv36 = (tempInt = HEAP16[$block_addr + 64 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    $e0 = $conv34 + $conv36;
    
    
    
    var $conv39 = (tempInt = HEAP16[$block_addr >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    
    var $conv41 = (tempInt = HEAP16[$block_addr + 64 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    $e1 = $conv39 - $conv41;
    
    
    
    var $conv44 = (tempInt = HEAP16[$block_addr + 32 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    var $shr45 = $conv44 >> 1;
    
    
    
    var $conv47 = (tempInt = HEAP16[$block_addr + 96 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    $e2 = $shr45 - $conv47;
    
    
    
    var $conv50 = (tempInt = HEAP16[$block_addr + 32 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    
    var $conv52 = (tempInt = HEAP16[$block_addr + 96 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    
    
    $e3 = $conv50 + ($conv52 >> 1);
    
    
    var $add55 = $e0 + $e3;
    $e0 = $add55;
    
    
    
    var $sub56 = $e0 - ($e3 << 1);
    $e3 = $sub56;
    
    
    var $add57 = $e1 + $e2;
    $e1 = $add57;
    
    
    
    var $sub59 = $e1 - ($e2 << 1);
    $e2 = $sub59;
    
    var $add60 = $e0 + 32;
    $e0 = $add60;
    
    var $add61 = $e1 + 32;
    $e1 = $add61;
    
    var $add62 = $e2 + 32;
    $e2 = $add62;
    
    var $add63 = $e3 + 32;
    $e3 = $add63;
    
    
    
    
    
    var $add66 = (HEAPU8[$cur_addr >> 0] & 255) + ($e0 >> 6);
    $e0 = $add66;
    
    
    if ($e0 >>> 0 > 255) {
      __label__ = 7;
    } else {
      __label__ = 8;
    }
    if (__label__ == 7) {
      
      
      var $neg = $e0 >> 31 ^ -1;
      var $and = 255 & $neg;
      $e0 = $and;
    }
    
    
    
    HEAP8[$cur_addr >> 0] = $e0 & 255;
    
    
    var $add_ptr70 = $cur_addr + $width_addr;
    $cur_addr = $add_ptr70;
    
    
    
    
    var $add73 = (HEAPU8[$add_ptr70 >> 0] & 255) + ($e1 >> 6);
    $e1 = $add73;
    
    
    if ($e1 >>> 0 > 255) {
      __label__ = 9;
    } else {
      __label__ = 10;
    }
    if (__label__ == 9) {
      
      
      var $neg77 = $e1 >> 31 ^ -1;
      var $and78 = 255 & $neg77;
      $e1 = $and78;
    }
    
    
    
    HEAP8[$cur_addr >> 0] = $e1 & 255;
    
    
    var $add_ptr81 = $cur_addr + $width_addr;
    $cur_addr = $add_ptr81;
    
    
    
    
    var $add84 = (HEAPU8[$add_ptr81 >> 0] & 255) + ($e2 >> 6);
    $e2 = $add84;
    
    
    if ($e2 >>> 0 > 255) {
      __label__ = 11;
    } else {
      __label__ = 12;
    }
    if (__label__ == 11) {
      
      
      var $neg88 = $e2 >> 31 ^ -1;
      var $and89 = 255 & $neg88;
      $e2 = $and89;
    }
    
    
    
    HEAP8[$cur_addr >> 0] = $e2 & 255;
    
    
    
    
    
    
    
    var $add95 = (HEAPU8[$cur_addr + $width_addr >> 0] & 255) + ($e3 >> 6);
    $e3 = $add95;
    
    
    if ($e3 >>> 0 > 255) {
      __label__ = 13;
    } else {
      __label__ = 14;
    }
    if (__label__ == 13) {
      
      
      var $neg99 = $e3 >> 31 ^ -1;
      var $and100 = 255 & $neg99;
      $e3 = $and100;
    }
    
    
    
    
    
    HEAP8[$cur_addr + $width_addr >> 0] = $e3 & 255;
    
    
    
    
    var $add_ptr105 = $cur_addr + (0 - ($width_addr << 1));
    $cur_addr = $add_ptr105;
    
    var $incdec_ptr = $cur_addr + 1;
    $cur_addr = $incdec_ptr;
    
    var $incdec_ptr106 = $block_addr + 2;
    $block_addr = $incdec_ptr106;
    
    var $dec108 = $i + -1;
    $i = $dec108;
    __label__ = 5;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z13ChromaDCTransPsii($block, $Qq, $Rq) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $block_addr;
  var $Qq_addr;
  var $Rq_addr;
  var $c00;
  var $c01;
  var $c10;
  var $c11;
  var $f0;
  var $f1;
  var $f2;
  var $f3;
  var $scale;
  $block_addr = $block;
  $Qq_addr = $Qq;
  $Rq_addr = $Rq;
  
  
  
  
  $scale = HEAP32[__ZL15dequant_coefres + $Rq_addr * 64 >> 2];
  
  
  
  var $conv = (tempInt = HEAP16[$block_addr >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
  
  
  
  var $conv4 = (tempInt = HEAP16[$block_addr + 8 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
  
  $c00 = $conv + $conv4;
  
  
  
  var $conv6 = (tempInt = HEAP16[$block_addr >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
  
  
  
  var $conv8 = (tempInt = HEAP16[$block_addr + 8 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
  
  $c01 = $conv6 - $conv8;
  
  
  
  var $conv10 = (tempInt = HEAP16[$block_addr + 128 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
  
  
  
  var $conv12 = (tempInt = HEAP16[$block_addr + 136 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
  
  $c10 = $conv10 + $conv12;
  
  
  
  var $conv15 = (tempInt = HEAP16[$block_addr + 128 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
  
  
  
  var $conv17 = (tempInt = HEAP16[$block_addr + 136 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
  
  $c11 = $conv15 - $conv17;
  
  
  
  $f0 = $c00 + $c10;
  
  
  
  $f1 = $c01 + $c11;
  
  
  
  $f2 = $c00 - $c10;
  
  
  
  $f3 = $c01 - $c11;
  
  
  if (($Qq_addr | 0) >= 1) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    var $sub23 = $Qq_addr - 1;
    $Qq_addr = $sub23;
    
    
    
    
    
    
    
    
    HEAP16[$block_addr >> 1] = $f0 * $scale << $Qq_addr & 65535;
    
    
    
    
    
    
    
    
    HEAP16[$block_addr + 8 >> 1] = $f1 * $scale << $Qq_addr & 65535;
    
    
    
    
    
    
    
    
    HEAP16[$block_addr + 128 >> 1] = $f2 * $scale << $Qq_addr & 65535;
    
    
    
    
    
    
    
    
    HEAP16[$block_addr + 136 >> 1] = $f3 * $scale << $Qq_addr & 65535;
  } else if (__label__ == 2) {
    
    
    
    
    
    
    
    HEAP16[$block_addr >> 1] = $f0 * $scale >> 1 & 65535;
    
    
    
    
    
    
    
    HEAP16[$block_addr + 8 >> 1] = $f1 * $scale >> 1 & 65535;
    
    
    
    
    
    
    
    HEAP16[$block_addr + 128 >> 1] = $f2 * $scale >> 1 & 65535;
    
    
    
    
    
    
    
    HEAP16[$block_addr + 136 >> 1] = $f3 * $scale >> 1 & 65535;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z10copy_blockPhS_ii($pred, $cur, $width, $pred_pitch) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  
  var $pred_addr;
  var $cur_addr;
  var $width_addr;
  var $pred_pitch_addr;
  var $temp;
  $pred_addr = $pred;
  $cur_addr = $cur;
  $width_addr = $width;
  $pred_pitch_addr = $pred_pitch;
  
  
  
  $temp = HEAP32[$pred_addr >> 2];
  
  
  var $add_ptr = $pred_addr + $pred_pitch_addr;
  $pred_addr = $add_ptr;
  
  
  
  HEAP32[$cur_addr >> 2] = $temp;
  
  
  var $add_ptr1 = $cur_addr + $width_addr;
  $cur_addr = $add_ptr1;
  
  
  
  $temp = HEAP32[$pred_addr >> 2];
  
  
  var $add_ptr2 = $pred_addr + $pred_pitch_addr;
  $pred_addr = $add_ptr2;
  
  
  
  HEAP32[$cur_addr >> 2] = $temp;
  
  
  var $add_ptr3 = $cur_addr + $width_addr;
  $cur_addr = $add_ptr3;
  
  
  
  $temp = HEAP32[$pred_addr >> 2];
  
  
  var $add_ptr4 = $pred_addr + $pred_pitch_addr;
  $pred_addr = $add_ptr4;
  
  
  
  HEAP32[$cur_addr >> 2] = $temp;
  
  
  var $add_ptr5 = $cur_addr + $width_addr;
  $cur_addr = $add_ptr5;
  
  
  
  $temp = HEAP32[$pred_addr >> 2];
  
  
  
  HEAP32[$cur_addr >> 2] = $temp;
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z17IntraMBPredictionP12tagCommonObj($video) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $video_addr;
  var $component;
  var $SubBlock_indx;
  var $temp;
  var $status;
  var $currMB;
  var $currPic;
  var $curL;
  var $curCb;
  var $curCr;
  var $comp;
  var $block_x;
  var $block_y;
  var $offset;
  var $dataBlock;
  var $predCb;
  var $predCr;
  var $pitch;
  var $cbp4x4;
  $video_addr = $video;
  
  
  
  $currMB = HEAP32[$video_addr + 912 >> 2];
  
  
  
  $currPic = HEAP32[$video_addr + 884 >> 2];
  
  
  
  $dataBlock = $video_addr;
  
  
  
  $pitch = HEAP32[$currPic + 48 >> 2];
  
  
  
  $cbp4x4 = HEAP32[$video_addr + 928 >> 2];
  
  
  
  
  
  
  
  
  
  
  
  $offset = (HEAP32[$video_addr + 924 >> 2] << 4) * $pitch + (HEAP32[$video_addr + 920 >> 2] << 4);
  
  
  
  
  
  $curL = HEAP32[$currPic + 4 >> 2] + $offset;
  
  
  
  HEAP32[$video_addr + 768 >> 2] = $curL;
  
  
  
  HEAP32[$video_addr + 772 >> 2] = $pitch;
  
  
  
  
  if ((HEAP32[$currMB + 164 >> 2] | 0) == 0) {
    __label__ = 1;
  } else {
    __label__ = 20;
  }
  $if_then$$if_else46$2 : do {
    if (__label__ == 1) {
      $block_y = 0;
      $block_x = 0;
      $component = 0;
      $for_cond$4 : while (1) {
        
        var $cmp6 = ($component | 0) < 4;
        if (!$cmp6) {
          __label__ = 19;
          break $for_cond$4;
        }
        
        
        
        $block_x = ($component & 1) << 1;
        
        
        
        $block_y = $component >> 1 << 1;
        
        $comp = $curL;
        $SubBlock_indx = 0;
        while (1) {
          
          var $cmp10 = ($SubBlock_indx | 0) < 4;
          if (!$cmp10) {
            __label__ = 14;
            break;
          }
          
          
          
          
          var $call = __Z9Intra_4x4P12tagCommonObjiiPh($video_addr, $block_x, $block_y, $comp);
          $status = $call;
          
          
          if (($status | 0) != 1) {
            __label__ = 6;
            break $for_cond$4;
          }
          
          
          
          
          
          
          
          
          if (($cbp4x4 & 1 << ($block_y << 2) + $block_x | 0) != 0) {
            __label__ = 8;
          } else {
            __label__ = 9;
          }
          if (__label__ == 8) {
            
            
            
            
            __Z6itransPsPhS0_i($dataBlock, $comp, $comp, $pitch);
          }
          
          
          $temp = $SubBlock_indx & 1;
          
          
          if (($temp | 0) != 0) {
            __label__ = 10;
          } else {
            __label__ = 11;
          }
          if (__label__ == 10) {
            
            var $inc = $block_y + 1;
            $block_y = $inc;
            
            var $dec = $block_x + -1;
            $block_x = $dec;
            
            var $add_ptr23 = $dataBlock + 120;
            $dataBlock = $add_ptr23;
            
            
            
            
            var $add_ptr25 = $comp + (($pitch << 2) - 4);
            $comp = $add_ptr25;
          } else if (__label__ == 11) {
            
            var $inc26 = $block_x + 1;
            $block_x = $inc26;
            
            var $add_ptr27 = $dataBlock + 8;
            $dataBlock = $add_ptr27;
            
            var $add_ptr28 = $comp + 4;
            $comp = $add_ptr28;
          }
          
          var $inc30 = $SubBlock_indx + 1;
          $SubBlock_indx = $inc30;
          __label__ = 4;
          continue;
        }
        
        
        
        if (($component & 1 | 0) != 0) {
          __label__ = 15;
        } else {
          __label__ = 16;
        }
        if (__label__ == 15) {
          
          
          
          
          var $add_ptr36 = $curL + (($pitch << 3) - 8);
          $curL = $add_ptr36;
          
          var $add_ptr37 = $dataBlock + -16;
          $dataBlock = $add_ptr37;
        } else if (__label__ == 16) {
          
          var $add_ptr39 = $curL + 8;
          $curL = $add_ptr39;
          
          var $add_ptr40 = $dataBlock + -240;
          $dataBlock = $add_ptr40;
        }
        
        var $inc43 = $component + 1;
        $component = $inc43;
        __label__ = 2;
        continue $for_cond$4;
      }
      if (__label__ == 19) {
        
        var $shr45 = $cbp4x4 >>> 16;
        $cbp4x4 = $shr45;
        __label__ = 50;
        break $if_then$$if_else46$2;
      } else if (__label__ == 6) {
        
        $retval = $status;
        __label__ = 86;
        break $if_then$$if_else46$2;
      }
    } else if (__label__ == 20) {
      
      
      
      
      
      
      HEAP32[$video_addr + 776 >> 2] = $curL + (0 - $pitch);
      
      var $add_ptr48 = $curL + -1;
      
      
      HEAP32[$video_addr + 780 >> 2] = $add_ptr48;
      
      
      
      
      if ((HEAP32[$video_addr + 924 >> 2] | 0) != 0) {
        __label__ = 21;
      } else {
        __label__ = 22;
      }
      if (__label__ == 21) {
        
        
        
        
        var $add_ptr54 = $curL + (0 - $pitch) + -1;
        var $69 = HEAP8[$add_ptr54 >> 0];
        
        
        HEAP8[$video_addr + 784 >> 0] = $69;
      }
      
      
      var $72 = HEAP32[$currMB + 188 >> 2];
      if ($72 == 0) {
        __label__ = 23;
      } else if ($72 == 1) {
        __label__ = 27;
      } else if ($72 == 2) {
        __label__ = 31;
      } else if ($72 == 3) {
        __label__ = 32;
      } else {
        __label__ = 38;
      }
      $sw_default$$sw_bb$$sw_bb60$$sw_bb65$$sw_bb66$32 : do {
        if (__label__ == 38) {

        } else if (__label__ == 23) {
          
          
          
          
          if ((HEAP32[$video_addr + 1224 >> 2] | 0) != 0) {
            __label__ = 24;
          } else {
            __label__ = 25;
          }
          if (__label__ == 24) {
            
            __Z20Intra_16x16_VerticalP12tagCommonObj($video_addr);
          } else if (__label__ == 25) {
            $retval = 0;
            __label__ = 86;
            break $if_then$$if_else46$2;
          }
        } else if (__label__ == 27) {
          
          
          
          
          if ((HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
            __label__ = 28;
          } else {
            __label__ = 29;
          }
          if (__label__ == 28) {
            
            
            __Z22Intra_16x16_HorizontalP12tagCommonObji($video_addr, $pitch);
          } else if (__label__ == 29) {
            $retval = 0;
            __label__ = 86;
            break $if_then$$if_else46$2;
          }
        } else if (__label__ == 31) {
          
          
          __Z14Intra_16x16_DCP12tagCommonObji($video_addr, $pitch);
        } else if (__label__ == 32) {
          
          
          
          
          if ((HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
            __label__ = 33;
          } else {
            __label__ = 36;
          }
          $land_lhs_true$$if_else74$46 : do {
            if (__label__ == 33) {
              
              
              
              var $tobool70 = (HEAP32[$video_addr + 1224 >> 2] | 0) != 0;
              if (!$tobool70) {
                __label__ = 36;
                break $land_lhs_true$$if_else74$46;
              }
              
              
              
              var $tobool72 = (HEAP32[$video_addr + 1232 >> 2] | 0) != 0;
              if (!$tobool72) {
                __label__ = 36;
                break $land_lhs_true$$if_else74$46;
              }
              
              
              __Z17Intra_16x16_PlaneP12tagCommonObji($video_addr, $pitch);
              __label__ = 39;
              break $sw_default$$sw_bb$$sw_bb60$$sw_bb65$$sw_bb66$32;
            }
          } while (0);
          $retval = 0;
          __label__ = 86;
          break $if_then$$if_else46$2;
        }
      } while (0);
      
      
      
      $pitch = HEAP32[$currPic + 48 >> 2];
      $block_y = 4;
      $for_cond77$53 : while (1) {
        
        var $cmp78 = ($block_y | 0) > 0;
        if (!$cmp78) {
          __label__ = 49;
          break $for_cond77$53;
        }
        $block_x = 4;
        while (1) {
          
          var $cmp81 = ($block_x | 0) > 0;
          if (!$cmp81) {
            __label__ = 47;
            break;
          }
          
          
          
          if (($cbp4x4 & 1 | 0) != 0) {
            __label__ = 44;
          } else {
            __label__ = 45;
          }
          if (__label__ == 44) {
            
            
            
            
            __Z6itransPsPhS0_i($dataBlock, $curL, $curL, $pitch);
          }
          
          var $shr87 = $cbp4x4 >>> 1;
          $cbp4x4 = $shr87;
          
          var $add_ptr88 = $dataBlock + 8;
          $dataBlock = $add_ptr88;
          
          var $add_ptr89 = $curL + 4;
          $curL = $add_ptr89;
          
          var $dec91 = $block_x + -1;
          $block_x = $dec91;
          __label__ = 42;
          continue;
        }
        
        var $add_ptr93 = $dataBlock + 96;
        $dataBlock = $add_ptr93;
        
        
        
        
        var $add_ptr96 = $curL + (($pitch << 2) - 16);
        $curL = $add_ptr96;
        
        var $dec98 = $block_y + -1;
        $block_y = $dec98;
        __label__ = 40;
        continue $for_cond77$53;
      }
      __label__ = 50;
      break $if_then$$if_else46$2;
    }
  } while (0);
  $return$$if_end100$66 : do {
    if (__label__ == 50) {
      
      
      
      
      
      
      var $add104 = ($offset >> 2) + (HEAP32[$video_addr + 920 >> 2] << 2);
      $offset = $add104;
      
      
      
      
      
      $curCb = HEAP32[$currPic + 8 >> 2] + $offset;
      
      
      
      
      
      $curCr = HEAP32[$currPic + 12 >> 2] + $offset;
      
      var $shr107 = $pitch >> 1;
      $pitch = $shr107;
      
      
      
      
      
      
      HEAP32[$video_addr + 788 >> 2] = $curCb + (0 - $pitch);
      
      var $add_ptr110 = $curCb + -1;
      
      
      HEAP32[$video_addr + 792 >> 2] = $add_ptr110;
      
      
      
      
      
      
      HEAP32[$video_addr + 800 >> 2] = $curCr + (0 - $pitch);
      
      var $add_ptr113 = $curCr + -1;
      
      
      HEAP32[$video_addr + 804 >> 2] = $add_ptr113;
      
      
      
      
      if ((HEAP32[$video_addr + 924 >> 2] | 0) != 0) {
        __label__ = 51;
      } else {
        __label__ = 52;
      }
      if (__label__ == 51) {
        
        
        
        
        var $add_ptr119 = $curCb + (0 - $pitch) + -1;
        var $131 = HEAP8[$add_ptr119 >> 0];
        
        
        HEAP8[$video_addr + 796 >> 0] = $131;
        
        
        
        
        var $add_ptr122 = $curCr + (0 - $pitch) + -1;
        var $135 = HEAP8[$add_ptr122 >> 0];
        
        
        HEAP8[$video_addr + 808 >> 0] = $135;
      }
      
      $predCb = $curCb;
      
      $predCr = $curCr;
      
      
      
      var $shr125 = HEAP32[$currPic + 48 >> 2] >> 1;
      
      
      HEAP32[$video_addr + 772 >> 2] = $shr125;
      
      
      var $143 = HEAP32[$currMB >> 2];
      if ($143 == 0) {
        __label__ = 53;
      } else if ($143 == 1) {
        __label__ = 54;
      } else if ($143 == 2) {
        __label__ = 58;
      } else if ($143 == 3) {
        __label__ = 62;
      } else {
        __label__ = 68;
      }
      $sw_default152$$sw_bb127$$sw_bb128$$sw_bb134$$sw_bb140$71 : do {
        if (__label__ == 68) {

        } else if (__label__ == 53) {
          
          
          
          
          __Z15Intra_Chroma_DCP12tagCommonObjiPhS1_($video_addr, $pitch, $predCb, $predCr);
        } else if (__label__ == 54) {
          
          
          
          
          if ((HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
            __label__ = 55;
          } else {
            __label__ = 56;
          }
          if (__label__ == 55) {
            
            
            
            
            __Z23Intra_Chroma_HorizontalP12tagCommonObjiPhS1_($video_addr, $pitch, $predCb, $predCr);
          } else if (__label__ == 56) {
            $retval = 0;
            __label__ = 86;
            break $return$$if_end100$66;
          }
        } else if (__label__ == 58) {
          
          
          
          
          if ((HEAP32[$video_addr + 1224 >> 2] | 0) != 0) {
            __label__ = 59;
          } else {
            __label__ = 60;
          }
          if (__label__ == 59) {
            
            
            
            __Z21Intra_Chroma_VerticalP12tagCommonObjPhS1_($video_addr, $predCb, $predCr);
          } else if (__label__ == 60) {
            $retval = 0;
            __label__ = 86;
            break $return$$if_end100$66;
          }
        } else if (__label__ == 62) {
          
          
          
          
          if ((HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
            __label__ = 63;
          } else {
            __label__ = 66;
          }
          $land_lhs_true143$$if_else150$85 : do {
            if (__label__ == 63) {
              
              
              
              var $tobool145 = (HEAP32[$video_addr + 1224 >> 2] | 0) != 0;
              if (!$tobool145) {
                __label__ = 66;
                break $land_lhs_true143$$if_else150$85;
              }
              
              
              
              var $tobool148 = (HEAP32[$video_addr + 1232 >> 2] | 0) != 0;
              if (!$tobool148) {
                __label__ = 66;
                break $land_lhs_true143$$if_else150$85;
              }
              
              
              
              
              __Z18Intra_Chroma_PlaneP12tagCommonObjiPhS1_($video_addr, $pitch, $predCb, $predCr);
              __label__ = 69;
              break $sw_default152$$sw_bb127$$sw_bb128$$sw_bb134$$sw_bb140$71;
            }
          } while (0);
          $retval = 0;
          __label__ = 86;
          break $return$$if_end100$66;
        }
      } while (0);
      
      
      
      
      $pitch = HEAP32[$currPic + 48 >> 2] >> 1;
      $block_y = 2;
      $for_cond156$92 : while (1) {
        
        var $cmp157 = ($block_y | 0) > 0;
        if (!$cmp157) {
          __label__ = 85;
          break $for_cond156$92;
        }
        $block_x = 2;
        $for_cond159$95 : while (1) {
          
          var $cmp160 = ($block_x | 0) > 0;
          if (!$cmp160) {
            __label__ = 77;
            break $for_cond159$95;
          }
          
          
          
          if (($cbp4x4 & 1 | 0) != 0) {
            __label__ = 74;
          } else {
            __label__ = 75;
          }
          if (__label__ == 74) {
            
            
            
            
            __Z7ictransPsPhS0_i($dataBlock, $curCb, $curCb, $pitch);
          }
          
          var $shr166 = $cbp4x4 >>> 1;
          $cbp4x4 = $shr166;
          
          var $add_ptr167 = $dataBlock + 8;
          $dataBlock = $add_ptr167;
          
          var $add_ptr168 = $curCb + 4;
          $curCb = $add_ptr168;
          
          var $dec170 = $block_x + -1;
          $block_x = $dec170;
          __label__ = 72;
          continue $for_cond159$95;
        }
        $block_x = 2;
        while (1) {
          
          var $cmp173 = ($block_x | 0) > 0;
          if (!$cmp173) {
            __label__ = 83;
            break;
          }
          
          
          
          if (($cbp4x4 & 1 | 0) != 0) {
            __label__ = 80;
          } else {
            __label__ = 81;
          }
          if (__label__ == 80) {
            
            
            
            
            __Z7ictransPsPhS0_i($dataBlock, $curCr, $curCr, $pitch);
          }
          
          var $shr179 = $cbp4x4 >>> 1;
          $cbp4x4 = $shr179;
          
          var $add_ptr180 = $dataBlock + 8;
          $dataBlock = $add_ptr180;
          
          var $add_ptr181 = $curCr + 4;
          $curCr = $add_ptr181;
          
          var $dec183 = $block_x + -1;
          $block_x = $dec183;
          __label__ = 78;
          continue;
        }
        
        var $add_ptr185 = $dataBlock + 96;
        $dataBlock = $add_ptr185;
        
        
        
        
        var $add_ptr188 = $curCb + (($pitch << 2) - 8);
        $curCb = $add_ptr188;
        
        
        
        
        var $add_ptr191 = $curCr + (($pitch << 2) - 8);
        $curCr = $add_ptr191;
        
        var $dec193 = $block_y + -1;
        $block_y = $dec193;
        __label__ = 70;
        continue $for_cond156$92;
      }
      $retval = 1;
    }
  } while (0);
  var $198 = $retval;
  STACKTOP = __stackBase__;
  return $198;
  return null;
}
function __Z9Intra_4x4P12tagCommonObjiiPh($video, $block_x, $block_y, $comp) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  var $retval;
  var $video_addr;
  var $block_x_addr;
  var $block_y_addr;
  var $comp_addr;
  var $currMB;
  var $block_offset;
  var $availability = __stackBase__;
  var $pitch;
  $video_addr = $video;
  $block_x_addr = $block_x;
  $block_y_addr = $block_y;
  $comp_addr = $comp;
  
  
  
  $currMB = HEAP32[$video_addr + 912 >> 2];
  
  
  
  
  
  $pitch = HEAP32[HEAP32[$video_addr + 884 >> 2] + 48 >> 2];
  
  
  
  
  
  
  
  $block_offset = ($block_y_addr << 2) * $pitch + ($block_x_addr << 2);
  
  
  
  
  
  
  HEAP32[$video_addr + 776 >> 2] = $comp_addr + (0 - $pitch);
  
  var $add_ptr4 = $comp_addr + -1;
  
  
  HEAP32[$video_addr + 780 >> 2] = $add_ptr4;
  
  
  
  
  if ((HEAP32[$video_addr + 924 >> 2] | 0) != 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $if_then$$lor_lhs_false$2 : do {
    if (__label__ == 1) {
      
      
      if (($block_y_addr | 0) != 0) {
        __label__ = 2;
        break $if_then$$lor_lhs_false$2;
      } else {
        __label__ = 3;
        break $if_then$$lor_lhs_false$2;
      }
    }
  } while (0);
  if (__label__ == 2) {
    
    
    
    
    var $add_ptr8 = $comp_addr + (0 - $pitch) + -1;
    var $18 = HEAP8[$add_ptr8 >> 0];
    
    
    HEAP8[$video_addr + 784 >> 0] = $18;
  }
  
  
  
  
  
  
  
  var $23 = HEAP32[$currMB + 192 + (($block_y_addr << 2) + $block_x_addr) * 4 >> 2];
  if ($23 == 0) {
    __label__ = 4;
  } else if ($23 == 1) {
    __label__ = 9;
  } else if ($23 == 2) {
    __label__ = 14;
  } else if ($23 == 3) {
    __label__ = 19;
  } else if ($23 == 4) {
    __label__ = 28;
  } else if ($23 == 5) {
    __label__ = 40;
  } else if ($23 == 6) {
    __label__ = 52;
  } else if ($23 == 7) {
    __label__ = 64;
  } else if ($23 == 8) {
    __label__ = 73;
  } else {
    __label__ = 78;
  }
  $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7 : do {
    if (__label__ == 78) {
      __label__ = 79;
      break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
    } else if (__label__ == 4) {
      
      
      if (($block_y_addr | 0) > 0) {
        __label__ = 6;
      } else {
        __label__ = 5;
      }
      $if_then13$$lor_lhs_false11$10 : do {
        if (__label__ == 5) {
          
          
          
          
          if ((HEAP32[$video_addr + 1224 >> 2] | 0) != 0) {
            __label__ = 6;
            break $if_then13$$lor_lhs_false11$10;
          }
          $retval = 0;
          __label__ = 80;
          break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
        }
      } while (0);
      
      
      __Z18Intra_4x4_VerticalP12tagCommonObji($video_addr, $block_offset);
      __label__ = 79;
      break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
    } else if (__label__ == 9) {
      
      
      if (($block_x_addr | 0) != 0) {
        __label__ = 11;
      } else {
        __label__ = 10;
      }
      $if_then19$$lor_lhs_false17$16 : do {
        if (__label__ == 10) {
          
          
          
          
          if ((HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
            __label__ = 11;
            break $if_then19$$lor_lhs_false17$16;
          }
          $retval = 0;
          __label__ = 80;
          break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
        }
      } while (0);
      
      
      
      __Z20Intra_4x4_HorizontalP12tagCommonObjii($video_addr, $pitch, $block_offset);
      __label__ = 79;
      break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
    } else if (__label__ == 14) {
      
      HEAP32[$availability >> 2] = 1;
      
      HEAP32[$availability + 4 >> 2] = 1;
      
      
      if (($block_y_addr | 0) != 0) {
        __label__ = 16;
      } else {
        __label__ = 15;
      }
      if (__label__ == 15) {
        
        
        var $37 = HEAP32[$video_addr + 1224 >> 2];
        
        HEAP32[$availability + 4 >> 2] = $37;
      }
      
      
      if (($block_x_addr | 0) != 0) {
        __label__ = 18;
      } else {
        __label__ = 17;
      }
      if (__label__ == 17) {
        
        
        var $40 = HEAP32[$video_addr + 1220 >> 2];
        
        HEAP32[$availability >> 2] = $40;
      }
      
      
      
      __Z12Intra_4x4_DCP12tagCommonObjiiP23tagNeighborAvailability($video_addr, $pitch, $block_offset, $availability);
      __label__ = 79;
      break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
    } else if (__label__ == 19) {
      
      
      if (($block_y_addr | 0) == 0) {
        __label__ = 20;
      } else {
        __label__ = 22;
      }
      $land_lhs_true$$if_end38$29 : do {
        if (__label__ == 20) {
          
          
          
          
          if ((HEAP32[$video_addr + 1224 >> 2] | 0) != 0) {
            __label__ = 22;
            break $land_lhs_true$$if_end38$29;
          }
          $retval = 0;
          __label__ = 80;
          break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
        }
      } while (0);
      
      
      
      
      
      var $49 = HEAP32[__ZL11BlkTopRight + (($block_y_addr << 2) + $block_x_addr) * 4 >> 2];
      
      HEAP32[$availability + 8 >> 2] = $49;
      
      
      
      if ((HEAP32[$availability + 8 >> 2] | 0) == 2) {
        __label__ = 23;
      } else {
        __label__ = 24;
      }
      if (__label__ == 23) {
        
        
        var $52 = HEAP32[$video_addr + 1224 >> 2];
        
        HEAP32[$availability + 8 >> 2] = $52;
      } else if (__label__ == 24) {
        
        
        
        if ((HEAP32[$availability + 8 >> 2] | 0) == 3) {
          __label__ = 25;
        } else {
          __label__ = 26;
        }
        if (__label__ == 25) {
          
          
          var $55 = HEAP32[$video_addr + 1228 >> 2];
          
          HEAP32[$availability + 8 >> 2] = $55;
        }
      }
      
      
      __Z19Intra_4x4_Down_LeftP12tagCommonObjiP23tagNeighborAvailability($video_addr, $block_offset, $availability);
      __label__ = 79;
      break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
    } else if (__label__ == 28) {
      
      
      if (($block_y_addr | 0) != 0) {
        __label__ = 29;
      } else {
        __label__ = 30;
      }
      $land_lhs_true56$$lor_lhs_false58$41 : do {
        if (__label__ == 29) {
          
          
          if (($block_x_addr | 0) != 0) {
            __label__ = 37;
            break $land_lhs_true56$$lor_lhs_false58$41;
          } else {
            __label__ = 30;
            break $land_lhs_true56$$lor_lhs_false58$41;
          }
        }
      } while (0);
      $if_then76$$lor_lhs_false58$43 : do {
        if (__label__ == 30) {
          
          
          if (($block_y_addr | 0) != 0) {
            __label__ = 31;
          } else {
            __label__ = 32;
          }
          if (__label__ == 31) {
            
            
            
            
            if ((HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
              __label__ = 37;
              break $if_then76$$lor_lhs_false58$43;
            }
          }
          
          
          if (($block_x_addr | 0) != 0) {
            __label__ = 33;
          } else {
            __label__ = 34;
          }
          if (__label__ == 33) {
            
            
            
            
            if ((HEAP32[$video_addr + 1224 >> 2] | 0) != 0) {
              __label__ = 37;
              break $if_then76$$lor_lhs_false58$43;
            }
          }
          
          
          
          
          if ((HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
            __label__ = 35;
          } else {
            __label__ = 38;
          }
          $land_lhs_true71$$if_else77$51 : do {
            if (__label__ == 35) {
              
              
              
              var $tobool72 = (HEAP32[$video_addr + 1232 >> 2] | 0) != 0;
              if (!$tobool72) {
                __label__ = 38;
                break $land_lhs_true71$$if_else77$51;
              }
              
              
              
              
              if ((HEAP32[$video_addr + 1224 >> 2] | 0) != 0) {
                __label__ = 37;
                break $if_then76$$lor_lhs_false58$43;
              }
            }
          } while (0);
          $retval = 0;
          __label__ = 80;
          break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
        }
      } while (0);
      
      
      
      __Z29Intra_4x4_Diagonal_Down_RightP12tagCommonObjii($video_addr, $pitch, $block_offset);
      __label__ = 79;
      break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
    } else if (__label__ == 40) {
      
      
      if (($block_y_addr | 0) != 0) {
        __label__ = 41;
      } else {
        __label__ = 42;
      }
      $land_lhs_true81$$lor_lhs_false83$58 : do {
        if (__label__ == 41) {
          
          
          if (($block_x_addr | 0) != 0) {
            __label__ = 49;
            break $land_lhs_true81$$lor_lhs_false83$58;
          } else {
            __label__ = 42;
            break $land_lhs_true81$$lor_lhs_false83$58;
          }
        }
      } while (0);
      $if_then102$$lor_lhs_false83$60 : do {
        if (__label__ == 42) {
          
          
          if (($block_y_addr | 0) != 0) {
            __label__ = 43;
          } else {
            __label__ = 44;
          }
          if (__label__ == 43) {
            
            
            
            
            if ((HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
              __label__ = 49;
              break $if_then102$$lor_lhs_false83$60;
            }
          }
          
          
          if (($block_x_addr | 0) != 0) {
            __label__ = 45;
          } else {
            __label__ = 46;
          }
          if (__label__ == 45) {
            
            
            
            
            if ((HEAP32[$video_addr + 1224 >> 2] | 0) != 0) {
              __label__ = 49;
              break $if_then102$$lor_lhs_false83$60;
            }
          }
          
          
          
          
          if ((HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
            __label__ = 47;
          } else {
            __label__ = 50;
          }
          $land_lhs_true96$$if_else103$68 : do {
            if (__label__ == 47) {
              
              
              
              var $tobool98 = (HEAP32[$video_addr + 1232 >> 2] | 0) != 0;
              if (!$tobool98) {
                __label__ = 50;
                break $land_lhs_true96$$if_else103$68;
              }
              
              
              
              
              if ((HEAP32[$video_addr + 1224 >> 2] | 0) != 0) {
                __label__ = 49;
                break $if_then102$$lor_lhs_false83$60;
              }
            }
          } while (0);
          $retval = 0;
          __label__ = 80;
          break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
        }
      } while (0);
      
      
      
      __Z33Intra_4x4_Diagonal_Vertical_RightP12tagCommonObjii($video_addr, $pitch, $block_offset);
      __label__ = 79;
      break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
    } else if (__label__ == 52) {
      
      
      if (($block_y_addr | 0) != 0) {
        __label__ = 53;
      } else {
        __label__ = 54;
      }
      $land_lhs_true107$$lor_lhs_false109$75 : do {
        if (__label__ == 53) {
          
          
          if (($block_x_addr | 0) != 0) {
            __label__ = 61;
            break $land_lhs_true107$$lor_lhs_false109$75;
          } else {
            __label__ = 54;
            break $land_lhs_true107$$lor_lhs_false109$75;
          }
        }
      } while (0);
      $if_then128$$lor_lhs_false109$77 : do {
        if (__label__ == 54) {
          
          
          if (($block_y_addr | 0) != 0) {
            __label__ = 55;
          } else {
            __label__ = 56;
          }
          if (__label__ == 55) {
            
            
            
            
            if ((HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
              __label__ = 61;
              break $if_then128$$lor_lhs_false109$77;
            }
          }
          
          
          if (($block_x_addr | 0) != 0) {
            __label__ = 57;
          } else {
            __label__ = 58;
          }
          if (__label__ == 57) {
            
            
            
            
            if ((HEAP32[$video_addr + 1224 >> 2] | 0) != 0) {
              __label__ = 61;
              break $if_then128$$lor_lhs_false109$77;
            }
          }
          
          
          
          
          if ((HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
            __label__ = 59;
          } else {
            __label__ = 62;
          }
          $land_lhs_true122$$if_else129$85 : do {
            if (__label__ == 59) {
              
              
              
              var $tobool124 = (HEAP32[$video_addr + 1232 >> 2] | 0) != 0;
              if (!$tobool124) {
                __label__ = 62;
                break $land_lhs_true122$$if_else129$85;
              }
              
              
              
              
              if ((HEAP32[$video_addr + 1224 >> 2] | 0) != 0) {
                __label__ = 61;
                break $if_then128$$lor_lhs_false109$77;
              }
            }
          } while (0);
          $retval = 0;
          __label__ = 80;
          break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
        }
      } while (0);
      
      
      
      __Z34Intra_4x4_Diagonal_Horizontal_DownP12tagCommonObjii($video_addr, $pitch, $block_offset);
      __label__ = 79;
      break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
    } else if (__label__ == 64) {
      
      
      if (($block_y_addr | 0) == 0) {
        __label__ = 65;
      } else {
        __label__ = 67;
      }
      $land_lhs_true133$$if_end137$92 : do {
        if (__label__ == 65) {
          
          
          
          
          if ((HEAP32[$video_addr + 1224 >> 2] | 0) != 0) {
            __label__ = 67;
            break $land_lhs_true133$$if_end137$92;
          }
          $retval = 0;
          __label__ = 80;
          break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
        }
      } while (0);
      
      
      
      
      
      var $114 = HEAP32[__ZL11BlkTopRight + (($block_y_addr << 2) + $block_x_addr) * 4 >> 2];
      
      HEAP32[$availability + 8 >> 2] = $114;
      
      
      
      if ((HEAP32[$availability + 8 >> 2] | 0) == 2) {
        __label__ = 68;
      } else {
        __label__ = 69;
      }
      if (__label__ == 68) {
        
        
        var $117 = HEAP32[$video_addr + 1224 >> 2];
        
        HEAP32[$availability + 8 >> 2] = $117;
      } else if (__label__ == 69) {
        
        
        
        if ((HEAP32[$availability + 8 >> 2] | 0) == 3) {
          __label__ = 70;
        } else {
          __label__ = 71;
        }
        if (__label__ == 70) {
          
          
          var $120 = HEAP32[$video_addr + 1228 >> 2];
          
          HEAP32[$availability + 8 >> 2] = $120;
        }
      }
      
      
      __Z23Intra_4x4_Vertical_LeftP12tagCommonObjiP23tagNeighborAvailability($video_addr, $block_offset, $availability);
      __label__ = 79;
      break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
    } else if (__label__ == 73) {
      
      
      if (($block_x_addr | 0) != 0) {
        __label__ = 75;
      } else {
        __label__ = 74;
      }
      $if_then160$$lor_lhs_false157$104 : do {
        if (__label__ == 74) {
          
          
          
          
          if ((HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
            __label__ = 75;
            break $if_then160$$lor_lhs_false157$104;
          }
          $retval = 0;
          __label__ = 80;
          break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
        }
      } while (0);
      
      
      
      __Z23Intra_4x4_Horizontal_UpP12tagCommonObjii($video_addr, $pitch, $block_offset);
      __label__ = 79;
      break $sw_default$$sw_bb$$sw_bb15$$sw_bb22$$sw_bb33$$sw_bb54$$sw_bb79$$sw_bb105$$sw_bb131$$sw_bb155$7;
    }
  } while (0);
  if (__label__ == 79) {
    $retval = 1;
  }
  var $129 = $retval;
  STACKTOP = __stackBase__;
  return $129;
  return null;
}
function __Z20Intra_16x16_VerticalP12tagCommonObj($video) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $video_addr;
  var $i;
  var $temp1;
  var $temp2;
  var $temp3;
  var $temp4;
  var $comp_ref;
  var $pred;
  var $pred_pitch;
  $video_addr = $video;
  
  
  
  $comp_ref = HEAP32[$video_addr + 776 >> 2];
  
  
  
  $pred = HEAP32[$video_addr + 768 >> 2];
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  
  
  
  $temp1 = HEAP32[$comp_ref >> 2];
  
  var $add_ptr = $comp_ref + 4;
  $comp_ref = $add_ptr;
  
  
  
  $temp2 = HEAP32[$comp_ref >> 2];
  
  var $add_ptr2 = $comp_ref + 4;
  $comp_ref = $add_ptr2;
  
  
  
  $temp3 = HEAP32[$comp_ref >> 2];
  
  var $add_ptr3 = $comp_ref + 4;
  $comp_ref = $add_ptr3;
  
  
  
  $temp4 = HEAP32[$comp_ref >> 2];
  
  var $add_ptr4 = $comp_ref + 4;
  $comp_ref = $add_ptr4;
  $i = 16;
  while (1) {
    
    var $cmp = ($i | 0) > 0;
    if (!$cmp) {
      __label__ = 3;
      break;
    }
    
    
    
    HEAP32[$pred >> 2] = $temp1;
    
    
    
    
    HEAP32[$pred + 4 >> 2] = $temp2;
    
    
    
    
    HEAP32[$pred + 8 >> 2] = $temp3;
    
    
    
    
    HEAP32[$pred + 12 >> 2] = $temp4;
    
    
    var $add_ptr8 = $pred + $pred_pitch;
    $pred = $add_ptr8;
    
    var $dec = $i + -1;
    $i = $dec;
    __label__ = 1;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z22Intra_16x16_HorizontalP12tagCommonObji($video, $pitch) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $video_addr;
  var $pitch_addr;
  var $i;
  var $temp;
  var $comp_ref;
  var $pred;
  var $pred_pitch;
  $video_addr = $video;
  $pitch_addr = $pitch;
  
  
  
  $comp_ref = HEAP32[$video_addr + 780 >> 2];
  
  
  
  $pred = HEAP32[$video_addr + 768 >> 2];
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  $i = 0;
  while (1) {
    
    var $cmp = ($i | 0) < 16;
    if (!$cmp) {
      __label__ = 4;
      break;
    }
    
    
    
    $temp = HEAPU8[$comp_ref >> 0] & 255;
    
    
    
    var $or = $temp | $temp << 8;
    $temp = $or;
    
    
    
    var $or3 = $temp | $temp << 16;
    $temp = $or3;
    
    
    
    HEAP32[$pred >> 2] = $temp;
    
    
    
    
    HEAP32[$pred + 4 >> 2] = $temp;
    
    
    
    
    HEAP32[$pred + 8 >> 2] = $temp;
    
    
    
    
    HEAP32[$pred + 12 >> 2] = $temp;
    
    
    var $add_ptr6 = $pred + $pred_pitch;
    $pred = $add_ptr6;
    
    
    var $add_ptr7 = $comp_ref + $pitch_addr;
    $comp_ref = $add_ptr7;
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 1;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z14Intra_16x16_DCP12tagCommonObji($video, $pitch) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $video_addr;
  var $pitch_addr;
  var $i;
  var $temp;
  var $temp2;
  var $comp_ref_x;
  var $comp_ref_y;
  var $sum;
  var $pred;
  var $pred_pitch;
  $video_addr = $video;
  $pitch_addr = $pitch;
  
  
  
  $comp_ref_x = HEAP32[$video_addr + 776 >> 2];
  
  
  
  $comp_ref_y = HEAP32[$video_addr + 780 >> 2];
  $sum = 0;
  
  
  
  $pred = HEAP32[$video_addr + 768 >> 2];
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  
  
  
  
  if ((HEAP32[$video_addr + 1224 >> 2] | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 9;
  }
  if (__label__ == 1) {
    
    
    
    $temp = HEAP32[$comp_ref_x >> 2];
    
    var $add_ptr = $comp_ref_x + 4;
    $comp_ref_x = $add_ptr;
    
    
    
    $temp2 = $temp >>> 8 & 16711935;
    
    var $and2 = $temp & 16711935;
    $temp = $and2;
    
    
    var $add = $temp + $temp2;
    $temp = $add;
    
    
    
    
    $sum = $temp + ($temp >>> 16);
    
    
    
    $temp = HEAP32[$comp_ref_x >> 2];
    
    var $add_ptr5 = $comp_ref_x + 4;
    $comp_ref_x = $add_ptr5;
    
    
    
    $temp2 = $temp >>> 8 & 16711935;
    
    var $and8 = $temp & 16711935;
    $temp = $and8;
    
    
    var $add9 = $temp + $temp2;
    $temp = $add9;
    
    
    
    
    
    var $add12 = $sum + ($temp + ($temp >>> 16));
    $sum = $add12;
    
    
    
    $temp = HEAP32[$comp_ref_x >> 2];
    
    var $add_ptr13 = $comp_ref_x + 4;
    $comp_ref_x = $add_ptr13;
    
    
    
    $temp2 = $temp >>> 8 & 16711935;
    
    var $and16 = $temp & 16711935;
    $temp = $and16;
    
    
    var $add17 = $temp + $temp2;
    $temp = $add17;
    
    
    
    
    
    var $add20 = $sum + ($temp + ($temp >>> 16));
    $sum = $add20;
    
    
    
    $temp = HEAP32[$comp_ref_x >> 2];
    
    var $add_ptr21 = $comp_ref_x + 4;
    $comp_ref_x = $add_ptr21;
    
    
    
    $temp2 = $temp >>> 8 & 16711935;
    
    var $and24 = $temp & 16711935;
    $temp = $and24;
    
    
    var $add25 = $temp + $temp2;
    $temp = $add25;
    
    
    
    
    
    var $add28 = $sum + ($temp + ($temp >>> 16));
    $sum = $add28;
    
    var $and29 = $sum & 65535;
    $sum = $and29;
    
    
    
    
    if ((HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
      __label__ = 2;
    } else {
      __label__ = 7;
    }
    if (__label__ == 2) {
      $i = 0;
      while (1) {
        
        var $cmp = ($i | 0) < 16;
        if (!$cmp) {
          __label__ = 6;
          break;
        }
        
        
        
        
        var $add32 = $sum + (HEAPU8[$comp_ref_y >> 0] & 255);
        $sum = $add32;
        
        
        var $add_ptr33 = $comp_ref_y + $pitch_addr;
        $comp_ref_y = $add_ptr33;
        
        var $inc = $i + 1;
        $i = $inc;
        __label__ = 3;
        continue;
      }
      
      
      var $shr35 = $sum + 16 >> 5;
      $sum = $shr35;
    } else if (__label__ == 7) {
      
      
      var $shr37 = $sum + 8 >> 4;
      $sum = $shr37;
    }
  } else if (__label__ == 9) {
    
    
    
    
    if ((HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
      __label__ = 10;
    } else {
      __label__ = 15;
    }
    if (__label__ == 10) {
      $i = 0;
      while (1) {
        
        var $cmp43 = ($i | 0) < 16;
        if (!$cmp43) {
          __label__ = 14;
          break;
        }
        
        
        
        
        var $add46 = $sum + (HEAPU8[$comp_ref_y >> 0] & 255);
        $sum = $add46;
        
        
        var $add_ptr47 = $comp_ref_y + $pitch_addr;
        $comp_ref_y = $add_ptr47;
        
        var $inc49 = $i + 1;
        $i = $inc49;
        __label__ = 11;
        continue;
      }
      
      
      var $shr52 = $sum + 8 >> 4;
      $sum = $shr52;
    } else if (__label__ == 15) {
      $sum = 128;
    }
  }
  
  
  
  
  $temp = $sum | $sum << 8;
  
  
  
  var $or57 = $temp | $temp << 16;
  $temp = $or57;
  $i = 0;
  while (1) {
    
    var $cmp59 = ($i | 0) < 16;
    if (!$cmp59) {
      __label__ = 21;
      break;
    }
    
    
    
    HEAP32[$pred >> 2] = $temp;
    
    
    
    
    HEAP32[$pred + 4 >> 2] = $temp;
    
    
    
    
    HEAP32[$pred + 8 >> 2] = $temp;
    
    
    
    
    HEAP32[$pred + 12 >> 2] = $temp;
    
    
    var $add_ptr64 = $pred + $pred_pitch;
    $pred = $add_ptr64;
    
    var $inc66 = $i + 1;
    $i = $inc66;
    __label__ = 18;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z17Intra_16x16_PlaneP12tagCommonObji($video, $pitch) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $video_addr;
  var $pitch_addr;
  var $i;
  var $a_16;
  var $b;
  var $c;
  var $factor_c;
  var $comp_ref_x;
  var $comp_ref_y;
  var $comp_ref_x0;
  var $comp_ref_x1;
  var $comp_ref_y0;
  var $comp_ref_y1;
  var $H;
  var $V;
  var $tmp;
  var $pred;
  var $temp;
  var $byte1;
  var $byte2;
  var $byte3;
  var $value;
  var $pred_pitch;
  $video_addr = $video;
  $pitch_addr = $pitch;
  
  
  
  $comp_ref_x = HEAP32[$video_addr + 776 >> 2];
  
  
  
  $comp_ref_y = HEAP32[$video_addr + 780 >> 2];
  $H = 0;
  $V = 0;
  
  
  
  $pred = HEAP32[$video_addr + 768 >> 2];
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  
  
  $comp_ref_x0 = $comp_ref_x + 8;
  
  
  $comp_ref_x1 = $comp_ref_x + 6;
  
  
  
  
  $comp_ref_y0 = $comp_ref_y + ($pitch_addr << 3);
  
  
  
  
  $comp_ref_y1 = $comp_ref_y + 6 * $pitch_addr;
  $i = 1;
  $for_cond$2 : while (1) {
    
    var $cmp = ($i | 0) < 8;
    if (!$cmp) {
      __label__ = 4;
      break $for_cond$2;
    }
    
    var $16 = $comp_ref_x0;
    var $incdec_ptr = $16 + 1;
    $comp_ref_x0 = $incdec_ptr;
    
    var $conv = HEAPU8[$16 >> 0] & 255;
    var $18 = $comp_ref_x1;
    var $incdec_ptr12 = $18 + -1;
    $comp_ref_x1 = $incdec_ptr12;
    
    
    
    
    
    var $add = $H + $i * ($conv - (HEAPU8[$18 >> 0] & 255));
    $H = $add;
    
    
    
    
    
    
    
    
    
    
    var $add19 = $V + $i * ((HEAPU8[$comp_ref_y0 >> 0] & 255) - (HEAPU8[$comp_ref_y1 >> 0] & 255));
    $V = $add19;
    
    
    var $add_ptr20 = $comp_ref_y0 + $pitch_addr;
    $comp_ref_y0 = $add_ptr20;
    
    
    
    var $add_ptr21 = $comp_ref_y1 + (0 - $pitch_addr);
    $comp_ref_y1 = $add_ptr21;
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 1;
    continue $for_cond$2;
  }
  
  var $33 = $comp_ref_x0;
  var $incdec_ptr22 = $33 + 1;
  $comp_ref_x0 = $incdec_ptr22;
  
  
  
  
  
  
  
  
  
  var $add27 = $H + $i * ((HEAPU8[$33 >> 0] & 255) - (HEAPU8[$video_addr + 784 >> 0] & 255));
  $H = $add27;
  
  
  
  
  
  
  
  
  
  
  var $add32 = $V + $i * ((HEAPU8[$comp_ref_y0 >> 0] & 255) - (HEAPU8[$comp_ref_y1 >> 0] & 255));
  $V = $add32;
  
  
  
  
  
  
  
  
  
  
  
  
  
  $a_16 = ((HEAPU8[$comp_ref_x + 15 >> 0] & 255) + (HEAPU8[$comp_ref_y + 15 * $pitch_addr >> 0] & 255) << 4) + 16;
  
  
  
  
  $b = 5 * $H + 32 >> 6;
  
  
  
  
  $c = 5 * $V + 32 >> 6;
  $tmp = 0;
  $i = 0;
  while (1) {
    
    var $cmp47 = ($i | 0) < 16;
    if (!$cmp47) {
      __label__ = 40;
      break;
    }
    
    
    var $54 = $tmp;
    var $inc49 = $54 + 1;
    $tmp = $inc49;
    
    
    
    $factor_c = $a_16 + $c * ($54 - 7);
    
    
    
    var $sub54 = $factor_c - 7 * $b;
    $factor_c = $sub54;
    
    
    $value = $factor_c >> 5;
    
    
    var $add56 = $factor_c + $b;
    $factor_c = $add56;
    
    
    if ($value >>> 0 > 255) {
      __label__ = 7;
    } else {
      __label__ = 8;
    }
    if (__label__ == 7) {
      
      
      var $neg = $value >> 31 ^ -1;
      var $and = 255 & $neg;
      $value = $and;
    }
    
    
    $byte1 = $value & 255;
    
    
    $value = $factor_c >> 5;
    
    
    var $add61 = $factor_c + $b;
    $factor_c = $add61;
    
    
    if ($value >>> 0 > 255) {
      __label__ = 9;
    } else {
      __label__ = 10;
    }
    if (__label__ == 9) {
      
      
      var $neg65 = $value >> 31 ^ -1;
      var $and66 = 255 & $neg65;
      $value = $and66;
    }
    
    
    $byte2 = $value & 255;
    
    
    $value = $factor_c >> 5;
    
    
    var $add70 = $factor_c + $b;
    $factor_c = $add70;
    
    
    if ($value >>> 0 > 255) {
      __label__ = 11;
    } else {
      __label__ = 12;
    }
    if (__label__ == 11) {
      
      
      var $neg74 = $value >> 31 ^ -1;
      var $and75 = 255 & $neg74;
      $value = $and75;
    }
    
    
    $byte3 = $value & 255;
    
    
    $value = $factor_c >> 5;
    
    
    var $add79 = $factor_c + $b;
    $factor_c = $add79;
    
    
    if ($value >>> 0 > 255) {
      __label__ = 13;
    } else {
      __label__ = 14;
    }
    if (__label__ == 13) {
      
      
      var $neg83 = $value >> 31 ^ -1;
      var $and84 = 255 & $neg83;
      $value = $and84;
    }
    
    
    
    
    
    
    $temp = $byte1 & 255 | ($byte2 & 255) << 8;
    
    
    
    
    var $or91 = $temp | ($byte3 & 255) << 16;
    $temp = $or91;
    
    
    
    var $or93 = $temp | $value << 24;
    $temp = $or93;
    
    
    
    HEAP32[$pred >> 2] = $temp;
    
    
    $value = $factor_c >> 5;
    
    
    var $add95 = $factor_c + $b;
    $factor_c = $add95;
    
    
    if ($value >>> 0 > 255) {
      __label__ = 15;
    } else {
      __label__ = 16;
    }
    if (__label__ == 15) {
      
      
      var $neg99 = $value >> 31 ^ -1;
      var $and100 = 255 & $neg99;
      $value = $and100;
    }
    
    
    $byte1 = $value & 255;
    
    
    $value = $factor_c >> 5;
    
    
    var $add104 = $factor_c + $b;
    $factor_c = $add104;
    
    
    if ($value >>> 0 > 255) {
      __label__ = 17;
    } else {
      __label__ = 18;
    }
    if (__label__ == 17) {
      
      
      var $neg108 = $value >> 31 ^ -1;
      var $and109 = 255 & $neg108;
      $value = $and109;
    }
    
    
    $byte2 = $value & 255;
    
    
    $value = $factor_c >> 5;
    
    
    var $add113 = $factor_c + $b;
    $factor_c = $add113;
    
    
    if ($value >>> 0 > 255) {
      __label__ = 19;
    } else {
      __label__ = 20;
    }
    if (__label__ == 19) {
      
      
      var $neg117 = $value >> 31 ^ -1;
      var $and118 = 255 & $neg117;
      $value = $and118;
    }
    
    
    $byte3 = $value & 255;
    
    
    $value = $factor_c >> 5;
    
    
    var $add122 = $factor_c + $b;
    $factor_c = $add122;
    
    
    if ($value >>> 0 > 255) {
      __label__ = 21;
    } else {
      __label__ = 22;
    }
    if (__label__ == 21) {
      
      
      var $neg126 = $value >> 31 ^ -1;
      var $and127 = 255 & $neg126;
      $value = $and127;
    }
    
    
    
    
    
    
    $temp = $byte1 & 255 | ($byte2 & 255) << 8;
    
    
    
    
    var $or135 = $temp | ($byte3 & 255) << 16;
    $temp = $or135;
    
    
    
    var $or137 = $temp | $value << 24;
    $temp = $or137;
    
    
    
    
    HEAP32[$pred + 4 >> 2] = $temp;
    
    
    $value = $factor_c >> 5;
    
    
    var $add140 = $factor_c + $b;
    $factor_c = $add140;
    
    
    if ($value >>> 0 > 255) {
      __label__ = 23;
    } else {
      __label__ = 24;
    }
    if (__label__ == 23) {
      
      
      var $neg144 = $value >> 31 ^ -1;
      var $and145 = 255 & $neg144;
      $value = $and145;
    }
    
    
    $byte1 = $value & 255;
    
    
    $value = $factor_c >> 5;
    
    
    var $add149 = $factor_c + $b;
    $factor_c = $add149;
    
    
    if ($value >>> 0 > 255) {
      __label__ = 25;
    } else {
      __label__ = 26;
    }
    if (__label__ == 25) {
      
      
      var $neg153 = $value >> 31 ^ -1;
      var $and154 = 255 & $neg153;
      $value = $and154;
    }
    
    
    $byte2 = $value & 255;
    
    
    $value = $factor_c >> 5;
    
    
    var $add158 = $factor_c + $b;
    $factor_c = $add158;
    
    
    if ($value >>> 0 > 255) {
      __label__ = 27;
    } else {
      __label__ = 28;
    }
    if (__label__ == 27) {
      
      
      var $neg162 = $value >> 31 ^ -1;
      var $and163 = 255 & $neg162;
      $value = $and163;
    }
    
    
    $byte3 = $value & 255;
    
    
    $value = $factor_c >> 5;
    
    
    var $add167 = $factor_c + $b;
    $factor_c = $add167;
    
    
    if ($value >>> 0 > 255) {
      __label__ = 29;
    } else {
      __label__ = 30;
    }
    if (__label__ == 29) {
      
      
      var $neg171 = $value >> 31 ^ -1;
      var $and172 = 255 & $neg171;
      $value = $and172;
    }
    
    
    
    
    
    
    $temp = $byte1 & 255 | ($byte2 & 255) << 8;
    
    
    
    
    var $or180 = $temp | ($byte3 & 255) << 16;
    $temp = $or180;
    
    
    
    var $or182 = $temp | $value << 24;
    $temp = $or182;
    
    
    
    
    HEAP32[$pred + 8 >> 2] = $temp;
    
    
    $value = $factor_c >> 5;
    
    
    var $add185 = $factor_c + $b;
    $factor_c = $add185;
    
    
    if ($value >>> 0 > 255) {
      __label__ = 31;
    } else {
      __label__ = 32;
    }
    if (__label__ == 31) {
      
      
      var $neg189 = $value >> 31 ^ -1;
      var $and190 = 255 & $neg189;
      $value = $and190;
    }
    
    
    $byte1 = $value & 255;
    
    
    $value = $factor_c >> 5;
    
    
    var $add194 = $factor_c + $b;
    $factor_c = $add194;
    
    
    if ($value >>> 0 > 255) {
      __label__ = 33;
    } else {
      __label__ = 34;
    }
    if (__label__ == 33) {
      
      
      var $neg198 = $value >> 31 ^ -1;
      var $and199 = 255 & $neg198;
      $value = $and199;
    }
    
    
    $byte2 = $value & 255;
    
    
    $value = $factor_c >> 5;
    
    
    var $add203 = $factor_c + $b;
    $factor_c = $add203;
    
    
    if ($value >>> 0 > 255) {
      __label__ = 35;
    } else {
      __label__ = 36;
    }
    if (__label__ == 35) {
      
      
      var $neg207 = $value >> 31 ^ -1;
      var $and208 = 255 & $neg207;
      $value = $and208;
    }
    
    
    $byte3 = $value & 255;
    
    
    $value = $factor_c >> 5;
    
    
    if ($value >>> 0 > 255) {
      __label__ = 37;
    } else {
      __label__ = 38;
    }
    if (__label__ == 37) {
      
      
      var $neg215 = $value >> 31 ^ -1;
      var $and216 = 255 & $neg215;
      $value = $and216;
    }
    
    
    
    
    
    
    $temp = $byte1 & 255 | ($byte2 & 255) << 8;
    
    
    
    
    var $or224 = $temp | ($byte3 & 255) << 16;
    $temp = $or224;
    
    
    
    var $or226 = $temp | $value << 24;
    $temp = $or226;
    
    
    
    
    HEAP32[$pred + 12 >> 2] = $temp;
    
    
    var $add_ptr228 = $pred + $pred_pitch;
    $pred = $add_ptr228;
    
    var $inc230 = $i + 1;
    $i = $inc230;
    __label__ = 5;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z15Intra_Chroma_DCP12tagCommonObjiPhS1_($video, $pitch, $predCb, $predCr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 32;
  var __label__;
  var $video_addr;
  var $pitch_addr;
  var $predCb_addr;
  var $predCr_addr;
  var $i;
  var $temp;
  var $temp2;
  var $pred_a;
  var $pred_b;
  var $comp_ref_x;
  var $comp_ref_y;
  var $comp_ref_cb_x;
  var $comp_ref_cb_y;
  var $comp_ref_cr_x;
  var $comp_ref_cr_y;
  var $component;
  var $j;
  var $sum_x0;
  var $sum_x1;
  var $sum_y0;
  var $sum_y1;
  var $pred_0 = __stackBase__;
  var $pred_1 = __stackBase__ + 8;
  var $pred_2 = __stackBase__ + 16;
  var $pred_3 = __stackBase__ + 24;
  var $pred_pitch;
  var $pred;
  $video_addr = $video;
  $pitch_addr = $pitch;
  $predCb_addr = $predCb;
  $predCr_addr = $predCr;
  
  
  
  $comp_ref_cb_x = HEAP32[$video_addr + 788 >> 2];
  
  
  
  $comp_ref_cb_y = HEAP32[$video_addr + 792 >> 2];
  
  
  
  $comp_ref_cr_x = HEAP32[$video_addr + 800 >> 2];
  
  
  
  $comp_ref_cr_y = HEAP32[$video_addr + 804 >> 2];
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  
  
  
  
  
  
  
  
  if ((HEAP32[$video_addr + 1224 >> 2] & HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 6;
  }
  if (__label__ == 1) {
    
    $comp_ref_x = $comp_ref_cb_x;
    
    $comp_ref_y = $comp_ref_cb_y;
    $i = 0;
    while (1) {
      
      var $cmp = ($i | 0) < 2;
      if (!$cmp) {
        __label__ = 5;
        break;
      }
      
      
      
      $temp = HEAP32[$comp_ref_x >> 2];
      
      var $add_ptr = $comp_ref_x + 4;
      $comp_ref_x = $add_ptr;
      
      
      
      $temp2 = $temp >>> 8 & 16711935;
      
      var $and3 = $temp & 16711935;
      $temp = $and3;
      
      
      var $add = $temp + $temp2;
      $temp = $add;
      
      
      
      var $add5 = $temp + ($temp >>> 16);
      $temp = $add5;
      
      
      $sum_x0 = $temp & 65535;
      
      
      
      $temp = HEAP32[$comp_ref_x >> 2];
      
      
      
      $temp2 = $temp >>> 8 & 16711935;
      
      var $and9 = $temp & 16711935;
      $temp = $and9;
      
      
      var $add10 = $temp + $temp2;
      $temp = $add10;
      
      
      
      var $add12 = $temp + ($temp >>> 16);
      $temp = $add12;
      
      
      $sum_x1 = $temp & 65535;
      
      
      
      
      
      HEAP32[$pred_1 + $i * 4 >> 2] = $sum_x1 + 2 >> 2;
      
      
      
      $sum_y0 = HEAPU8[$comp_ref_y >> 0] & 255;
      
      
      var $add_ptr16 = $comp_ref_y + $pitch_addr;
      $comp_ref_y = $add_ptr16;
      
      
      
      var $add18 = $sum_y0 + (HEAPU8[$add_ptr16 >> 0] & 255);
      $sum_y0 = $add18;
      
      
      var $add_ptr19 = $comp_ref_y + $pitch_addr;
      $comp_ref_y = $add_ptr19;
      
      
      
      var $add21 = $sum_y0 + (HEAPU8[$add_ptr19 >> 0] & 255);
      $sum_y0 = $add21;
      
      
      var $add_ptr22 = $comp_ref_y + $pitch_addr;
      $comp_ref_y = $add_ptr22;
      
      
      
      var $add24 = $sum_y0 + (HEAPU8[$add_ptr22 >> 0] & 255);
      $sum_y0 = $add24;
      
      
      var $add_ptr25 = $comp_ref_y + $pitch_addr;
      $comp_ref_y = $add_ptr25;
      
      
      $sum_y1 = HEAPU8[$add_ptr25 >> 0] & 255;
      
      
      var $add_ptr27 = $comp_ref_y + $pitch_addr;
      $comp_ref_y = $add_ptr27;
      
      
      
      var $add29 = $sum_y1 + (HEAPU8[$add_ptr27 >> 0] & 255);
      $sum_y1 = $add29;
      
      
      var $add_ptr30 = $comp_ref_y + $pitch_addr;
      $comp_ref_y = $add_ptr30;
      
      
      
      var $add32 = $sum_y1 + (HEAPU8[$add_ptr30 >> 0] & 255);
      $sum_y1 = $add32;
      
      
      var $add_ptr33 = $comp_ref_y + $pitch_addr;
      $comp_ref_y = $add_ptr33;
      
      
      
      var $add35 = $sum_y1 + (HEAPU8[$add_ptr33 >> 0] & 255);
      $sum_y1 = $add35;
      
      
      
      
      
      HEAP32[$pred_2 + $i * 4 >> 2] = $sum_y1 + 2 >> 2;
      
      
      
      
      
      
      
      HEAP32[$pred_0 + $i * 4 >> 2] = $sum_y0 + $sum_x0 + 4 >> 3;
      
      
      
      
      
      
      
      HEAP32[$pred_3 + $i * 4 >> 2] = $sum_y1 + $sum_x1 + 4 >> 3;
      
      $comp_ref_x = $comp_ref_cr_x;
      
      $comp_ref_y = $comp_ref_cr_y;
      
      var $inc = $i + 1;
      $i = $inc;
      __label__ = 2;
      continue;
    }
  } else if (__label__ == 6) {
    
    
    
    
    if ((HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
      __label__ = 7;
    } else {
      __label__ = 12;
    }
    if (__label__ == 7) {
      
      $comp_ref_y = $comp_ref_cb_y;
      $i = 0;
      while (1) {
        
        var $cmp51 = ($i | 0) < 2;
        if (!$cmp51) {
          __label__ = 11;
          break;
        }
        
        
        
        $sum_y0 = HEAPU8[$comp_ref_y >> 0] & 255;
        
        
        var $add_ptr54 = $comp_ref_y + $pitch_addr;
        $comp_ref_y = $add_ptr54;
        
        
        
        var $add56 = $sum_y0 + (HEAPU8[$add_ptr54 >> 0] & 255);
        $sum_y0 = $add56;
        
        
        var $add_ptr57 = $comp_ref_y + $pitch_addr;
        $comp_ref_y = $add_ptr57;
        
        
        
        var $add59 = $sum_y0 + (HEAPU8[$add_ptr57 >> 0] & 255);
        $sum_y0 = $add59;
        
        
        var $add_ptr60 = $comp_ref_y + $pitch_addr;
        $comp_ref_y = $add_ptr60;
        
        
        
        var $add62 = $sum_y0 + (HEAPU8[$add_ptr60 >> 0] & 255);
        $sum_y0 = $add62;
        
        
        var $add_ptr63 = $comp_ref_y + $pitch_addr;
        $comp_ref_y = $add_ptr63;
        
        
        $sum_y1 = HEAPU8[$add_ptr63 >> 0] & 255;
        
        
        var $add_ptr65 = $comp_ref_y + $pitch_addr;
        $comp_ref_y = $add_ptr65;
        
        
        
        var $add67 = $sum_y1 + (HEAPU8[$add_ptr65 >> 0] & 255);
        $sum_y1 = $add67;
        
        
        var $add_ptr68 = $comp_ref_y + $pitch_addr;
        $comp_ref_y = $add_ptr68;
        
        
        
        var $add70 = $sum_y1 + (HEAPU8[$add_ptr68 >> 0] & 255);
        $sum_y1 = $add70;
        
        
        var $add_ptr71 = $comp_ref_y + $pitch_addr;
        $comp_ref_y = $add_ptr71;
        
        
        
        var $add73 = $sum_y1 + (HEAPU8[$add_ptr71 >> 0] & 255);
        $sum_y1 = $add73;
        
        
        
        
        
        HEAP32[$pred_1 + $i * 4 >> 2] = $sum_y0 + 2 >> 2;
        
        
        HEAP32[$pred_0 + $i * 4 >> 2] = $sum_y0 + 2 >> 2;
        
        
        
        
        
        HEAP32[$pred_3 + $i * 4 >> 2] = $sum_y1 + 2 >> 2;
        
        
        HEAP32[$pred_2 + $i * 4 >> 2] = $sum_y1 + 2 >> 2;
        
        $comp_ref_y = $comp_ref_cr_y;
        
        var $inc83 = $i + 1;
        $i = $inc83;
        __label__ = 8;
        continue;
      }
    } else if (__label__ == 12) {
      
      
      
      
      if ((HEAP32[$video_addr + 1224 >> 2] | 0) != 0) {
        __label__ = 13;
      } else {
        __label__ = 18;
      }
      if (__label__ == 13) {
        
        $comp_ref_x = $comp_ref_cb_x;
        $i = 0;
        while (1) {
          
          var $cmp90 = ($i | 0) < 2;
          if (!$cmp90) {
            __label__ = 17;
            break;
          }
          
          
          
          $temp = HEAP32[$comp_ref_x >> 2];
          
          var $add_ptr92 = $comp_ref_x + 4;
          $comp_ref_x = $add_ptr92;
          
          
          
          $temp2 = $temp >>> 8 & 16711935;
          
          var $and95 = $temp & 16711935;
          $temp = $and95;
          
          
          var $add96 = $temp + $temp2;
          $temp = $add96;
          
          
          
          var $add98 = $temp + ($temp >>> 16);
          $temp = $add98;
          
          
          $sum_x0 = $temp & 65535;
          
          
          
          $temp = HEAP32[$comp_ref_x >> 2];
          
          
          
          $temp2 = $temp >>> 8 & 16711935;
          
          var $and102 = $temp & 16711935;
          $temp = $and102;
          
          
          var $add103 = $temp + $temp2;
          $temp = $add103;
          
          
          
          var $add105 = $temp + ($temp >>> 16);
          $temp = $add105;
          
          
          $sum_x1 = $temp & 65535;
          
          
          
          
          
          HEAP32[$pred_2 + $i * 4 >> 2] = $sum_x0 + 2 >> 2;
          
          
          HEAP32[$pred_0 + $i * 4 >> 2] = $sum_x0 + 2 >> 2;
          
          
          
          
          
          HEAP32[$pred_3 + $i * 4 >> 2] = $sum_x1 + 2 >> 2;
          
          
          HEAP32[$pred_1 + $i * 4 >> 2] = $sum_x1 + 2 >> 2;
          
          $comp_ref_x = $comp_ref_cr_x;
          
          var $inc116 = $i + 1;
          $i = $inc116;
          __label__ = 14;
          continue;
        }
      } else if (__label__ == 18) {
        
        HEAP32[$pred_3 + 4 >> 2] = 128;
        
        HEAP32[$pred_3 >> 2] = 128;
        
        HEAP32[$pred_2 + 4 >> 2] = 128;
        
        HEAP32[$pred_2 >> 2] = 128;
        
        HEAP32[$pred_1 + 4 >> 2] = 128;
        
        HEAP32[$pred_1 >> 2] = 128;
        
        HEAP32[$pred_0 + 4 >> 2] = 128;
        
        HEAP32[$pred_0 >> 2] = 128;
      }
    }
  }
  
  $pred = $predCb_addr;
  $component = 0;
  $for_cond129$29 : while (1) {
    
    var $cmp130 = ($component | 0) < 2;
    if (!$cmp130) {
      __label__ = 33;
      break $for_cond129$29;
    }
    
    
    
    $pred_a = HEAP32[$pred_0 + $component * 4 >> 2];
    
    
    
    $pred_b = HEAP32[$pred_1 + $component * 4 >> 2];
    
    
    
    var $or = $pred_a | $pred_a << 8;
    $pred_a = $or;
    
    
    
    var $or135 = $pred_a | $pred_a << 16;
    $pred_a = $or135;
    
    
    
    var $or137 = $pred_b | $pred_b << 8;
    $pred_b = $or137;
    
    
    
    var $or139 = $pred_b | $pred_b << 16;
    $pred_b = $or139;
    $i = 4;
    $for_cond140$32 : while (1) {
      
      var $cmp141 = ($i | 0) < 6;
      if (!$cmp141) {
        __label__ = 31;
        break $for_cond140$32;
      }
      $j = 0;
      while (1) {
        
        var $cmp144 = ($j | 0) < 4;
        if (!$cmp144) {
          __label__ = 29;
          break;
        }
        
        
        
        HEAP32[$pred >> 2] = $pred_a;
        
        
        
        
        HEAP32[$pred + 4 >> 2] = $pred_b;
        
        
        var $add_ptr147 = $pred + $pred_pitch;
        $pred = $add_ptr147;
        
        var $inc149 = $j + 1;
        $j = $inc149;
        __label__ = 26;
        continue;
      }
      
      
      
      $pred_a = HEAP32[$pred_2 + $component * 4 >> 2];
      
      
      
      $pred_b = HEAP32[$pred_3 + $component * 4 >> 2];
      
      
      
      var $or154 = $pred_a | $pred_a << 8;
      $pred_a = $or154;
      
      
      
      var $or156 = $pred_a | $pred_a << 16;
      $pred_a = $or156;
      
      
      
      var $or158 = $pred_b | $pred_b << 8;
      $pred_b = $or158;
      
      
      
      var $or160 = $pred_b | $pred_b << 16;
      $pred_b = $or160;
      
      var $inc162 = $i + 1;
      $i = $inc162;
      __label__ = 24;
      continue $for_cond140$32;
    }
    
    $pred = $predCr_addr;
    
    var $inc165 = $component + 1;
    $component = $inc165;
    __label__ = 22;
    continue $for_cond129$29;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z23Intra_Chroma_HorizontalP12tagCommonObjiPhS1_($video, $pitch, $predCb, $predCr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $video_addr;
  var $pitch_addr;
  var $predCb_addr;
  var $predCr_addr;
  var $i;
  var $temp;
  var $comp_ref_cb_y;
  var $comp_ref_cr_y;
  var $comp;
  var $component;
  var $j;
  var $pred_pitch;
  var $pred;
  $video_addr = $video;
  $pitch_addr = $pitch;
  $predCb_addr = $predCb;
  $predCr_addr = $predCr;
  
  
  
  $comp_ref_cb_y = HEAP32[$video_addr + 792 >> 2];
  
  
  
  $comp_ref_cr_y = HEAP32[$video_addr + 804 >> 2];
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  
  $comp = $comp_ref_cb_y;
  
  $pred = $predCb_addr;
  $component = 0;
  $for_cond$2 : while (1) {
    
    var $cmp = ($component | 0) < 2;
    if (!$cmp) {
      __label__ = 12;
      break $for_cond$2;
    }
    $i = 4;
    $for_cond2$5 : while (1) {
      
      var $cmp3 = ($i | 0) < 6;
      if (!$cmp3) {
        __label__ = 10;
        break $for_cond2$5;
      }
      $j = 0;
      while (1) {
        
        var $cmp6 = ($j | 0) < 4;
        if (!$cmp6) {
          __label__ = 8;
          break;
        }
        
        
        
        $temp = HEAPU8[$comp >> 0] & 255;
        
        
        var $add_ptr = $comp + $pitch_addr;
        $comp = $add_ptr;
        
        
        
        var $or = $temp | $temp << 8;
        $temp = $or;
        
        
        
        var $or9 = $temp | $temp << 16;
        $temp = $or9;
        
        
        
        HEAP32[$pred >> 2] = $temp;
        
        
        
        
        HEAP32[$pred + 4 >> 2] = $temp;
        
        
        var $add_ptr11 = $pred + $pred_pitch;
        $pred = $add_ptr11;
        
        var $inc = $j + 1;
        $j = $inc;
        __label__ = 5;
        continue;
      }
      
      var $inc13 = $i + 1;
      $i = $inc13;
      __label__ = 3;
      continue $for_cond2$5;
    }
    
    $comp = $comp_ref_cr_y;
    
    $pred = $predCr_addr;
    
    var $inc16 = $component + 1;
    $component = $inc16;
    __label__ = 1;
    continue $for_cond$2;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z21Intra_Chroma_VerticalP12tagCommonObjPhS1_($video, $predCb, $predCr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $video_addr;
  var $predCb_addr;
  var $predCr_addr;
  var $temp1;
  var $temp2;
  var $comp_ref_cb_x;
  var $comp_ref_cr_x;
  var $comp_ref;
  var $component;
  var $j;
  var $pred_pitch;
  var $pred;
  $video_addr = $video;
  $predCb_addr = $predCb;
  $predCr_addr = $predCr;
  
  
  
  $comp_ref_cb_x = HEAP32[$video_addr + 788 >> 2];
  
  
  
  $comp_ref_cr_x = HEAP32[$video_addr + 800 >> 2];
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  
  $comp_ref = $comp_ref_cb_x;
  
  $pred = $predCb_addr;
  $component = 0;
  $for_cond$2 : while (1) {
    
    var $cmp = ($component | 0) < 2;
    if (!$cmp) {
      __label__ = 8;
      break $for_cond$2;
    }
    
    
    
    $temp1 = HEAP32[$comp_ref >> 2];
    
    
    
    
    $temp2 = HEAP32[$comp_ref + 4 >> 2];
    $j = 0;
    while (1) {
      
      var $cmp3 = ($j | 0) < 8;
      if (!$cmp3) {
        __label__ = 6;
        break;
      }
      
      
      
      HEAP32[$pred >> 2] = $temp1;
      
      
      
      
      HEAP32[$pred + 4 >> 2] = $temp2;
      
      
      var $add_ptr6 = $pred + $pred_pitch;
      $pred = $add_ptr6;
      
      var $inc = $j + 1;
      $j = $inc;
      __label__ = 3;
      continue;
    }
    
    $comp_ref = $comp_ref_cr_x;
    
    $pred = $predCr_addr;
    
    var $inc8 = $component + 1;
    $component = $inc8;
    __label__ = 1;
    continue $for_cond$2;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z18Intra_Chroma_PlaneP12tagCommonObjiPhS1_($video, $pitch, $predCb, $predCr) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  var $video_addr;
  var $pitch_addr;
  var $predCb_addr;
  var $predCr_addr;
  var $i;
  var $a_16_C = __stackBase__;
  var $b_C = __stackBase__ + 8;
  var $c_C = __stackBase__ + 16;
  var $a_16;
  var $b;
  var $c;
  var $factor_c;
  var $comp_ref_x;
  var $comp_ref_y;
  var $comp_ref_x0;
  var $comp_ref_x1;
  var $comp_ref_y0;
  var $comp_ref_y1;
  var $component;
  var $j;
  var $H;
  var $V;
  var $tmp;
  var $temp;
  var $byte1;
  var $byte2;
  var $byte3;
  var $value;
  var $topleft;
  var $pred_pitch;
  var $pred;
  $video_addr = $video;
  $pitch_addr = $pitch;
  $predCb_addr = $predCb;
  $predCr_addr = $predCr;
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  
  
  
  $comp_ref_x = HEAP32[$video_addr + 788 >> 2];
  
  
  
  $comp_ref_y = HEAP32[$video_addr + 792 >> 2];
  
  
  
  $topleft = HEAP8[$video_addr + 796 >> 0];
  $component = 0;
  $for_cond$2 : while (1) {
    
    var $cmp = ($component | 0) < 2;
    if (!$cmp) {
      __label__ = 8;
      break $for_cond$2;
    }
    $V = 0;
    $H = 0;
    
    
    $comp_ref_x0 = $comp_ref_x + 4;
    
    
    $comp_ref_x1 = $comp_ref_x + 2;
    
    
    
    
    $comp_ref_y0 = $comp_ref_y + ($pitch_addr << 2);
    
    
    
    
    $comp_ref_y1 = $comp_ref_y + ($pitch_addr << 1);
    $i = 1;
    while (1) {
      
      var $cmp15 = ($i | 0) < 4;
      if (!$cmp15) {
        __label__ = 6;
        break;
      }
      
      var $17 = $comp_ref_x0;
      var $incdec_ptr = $17 + 1;
      $comp_ref_x0 = $incdec_ptr;
      
      var $conv = HEAPU8[$17 >> 0] & 255;
      var $19 = $comp_ref_x1;
      var $incdec_ptr17 = $19 + -1;
      $comp_ref_x1 = $incdec_ptr17;
      
      
      
      
      
      var $add = $H + $i * ($conv - (HEAPU8[$19 >> 0] & 255));
      $H = $add;
      
      
      
      
      
      
      
      
      
      
      var $add23 = $V + $i * ((HEAPU8[$comp_ref_y0 >> 0] & 255) - (HEAPU8[$comp_ref_y1 >> 0] & 255));
      $V = $add23;
      
      
      var $add_ptr24 = $comp_ref_y0 + $pitch_addr;
      $comp_ref_y0 = $add_ptr24;
      
      
      
      var $add_ptr25 = $comp_ref_y1 + (0 - $pitch_addr);
      $comp_ref_y1 = $add_ptr25;
      
      var $inc = $i + 1;
      $i = $inc;
      __label__ = 3;
      continue;
    }
    
    var $34 = $comp_ref_x0;
    var $incdec_ptr26 = $34 + 1;
    $comp_ref_x0 = $incdec_ptr26;
    
    
    
    
    
    
    
    var $add31 = $H + $i * ((HEAPU8[$34 >> 0] & 255) - ($topleft & 255));
    $H = $add31;
    
    
    
    
    
    
    
    
    
    
    var $add36 = $V + $i * ((HEAPU8[$comp_ref_y0 >> 0] & 255) - (HEAPU8[$comp_ref_y1 >> 0] & 255));
    $V = $add36;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    HEAP32[$a_16_C + $component * 4 >> 2] = ((HEAPU8[$comp_ref_x + 7 >> 0] & 255) + (HEAPU8[$comp_ref_y + 7 * $pitch_addr >> 0] & 255) << 4) + 16;
    
    
    
    
    
    
    HEAP32[$b_C + $component * 4 >> 2] = 17 * $H + 16 >> 5;
    
    
    
    
    
    
    HEAP32[$c_C + $component * 4 >> 2] = 17 * $V + 16 >> 5;
    
    
    
    $comp_ref_x = HEAP32[$video_addr + 800 >> 2];
    
    
    
    $comp_ref_y = HEAP32[$video_addr + 804 >> 2];
    
    
    
    $topleft = HEAP8[$video_addr + 808 >> 0];
    
    var $inc53 = $component + 1;
    $component = $inc53;
    __label__ = 1;
    continue $for_cond$2;
  }
  
  $pred = $predCb_addr;
  $component = 0;
  $for_cond55$12 : while (1) {
    
    var $cmp56 = ($component | 0) < 2;
    if (!$cmp56) {
      __label__ = 36;
      break $for_cond55$12;
    }
    
    
    
    $a_16 = HEAP32[$a_16_C + $component * 4 >> 2];
    
    
    
    $b = HEAP32[$b_C + $component * 4 >> 2];
    
    
    
    $c = HEAP32[$c_C + $component * 4 >> 2];
    $tmp = 0;
    $i = 4;
    $for_cond61$15 : while (1) {
      
      var $cmp62 = ($i | 0) < 6;
      if (!$cmp62) {
        __label__ = 34;
        break $for_cond61$15;
      }
      $j = 0;
      while (1) {
        
        var $cmp65 = ($j | 0) < 4;
        if (!$cmp65) {
          __label__ = 32;
          break;
        }
        
        
        var $73 = $tmp;
        var $inc67 = $73 + 1;
        $tmp = $inc67;
        
        
        
        $factor_c = $a_16 + $c * ($73 - 3);
        
        
        
        var $sub72 = $factor_c - 3 * $b;
        $factor_c = $sub72;
        
        
        $value = $factor_c >> 5;
        
        
        var $add74 = $factor_c + $b;
        $factor_c = $add74;
        
        
        if ($value >>> 0 > 255) {
          __label__ = 15;
        } else {
          __label__ = 16;
        }
        if (__label__ == 15) {
          
          
          var $neg = $value >> 31 ^ -1;
          var $and = 255 & $neg;
          $value = $and;
        }
        
        
        $byte1 = $value & 255;
        
        
        $value = $factor_c >> 5;
        
        
        var $add79 = $factor_c + $b;
        $factor_c = $add79;
        
        
        if ($value >>> 0 > 255) {
          __label__ = 17;
        } else {
          __label__ = 18;
        }
        if (__label__ == 17) {
          
          
          var $neg83 = $value >> 31 ^ -1;
          var $and84 = 255 & $neg83;
          $value = $and84;
        }
        
        
        $byte2 = $value & 255;
        
        
        $value = $factor_c >> 5;
        
        
        var $add88 = $factor_c + $b;
        $factor_c = $add88;
        
        
        if ($value >>> 0 > 255) {
          __label__ = 19;
        } else {
          __label__ = 20;
        }
        if (__label__ == 19) {
          
          
          var $neg92 = $value >> 31 ^ -1;
          var $and93 = 255 & $neg92;
          $value = $and93;
        }
        
        
        $byte3 = $value & 255;
        
        
        $value = $factor_c >> 5;
        
        
        var $add97 = $factor_c + $b;
        $factor_c = $add97;
        
        
        if ($value >>> 0 > 255) {
          __label__ = 21;
        } else {
          __label__ = 22;
        }
        if (__label__ == 21) {
          
          
          var $neg101 = $value >> 31 ^ -1;
          var $and102 = 255 & $neg101;
          $value = $and102;
        }
        
        
        
        
        
        
        $temp = $byte1 & 255 | ($byte2 & 255) << 8;
        
        
        
        
        var $or109 = $temp | ($byte3 & 255) << 16;
        $temp = $or109;
        
        
        
        var $or111 = $temp | $value << 24;
        $temp = $or111;
        
        
        
        HEAP32[$pred >> 2] = $temp;
        
        
        $value = $factor_c >> 5;
        
        
        var $add113 = $factor_c + $b;
        $factor_c = $add113;
        
        
        if ($value >>> 0 > 255) {
          __label__ = 23;
        } else {
          __label__ = 24;
        }
        if (__label__ == 23) {
          
          
          var $neg117 = $value >> 31 ^ -1;
          var $and118 = 255 & $neg117;
          $value = $and118;
        }
        
        
        $byte1 = $value & 255;
        
        
        $value = $factor_c >> 5;
        
        
        var $add122 = $factor_c + $b;
        $factor_c = $add122;
        
        
        if ($value >>> 0 > 255) {
          __label__ = 25;
        } else {
          __label__ = 26;
        }
        if (__label__ == 25) {
          
          
          var $neg126 = $value >> 31 ^ -1;
          var $and127 = 255 & $neg126;
          $value = $and127;
        }
        
        
        $byte2 = $value & 255;
        
        
        $value = $factor_c >> 5;
        
        
        var $add131 = $factor_c + $b;
        $factor_c = $add131;
        
        
        if ($value >>> 0 > 255) {
          __label__ = 27;
        } else {
          __label__ = 28;
        }
        if (__label__ == 27) {
          
          
          var $neg135 = $value >> 31 ^ -1;
          var $and136 = 255 & $neg135;
          $value = $and136;
        }
        
        
        $byte3 = $value & 255;
        
        
        $value = $factor_c >> 5;
        
        
        var $add140 = $factor_c + $b;
        $factor_c = $add140;
        
        
        if ($value >>> 0 > 255) {
          __label__ = 29;
        } else {
          __label__ = 30;
        }
        if (__label__ == 29) {
          
          
          var $neg144 = $value >> 31 ^ -1;
          var $and145 = 255 & $neg144;
          $value = $and145;
        }
        
        
        
        
        
        
        $temp = $byte1 & 255 | ($byte2 & 255) << 8;
        
        
        
        
        var $or153 = $temp | ($byte3 & 255) << 16;
        $temp = $or153;
        
        
        
        var $or155 = $temp | $value << 24;
        $temp = $or155;
        
        
        
        
        HEAP32[$pred + 4 >> 2] = $temp;
        
        
        var $add_ptr157 = $pred + $pred_pitch;
        $pred = $add_ptr157;
        
        var $inc159 = $j + 1;
        $j = $inc159;
        __label__ = 13;
        continue;
      }
      
      var $inc162 = $i + 1;
      $i = $inc162;
      __label__ = 11;
      continue $for_cond61$15;
    }
    
    $pred = $predCr_addr;
    
    var $inc165 = $component + 1;
    $component = $inc165;
    __label__ = 9;
    continue $for_cond55$12;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z18Intra_4x4_VerticalP12tagCommonObji($video, $block_offset) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  
  var $video_addr;
  var $block_offset_addr;
  var $comp_ref;
  var $temp;
  var $pred;
  var $pred_pitch;
  $video_addr = $video;
  $block_offset_addr = $block_offset;
  
  
  
  $comp_ref = HEAP32[$video_addr + 776 >> 2];
  
  
  
  
  
  $pred = HEAP32[$video_addr + 768 >> 2] + $block_offset_addr;
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  
  
  
  $temp = HEAP32[$comp_ref >> 2];
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr2 = $pred + $pred_pitch;
  $pred = $add_ptr2;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr3 = $pred + $pred_pitch;
  $pred = $add_ptr3;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr4 = $pred + $pred_pitch;
  $pred = $add_ptr4;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z20Intra_4x4_HorizontalP12tagCommonObjii($video, $pitch, $block_offset) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  
  var $video_addr;
  var $pitch_addr;
  var $block_offset_addr;
  var $comp_ref;
  var $temp;
  var $P;
  var $pred;
  var $pred_pitch;
  $video_addr = $video;
  $pitch_addr = $pitch;
  $block_offset_addr = $block_offset;
  
  
  
  $comp_ref = HEAP32[$video_addr + 780 >> 2];
  
  
  
  
  
  $pred = HEAP32[$video_addr + 768 >> 2] + $block_offset_addr;
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  
  
  
  $P = HEAPU8[$comp_ref >> 0] & 255;
  
  
  
  
  $temp = $P | $P << 8;
  
  
  
  var $or3 = $temp | $temp << 16;
  $temp = $or3;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr4 = $pred + $pred_pitch;
  $pred = $add_ptr4;
  
  
  var $add_ptr5 = $comp_ref + $pitch_addr;
  $comp_ref = $add_ptr5;
  
  
  
  $P = HEAPU8[$comp_ref >> 0] & 255;
  
  
  
  
  $temp = $P | $P << 8;
  
  
  
  var $or10 = $temp | $temp << 16;
  $temp = $or10;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr11 = $pred + $pred_pitch;
  $pred = $add_ptr11;
  
  
  var $add_ptr12 = $comp_ref + $pitch_addr;
  $comp_ref = $add_ptr12;
  
  
  
  $P = HEAPU8[$comp_ref >> 0] & 255;
  
  
  
  
  $temp = $P | $P << 8;
  
  
  
  var $or17 = $temp | $temp << 16;
  $temp = $or17;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr18 = $pred + $pred_pitch;
  $pred = $add_ptr18;
  
  
  var $add_ptr19 = $comp_ref + $pitch_addr;
  $comp_ref = $add_ptr19;
  
  
  
  $P = HEAPU8[$comp_ref >> 0] & 255;
  
  
  
  
  $temp = $P | $P << 8;
  
  
  
  var $or24 = $temp | $temp << 16;
  $temp = $or24;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z12Intra_4x4_DCP12tagCommonObjiiP23tagNeighborAvailability($video, $pitch, $block_offset, $availability) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $video_addr;
  var $pitch_addr;
  var $block_offset_addr;
  var $availability_addr;
  var $comp_ref;
  var $temp;
  var $DC;
  var $pred;
  var $pred_pitch;
  $video_addr = $video;
  $pitch_addr = $pitch;
  $block_offset_addr = $block_offset;
  $availability_addr = $availability;
  
  
  
  $comp_ref = HEAP32[$video_addr + 780 >> 2];
  
  
  
  
  
  $pred = HEAP32[$video_addr + 768 >> 2] + $block_offset_addr;
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  
  
  
  
  if ((HEAP32[$availability_addr >> 2] | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 5;
  }
  if (__label__ == 1) {
    
    
    
    $DC = HEAPU8[$comp_ref >> 0] & 255;
    
    
    var $add_ptr2 = $comp_ref + $pitch_addr;
    $comp_ref = $add_ptr2;
    
    
    
    
    var $add = $DC + (HEAPU8[$comp_ref >> 0] & 255);
    $DC = $add;
    
    
    var $add_ptr4 = $comp_ref + $pitch_addr;
    $comp_ref = $add_ptr4;
    
    
    
    
    var $add6 = $DC + (HEAPU8[$comp_ref >> 0] & 255);
    $DC = $add6;
    
    
    var $add_ptr7 = $comp_ref + $pitch_addr;
    $comp_ref = $add_ptr7;
    
    
    
    
    var $add9 = $DC + (HEAPU8[$comp_ref >> 0] & 255);
    $DC = $add9;
    
    
    
    $comp_ref = HEAP32[$video_addr + 776 >> 2];
    
    
    
    
    if ((HEAP32[$availability_addr + 4 >> 2] | 0) != 0) {
      __label__ = 2;
    } else {
      __label__ = 3;
    }
    if (__label__ == 2) {
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $shr = (HEAPU8[$comp_ref >> 0] & 255) + (HEAPU8[$comp_ref + 1 >> 0] & 255) + (HEAPU8[$comp_ref + 2 >> 0] & 255) + (HEAPU8[$comp_ref + 3 >> 0] & 255) + $DC + 4 >> 3;
      $DC = $shr;
    } else if (__label__ == 3) {
      
      
      var $shr25 = $DC + 2 >> 2;
      $DC = $shr25;
    }
  } else if (__label__ == 5) {
    
    
    
    
    if ((HEAP32[$availability_addr + 4 >> 2] | 0) != 0) {
      __label__ = 6;
    } else {
      __label__ = 7;
    }
    if (__label__ == 6) {
      
      
      
      $comp_ref = HEAP32[$video_addr + 776 >> 2];
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      $DC = (HEAPU8[$comp_ref >> 0] & 255) + (HEAPU8[$comp_ref + 1 >> 0] & 255) + (HEAPU8[$comp_ref + 2 >> 0] & 255) + (HEAPU8[$comp_ref + 3 >> 0] & 255) + 2 >> 2;
    } else if (__label__ == 7) {
      $DC = 128;
    }
  }
  
  
  
  
  $temp = $DC | $DC << 8;
  
  
  
  var $or48 = $temp | $temp << 16;
  $temp = $or48;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr49 = $pred + $pred_pitch;
  $pred = $add_ptr49;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr50 = $pred + $pred_pitch;
  $pred = $add_ptr50;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr51 = $pred + $pred_pitch;
  $pred = $add_ptr51;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z19Intra_4x4_Down_LeftP12tagCommonObjiP23tagNeighborAvailability($video, $block_offset, $availability) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $video_addr;
  var $block_offset_addr;
  var $availability_addr;
  var $comp_refx;
  var $temp;
  var $r0;
  var $r1;
  var $r2;
  var $r3;
  var $r4;
  var $r5;
  var $r6;
  var $r7;
  var $pred;
  var $pred_pitch;
  $video_addr = $video;
  $block_offset_addr = $block_offset;
  $availability_addr = $availability;
  
  
  
  $comp_refx = HEAP32[$video_addr + 776 >> 2];
  
  
  
  
  
  $pred = HEAP32[$video_addr + 768 >> 2] + $block_offset_addr;
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  var $7 = $comp_refx;
  var $incdec_ptr = $7 + 1;
  $comp_refx = $incdec_ptr;
  
  
  $r0 = HEAPU8[$7 >> 0] & 255;
  var $9 = $comp_refx;
  var $incdec_ptr2 = $9 + 1;
  $comp_refx = $incdec_ptr2;
  
  
  $r1 = HEAPU8[$9 >> 0] & 255;
  var $11 = $comp_refx;
  var $incdec_ptr4 = $11 + 1;
  $comp_refx = $incdec_ptr4;
  
  
  $r2 = HEAPU8[$11 >> 0] & 255;
  var $13 = $comp_refx;
  var $incdec_ptr6 = $13 + 1;
  $comp_refx = $incdec_ptr6;
  
  
  $r3 = HEAPU8[$13 >> 0] & 255;
  
  
  
  
  if ((HEAP32[$availability_addr + 8 >> 2] | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    var $17 = $comp_refx;
    var $incdec_ptr8 = $17 + 1;
    $comp_refx = $incdec_ptr8;
    
    
    $r4 = HEAPU8[$17 >> 0] & 255;
    var $19 = $comp_refx;
    var $incdec_ptr10 = $19 + 1;
    $comp_refx = $incdec_ptr10;
    
    
    $r5 = HEAPU8[$19 >> 0] & 255;
    var $21 = $comp_refx;
    var $incdec_ptr12 = $21 + 1;
    $comp_refx = $incdec_ptr12;
    
    
    $r6 = HEAPU8[$21 >> 0] & 255;
    var $23 = $comp_refx;
    var $incdec_ptr14 = $23 + 1;
    $comp_refx = $incdec_ptr14;
    
    
    $r7 = HEAPU8[$23 >> 0] & 255;
  } else if (__label__ == 2) {
    
    $r4 = $r3;
    
    $r5 = $r3;
    
    $r6 = $r3;
    
    $r7 = $r3;
  }
  
  
  
  var $add = $r0 + ($r1 << 1);
  $r0 = $add;
  
  
  var $add16 = $r0 + $r2;
  $r0 = $add16;
  
  var $add17 = $r0 + 2;
  $r0 = $add17;
  
  var $shr = $r0 >> 2;
  $r0 = $shr;
  
  
  
  var $add19 = $r1 + ($r2 << 1);
  $r1 = $add19;
  
  
  var $add20 = $r1 + $r3;
  $r1 = $add20;
  
  var $add21 = $r1 + 2;
  $r1 = $add21;
  
  var $shr22 = $r1 >> 2;
  $r1 = $shr22;
  
  
  
  var $add24 = $r2 + ($r3 << 1);
  $r2 = $add24;
  
  
  var $add25 = $r2 + $r4;
  $r2 = $add25;
  
  var $add26 = $r2 + 2;
  $r2 = $add26;
  
  var $shr27 = $r2 >> 2;
  $r2 = $shr27;
  
  
  
  var $add29 = $r3 + ($r4 << 1);
  $r3 = $add29;
  
  
  var $add30 = $r3 + $r5;
  $r3 = $add30;
  
  var $add31 = $r3 + 2;
  $r3 = $add31;
  
  var $shr32 = $r3 >> 2;
  $r3 = $shr32;
  
  
  
  var $add34 = $r4 + ($r5 << 1);
  $r4 = $add34;
  
  
  var $add35 = $r4 + $r6;
  $r4 = $add35;
  
  var $add36 = $r4 + 2;
  $r4 = $add36;
  
  var $shr37 = $r4 >> 2;
  $r4 = $shr37;
  
  
  
  var $add39 = $r5 + ($r6 << 1);
  $r5 = $add39;
  
  
  var $add40 = $r5 + $r7;
  $r5 = $add40;
  
  var $add41 = $r5 + 2;
  $r5 = $add41;
  
  var $shr42 = $r5 >> 2;
  $r5 = $shr42;
  
  
  
  var $add43 = $r6 + 3 * $r7;
  $r6 = $add43;
  
  var $add44 = $r6 + 2;
  $r6 = $add44;
  
  var $shr45 = $r6 >> 2;
  $r6 = $shr45;
  
  
  
  
  $temp = $r0 | $r1 << 8;
  
  
  
  var $or48 = $temp | $r2 << 16;
  $temp = $or48;
  
  
  
  var $or50 = $temp | $r3 << 24;
  $temp = $or50;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr51 = $pred + $pred_pitch;
  $pred = $add_ptr51;
  
  
  
  
  var $or54 = $temp >>> 8 | $r4 << 24;
  $temp = $or54;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr55 = $pred + $pred_pitch;
  $pred = $add_ptr55;
  
  
  
  
  var $or58 = $temp >>> 8 | $r5 << 24;
  $temp = $or58;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr59 = $pred + $pred_pitch;
  $pred = $add_ptr59;
  
  
  
  
  var $or62 = $temp >>> 8 | $r6 << 24;
  $temp = $or62;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z29Intra_4x4_Diagonal_Down_RightP12tagCommonObjii($video, $pitch, $block_offset) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  
  var $video_addr;
  var $pitch_addr;
  var $block_offset_addr;
  var $comp_refx;
  var $comp_refy;
  var $temp;
  var $P_x;
  var $Q_x;
  var $R_x;
  var $P_y;
  var $Q_y;
  var $R_y;
  var $D;
  var $x0;
  var $x1;
  var $x2;
  var $pred;
  var $pred_pitch;
  $video_addr = $video;
  $pitch_addr = $pitch;
  $block_offset_addr = $block_offset;
  
  
  
  $comp_refx = HEAP32[$video_addr + 776 >> 2];
  
  
  
  $comp_refy = HEAP32[$video_addr + 780 >> 2];
  
  
  
  
  
  $pred = HEAP32[$video_addr + 768 >> 2] + $block_offset_addr;
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  
  
  
  $temp = HEAP32[$comp_refx >> 2];
  
  
  $x0 = $temp & 255;
  
  
  
  $x1 = $temp >>> 8 & 255;
  
  
  
  $x2 = $temp >>> 16 & 255;
  
  
  
  
  
  
  
  
  $Q_x = $x0 + 2 * $x1 + $x2 + 2 >> 2;
  
  
  
  
  
  
  
  
  
  $R_x = $x1 + 2 * $x2 + ($temp >>> 24) + 2 >>> 2;
  
  
  
  
  $x2 = HEAPU8[$video_addr + 784 >> 0] & 255;
  
  
  
  
  
  
  
  
  $P_x = $x2 + 2 * $x0 + $x1 + 2 >> 2;
  
  
  
  $x1 = HEAPU8[$comp_refy >> 0] & 255;
  
  
  var $add_ptr20 = $comp_refy + $pitch_addr;
  $comp_refy = $add_ptr20;
  
  
  
  
  
  
  
  
  $D = $x0 + 2 * $x2 + $x1 + 2 >> 2;
  
  
  
  $x0 = HEAPU8[$comp_refy >> 0] & 255;
  
  
  var $add_ptr27 = $comp_refy + $pitch_addr;
  $comp_refy = $add_ptr27;
  
  
  
  
  
  
  
  
  $P_y = $x2 + 2 * $x1 + $x0 + 2 >> 2;
  
  
  
  $x2 = HEAPU8[$comp_refy >> 0] & 255;
  
  
  var $add_ptr34 = $comp_refy + $pitch_addr;
  $comp_refy = $add_ptr34;
  
  
  
  
  
  
  
  
  $Q_y = $x1 + 2 * $x0 + $x2 + 2 >> 2;
  
  
  
  $x1 = HEAPU8[$comp_refy >> 0] & 255;
  
  
  
  
  
  
  
  
  $R_y = $x0 + 2 * $x2 + $x1 + 2 >> 2;
  
  
  
  
  $temp = $D | $P_x << 8;
  
  
  
  var $or47 = $temp | $Q_x << 16;
  $temp = $or47;
  
  
  
  var $or49 = $temp | $R_x << 24;
  $temp = $or49;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr50 = $pred + $pred_pitch;
  $pred = $add_ptr50;
  
  
  
  
  $temp = $P_y | $D << 8;
  
  
  
  var $or54 = $temp | $P_x << 16;
  $temp = $or54;
  
  
  
  var $or56 = $temp | $Q_x << 24;
  $temp = $or56;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr57 = $pred + $pred_pitch;
  $pred = $add_ptr57;
  
  
  
  
  $temp = $Q_y | $P_y << 8;
  
  
  
  var $or61 = $temp | $D << 16;
  $temp = $or61;
  
  
  
  var $or63 = $temp | $P_x << 24;
  $temp = $or63;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr64 = $pred + $pred_pitch;
  $pred = $add_ptr64;
  
  
  
  
  $temp = $R_y | $Q_y << 8;
  
  
  
  var $or68 = $temp | $P_y << 16;
  $temp = $or68;
  
  
  
  var $or70 = $temp | $D << 24;
  $temp = $or70;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z33Intra_4x4_Diagonal_Vertical_RightP12tagCommonObjii($video, $pitch, $block_offset) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  
  var $video_addr;
  var $pitch_addr;
  var $block_offset_addr;
  var $comp_refx;
  var $comp_refy;
  var $temp;
  var $P0;
  var $Q0;
  var $R0;
  var $S0;
  var $P1;
  var $Q1;
  var $R1;
  var $P2;
  var $Q2;
  var $D;
  var $x0;
  var $x1;
  var $x2;
  var $pred;
  var $pred_pitch;
  $video_addr = $video;
  $pitch_addr = $pitch;
  $block_offset_addr = $block_offset;
  
  
  
  $comp_refx = HEAP32[$video_addr + 776 >> 2];
  
  
  
  $comp_refy = HEAP32[$video_addr + 780 >> 2];
  
  
  
  
  
  $pred = HEAP32[$video_addr + 768 >> 2] + $block_offset_addr;
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  var $9 = $comp_refx;
  var $incdec_ptr = $9 + 1;
  $comp_refx = $incdec_ptr;
  
  
  $x0 = HEAPU8[$9 >> 0] & 255;
  var $11 = $comp_refx;
  var $incdec_ptr2 = $11 + 1;
  $comp_refx = $incdec_ptr2;
  
  
  $x1 = HEAPU8[$11 >> 0] & 255;
  
  
  
  
  $Q0 = $x0 + $x1 + 1;
  var $15 = $comp_refx;
  var $incdec_ptr5 = $15 + 1;
  $comp_refx = $incdec_ptr5;
  
  
  $x2 = HEAPU8[$15 >> 0] & 255;
  
  
  
  
  $R0 = $x1 + $x2 + 1;
  var $19 = $comp_refx;
  var $incdec_ptr9 = $19 + 1;
  $comp_refx = $incdec_ptr9;
  
  
  $x1 = HEAPU8[$19 >> 0] & 255;
  
  
  
  
  $S0 = $x2 + $x1 + 1;
  
  
  
  
  $x1 = HEAPU8[$video_addr + 784 >> 0] & 255;
  
  
  
  
  $P0 = $x1 + $x0 + 1;
  
  
  
  $x2 = HEAPU8[$comp_refy >> 0] & 255;
  
  
  var $add_ptr17 = $comp_refy + $pitch_addr;
  $comp_refy = $add_ptr17;
  
  
  
  
  
  
  
  
  $D = $x2 + 2 * $x1 + $x0 + 2 >> 2;
  
  
  
  
  $P1 = $P0 + $Q0 >> 2;
  
  
  
  
  $Q1 = $Q0 + $R0 >> 2;
  
  
  
  
  $R1 = $R0 + $S0 >> 2;
  
  var $shr27 = $P0 >> 1;
  $P0 = $shr27;
  
  var $shr28 = $Q0 >> 1;
  $Q0 = $shr28;
  
  var $shr29 = $R0 >> 1;
  $R0 = $shr29;
  
  var $shr30 = $S0 >> 1;
  $S0 = $shr30;
  
  
  
  $x0 = HEAPU8[$comp_refy >> 0] & 255;
  
  
  var $add_ptr32 = $comp_refy + $pitch_addr;
  $comp_refy = $add_ptr32;
  
  
  
  
  
  
  
  
  $P2 = $x1 + 2 * $x2 + $x0 + 2 >> 2;
  
  
  
  $x1 = HEAPU8[$comp_refy >> 0] & 255;
  
  
  var $add_ptr39 = $comp_refy + $pitch_addr;
  $comp_refy = $add_ptr39;
  
  
  
  
  
  
  
  
  $Q2 = $x2 + 2 * $x0 + $x1 + 2 >> 2;
  
  
  
  
  $temp = $P0 | $Q0 << 8;
  
  
  
  var $or46 = $temp | $R0 << 16;
  $temp = $or46;
  
  
  
  var $or48 = $temp | $S0 << 24;
  $temp = $or48;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr49 = $pred + $pred_pitch;
  $pred = $add_ptr49;
  
  
  
  
  $temp = $D | $P1 << 8;
  
  
  
  var $or53 = $temp | $Q1 << 16;
  $temp = $or53;
  
  
  
  var $or55 = $temp | $R1 << 24;
  $temp = $or55;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr56 = $pred + $pred_pitch;
  $pred = $add_ptr56;
  
  
  
  
  $temp = $P2 | $P0 << 8;
  
  
  
  var $or60 = $temp | $Q0 << 16;
  $temp = $or60;
  
  
  
  var $or62 = $temp | $R0 << 24;
  $temp = $or62;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr63 = $pred + $pred_pitch;
  $pred = $add_ptr63;
  
  
  
  
  $temp = $Q2 | $D << 8;
  
  
  
  var $or67 = $temp | $P1 << 16;
  $temp = $or67;
  
  
  
  var $or69 = $temp | $Q1 << 24;
  $temp = $or69;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z34Intra_4x4_Diagonal_Horizontal_DownP12tagCommonObjii($video, $pitch, $block_offset) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  
  var $video_addr;
  var $pitch_addr;
  var $block_offset_addr;
  var $comp_refx;
  var $comp_refy;
  var $temp;
  var $P0;
  var $Q0;
  var $R0;
  var $S0;
  var $P1;
  var $Q1;
  var $R1;
  var $P2;
  var $Q2;
  var $D;
  var $x0;
  var $x1;
  var $x2;
  var $pred;
  var $pred_pitch;
  $video_addr = $video;
  $pitch_addr = $pitch;
  $block_offset_addr = $block_offset;
  
  
  
  $comp_refx = HEAP32[$video_addr + 776 >> 2];
  
  
  
  $comp_refy = HEAP32[$video_addr + 780 >> 2];
  
  
  
  
  
  $pred = HEAP32[$video_addr + 768 >> 2] + $block_offset_addr;
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  var $9 = $comp_refx;
  var $incdec_ptr = $9 + 1;
  $comp_refx = $incdec_ptr;
  
  
  $x0 = HEAPU8[$9 >> 0] & 255;
  var $11 = $comp_refx;
  var $incdec_ptr2 = $11 + 1;
  $comp_refx = $incdec_ptr2;
  
  
  $x1 = HEAPU8[$11 >> 0] & 255;
  var $13 = $comp_refx;
  var $incdec_ptr4 = $13 + 1;
  $comp_refx = $incdec_ptr4;
  
  
  $x2 = HEAPU8[$13 >> 0] & 255;
  
  
  
  
  
  
  
  
  $Q2 = $x0 + 2 * $x1 + $x2 + 2 >> 2;
  
  
  
  
  $x2 = HEAPU8[$video_addr + 784 >> 0] & 255;
  
  
  
  
  
  
  
  
  $P2 = $x2 + 2 * $x0 + $x1 + 2 >> 2;
  
  
  
  $x1 = HEAPU8[$comp_refy >> 0] & 255;
  
  
  var $add_ptr15 = $comp_refy + $pitch_addr;
  $comp_refy = $add_ptr15;
  
  
  
  
  
  
  
  
  $D = $x1 + 2 * $x2 + $x0 + 2 >> 2;
  
  
  
  
  $P0 = $x2 + $x1 + 1;
  
  
  
  $x0 = HEAPU8[$comp_refy >> 0] & 255;
  
  
  var $add_ptr24 = $comp_refy + $pitch_addr;
  $comp_refy = $add_ptr24;
  
  
  
  
  $Q0 = $x1 + $x0 + 1;
  
  
  
  $x1 = HEAPU8[$comp_refy >> 0] & 255;
  
  
  var $add_ptr28 = $comp_refy + $pitch_addr;
  $comp_refy = $add_ptr28;
  
  
  
  
  $R0 = $x0 + $x1 + 1;
  
  
  
  $x2 = HEAPU8[$comp_refy >> 0] & 255;
  
  
  
  
  $S0 = $x1 + $x2 + 1;
  
  
  
  
  $P1 = $P0 + $Q0 >> 2;
  
  
  
  
  $Q1 = $Q0 + $R0 >> 2;
  
  
  
  
  $R1 = $R0 + $S0 >> 2;
  
  var $shr40 = $P0 >> 1;
  $P0 = $shr40;
  
  var $shr41 = $Q0 >> 1;
  $Q0 = $shr41;
  
  var $shr42 = $R0 >> 1;
  $R0 = $shr42;
  
  var $shr43 = $S0 >> 1;
  $S0 = $shr43;
  
  
  
  
  $temp = $P0 | $D << 8;
  
  
  
  var $or45 = $temp | $P2 << 16;
  $temp = $or45;
  
  
  
  var $or47 = $temp | $Q2 << 24;
  $temp = $or47;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr48 = $pred + $pred_pitch;
  $pred = $add_ptr48;
  
  
  
  
  $temp = $Q0 | $P1 << 8;
  
  
  
  var $or52 = $temp | $P0 << 16;
  $temp = $or52;
  
  
  
  var $or54 = $temp | $D << 24;
  $temp = $or54;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr55 = $pred + $pred_pitch;
  $pred = $add_ptr55;
  
  
  
  
  $temp = $R0 | $Q1 << 8;
  
  
  
  var $or59 = $temp | $Q0 << 16;
  $temp = $or59;
  
  
  
  var $or61 = $temp | $P1 << 24;
  $temp = $or61;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr62 = $pred + $pred_pitch;
  $pred = $add_ptr62;
  
  
  
  
  $temp = $S0 | $R1 << 8;
  
  
  
  var $or66 = $temp | $R0 << 16;
  $temp = $or66;
  
  
  
  var $or68 = $temp | $Q1 << 24;
  $temp = $or68;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z23Intra_4x4_Vertical_LeftP12tagCommonObjiP23tagNeighborAvailability($video, $block_offset, $availability) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $video_addr;
  var $block_offset_addr;
  var $availability_addr;
  var $comp_refx;
  var $temp1;
  var $temp2;
  var $x0;
  var $x1;
  var $x2;
  var $x3;
  var $x4;
  var $x5;
  var $x6;
  var $pred;
  var $pred_pitch;
  $video_addr = $video;
  $block_offset_addr = $block_offset;
  $availability_addr = $availability;
  
  
  
  $comp_refx = HEAP32[$video_addr + 776 >> 2];
  
  
  
  
  
  $pred = HEAP32[$video_addr + 768 >> 2] + $block_offset_addr;
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  var $7 = $comp_refx;
  var $incdec_ptr = $7 + 1;
  $comp_refx = $incdec_ptr;
  
  
  $x0 = HEAPU8[$7 >> 0] & 255;
  var $9 = $comp_refx;
  var $incdec_ptr2 = $9 + 1;
  $comp_refx = $incdec_ptr2;
  
  
  $x1 = HEAPU8[$9 >> 0] & 255;
  var $11 = $comp_refx;
  var $incdec_ptr4 = $11 + 1;
  $comp_refx = $incdec_ptr4;
  
  
  $x2 = HEAPU8[$11 >> 0] & 255;
  var $13 = $comp_refx;
  var $incdec_ptr6 = $13 + 1;
  $comp_refx = $incdec_ptr6;
  
  
  $x3 = HEAPU8[$13 >> 0] & 255;
  
  
  
  
  if ((HEAP32[$availability_addr + 8 >> 2] | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    var $17 = $comp_refx;
    var $incdec_ptr8 = $17 + 1;
    $comp_refx = $incdec_ptr8;
    
    
    $x4 = HEAPU8[$17 >> 0] & 255;
    var $19 = $comp_refx;
    var $incdec_ptr10 = $19 + 1;
    $comp_refx = $incdec_ptr10;
    
    
    $x5 = HEAPU8[$19 >> 0] & 255;
    var $21 = $comp_refx;
    var $incdec_ptr12 = $21 + 1;
    $comp_refx = $incdec_ptr12;
    
    
    $x6 = HEAPU8[$21 >> 0] & 255;
  } else if (__label__ == 2) {
    
    $x4 = $x3;
    
    $x5 = $x3;
    
    $x6 = $x3;
  }
  
  
  
  var $add14 = $x0 + ($x1 + 1);
  $x0 = $add14;
  
  
  
  var $add16 = $x1 + ($x2 + 1);
  $x1 = $add16;
  
  
  
  var $add18 = $x2 + ($x3 + 1);
  $x2 = $add18;
  
  
  
  var $add20 = $x3 + ($x4 + 1);
  $x3 = $add20;
  
  
  
  var $add22 = $x4 + ($x5 + 1);
  $x4 = $add22;
  
  
  
  var $add24 = $x5 + ($x6 + 1);
  $x5 = $add24;
  
  
  $temp1 = $x0 >> 1;
  
  
  
  
  var $or = $temp1 | $x1 >> 1 << 8;
  $temp1 = $or;
  
  
  
  
  var $or28 = $temp1 | $x2 >> 1 << 16;
  $temp1 = $or28;
  
  
  
  
  var $or31 = $temp1 | $x3 >> 1 << 24;
  $temp1 = $or31;
  
  
  
  HEAP32[$pred >> 2] = $temp1;
  
  
  var $add_ptr32 = $pred + $pred_pitch;
  $pred = $add_ptr32;
  
  
  
  
  $temp2 = $x0 + $x1 >> 2;
  
  
  
  
  
  
  var $or38 = $temp2 | $x1 + $x2 >> 2 << 8;
  $temp2 = $or38;
  
  
  
  
  
  
  var $or42 = $temp2 | $x2 + $x3 >> 2 << 16;
  $temp2 = $or42;
  
  
  
  
  
  
  var $or46 = $temp2 | $x3 + $x4 >> 2 << 24;
  $temp2 = $or46;
  
  
  
  HEAP32[$pred >> 2] = $temp2;
  
  
  var $add_ptr47 = $pred + $pred_pitch;
  $pred = $add_ptr47;
  
  
  
  
  
  var $or51 = $temp1 >>> 8 | $x4 >> 1 << 24;
  $temp1 = $or51;
  
  
  
  HEAP32[$pred >> 2] = $temp1;
  
  
  var $add_ptr52 = $pred + $pred_pitch;
  $pred = $add_ptr52;
  
  
  
  
  
  
  
  var $or57 = $temp2 >>> 8 | $x4 + $x5 >> 2 << 24;
  $temp2 = $or57;
  
  
  
  HEAP32[$pred >> 2] = $temp2;
  
  
  var $add_ptr58 = $pred + $pred_pitch;
  $pred = $add_ptr58;
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z23Intra_4x4_Horizontal_UpP12tagCommonObjii($video, $pitch, $block_offset) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  
  var $video_addr;
  var $pitch_addr;
  var $block_offset_addr;
  var $comp_refy;
  var $temp;
  var $Q0;
  var $R0;
  var $Q1;
  var $D0;
  var $D1;
  var $P0;
  var $P1;
  var $y0;
  var $y1;
  var $y2;
  var $y3;
  var $pred;
  var $pred_pitch;
  $video_addr = $video;
  $pitch_addr = $pitch;
  $block_offset_addr = $block_offset;
  
  
  
  $comp_refy = HEAP32[$video_addr + 780 >> 2];
  
  
  
  
  
  $pred = HEAP32[$video_addr + 768 >> 2] + $block_offset_addr;
  
  
  
  $pred_pitch = HEAP32[$video_addr + 772 >> 2];
  
  
  
  $y0 = HEAPU8[$comp_refy >> 0] & 255;
  
  
  var $add_ptr2 = $comp_refy + $pitch_addr;
  $comp_refy = $add_ptr2;
  
  
  
  $y1 = HEAPU8[$comp_refy >> 0] & 255;
  
  
  var $add_ptr4 = $comp_refy + $pitch_addr;
  $comp_refy = $add_ptr4;
  
  
  
  $y2 = HEAPU8[$comp_refy >> 0] & 255;
  
  
  var $add_ptr6 = $comp_refy + $pitch_addr;
  $comp_refy = $add_ptr6;
  
  
  
  $y3 = HEAPU8[$comp_refy >> 0] & 255;
  
  
  
  
  
  $Q0 = $y1 + $y2 + 1 >> 1;
  
  
  
  
  
  
  
  
  $Q1 = $y1 + ($y2 << 1) + $y3 + 2 >> 2;
  
  
  
  
  
  $P0 = $y0 + $y1 + 1 >> 1;
  
  
  
  
  
  
  
  
  $P1 = $y0 + ($y1 << 1) + $y2 + 2 >> 2;
  
  
  
  
  $temp = $P0 | $P1 << 8;
  
  
  
  var $or23 = $temp | $Q0 << 16;
  $temp = $or23;
  
  
  
  var $or25 = $temp | $Q1 << 24;
  $temp = $or25;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr26 = $pred + $pred_pitch;
  $pred = $add_ptr26;
  
  
  
  
  
  
  $D0 = $y2 + 3 * $y3 + 2 >> 2;
  
  
  
  
  
  $R0 = $y2 + $y3 + 1 >> 1;
  
  
  
  
  $temp = $Q0 | $Q1 << 8;
  
  
  
  var $or36 = $temp | $R0 << 16;
  $temp = $or36;
  
  
  
  var $or38 = $temp | $D0 << 24;
  $temp = $or38;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr39 = $pred + $pred_pitch;
  $pred = $add_ptr39;
  
  $D1 = $y3;
  
  
  
  
  $temp = $R0 | $D0 << 8;
  
  
  
  var $or43 = $temp | $D1 << 16;
  $temp = $or43;
  
  
  
  var $or45 = $temp | $D1 << 24;
  $temp = $or45;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  
  
  var $add_ptr46 = $pred + $pred_pitch;
  $pred = $add_ptr46;
  
  
  
  
  $temp = $D1 | $D1 << 8;
  
  
  
  var $or50 = $temp | $temp << 16;
  $temp = $or50;
  
  
  
  HEAP32[$pred >> 2] = $temp;
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z17InterMBPredictionP12tagCommonObj($video) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $video_addr;
  var $currMB;
  var $currPic;
  var $mbPartIdx;
  var $subMbPartIdx;
  var $ref_idx;
  var $offset_MbPart_indx;
  var $mv;
  var $x_pos;
  var $y_pos;
  var $curL;
  var $curCb;
  var $curCr;
  var $ref_l;
  var $ref_Cb;
  var $ref_Cr;
  var $predBlock;
  var $predCb;
  var $predCr;
  var $block_x;
  var $block_y;
  var $offset_x;
  var $offset_y;
  var $offsetP;
  var $offset;
  var $x_position;
  var $y_position;
  var $MbHeight;
  var $MbWidth;
  var $mbPartIdx_X;
  var $mbPartIdx_Y;
  var $offset_indx;
  var $picWidth;
  var $picHeight;
  var $dataBlock;
  var $cbp4x4;
  var $tmp_word;
  $video_addr = $video;
  
  
  
  $currMB = HEAP32[$video_addr + 912 >> 2];
  
  
  
  $currPic = HEAP32[$video_addr + 884 >> 2];
  $offset_MbPart_indx = 0;
  
  
  
  
  $x_position = HEAP32[$video_addr + 920 >> 2] << 4;
  
  
  
  
  $y_position = HEAP32[$video_addr + 924 >> 2] << 4;
  
  
  
  $picWidth = HEAP32[$currPic + 48 >> 2];
  
  
  
  $picHeight = HEAP32[$currPic + 44 >> 2];
  
  
  
  $tmp_word = $y_position * $picWidth;
  
  
  
  
  
  
  
  $curL = HEAP32[$currPic + 4 >> 2] + $tmp_word + $x_position;
  
  
  
  
  
  $offset = ($tmp_word >>> 2) + ($x_position >> 1);
  
  
  
  
  
  $curCb = HEAP32[$currPic + 8 >> 2] + $offset;
  
  
  
  
  
  $curCr = HEAP32[$currPic + 12 >> 2] + $offset;
  
  $predBlock = $curL;
  
  $predCb = $curCb;
  
  $predCr = $curCr;
  
  __Z24GetMotionVectorPredictorP12tagCommonObji($video_addr, 0);
  $mbPartIdx = 0;
  $for_cond$2 : while (1) {
    
    
    
    
    var $cmp = ($mbPartIdx | 0) < (HEAP32[$currMB + 256 >> 2] | 0);
    if (!$cmp) {
      __label__ = 8;
      break $for_cond$2;
    }
    
    
    
    
    
    $MbHeight = HEAP32[$currMB + 364 + $mbPartIdx * 4 >> 2];
    
    
    
    
    
    $MbWidth = HEAP32[$currMB + 348 + $mbPartIdx * 4 >> 2];
    
    
    
    
    $mbPartIdx_X = $mbPartIdx + $offset_MbPart_indx & 1;
    
    
    
    
    $mbPartIdx_Y = $mbPartIdx + $offset_MbPart_indx >> 1;
    
    
    
    
    
    
    
    
    var $conv = (tempInt = HEAP16[$currMB + 132 + (($mbPartIdx_Y << 1) + $mbPartIdx_X) * 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
    $ref_idx = $conv;
    $offset_indx = 0;
    
    
    
    
    
    
    
    $ref_l = HEAP32[HEAP32[$video_addr + 1416 + $ref_idx * 4 >> 2] + 4 >> 2];
    
    
    
    
    
    
    
    $ref_Cb = HEAP32[HEAP32[$video_addr + 1416 + $ref_idx * 4 >> 2] + 8 >> 2];
    
    
    
    
    
    
    
    $ref_Cr = HEAP32[HEAP32[$video_addr + 1416 + $ref_idx * 4 >> 2] + 12 >> 2];
    $subMbPartIdx = 0;
    while (1) {
      
      
      
      
      
      
      var $cmp25 = ($subMbPartIdx | 0) < (HEAP32[$currMB + 332 + $mbPartIdx * 4 >> 2] | 0);
      if (!$cmp25) {
        __label__ = 6;
        break;
      }
      
      
      
      
      
      
      
      $block_x = ($mbPartIdx_X << 1) + ($subMbPartIdx + $offset_indx & 1);
      
      
      
      
      
      
      
      
      $block_y = ($mbPartIdx_Y << 1) + ($subMbPartIdx + $offset_indx >> 1 & 1);
      
      
      
      
      
      
      
      
      
      $mv = $currMB + 4 + 4 * $block_x + 4 * ($block_y << 2);
      
      
      
      
      $offset_x = $x_position + ($block_x << 2);
      
      
      
      
      $offset_y = $y_position + ($block_y << 2);
      
      
      var $78 = $mv;
      var $incdec_ptr = $78 + 2;
      $mv = $incdec_ptr;
      
      var $conv44 = (tempInt = HEAP16[$78 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      $x_pos = ($offset_x << 2) + $conv44;
      
      
      
      
      var $conv47 = (tempInt = HEAP16[$mv >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      $y_pos = ($offset_y << 2) + $conv47;
      
      
      
      
      
      
      
      $offsetP = ($block_y << 2) * $picWidth + ($block_x << 2);
      
      
      
      
      
      
      
      
      
      
      
      __Z14LumaMotionCompPhiiiiS_iii($ref_l, $picWidth, $picHeight, $x_pos, $y_pos, $predBlock + $offsetP, $picWidth, $MbWidth, $MbHeight);
      
      
      
      
      
      
      $offsetP = $block_y * $picWidth + ($block_x << 1);
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      __Z16ChromaMotionCompPhiiiiS_iii($ref_Cb, $picWidth >> 1, $picHeight >> 1, $x_pos, $y_pos, $predCb + $offsetP, $picWidth >> 1, $MbWidth >> 1, $MbHeight >> 1);
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      __Z16ChromaMotionCompPhiiiiS_iii($ref_Cr, $picWidth >> 1, $picHeight >> 1, $x_pos, $y_pos, $predCr + $offsetP, $picWidth >> 1, $MbWidth >> 1, $MbHeight >> 1);
      
      
      
      
      
      
      $offset_indx = HEAP32[$currMB + 348 + $mbPartIdx * 4 >> 2] >> 3;
      
      var $inc = $subMbPartIdx + 1;
      $subMbPartIdx = $inc;
      __label__ = 3;
      continue;
    }
    
    
    
    
    $offset_MbPart_indx = HEAP32[$currMB + 324 >> 2] >> 4;
    
    var $inc74 = $mbPartIdx + 1;
    $mbPartIdx = $inc74;
    __label__ = 1;
    continue $for_cond$2;
  }
  
  
  
  $dataBlock = $video_addr;
  
  
  
  $cbp4x4 = HEAP32[$video_addr + 928 >> 2];
  $block_y = 4;
  $for_cond78$12 : while (1) {
    
    var $cmp79 = ($block_y | 0) > 0;
    if (!$cmp79) {
      __label__ = 18;
      break $for_cond78$12;
    }
    $block_x = 4;
    while (1) {
      
      var $cmp82 = ($block_x | 0) > 0;
      if (!$cmp82) {
        __label__ = 16;
        break;
      }
      
      
      
      if (($cbp4x4 & 1 | 0) != 0) {
        __label__ = 13;
      } else {
        __label__ = 14;
      }
      if (__label__ == 13) {
        
        
        
        
        __Z6itransPsPhS0_i($dataBlock, $curL, $curL, $picWidth);
      }
      
      var $shr85 = $cbp4x4 >>> 1;
      $cbp4x4 = $shr85;
      
      var $add_ptr86 = $dataBlock + 8;
      $dataBlock = $add_ptr86;
      
      var $add_ptr87 = $curL + 4;
      $curL = $add_ptr87;
      
      var $dec = $block_x + -1;
      $block_x = $dec;
      __label__ = 11;
      continue;
    }
    
    var $add_ptr90 = $dataBlock + 96;
    $dataBlock = $add_ptr90;
    
    
    
    
    var $add_ptr92 = $curL + (($picWidth << 2) - 16);
    $curL = $add_ptr92;
    
    var $dec94 = $block_y + -1;
    $block_y = $dec94;
    __label__ = 9;
    continue $for_cond78$12;
  }
  
  var $shr96 = $picWidth >> 1;
  $picWidth = $shr96;
  $block_y = 2;
  $for_cond97$25 : while (1) {
    
    var $cmp98 = ($block_y | 0) > 0;
    if (!$cmp98) {
      __label__ = 34;
      break $for_cond97$25;
    }
    $block_x = 2;
    $for_cond100$28 : while (1) {
      
      var $cmp101 = ($block_x | 0) > 0;
      if (!$cmp101) {
        __label__ = 26;
        break $for_cond100$28;
      }
      
      
      
      if (($cbp4x4 & 1 | 0) != 0) {
        __label__ = 23;
      } else {
        __label__ = 24;
      }
      if (__label__ == 23) {
        
        
        
        
        __Z7ictransPsPhS0_i($dataBlock, $curCb, $curCb, $picWidth);
      }
      
      var $shr107 = $cbp4x4 >>> 1;
      $cbp4x4 = $shr107;
      
      var $add_ptr108 = $dataBlock + 8;
      $dataBlock = $add_ptr108;
      
      var $add_ptr109 = $curCb + 4;
      $curCb = $add_ptr109;
      
      var $dec111 = $block_x + -1;
      $block_x = $dec111;
      __label__ = 21;
      continue $for_cond100$28;
    }
    $block_x = 2;
    while (1) {
      
      var $cmp114 = ($block_x | 0) > 0;
      if (!$cmp114) {
        __label__ = 32;
        break;
      }
      
      
      
      if (($cbp4x4 & 1 | 0) != 0) {
        __label__ = 29;
      } else {
        __label__ = 30;
      }
      if (__label__ == 29) {
        
        
        
        
        __Z7ictransPsPhS0_i($dataBlock, $curCr, $curCr, $picWidth);
      }
      
      var $shr120 = $cbp4x4 >>> 1;
      $cbp4x4 = $shr120;
      
      var $add_ptr121 = $dataBlock + 8;
      $dataBlock = $add_ptr121;
      
      var $add_ptr122 = $curCr + 4;
      $curCr = $add_ptr122;
      
      var $dec124 = $block_x + -1;
      $block_x = $dec124;
      __label__ = 27;
      continue;
    }
    
    var $add_ptr126 = $dataBlock + 96;
    $dataBlock = $add_ptr126;
    
    
    
    
    var $add_ptr129 = $curCb + (($picWidth << 2) - 8);
    $curCb = $add_ptr129;
    
    
    
    
    var $add_ptr132 = $curCr + (($picWidth << 2) - 8);
    $curCr = $add_ptr132;
    
    var $dec134 = $block_y + -1;
    $block_y = $dec134;
    __label__ = 19;
    continue $for_cond97$25;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z14LumaMotionCompPhiiiiS_iii($ref, $picwidth, $picheight, $x_pos, $y_pos, $pred, $pred_pitch, $blkwidth, $blkheight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 2340;
  var __label__;
  var $ref_addr;
  var $picwidth_addr;
  var $picheight_addr;
  var $x_pos_addr;
  var $y_pos_addr;
  var $pred_addr;
  var $pred_pitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $dx;
  var $dy;
  var $temp = __stackBase__;
  var $temp2 = __stackBase__ + 576;
  var $ref2;
  $ref_addr = $ref;
  $picwidth_addr = $picwidth;
  $picheight_addr = $picheight;
  $x_pos_addr = $x_pos;
  $y_pos_addr = $y_pos;
  $pred_addr = $pred;
  $pred_pitch_addr = $pred_pitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  
  
  $dx = $x_pos_addr & 3;
  
  
  $dy = $y_pos_addr & 3;
  
  var $shr = $x_pos_addr >> 2;
  $x_pos_addr = $shr;
  
  var $shr2 = $y_pos_addr >> 2;
  $y_pos_addr = $shr2;
  
  
  if (($dx | 0) == 0) {
    __label__ = 1;
  } else {
    __label__ = 9;
  }
  $land_lhs_true$$if_else17$2 : do {
    if (__label__ == 1) {
      
      var $cmp3 = ($dy | 0) == 0;
      if (!$cmp3) {
        __label__ = 9;
        break $land_lhs_true$$if_else17$2;
      }
      
      
      if (($x_pos_addr | 0) >= 0) {
        __label__ = 3;
      } else {
        __label__ = 7;
      }
      $land_lhs_true5$$if_else$5 : do {
        if (__label__ == 3) {
          
          
          
          
          var $cmp6 = ($x_pos_addr + $blkwidth_addr | 0) <= ($picwidth_addr | 0);
          if (!$cmp6) {
            __label__ = 7;
            break $land_lhs_true5$$if_else$5;
          }
          
          var $cmp8 = ($y_pos_addr | 0) >= 0;
          if (!$cmp8) {
            __label__ = 7;
            break $land_lhs_true5$$if_else$5;
          }
          
          
          
          
          var $cmp11 = ($y_pos_addr + $blkheight_addr | 0) <= ($picheight_addr | 0);
          if (!$cmp11) {
            __label__ = 7;
            break $land_lhs_true5$$if_else$5;
          }
          
          
          
          
          
          
          var $add_ptr = $ref_addr + ($y_pos_addr * $picwidth_addr + $x_pos_addr);
          $ref_addr = $add_ptr;
          
          
          
          
          
          
          __Z9FullPelMCPhiS_iii($ref_addr, $picwidth_addr, $pred_addr, $pred_pitch_addr, $blkwidth_addr, $blkheight_addr);
          __label__ = 8;
          break $land_lhs_true5$$if_else$5;
        }
      } while (0);
      if (__label__ == 7) {
        
        
        
        
        
        
        var $arrayidx14 = $temp;
        
        
        __Z9CreatePadPhiiiiS_ii($ref_addr, $picwidth_addr, $picheight_addr, $x_pos_addr, $y_pos_addr, $arrayidx14, $blkwidth_addr, $blkheight_addr);
        
        var $arrayidx16 = $temp;
        
        
        
        
        __Z9FullPelMCPhiS_iii($arrayidx16, 24, $pred_addr, $pred_pitch_addr, $blkwidth_addr, $blkheight_addr);
      }
      __label__ = 52;
      break $land_lhs_true$$if_else17$2;
    }
  } while (0);
  if (__label__ == 9) {
    
    
    if (($dy | 0) == 0) {
      __label__ = 10;
    } else {
      __label__ = 17;
    }
    if (__label__ == 10) {
      
      
      
      if (($x_pos_addr - 2 | 0) >= 0) {
        __label__ = 11;
      } else {
        __label__ = 15;
      }
      $land_lhs_true21$$if_else34$17 : do {
        if (__label__ == 11) {
          
          
          
          
          
          var $cmp24 = ($x_pos_addr + 3 + $blkwidth_addr | 0) <= ($picwidth_addr | 0);
          if (!$cmp24) {
            __label__ = 15;
            break $land_lhs_true21$$if_else34$17;
          }
          
          var $cmp26 = ($y_pos_addr | 0) >= 0;
          if (!$cmp26) {
            __label__ = 15;
            break $land_lhs_true21$$if_else34$17;
          }
          
          
          
          
          var $cmp29 = ($y_pos_addr + $blkheight_addr | 0) <= ($picheight_addr | 0);
          if (!$cmp29) {
            __label__ = 15;
            break $land_lhs_true21$$if_else34$17;
          }
          
          
          
          
          
          
          var $add_ptr33 = $ref_addr + ($y_pos_addr * $picwidth_addr + $x_pos_addr);
          $ref_addr = $add_ptr33;
          
          
          
          
          
          
          
          __Z13HorzInterp1MCPhiS_iiii($ref_addr, $picwidth_addr, $pred_addr, $pred_pitch_addr, $blkwidth_addr, $blkheight_addr, $dx);
          __label__ = 16;
          break $land_lhs_true21$$if_else34$17;
        }
      } while (0);
      if (__label__ == 15) {
        
        
        
        
        
        
        
        var $arrayidx37 = $temp;
        
        
        
        __Z9CreatePadPhiiiiS_ii($ref_addr, $picwidth_addr, $picheight_addr, $x_pos_addr - 2, $y_pos_addr, $arrayidx37, $blkwidth_addr + 5, $blkheight_addr);
        
        var $arrayidx40 = $temp + 2;
        
        
        
        
        
        __Z13HorzInterp1MCPhiS_iiii($arrayidx40, 24, $pred_addr, $pred_pitch_addr, $blkwidth_addr, $blkheight_addr, $dx);
      }
    } else if (__label__ == 17) {
      
      
      if (($dx | 0) == 0) {
        __label__ = 18;
      } else {
        __label__ = 25;
      }
      if (__label__ == 18) {
        
        
        if (($x_pos_addr | 0) >= 0) {
          __label__ = 19;
        } else {
          __label__ = 23;
        }
        $land_lhs_true46$$if_else60$28 : do {
          if (__label__ == 19) {
            
            
            
            
            var $cmp48 = ($x_pos_addr + $blkwidth_addr | 0) <= ($picwidth_addr | 0);
            if (!$cmp48) {
              __label__ = 23;
              break $land_lhs_true46$$if_else60$28;
            }
            
            
            var $cmp51 = ($y_pos_addr - 2 | 0) >= 0;
            if (!$cmp51) {
              __label__ = 23;
              break $land_lhs_true46$$if_else60$28;
            }
            
            
            
            
            
            var $cmp55 = ($y_pos_addr + 3 + $blkheight_addr | 0) <= ($picheight_addr | 0);
            if (!$cmp55) {
              __label__ = 23;
              break $land_lhs_true46$$if_else60$28;
            }
            
            
            
            
            
            
            var $add_ptr59 = $ref_addr + ($y_pos_addr * $picwidth_addr + $x_pos_addr);
            $ref_addr = $add_ptr59;
            
            
            
            
            
            
            
            __Z13VertInterp1MCPhiS_iiii($ref_addr, $picwidth_addr, $pred_addr, $pred_pitch_addr, $blkwidth_addr, $blkheight_addr, $dy);
            __label__ = 24;
            break $land_lhs_true46$$if_else60$28;
          }
        } while (0);
        if (__label__ == 23) {
          
          
          
          
          
          
          
          var $arrayidx63 = $temp;
          
          
          
          __Z9CreatePadPhiiiiS_ii($ref_addr, $picwidth_addr, $picheight_addr, $x_pos_addr, $y_pos_addr - 2, $arrayidx63, $blkwidth_addr, $blkheight_addr + 5);
          
          var $arrayidx66 = $temp + 48;
          
          
          
          
          
          __Z13VertInterp1MCPhiS_iiii($arrayidx66, 24, $pred_addr, $pred_pitch_addr, $blkwidth_addr, $blkheight_addr, $dy);
        }
      } else if (__label__ == 25) {
        
        
        if (($dy | 0) == 2) {
          __label__ = 26;
        } else {
          __label__ = 33;
        }
        if (__label__ == 26) {
          
          
          
          if (($x_pos_addr - 2 | 0) >= 0) {
            __label__ = 27;
          } else {
            __label__ = 31;
          }
          $land_lhs_true73$$if_else94$39 : do {
            if (__label__ == 27) {
              
              
              
              
              
              var $cmp76 = ($x_pos_addr + 3 + $blkwidth_addr | 0) <= ($picwidth_addr | 0);
              if (!$cmp76) {
                __label__ = 31;
                break $land_lhs_true73$$if_else94$39;
              }
              
              
              var $cmp79 = ($y_pos_addr - 2 | 0) >= 0;
              if (!$cmp79) {
                __label__ = 31;
                break $land_lhs_true73$$if_else94$39;
              }
              
              
              
              
              
              var $cmp83 = ($y_pos_addr + 3 + $blkheight_addr | 0) <= ($picheight_addr | 0);
              if (!$cmp83) {
                __label__ = 31;
                break $land_lhs_true73$$if_else94$39;
              }
              
              
              
              
              
              
              
              var $add_ptr88 = $ref_addr + ($y_pos_addr * $picwidth_addr + $x_pos_addr - 2);
              $ref_addr = $add_ptr88;
              
              
              
              var $arrayidx90 = $temp2;
              
              
              
              __Z13VertInterp2MCPhiPiiii($ref_addr, $picwidth_addr, $arrayidx90, 21, $blkwidth_addr + 5, $blkheight_addr);
              
              var $arrayidx93 = $temp2 + 8;
              
              
              
              
              
              __Z13HorzInterp2MCPiiPhiiii($arrayidx93, 21, $pred_addr, $pred_pitch_addr, $blkwidth_addr, $blkheight_addr, $dx);
              __label__ = 32;
              break $land_lhs_true73$$if_else94$39;
            }
          } while (0);
          if (__label__ == 31) {
            
            
            
            
            
            
            
            
            var $arrayidx98 = $temp;
            
            
            
            
            __Z9CreatePadPhiiiiS_ii($ref_addr, $picwidth_addr, $picheight_addr, $x_pos_addr - 2, $y_pos_addr - 2, $arrayidx98, $blkwidth_addr + 5, $blkheight_addr + 5);
            
            var $arrayidx102 = $temp + 48;
            
            var $arrayidx104 = $temp2;
            
            
            
            __Z13VertInterp2MCPhiPiiii($arrayidx102, 24, $arrayidx104, 21, $blkwidth_addr + 5, $blkheight_addr);
            
            var $arrayidx107 = $temp2 + 8;
            
            
            
            
            
            __Z13HorzInterp2MCPiiPhiiii($arrayidx107, 21, $pred_addr, $pred_pitch_addr, $blkwidth_addr, $blkheight_addr, $dx);
          }
        } else if (__label__ == 33) {
          
          
          if (($dx | 0) == 2) {
            __label__ = 34;
          } else {
            __label__ = 41;
          }
          if (__label__ == 34) {
            
            
            
            if (($x_pos_addr - 2 | 0) >= 0) {
              __label__ = 35;
            } else {
              __label__ = 39;
            }
            $land_lhs_true114$$if_else135$50 : do {
              if (__label__ == 35) {
                
                
                
                
                
                var $cmp117 = ($x_pos_addr + 3 + $blkwidth_addr | 0) <= ($picwidth_addr | 0);
                if (!$cmp117) {
                  __label__ = 39;
                  break $land_lhs_true114$$if_else135$50;
                }
                
                
                var $cmp120 = ($y_pos_addr - 2 | 0) >= 0;
                if (!$cmp120) {
                  __label__ = 39;
                  break $land_lhs_true114$$if_else135$50;
                }
                
                
                
                
                
                var $cmp124 = ($y_pos_addr + 3 + $blkheight_addr | 0) <= ($picheight_addr | 0);
                if (!$cmp124) {
                  __label__ = 39;
                  break $land_lhs_true114$$if_else135$50;
                }
                
                
                
                
                
                
                
                var $add_ptr129 = $ref_addr + (($y_pos_addr - 2) * $picwidth_addr + $x_pos_addr);
                $ref_addr = $add_ptr129;
                
                
                
                var $arrayidx131 = $temp2;
                
                
                
                __Z13HorzInterp3MCPhiPiiii($ref_addr, $picwidth_addr, $arrayidx131, 21, $blkwidth_addr, $blkheight_addr + 5);
                
                var $arrayidx134 = $temp2 + 168;
                
                
                
                
                
                __Z13VertInterp3MCPiiPhiiii($arrayidx134, 21, $pred_addr, $pred_pitch_addr, $blkwidth_addr, $blkheight_addr, $dy);
                __label__ = 40;
                break $land_lhs_true114$$if_else135$50;
              }
            } while (0);
            if (__label__ == 39) {
              
              
              
              
              
              
              
              
              var $arrayidx139 = $temp;
              
              
              
              
              __Z9CreatePadPhiiiiS_ii($ref_addr, $picwidth_addr, $picheight_addr, $x_pos_addr - 2, $y_pos_addr - 2, $arrayidx139, $blkwidth_addr + 5, $blkheight_addr + 5);
              
              var $arrayidx143 = $temp + 2;
              
              var $arrayidx145 = $temp2;
              
              
              
              __Z13HorzInterp3MCPhiPiiii($arrayidx143, 24, $arrayidx145, 21, $blkwidth_addr, $blkheight_addr + 5);
              
              var $arrayidx148 = $temp2 + 168;
              
              
              
              
              
              __Z13VertInterp3MCPiiPhiiii($arrayidx148, 21, $pred_addr, $pred_pitch_addr, $blkwidth_addr, $blkheight_addr, $dy);
            }
          } else if (__label__ == 41) {
            
            
            
            if (($x_pos_addr - 2 | 0) >= 0) {
              __label__ = 42;
            } else {
              __label__ = 46;
            }
            $land_lhs_true153$$if_else178$59 : do {
              if (__label__ == 42) {
                
                
                
                
                
                
                
                
                var $cmp157 = ($x_pos_addr + 3 + (($dx | 0) / 2 | 0) + $blkwidth_addr | 0) <= ($picwidth_addr | 0);
                if (!$cmp157) {
                  __label__ = 46;
                  break $land_lhs_true153$$if_else178$59;
                }
                
                
                var $cmp160 = ($y_pos_addr - 2 | 0) >= 0;
                if (!$cmp160) {
                  __label__ = 46;
                  break $land_lhs_true153$$if_else178$59;
                }
                
                
                
                
                
                
                
                
                var $cmp166 = ($y_pos_addr + 3 + $blkheight_addr + (($dy | 0) / 2 | 0) | 0) <= ($picheight_addr | 0);
                if (!$cmp166) {
                  __label__ = 46;
                  break $land_lhs_true153$$if_else178$59;
                }
                
                
                
                
                
                
                
                
                
                
                $ref2 = $ref_addr + ($y_pos_addr + (($dy | 0) / 2 | 0)) * $picwidth_addr + $x_pos_addr;
                
                
                
                
                
                
                
                
                
                var $add_ptr177 = $ref_addr + ($y_pos_addr * $picwidth_addr + $x_pos_addr + (($dx | 0) / 2 | 0));
                $ref_addr = $add_ptr177;
                
                
                
                
                
                
                
                __Z16DiagonalInterpMCPhS_iS_iii($ref2, $ref_addr, $picwidth_addr, $pred_addr, $pred_pitch_addr, $blkwidth_addr, $blkheight_addr);
                __label__ = 47;
                break $land_lhs_true153$$if_else178$59;
              }
            } while (0);
            if (__label__ == 46) {
              
              
              
              
              
              
              
              
              var $arrayidx182 = $temp;
              
              
              
              
              
              
              
              
              
              
              __Z9CreatePadPhiiiiS_ii($ref_addr, $picwidth_addr, $picheight_addr, $x_pos_addr - 2, $y_pos_addr - 2, $arrayidx182, $blkwidth_addr + 5 + (($dx | 0) / 2 | 0), $blkheight_addr + 5 + (($dy | 0) / 2 | 0));
              
              
              
              
              
              $ref2 = $temp + (2 + (($dy | 0) / 2 | 0)) * 24 + 2;
              
              
              
              
              
              $ref_addr = $temp + 48 + (2 + (($dx | 0) / 2 | 0));
              
              
              
              
              
              
              __Z16DiagonalInterpMCPhS_iS_iii($ref2, $ref_addr, 24, $pred_addr, $pred_pitch_addr, $blkwidth_addr, $blkheight_addr);
            }
          }
        }
      }
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z16ChromaMotionCompPhiiiiS_iii($ref, $picwidth, $picheight, $x_pos, $y_pos, $pred, $pred_pitch, $blkwidth, $blkheight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 576;
  var __label__;
  var $ref_addr;
  var $picwidth_addr;
  var $picheight_addr;
  var $x_pos_addr;
  var $y_pos_addr;
  var $pred_addr;
  var $pred_pitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $dx;
  var $dy;
  var $offset_dx;
  var $offset_dy;
  var $index;
  var $temp = __stackBase__;
  $ref_addr = $ref;
  $picwidth_addr = $picwidth;
  $picheight_addr = $picheight;
  $x_pos_addr = $x_pos;
  $y_pos_addr = $y_pos;
  $pred_addr = $pred;
  $pred_pitch_addr = $pred_pitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  
  
  $dx = $x_pos_addr & 7;
  
  
  $dy = $y_pos_addr & 7;
  
  
  
  $offset_dx = $dx + 7 >> 3;
  
  
  
  $offset_dy = $dy + 7 >> 3;
  
  var $shr4 = $x_pos_addr >> 3;
  $x_pos_addr = $shr4;
  
  var $shr5 = $y_pos_addr >> 3;
  $y_pos_addr = $shr5;
  
  
  if (($x_pos_addr | 0) >= 0) {
    __label__ = 1;
  } else {
    __label__ = 5;
  }
  $land_lhs_true$$if_else$2 : do {
    if (__label__ == 1) {
      
      
      
      
      
      
      var $cmp8 = ($x_pos_addr + $blkwidth_addr + $offset_dx | 0) <= ($picwidth_addr | 0);
      if (!$cmp8) {
        __label__ = 5;
        break $land_lhs_true$$if_else$2;
      }
      
      var $cmp10 = ($y_pos_addr | 0) >= 0;
      if (!$cmp10) {
        __label__ = 5;
        break $land_lhs_true$$if_else$2;
      }
      
      
      
      
      
      
      var $cmp14 = ($y_pos_addr + $blkheight_addr + $offset_dy | 0) <= ($picheight_addr | 0);
      if (!$cmp14) {
        __label__ = 5;
        break $land_lhs_true$$if_else$2;
      }
      
      
      
      
      
      
      var $add_ptr = $ref_addr + ($y_pos_addr * $picwidth_addr + $x_pos_addr);
      $ref_addr = $add_ptr;
      __label__ = 6;
      break $land_lhs_true$$if_else$2;
    }
  } while (0);
  if (__label__ == 5) {
    
    
    
    
    
    
    var $arrayidx16 = $temp;
    
    
    
    
    
    
    __Z9CreatePadPhiiiiS_ii($ref_addr, $picwidth_addr, $picheight_addr, $x_pos_addr, $y_pos_addr, $arrayidx16, $blkwidth_addr + $offset_dx, $blkheight_addr + $offset_dy);
    
    
    $ref_addr = $temp;
    $picwidth_addr = 24;
  }
  
  
  
  
  
  
  
  
  $index = $offset_dx + ($offset_dy << 1) + ($blkwidth_addr << 1 & 7);
  
  
  var $33 = HEAP32[__ZL13ChromaMC_SIMD + $index * 4 >> 2];
  
  
  
  
  
  
  
  
  FUNCTION_TABLE[$33]($ref_addr, $picwidth_addr, $dx, $dy, $pred_addr, $pred_pitch_addr, $blkwidth_addr, $blkheight_addr);
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z9FullPelMCPhiS_iii($in, $inpitch, $out, $outpitch, $blkwidth, $blkheight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $in_addr;
  var $inpitch_addr;
  var $out_addr;
  var $outpitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $i;
  var $j;
  var $offset_in;
  var $offset_out;
  var $temp;
  var $byte;
  $in_addr = $in;
  $inpitch_addr = $inpitch;
  $out_addr = $out;
  $outpitch_addr = $outpitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  
  
  
  $offset_in = $inpitch_addr - $blkwidth_addr;
  
  
  
  $offset_out = $outpitch_addr - $blkwidth_addr;
  
  
  
  
  if (($in_addr & 3 | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 10;
  }
  if (__label__ == 1) {
    
    $j = $blkheight_addr;
    $for_cond$4 : while (1) {
      
      var $cmp = ($j | 0) > 0;
      if (!$cmp) {
        __label__ = 9;
        break $for_cond$4;
      }
      
      $i = $blkwidth_addr;
      while (1) {
        
        var $cmp3 = ($i | 0) > 0;
        if (!$cmp3) {
          __label__ = 7;
          break;
        }
        var $10 = $in_addr;
        var $incdec_ptr = $10 + 1;
        $in_addr = $incdec_ptr;
        
        
        $temp = HEAPU8[$10 >> 0] & 255;
        var $12 = $in_addr;
        var $incdec_ptr5 = $12 + 1;
        $in_addr = $incdec_ptr5;
        
        $byte = HEAP8[$12 >> 0];
        
        
        
        
        var $or = $temp | ($byte & 255) << 8;
        $temp = $or;
        var $16 = $in_addr;
        var $incdec_ptr7 = $16 + 1;
        $in_addr = $incdec_ptr7;
        
        $byte = HEAP8[$16 >> 0];
        
        
        
        
        var $or10 = $temp | ($byte & 255) << 16;
        $temp = $or10;
        var $20 = $in_addr;
        var $incdec_ptr11 = $20 + 1;
        $in_addr = $incdec_ptr11;
        
        $byte = HEAP8[$20 >> 0];
        
        
        
        
        var $or14 = $temp | ($byte & 255) << 24;
        $temp = $or14;
        
        
        
        HEAP32[$out_addr >> 2] = $temp;
        
        var $add_ptr = $out_addr + 4;
        $out_addr = $add_ptr;
        
        var $sub15 = $i - 4;
        $i = $sub15;
        __label__ = 4;
        continue;
      }
      
      
      var $add_ptr16 = $out_addr + $offset_out;
      $out_addr = $add_ptr16;
      
      
      var $add_ptr17 = $in_addr + $offset_in;
      $in_addr = $add_ptr17;
      
      var $dec = $j + -1;
      $j = $dec;
      __label__ = 2;
      continue $for_cond$4;
    }
  } else if (__label__ == 10) {
    
    $j = $blkheight_addr;
    $for_cond20$15 : while (1) {
      
      var $cmp21 = ($j | 0) > 0;
      if (!$cmp21) {
        __label__ = 18;
        break $for_cond20$15;
      }
      
      $i = $blkwidth_addr;
      while (1) {
        
        var $cmp24 = ($i | 0) > 0;
        if (!$cmp24) {
          __label__ = 16;
          break;
        }
        
        
        
        $temp = HEAP32[$in_addr >> 2];
        
        
        
        HEAP32[$out_addr >> 2] = $temp;
        
        var $add_ptr26 = $in_addr + 4;
        $in_addr = $add_ptr26;
        
        var $add_ptr27 = $out_addr + 4;
        $out_addr = $add_ptr27;
        
        var $sub29 = $i - 4;
        $i = $sub29;
        __label__ = 13;
        continue;
      }
      
      
      var $add_ptr31 = $out_addr + $offset_out;
      $out_addr = $add_ptr31;
      
      
      var $add_ptr32 = $in_addr + $offset_in;
      $in_addr = $add_ptr32;
      
      var $dec34 = $j + -1;
      $j = $dec34;
      __label__ = 11;
      continue $for_cond20$15;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z9CreatePadPhiiiiS_ii($ref, $picwidth, $picheight, $x_pos, $y_pos, $out, $blkwidth, $blkheight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $ref_addr;
  var $picwidth_addr;
  var $picheight_addr;
  var $x_pos_addr;
  var $y_pos_addr;
  var $out_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $x_inc0;
  var $x_mid;
  var $y_inc;
  var $y_inc0;
  var $y_inc1;
  var $y_mid;
  var $i;
  var $j;
  var $offset;
  $ref_addr = $ref;
  $picwidth_addr = $picwidth;
  $picheight_addr = $picheight;
  $x_pos_addr = $x_pos;
  $y_pos_addr = $y_pos;
  $out_addr = $out;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  
  
  if (($x_pos_addr | 0) < 0) {
    __label__ = 1;
  } else {
    __label__ = 5;
  }
  if (__label__ == 1) {
    $x_inc0 = 0;
    
    
    
    
    if (($blkwidth_addr + $x_pos_addr | 0) > 0) {
      __label__ = 2;
    } else {
      __label__ = 3;
    }
    if (__label__ == 2) {
      
      var $sub = 0 - $x_pos_addr;
      __lastLabel__ = 2;
    } else if (__label__ == 3) {
      var $4 = $blkwidth_addr;
      __lastLabel__ = 3;
    }
    var $cond = __lastLabel__ == 2 ? $sub : $4;
    $x_mid = $cond;
    $x_pos_addr = 0;
  } else if (__label__ == 5) {
    
    
    
    
    
    if (($x_pos_addr + $blkwidth_addr | 0) > ($picwidth_addr | 0)) {
      __label__ = 6;
    } else {
      __label__ = 10;
    }
    if (__label__ == 6) {
      $x_inc0 = 1;
      
      
      
      if (($picwidth_addr | 0) > ($x_pos_addr | 0)) {
        __label__ = 7;
      } else {
        __label__ = 8;
      }
      if (__label__ == 7) {
        
        
        
        var $sub8 = $picwidth_addr - $x_pos_addr - 1;
        __lastLabel__ = 7;
      } else if (__label__ == 8) {
        __lastLabel__ = 8;
      }
      var $cond11 = __lastLabel__ == 7 ? $sub8 : 0;
      $x_mid = $cond11;
    } else if (__label__ == 10) {
      $x_inc0 = 1;
      
      $x_mid = $blkwidth_addr;
    }
  }
  
  
  if (($y_pos_addr | 0) < 0) {
    __label__ = 13;
  } else {
    __label__ = 20;
  }
  if (__label__ == 13) {
    
    
    if (($x_inc0 | 0) != 0) {
      __label__ = 14;
    } else {
      __label__ = 15;
    }
    if (__label__ == 14) {
      
      var $sub17 = 0 - $x_mid;
      __lastLabel__ = 14;
    } else if (__label__ == 15) {
      
      
      
      var $add20 = 0 - $blkwidth_addr + $x_mid;
      __lastLabel__ = 15;
    }
    var $cond22 = __lastLabel__ == 14 ? $sub17 : $add20;
    $y_inc0 = $cond22;
    
    
    
    $y_inc1 = $picwidth_addr + $y_inc0;
    
    
    
    
    if (($blkheight_addr + $y_pos_addr | 0) > 0) {
      __label__ = 17;
    } else {
      __label__ = 18;
    }
    if (__label__ == 17) {
      
      var $sub27 = 0 - $y_pos_addr;
      __lastLabel__ = 17;
    } else if (__label__ == 18) {
      var $23 = $blkheight_addr;
      __lastLabel__ = 18;
    }
    var $cond30 = __lastLabel__ == 17 ? $sub27 : $23;
    $y_mid = $cond30;
    $y_pos_addr = 0;
  } else if (__label__ == 20) {
    
    
    
    
    
    if (($y_pos_addr + $blkheight_addr | 0) > ($picheight_addr | 0)) {
      __label__ = 21;
    } else {
      __label__ = 28;
    }
    if (__label__ == 21) {
      
      
      if (($x_inc0 | 0) != 0) {
        __label__ = 22;
      } else {
        __label__ = 23;
      }
      if (__label__ == 22) {
        
        var $sub37 = 0 - $x_mid;
        __lastLabel__ = 22;
      } else if (__label__ == 23) {
        
        
        
        var $add40 = 0 - $blkwidth_addr + $x_mid;
        __lastLabel__ = 23;
      }
      var $cond42 = __lastLabel__ == 22 ? $sub37 : $add40;
      $y_inc1 = $cond42;
      
      
      
      $y_inc0 = $picwidth_addr + $y_inc1;
      
      
      
      if (($picheight_addr | 0) > ($y_pos_addr | 0)) {
        __label__ = 25;
      } else {
        __label__ = 26;
      }
      if (__label__ == 25) {
        
        
        
        var $sub47 = $picheight_addr - 1 - $y_pos_addr;
        __lastLabel__ = 25;
      } else if (__label__ == 26) {
        __lastLabel__ = 26;
      }
      var $cond50 = __lastLabel__ == 25 ? $sub47 : 0;
      $y_mid = $cond50;
    } else if (__label__ == 28) {
      
      
      if (($x_inc0 | 0) != 0) {
        __label__ = 29;
      } else {
        __label__ = 30;
      }
      if (__label__ == 29) {
        
        var $sub54 = 0 - $x_mid;
        __lastLabel__ = 29;
      } else if (__label__ == 30) {
        
        
        
        var $add57 = 0 - $blkwidth_addr + $x_mid;
        __lastLabel__ = 30;
      }
      var $cond59 = __lastLabel__ == 29 ? $sub54 : $add57;
      $y_inc1 = $cond59;
      
      
      
      $y_inc0 = $picwidth_addr + $y_inc1;
      
      $y_mid = $blkheight_addr;
    }
  }
  
  
  
  
  if (($y_pos_addr | 0) > ($picheight_addr - 1 | 0)) {
    __label__ = 34;
  } else {
    __label__ = 35;
  }
  if (__label__ == 34) {
    
    
    $y_pos_addr = $picheight_addr - 1;
  }
  
  
  
  
  if (($x_pos_addr | 0) > ($picwidth_addr - 1 | 0)) {
    __label__ = 36;
  } else {
    __label__ = 37;
  }
  if (__label__ == 36) {
    
    
    $x_pos_addr = $picwidth_addr - 1;
  }
  
  
  
  
  
  
  var $add_ptr = $ref_addr + ($y_pos_addr * $picwidth_addr + $x_pos_addr);
  $ref_addr = $add_ptr;
  
  $y_inc = $y_inc0;
  
  
  $offset = 24 - $blkwidth_addr;
  
  
  var $sub75 = $blkwidth_addr - $x_mid;
  $blkwidth_addr = $sub75;
  
  
  if (($x_inc0 | 0) == 0) {
    __label__ = 38;
  } else {
    __label__ = 53;
  }
  if (__label__ == 38) {
    $j = 0;
    $for_cond$54 : while (1) {
      
      
      var $cmp78 = ($j | 0) < ($blkheight_addr | 0);
      if (!$cmp78) {
        __label__ = 52;
        break $for_cond$54;
      }
      
      
      
      if (($j | 0) == ($y_mid | 0)) {
        __label__ = 41;
      } else {
        __label__ = 42;
      }
      if (__label__ == 41) {
        
        $y_inc = $y_inc1;
      }
      
      $i = $x_mid;
      $for_cond82$60 : while (1) {
        
        var $cmp83 = ($i | 0) > 0;
        if (!$cmp83) {
          __label__ = 46;
          break $for_cond82$60;
        }
        
        var $67 = HEAP8[$ref_addr >> 0];
        var $68 = $out_addr;
        var $incdec_ptr = $68 + 1;
        $out_addr = $incdec_ptr;
        HEAP8[$68 >> 0] = $67;
        
        var $dec = $i + -1;
        $i = $dec;
        __label__ = 43;
        continue $for_cond82$60;
      }
      
      $i = $blkwidth_addr;
      while (1) {
        
        var $cmp86 = ($i | 0) > 0;
        if (!$cmp86) {
          __label__ = 50;
          break;
        }
        var $72 = $ref_addr;
        var $incdec_ptr88 = $72 + 1;
        $ref_addr = $incdec_ptr88;
        var $73 = HEAP8[$72 >> 0];
        var $74 = $out_addr;
        var $incdec_ptr89 = $74 + 1;
        $out_addr = $incdec_ptr89;
        HEAP8[$74 >> 0] = $73;
        
        var $dec91 = $i + -1;
        $i = $dec91;
        __label__ = 47;
        continue;
      }
      
      
      var $add_ptr93 = $out_addr + $offset;
      $out_addr = $add_ptr93;
      
      
      var $add_ptr94 = $ref_addr + $y_inc;
      $ref_addr = $add_ptr94;
      
      var $inc = $j + 1;
      $j = $inc;
      __label__ = 39;
      continue $for_cond$54;
    }
  } else if (__label__ == 53) {
    $j = 0;
    $for_cond98$73 : while (1) {
      
      
      var $cmp99 = ($j | 0) < ($blkheight_addr | 0);
      if (!$cmp99) {
        __label__ = 67;
        break $for_cond98$73;
      }
      
      
      
      if (($j | 0) == ($y_mid | 0)) {
        __label__ = 56;
      } else {
        __label__ = 57;
      }
      if (__label__ == 56) {
        
        $y_inc = $y_inc1;
      }
      
      $i = $x_mid;
      $for_cond104$79 : while (1) {
        
        var $cmp105 = ($i | 0) > 0;
        if (!$cmp105) {
          __label__ = 61;
          break $for_cond104$79;
        }
        var $88 = $ref_addr;
        var $incdec_ptr107 = $88 + 1;
        $ref_addr = $incdec_ptr107;
        var $89 = HEAP8[$88 >> 0];
        var $90 = $out_addr;
        var $incdec_ptr108 = $90 + 1;
        $out_addr = $incdec_ptr108;
        HEAP8[$90 >> 0] = $89;
        
        var $dec110 = $i + -1;
        $i = $dec110;
        __label__ = 58;
        continue $for_cond104$79;
      }
      
      $i = $blkwidth_addr;
      while (1) {
        
        var $cmp113 = ($i | 0) > 0;
        if (!$cmp113) {
          __label__ = 65;
          break;
        }
        
        var $95 = HEAP8[$ref_addr >> 0];
        var $96 = $out_addr;
        var $incdec_ptr115 = $96 + 1;
        $out_addr = $incdec_ptr115;
        HEAP8[$96 >> 0] = $95;
        
        var $dec117 = $i + -1;
        $i = $dec117;
        __label__ = 62;
        continue;
      }
      
      
      var $add_ptr119 = $out_addr + $offset;
      $out_addr = $add_ptr119;
      
      
      var $add_ptr120 = $ref_addr + $y_inc;
      $ref_addr = $add_ptr120;
      
      var $inc122 = $j + 1;
      $j = $inc122;
      __label__ = 54;
      continue $for_cond98$73;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z13HorzInterp1MCPhiS_iiii($in, $inpitch, $out, $outpitch, $blkwidth, $blkheight, $dx) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $in_addr;
  var $inpitch_addr;
  var $out_addr;
  var $outpitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $dx_addr;
  var $p_ref;
  var $p_cur;
  var $tmp;
  var $pkres;
  var $result;
  var $curr_offset;
  var $ref_offset;
  var $j;
  var $r0;
  var $r1;
  var $r2;
  var $r3;
  var $r4;
  var $r5;
  var $r13;
  var $r6;
  $in_addr = $in;
  $inpitch_addr = $inpitch;
  $out_addr = $out;
  $outpitch_addr = $outpitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  $dx_addr = $dx;
  
  
  $p_cur = $out_addr;
  
  
  
  
  $curr_offset = $outpitch_addr - $blkwidth_addr >> 2;
  
  $p_ref = $in_addr;
  
  
  
  $ref_offset = $inpitch_addr - $blkwidth_addr;
  
  
  
  if (($dx_addr & 1 | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 22;
  }
  if (__label__ == 1) {
    
    
    
    var $cond = ($dx_addr >> 1 | 0) != 0 ? -3 : -4;
    $dx_addr = $cond;
    
    var $add_ptr = $p_ref + -2;
    $p_ref = $add_ptr;
    $r13 = 0;
    
    $j = $blkheight_addr;
    $for_cond$4 : while (1) {
      
      var $cmp = ($j | 0) > 0;
      if (!$cmp) {
        __label__ = 21;
        break $for_cond$4;
      }
      
      
      
      
      $tmp = $p_ref + $blkwidth_addr;
      
      
      
      
      $r0 = HEAPU8[$p_ref >> 0] & 255;
      
      
      
      
      $r1 = HEAPU8[$p_ref + 2 >> 0] & 255;
      
      
      
      var $or = $r0 | $r1 << 16;
      $r0 = $or;
      
      
      
      
      $r1 = HEAPU8[$p_ref + 1 >> 0] & 255;
      
      
      
      
      $r2 = HEAPU8[$p_ref + 3 >> 0] & 255;
      
      
      
      var $or25 = $r1 | $r2 << 16;
      $r1 = $or25;
      $while_cond$7 : while (1) {
        
        
        
        var $cmp26 = $p_ref >>> 0 < $tmp >>> 0;
        if (!$cmp26) {
          __label__ = 6;
          break $while_cond$7;
        }
        
        var $add_ptr27 = $p_ref + 4;
        $p_ref = $add_ptr27;
        
        
        $r2 = HEAPU8[$add_ptr27 >> 0] & 255;
        
        
        
        
        $r3 = HEAPU8[$p_ref + 2 >> 0] & 255;
        
        
        
        var $or32 = $r2 | $r3 << 16;
        $r2 = $or32;
        
        
        
        
        $r3 = HEAPU8[$p_ref + 1 >> 0] & 255;
        
        
        
        
        $r4 = HEAPU8[$p_ref + 3 >> 0] & 255;
        
        
        
        var $or38 = $r3 | $r4 << 16;
        $r3 = $or38;
        
        
        
        $r4 = $r0 + $r3;
        
        
        
        $r5 = $r0 + $r1;
        
        
        
        $r6 = $r2 + $r3;
        
        var $shr41 = $r5 >> 16;
        $r5 = $shr41;
        
        
        
        var $or43 = $r5 | $r6 << 16;
        $r5 = $or43;
        
        
        
        var $add44 = $r4 + $r5 * 20;
        $r4 = $add44;
        
        var $add45 = $r4 + 1048592;
        $r4 = $add45;
        
        
        
        $r5 = $r1 + $r2;
        
        
        
        var $sub48 = $r4 - $r5 * 5;
        $r4 = $sub48;
        
        var $shr49 = $r4 >> 5;
        $r4 = $shr49;
        
        
        var $or50 = $r13 | $r4;
        $r13 = $or50;
        
        
        
        
        
        
        $r5 = HEAPU8[$p_ref + ($dx_addr + 2) >> 0] & 255;
        
        
        
        
        
        
        $r6 = HEAPU8[$p_ref + ($dx_addr + 4) >> 0] & 255;
        
        
        
        var $or58 = $r5 | $r6 << 16;
        $r5 = $or58;
        
        
        var $add59 = $r4 + $r5;
        $r4 = $add59;
        
        var $add60 = $r4 + 65537;
        $r4 = $add60;
        
        
        var $and62 = $r4 >> 1 & 16711935;
        $r4 = $and62;
        
        
        
        
        $r5 = HEAPU8[$p_ref + 4 >> 0] & 255;
        
        
        $r6 = $r5 << 16;
        
        
        
        
        $r5 = $r6 | $r2 >> 16;
        
        
        var $add68 = $r5 + $r1;
        $r5 = $add68;
        
        var $shr69 = $r1 >> 16;
        $r1 = $shr69;
        
        
        
        var $or71 = $r1 | $r3 << 16;
        $r1 = $or71;
        
        
        var $add72 = $r1 + $r2;
        $r1 = $add72;
        
        
        
        var $add74 = $r5 + 20 * $r1;
        $r5 = $add74;
        
        var $shr75 = $r0 >> 16;
        $r0 = $shr75;
        
        
        
        var $or77 = $r0 | $r2 << 16;
        $r0 = $or77;
        
        
        var $add78 = $r0 + $r3;
        $r0 = $add78;
        
        var $add79 = $r5 + 1048592;
        $r5 = $add79;
        
        
        
        var $sub81 = $r5 - $r0 * 5;
        $r5 = $sub81;
        
        var $shr82 = $r5 >> 5;
        $r5 = $shr82;
        
        
        var $or83 = $r13 | $r5;
        $r13 = $or83;
        
        
        
        
        
        
        $r0 = HEAPU8[$p_ref + ($dx_addr + 3) >> 0] & 255;
        
        
        
        
        
        
        $r1 = HEAPU8[$p_ref + ($dx_addr + 5) >> 0] & 255;
        
        
        
        var $or91 = $r0 | $r1 << 16;
        $r0 = $or91;
        
        
        var $add92 = $r5 + $r0;
        $r5 = $add92;
        
        var $add93 = $r5 + 65537;
        $r5 = $add93;
        
        
        var $and95 = $r5 >> 1 & 16711935;
        $r5 = $and95;
        
        
        
        var $or97 = $r4 | $r5 << 8;
        $r4 = $or97;
        
        var $113 = $p_cur;
        var $incdec_ptr = $113 + 4;
        $p_cur = $incdec_ptr;
        HEAP32[$113 >> 2] = $r4;
        
        $r1 = $r3;
        
        $r0 = $r2;
        __label__ = 4;
        continue $while_cond$7;
      }
      
      
      var $add_ptr98 = $p_cur + 4 * $curr_offset;
      $p_cur = $add_ptr98;
      
      
      var $add_ptr99 = $p_ref + $ref_offset;
      $p_ref = $add_ptr99;
      
      var $and100 = $r13 & -16775424;
      
      if (($and100 | 0) != 0) {
        __label__ = 7;
      } else {
        __label__ = 19;
      }
      if (__label__ == 7) {
        
        
        
        
        
        var $add_ptr104 = $p_ref + (0 - ($ref_offset + $blkwidth_addr));
        $p_ref = $add_ptr104;
        
        
        
        
        var $add_ptr107 = $p_cur + 4 * (0 - ($outpitch_addr >> 2));
        $p_cur = $add_ptr107;
        
        
        
        
        $tmp = $p_ref + $blkwidth_addr;
        while (1) {
          
          
          
          var $cmp110 = $p_ref >>> 0 < $tmp >>> 0;
          if (!$cmp110) {
            __label__ = 18;
            break;
          }
          var $132 = $p_ref;
          var $incdec_ptr112 = $132 + 1;
          $p_ref = $incdec_ptr112;
          
          
          $r0 = HEAPU8[$132 >> 0] & 255;
          var $134 = $p_ref;
          var $incdec_ptr114 = $134 + 1;
          $p_ref = $incdec_ptr114;
          
          
          $r1 = HEAPU8[$134 >> 0] & 255;
          var $136 = $p_ref;
          var $incdec_ptr116 = $136 + 1;
          $p_ref = $incdec_ptr116;
          
          
          $r2 = HEAPU8[$136 >> 0] & 255;
          var $138 = $p_ref;
          var $incdec_ptr118 = $138 + 1;
          $p_ref = $incdec_ptr118;
          
          
          $r3 = HEAPU8[$138 >> 0] & 255;
          var $140 = $p_ref;
          var $incdec_ptr120 = $140 + 1;
          $p_ref = $incdec_ptr120;
          
          
          $r4 = HEAPU8[$140 >> 0] & 255;
          var $142 = $p_ref;
          var $incdec_ptr122 = $142 + 1;
          $p_ref = $incdec_ptr122;
          
          
          $r5 = HEAPU8[$142 >> 0] & 255;
          
          
          
          $result = $r0 + $r5;
          
          
          
          $r0 = $r1 + $r4;
          
          
          
          var $sub127 = $result - $r0 * 5;
          $result = $sub127;
          
          
          
          $r0 = $r2 + $r3;
          
          
          
          var $add130 = $result + $r0 * 20;
          $result = $add130;
          
          
          var $shr132 = $result + 16 >> 5;
          $result = $shr132;
          
          
          if ($result >>> 0 > 255) {
            __label__ = 10;
          } else {
            __label__ = 11;
          }
          if (__label__ == 10) {
            
            
            var $neg = $result >> 31 ^ -1;
            var $and136 = 255 & $neg;
            $result = $and136;
          }
          
          
          
          
          
          
          
          var $add140 = $result + (HEAPU8[$p_ref + $dx_addr >> 0] & 255) + 1;
          $result = $add140;
          
          
          $pkres = $result >> 1;
          var $162 = $p_ref;
          var $incdec_ptr142 = $162 + 1;
          $p_ref = $incdec_ptr142;
          
          
          $r0 = HEAPU8[$162 >> 0] & 255;
          
          
          
          $result = $r1 + $r0;
          
          
          
          $r1 = $r2 + $r5;
          
          
          
          var $sub147 = $result - $r1 * 5;
          $result = $sub147;
          
          
          
          $r1 = $r3 + $r4;
          
          
          
          var $add150 = $result + $r1 * 20;
          $result = $add150;
          
          
          var $shr152 = $result + 16 >> 5;
          $result = $shr152;
          
          
          if ($result >>> 0 > 255) {
            __label__ = 12;
          } else {
            __label__ = 13;
          }
          if (__label__ == 12) {
            
            
            var $neg156 = $result >> 31 ^ -1;
            var $and157 = 255 & $neg156;
            $result = $and157;
          }
          
          
          
          
          
          
          
          var $add162 = $result + (HEAPU8[$p_ref + $dx_addr >> 0] & 255) + 1;
          $result = $add162;
          
          var $shr163 = $result >> 1;
          $result = $shr163;
          
          
          
          var $or165 = $pkres | $result << 8;
          $pkres = $or165;
          var $184 = $p_ref;
          var $incdec_ptr166 = $184 + 1;
          $p_ref = $incdec_ptr166;
          
          
          $r1 = HEAPU8[$184 >> 0] & 255;
          
          
          
          $result = $r2 + $r1;
          
          
          
          $r2 = $r3 + $r0;
          
          
          
          var $sub171 = $result - $r2 * 5;
          $result = $sub171;
          
          
          
          $r2 = $r4 + $r5;
          
          
          
          var $add174 = $result + $r2 * 20;
          $result = $add174;
          
          
          var $shr176 = $result + 16 >> 5;
          $result = $shr176;
          
          
          if ($result >>> 0 > 255) {
            __label__ = 14;
          } else {
            __label__ = 15;
          }
          if (__label__ == 14) {
            
            
            var $neg180 = $result >> 31 ^ -1;
            var $and181 = 255 & $neg180;
            $result = $and181;
          }
          
          
          
          
          
          
          
          var $add186 = $result + (HEAPU8[$p_ref + $dx_addr >> 0] & 255) + 1;
          $result = $add186;
          
          var $shr187 = $result >> 1;
          $result = $shr187;
          
          
          
          var $or189 = $pkres | $result << 16;
          $pkres = $or189;
          var $206 = $p_ref;
          var $incdec_ptr190 = $206 + 1;
          $p_ref = $incdec_ptr190;
          
          
          $r2 = HEAPU8[$206 >> 0] & 255;
          
          
          
          $result = $r3 + $r2;
          
          
          
          $r3 = $r4 + $r1;
          
          
          
          var $sub195 = $result - $r3 * 5;
          $result = $sub195;
          
          
          
          $r3 = $r5 + $r0;
          
          
          
          var $add198 = $result + $r3 * 20;
          $result = $add198;
          
          
          var $shr200 = $result + 16 >> 5;
          $result = $shr200;
          
          
          if ($result >>> 0 > 255) {
            __label__ = 16;
          } else {
            __label__ = 17;
          }
          if (__label__ == 16) {
            
            
            var $neg204 = $result >> 31 ^ -1;
            var $and205 = 255 & $neg204;
            $result = $and205;
          }
          
          
          
          
          
          
          
          var $add210 = $result + (HEAPU8[$p_ref + $dx_addr >> 0] & 255) + 1;
          $result = $add210;
          
          var $shr211 = $result >> 1;
          $result = $shr211;
          
          
          
          var $or213 = $pkres | $result << 24;
          $pkres = $or213;
          
          var $229 = $p_cur;
          var $incdec_ptr214 = $229 + 4;
          $p_cur = $incdec_ptr214;
          HEAP32[$229 >> 2] = $pkres;
          
          var $add_ptr215 = $p_ref + -5;
          $p_ref = $add_ptr215;
          __label__ = 8;
          continue;
        }
        
        
        var $add_ptr216 = $p_cur + 4 * $curr_offset;
        $p_cur = $add_ptr216;
        
        
        var $add_ptr217 = $p_ref + $ref_offset;
        $p_ref = $add_ptr217;
      }
      
      var $dec = $j + -1;
      $j = $dec;
      __label__ = 2;
      continue $for_cond$4;
    }
  } else if (__label__ == 22) {
    
    var $add_ptr220 = $p_ref + -2;
    $p_ref = $add_ptr220;
    $r13 = 0;
    
    $j = $blkheight_addr;
    $for_cond221$33 : while (1) {
      
      var $cmp222 = ($j | 0) > 0;
      if (!$cmp222) {
        __label__ = 42;
        break $for_cond221$33;
      }
      
      
      
      
      $tmp = $p_ref + $blkwidth_addr;
      
      
      
      
      $r0 = HEAPU8[$p_ref >> 0] & 255;
      
      
      
      
      $r1 = HEAPU8[$p_ref + 2 >> 0] & 255;
      
      
      
      var $or230 = $r0 | $r1 << 16;
      $r0 = $or230;
      
      
      
      
      $r1 = HEAPU8[$p_ref + 1 >> 0] & 255;
      
      
      
      
      $r2 = HEAPU8[$p_ref + 3 >> 0] & 255;
      
      
      
      var $or236 = $r1 | $r2 << 16;
      $r1 = $or236;
      $while_cond237$36 : while (1) {
        
        
        
        var $cmp238 = $p_ref >>> 0 < $tmp >>> 0;
        if (!$cmp238) {
          __label__ = 27;
          break $while_cond237$36;
        }
        
        var $add_ptr240 = $p_ref + 4;
        $p_ref = $add_ptr240;
        
        
        $r2 = HEAPU8[$add_ptr240 >> 0] & 255;
        
        
        
        
        $r3 = HEAPU8[$p_ref + 2 >> 0] & 255;
        
        
        
        var $or245 = $r2 | $r3 << 16;
        $r2 = $or245;
        
        
        
        
        $r3 = HEAPU8[$p_ref + 1 >> 0] & 255;
        
        
        
        
        $r4 = HEAPU8[$p_ref + 3 >> 0] & 255;
        
        
        
        var $or251 = $r3 | $r4 << 16;
        $r3 = $or251;
        
        
        
        $r4 = $r0 + $r3;
        
        
        
        $r5 = $r0 + $r1;
        
        
        
        $r6 = $r2 + $r3;
        
        var $shr255 = $r5 >> 16;
        $r5 = $shr255;
        
        
        
        var $or257 = $r5 | $r6 << 16;
        $r5 = $or257;
        
        
        
        var $add259 = $r4 + $r5 * 20;
        $r4 = $add259;
        
        var $add260 = $r4 + 1048592;
        $r4 = $add260;
        
        
        
        $r5 = $r1 + $r2;
        
        
        
        var $sub263 = $r4 - $r5 * 5;
        $r4 = $sub263;
        
        var $shr264 = $r4 >> 5;
        $r4 = $shr264;
        
        
        var $or265 = $r13 | $r4;
        $r13 = $or265;
        
        var $and266 = $r4 & 16711935;
        $r4 = $and266;
        
        
        
        
        $r5 = HEAPU8[$p_ref + 4 >> 0] & 255;
        
        
        $r6 = $r5 << 16;
        
        
        
        
        $r5 = $r6 | $r2 >> 16;
        
        
        var $add272 = $r5 + $r1;
        $r5 = $add272;
        
        var $shr273 = $r1 >> 16;
        $r1 = $shr273;
        
        
        
        var $or275 = $r1 | $r3 << 16;
        $r1 = $or275;
        
        
        var $add276 = $r1 + $r2;
        $r1 = $add276;
        
        
        
        var $add278 = $r5 + 20 * $r1;
        $r5 = $add278;
        
        var $shr279 = $r0 >> 16;
        $r0 = $shr279;
        
        
        
        var $or281 = $r0 | $r2 << 16;
        $r0 = $or281;
        
        
        var $add282 = $r0 + $r3;
        $r0 = $add282;
        
        var $add283 = $r5 + 1048592;
        $r5 = $add283;
        
        
        
        var $sub285 = $r5 - $r0 * 5;
        $r5 = $sub285;
        
        var $shr286 = $r5 >> 5;
        $r5 = $shr286;
        
        
        var $or287 = $r13 | $r5;
        $r13 = $or287;
        
        var $and288 = $r5 & 16711935;
        $r5 = $and288;
        
        
        
        var $or290 = $r4 | $r5 << 8;
        $r4 = $or290;
        
        var $318 = $p_cur;
        var $incdec_ptr291 = $318 + 4;
        $p_cur = $incdec_ptr291;
        HEAP32[$318 >> 2] = $r4;
        
        $r1 = $r3;
        
        $r0 = $r2;
        __label__ = 25;
        continue $while_cond237$36;
      }
      
      
      var $add_ptr293 = $p_cur + 4 * $curr_offset;
      $p_cur = $add_ptr293;
      
      
      var $add_ptr294 = $p_ref + $ref_offset;
      $p_ref = $add_ptr294;
      
      var $and295 = $r13 & -16775424;
      
      if (($and295 | 0) != 0) {
        __label__ = 28;
      } else {
        __label__ = 40;
      }
      if (__label__ == 28) {
        
        
        
        
        
        var $add_ptr300 = $p_ref + (0 - ($ref_offset + $blkwidth_addr));
        $p_ref = $add_ptr300;
        
        
        
        
        var $add_ptr303 = $p_cur + 4 * (0 - ($outpitch_addr >> 2));
        $p_cur = $add_ptr303;
        
        
        
        
        $tmp = $p_ref + $blkwidth_addr;
        while (1) {
          
          
          
          var $cmp306 = $p_ref >>> 0 < $tmp >>> 0;
          if (!$cmp306) {
            __label__ = 39;
            break;
          }
          var $337 = $p_ref;
          var $incdec_ptr308 = $337 + 1;
          $p_ref = $incdec_ptr308;
          
          
          $r0 = HEAPU8[$337 >> 0] & 255;
          var $339 = $p_ref;
          var $incdec_ptr310 = $339 + 1;
          $p_ref = $incdec_ptr310;
          
          
          $r1 = HEAPU8[$339 >> 0] & 255;
          var $341 = $p_ref;
          var $incdec_ptr312 = $341 + 1;
          $p_ref = $incdec_ptr312;
          
          
          $r2 = HEAPU8[$341 >> 0] & 255;
          var $343 = $p_ref;
          var $incdec_ptr314 = $343 + 1;
          $p_ref = $incdec_ptr314;
          
          
          $r3 = HEAPU8[$343 >> 0] & 255;
          var $345 = $p_ref;
          var $incdec_ptr316 = $345 + 1;
          $p_ref = $incdec_ptr316;
          
          
          $r4 = HEAPU8[$345 >> 0] & 255;
          var $347 = $p_ref;
          var $incdec_ptr318 = $347 + 1;
          $p_ref = $incdec_ptr318;
          
          
          $r5 = HEAPU8[$347 >> 0] & 255;
          
          
          
          $result = $r0 + $r5;
          
          
          
          $r0 = $r1 + $r4;
          
          
          
          var $sub323 = $result - $r0 * 5;
          $result = $sub323;
          
          
          
          $r0 = $r2 + $r3;
          
          
          
          var $add326 = $result + $r0 * 20;
          $result = $add326;
          
          
          var $shr328 = $result + 16 >> 5;
          $result = $shr328;
          
          
          if ($result >>> 0 > 255) {
            __label__ = 31;
          } else {
            __label__ = 32;
          }
          if (__label__ == 31) {
            
            
            var $neg332 = $result >> 31 ^ -1;
            var $and333 = 255 & $neg332;
            $result = $and333;
          }
          
          $pkres = $result;
          var $363 = $p_ref;
          var $incdec_ptr335 = $363 + 1;
          $p_ref = $incdec_ptr335;
          
          
          $r0 = HEAPU8[$363 >> 0] & 255;
          
          
          
          $result = $r1 + $r0;
          
          
          
          $r1 = $r2 + $r5;
          
          
          
          var $sub340 = $result - $r1 * 5;
          $result = $sub340;
          
          
          
          $r1 = $r3 + $r4;
          
          
          
          var $add343 = $result + $r1 * 20;
          $result = $add343;
          
          
          var $shr345 = $result + 16 >> 5;
          $result = $shr345;
          
          
          if ($result >>> 0 > 255) {
            __label__ = 33;
          } else {
            __label__ = 34;
          }
          if (__label__ == 33) {
            
            
            var $neg349 = $result >> 31 ^ -1;
            var $and350 = 255 & $neg349;
            $result = $and350;
          }
          
          
          
          var $or353 = $pkres | $result << 8;
          $pkres = $or353;
          var $380 = $p_ref;
          var $incdec_ptr354 = $380 + 1;
          $p_ref = $incdec_ptr354;
          
          
          $r1 = HEAPU8[$380 >> 0] & 255;
          
          
          
          $result = $r2 + $r1;
          
          
          
          $r2 = $r3 + $r0;
          
          
          
          var $sub359 = $result - $r2 * 5;
          $result = $sub359;
          
          
          
          $r2 = $r4 + $r5;
          
          
          
          var $add362 = $result + $r2 * 20;
          $result = $add362;
          
          
          var $shr364 = $result + 16 >> 5;
          $result = $shr364;
          
          
          if ($result >>> 0 > 255) {
            __label__ = 35;
          } else {
            __label__ = 36;
          }
          if (__label__ == 35) {
            
            
            var $neg368 = $result >> 31 ^ -1;
            var $and369 = 255 & $neg368;
            $result = $and369;
          }
          
          
          
          var $or372 = $pkres | $result << 16;
          $pkres = $or372;
          var $397 = $p_ref;
          var $incdec_ptr373 = $397 + 1;
          $p_ref = $incdec_ptr373;
          
          
          $r2 = HEAPU8[$397 >> 0] & 255;
          
          
          
          $result = $r3 + $r2;
          
          
          
          $r3 = $r4 + $r1;
          
          
          
          var $sub378 = $result - $r3 * 5;
          $result = $sub378;
          
          
          
          $r3 = $r5 + $r0;
          
          
          
          var $add381 = $result + $r3 * 20;
          $result = $add381;
          
          
          var $shr383 = $result + 16 >> 5;
          $result = $shr383;
          
          
          if ($result >>> 0 > 255) {
            __label__ = 37;
          } else {
            __label__ = 38;
          }
          if (__label__ == 37) {
            
            
            var $neg387 = $result >> 31 ^ -1;
            var $and388 = 255 & $neg387;
            $result = $and388;
          }
          
          
          
          var $or391 = $pkres | $result << 24;
          $pkres = $or391;
          
          var $415 = $p_cur;
          var $incdec_ptr392 = $415 + 4;
          $p_cur = $incdec_ptr392;
          HEAP32[$415 >> 2] = $pkres;
          
          var $add_ptr393 = $p_ref + -5;
          $p_ref = $add_ptr393;
          __label__ = 29;
          continue;
        }
        
        
        var $add_ptr395 = $p_cur + 4 * $curr_offset;
        $p_cur = $add_ptr395;
        
        
        var $add_ptr396 = $p_ref + $ref_offset;
        $p_ref = $add_ptr396;
      }
      
      var $dec399 = $j + -1;
      $j = $dec399;
      __label__ = 23;
      continue $for_cond221$33;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z13VertInterp1MCPhiS_iiii($in, $inpitch, $out, $outpitch, $blkwidth, $blkheight, $dy) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 576;
  var __label__;
  var __lastLabel__ = null;
  var $in_addr;
  var $inpitch_addr;
  var $out_addr;
  var $outpitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $dy_addr;
  var $p_cur;
  var $p_ref;
  var $tmp;
  var $result;
  var $curr_offset;
  var $ref_offset;
  var $j;
  var $i;
  var $r0;
  var $r1;
  var $r2;
  var $r3;
  var $r4;
  var $r5;
  var $r6;
  var $r7;
  var $r8;
  var $r13;
  var $tmp_in = __stackBase__;
  $in_addr = $in;
  $inpitch_addr = $inpitch;
  $out_addr = $out;
  $outpitch_addr = $outpitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  $dy_addr = $dy;
  
  
  
  
  if (($in_addr & 3 | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    
    var $arrayidx17 = $tmp_in;
    
    
    
    __Z11CreateAlignPhiiS_ii($in_addr, $inpitch_addr, -2, $arrayidx17, $blkwidth_addr, $blkheight_addr + 5);
    
    
    $in_addr = $tmp_in + 48;
    $inpitch_addr = 24;
  }
  
  $p_cur = $out_addr;
  
  
  
  
  
  $curr_offset = 1 - $outpitch_addr * ($blkheight_addr - 1);
  
  
  
  $ref_offset = $blkheight_addr * $inpitch_addr;
  
  var $add22 = $curr_offset + 3;
  $curr_offset = $add22;
  
  
  
  if (($dy_addr & 1 | 0) != 0) {
    __label__ = 3;
  } else {
    __label__ = 31;
  }
  if (__label__ == 3) {
    
    
    
    if (($dy_addr >> 1 | 0) != 0) {
      __label__ = 4;
    } else {
      __label__ = 5;
    }
    if (__label__ == 4) {
      __lastLabel__ = 4;
    } else if (__label__ == 5) {
      
      var $sub27 = 0 - $inpitch_addr;
      __lastLabel__ = 5;
    }
    var $cond = __lastLabel__ == 4 ? 0 : $sub27;
    $dy_addr = $cond;
    $j = 0;
    $for_cond$11 : while (1) {
      
      
      var $cmp = ($j | 0) < ($blkwidth_addr | 0);
      if (!$cmp) {
        __label__ = 30;
        break $for_cond$11;
      }
      $r13 = 0;
      
      $p_ref = $in_addr;
      
      
      
      var $add_ptr = $p_cur + (0 - $outpitch_addr);
      $p_cur = $add_ptr;
      
      
      
      
      $tmp = $p_ref + $ref_offset;
      $while_cond$14 : while (1) {
        
        
        
        var $cmp29 = $p_ref >>> 0 < $tmp >>> 0;
        if (!$cmp29) {
          __label__ = 11;
          break $while_cond$14;
        }
        
        
        
        
        
        
        
        $r0 = HEAP32[$p_ref + (0 - ($inpitch_addr << 1)) >> 2];
        
        
        var $add_ptr32 = $p_ref + $inpitch_addr;
        $p_ref = $add_ptr32;
        
        
        
        $r6 = $r0 >> 8 & 16711935;
        
        var $and35 = $r0 & 16711935;
        $r0 = $and35;
        
        
        
        
        
        
        $r1 = HEAP32[$p_ref + ($inpitch_addr << 1) >> 2];
        
        
        
        $r7 = $r1 >> 8 & 16711935;
        
        var $and40 = $r1 & 16711935;
        $r1 = $and40;
        
        
        var $add41 = $r0 + $r1;
        $r0 = $add41;
        
        
        var $add42 = $r6 + $r7;
        $r6 = $add42;
        
        
        
        $r2 = HEAP32[$p_ref >> 2];
        
        
        
        $r8 = $r2 >> 8 & 16711935;
        
        var $and45 = $r2 & 16711935;
        $r2 = $and45;
        
        
        
        
        
        
        $r1 = HEAP32[$p_ref + (0 - $inpitch_addr) >> 2];
        
        
        
        $r7 = $r1 >> 8 & 16711935;
        
        var $and50 = $r1 & 16711935;
        $r1 = $and50;
        
        
        var $add51 = $r1 + $r2;
        $r1 = $add51;
        
        
        var $add52 = $r7 + $r8;
        $r7 = $add52;
        
        
        
        var $add54 = $r0 + 20 * $r1;
        $r0 = $add54;
        
        
        
        var $add56 = $r6 + 20 * $r7;
        $r6 = $add56;
        
        var $add57 = $r0 + 1048592;
        $r0 = $add57;
        
        var $add58 = $r6 + 1048592;
        $r6 = $add58;
        
        
        
        
        
        
        
        $r2 = HEAP32[$p_ref + (0 - ($inpitch_addr << 1)) >> 2];
        
        
        
        $r8 = $r2 >> 8 & 16711935;
        
        var $and64 = $r2 & 16711935;
        $r2 = $and64;
        
        
        
        
        
        $r1 = HEAP32[$p_ref + $inpitch_addr >> 2];
        
        
        
        $r7 = $r1 >> 8 & 16711935;
        
        var $and68 = $r1 & 16711935;
        $r1 = $and68;
        
        
        var $add69 = $r1 + $r2;
        $r1 = $add69;
        
        
        var $add70 = $r7 + $r8;
        $r7 = $add70;
        
        
        
        var $sub72 = $r0 - 5 * $r1;
        $r0 = $sub72;
        
        
        
        var $sub74 = $r6 - 5 * $r7;
        $r6 = $sub74;
        
        var $shr75 = $r0 >> 5;
        $r0 = $shr75;
        
        var $shr76 = $r6 >> 5;
        $r6 = $shr76;
        
        
        var $or = $r13 | $r6;
        $r13 = $or;
        
        
        var $or77 = $r13 | $r0;
        $r13 = $or77;
        
        
        
        
        
        $r1 = HEAP32[$p_ref + $dy_addr >> 2];
        
        
        
        $r2 = $r1 >> 8 & 16711935;
        
        var $and81 = $r1 & 16711935;
        $r1 = $and81;
        
        
        var $add82 = $r0 + $r1;
        $r0 = $add82;
        
        
        var $add83 = $r6 + $r2;
        $r6 = $add83;
        
        var $add84 = $r0 + 65537;
        $r0 = $add84;
        
        var $add85 = $r6 + 65537;
        $r6 = $add85;
        
        
        var $and87 = $r0 >> 1 & 16711935;
        $r0 = $and87;
        
        
        var $and89 = $r6 >> 1 & 16711935;
        $r6 = $and89;
        
        
        
        var $or91 = $r0 | $r6 << 8;
        $r0 = $or91;
        
        
        
        var $add_ptr92 = $p_cur + $outpitch_addr;
        $p_cur = $add_ptr92;
        
        HEAP32[$add_ptr92 >> 2] = $r0;
        __label__ = 9;
        continue $while_cond$14;
      }
      
      
      var $add_ptr93 = $p_cur + $curr_offset;
      $p_cur = $add_ptr93;
      
      var $and94 = $r13 & -16775424;
      
      if (($and94 | 0) != 0) {
        __label__ = 12;
      } else {
        __label__ = 28;
      }
      if (__label__ == 12) {
        
        var $add_ptr97 = $p_cur + -4;
        $p_cur = $add_ptr97;
        $i = 0;
        $for_cond98$20 : while (1) {
          
          var $cmp99 = ($i | 0) < 4;
          if (!$cmp99) {
            __label__ = 27;
            break $for_cond98$20;
          }
          
          
          
          $p_ref = $in_addr + $i;
          
          
          
          var $add_ptr103 = $p_cur + (0 - $outpitch_addr);
          $p_cur = $add_ptr103;
          
          
          
          
          $tmp = $p_ref + $ref_offset;
          while (1) {
            
            
            
            var $cmp106 = $p_ref >>> 0 < $tmp >>> 0;
            if (!$cmp106) {
              __label__ = 25;
              break;
            }
            
            
            
            
            
            
            
            $r0 = HEAPU8[$p_ref + (0 - ($inpitch_addr << 1)) >> 0] & 255;
            
            
            
            
            
            
            $r1 = HEAPU8[$p_ref + (0 - $inpitch_addr) >> 0] & 255;
            
            
            
            $r2 = HEAPU8[$p_ref >> 0] & 255;
            
            
            var $add_ptr115 = $p_ref + $inpitch_addr;
            $p_ref = $add_ptr115;
            
            
            $r3 = HEAPU8[$add_ptr115 >> 0] & 255;
            
            
            var $add_ptr117 = $p_ref + $inpitch_addr;
            $p_ref = $add_ptr117;
            
            
            $r4 = HEAPU8[$add_ptr117 >> 0] & 255;
            
            
            var $add_ptr119 = $p_ref + $inpitch_addr;
            $p_ref = $add_ptr119;
            
            
            $r5 = HEAPU8[$add_ptr119 >> 0] & 255;
            
            
            
            $result = $r0 + $r5;
            
            
            
            $r0 = $r1 + $r4;
            
            
            
            var $sub124 = $result - $r0 * 5;
            $result = $sub124;
            
            
            
            $r0 = $r2 + $r3;
            
            
            
            var $add127 = $result + $r0 * 20;
            $result = $add127;
            
            
            var $shr129 = $result + 16 >> 5;
            $result = $shr129;
            
            
            if ($result >>> 0 > 255) {
              __label__ = 17;
            } else {
              __label__ = 18;
            }
            if (__label__ == 17) {
              
              
              var $neg = $result >> 31 ^ -1;
              var $and133 = 255 & $neg;
              $result = $and133;
            }
            
            
            
            
            
            
            
            
            
            
            var $add140 = $result + (HEAPU8[$p_ref + ($dy_addr - ($inpitch_addr << 1)) >> 0] & 255) + 1;
            $result = $add140;
            
            var $shr141 = $result >> 1;
            $result = $shr141;
            
            
            
            
            var $add_ptr143 = $p_cur + $outpitch_addr;
            $p_cur = $add_ptr143;
            HEAP8[$add_ptr143 >> 0] = $result & 255;
            
            
            var $add_ptr144 = $p_ref + $inpitch_addr;
            $p_ref = $add_ptr144;
            
            
            $r0 = HEAPU8[$add_ptr144 >> 0] & 255;
            
            
            
            $result = $r1 + $r0;
            
            
            
            $r1 = $r2 + $r5;
            
            
            
            var $sub149 = $result - $r1 * 5;
            $result = $sub149;
            
            
            
            $r1 = $r3 + $r4;
            
            
            
            var $add152 = $result + $r1 * 20;
            $result = $add152;
            
            
            var $shr154 = $result + 16 >> 5;
            $result = $shr154;
            
            
            if ($result >>> 0 > 255) {
              __label__ = 19;
            } else {
              __label__ = 20;
            }
            if (__label__ == 19) {
              
              
              var $neg158 = $result >> 31 ^ -1;
              var $and159 = 255 & $neg158;
              $result = $and159;
            }
            
            
            
            
            
            
            
            
            
            
            var $add166 = $result + (HEAPU8[$p_ref + ($dy_addr - ($inpitch_addr << 1)) >> 0] & 255) + 1;
            $result = $add166;
            
            var $shr167 = $result >> 1;
            $result = $shr167;
            
            
            
            
            var $add_ptr169 = $p_cur + $outpitch_addr;
            $p_cur = $add_ptr169;
            HEAP8[$add_ptr169 >> 0] = $result & 255;
            
            
            var $add_ptr170 = $p_ref + $inpitch_addr;
            $p_ref = $add_ptr170;
            
            
            $r1 = HEAPU8[$add_ptr170 >> 0] & 255;
            
            
            
            $result = $r2 + $r1;
            
            
            
            $r2 = $r3 + $r0;
            
            
            
            var $sub175 = $result - $r2 * 5;
            $result = $sub175;
            
            
            
            $r2 = $r4 + $r5;
            
            
            
            var $add178 = $result + $r2 * 20;
            $result = $add178;
            
            
            var $shr180 = $result + 16 >> 5;
            $result = $shr180;
            
            
            if ($result >>> 0 > 255) {
              __label__ = 21;
            } else {
              __label__ = 22;
            }
            if (__label__ == 21) {
              
              
              var $neg184 = $result >> 31 ^ -1;
              var $and185 = 255 & $neg184;
              $result = $and185;
            }
            
            
            
            
            
            
            
            
            
            
            var $add192 = $result + (HEAPU8[$p_ref + ($dy_addr - ($inpitch_addr << 1)) >> 0] & 255) + 1;
            $result = $add192;
            
            var $shr193 = $result >> 1;
            $result = $shr193;
            
            
            
            
            var $add_ptr195 = $p_cur + $outpitch_addr;
            $p_cur = $add_ptr195;
            HEAP8[$add_ptr195 >> 0] = $result & 255;
            
            
            var $add_ptr196 = $p_ref + $inpitch_addr;
            $p_ref = $add_ptr196;
            
            
            $r2 = HEAPU8[$add_ptr196 >> 0] & 255;
            
            
            
            $result = $r3 + $r2;
            
            
            
            $r3 = $r4 + $r1;
            
            
            
            var $sub201 = $result - $r3 * 5;
            $result = $sub201;
            
            
            
            $r3 = $r5 + $r0;
            
            
            
            var $add204 = $result + $r3 * 20;
            $result = $add204;
            
            
            var $shr206 = $result + 16 >> 5;
            $result = $shr206;
            
            
            if ($result >>> 0 > 255) {
              __label__ = 23;
            } else {
              __label__ = 24;
            }
            if (__label__ == 23) {
              
              
              var $neg210 = $result >> 31 ^ -1;
              var $and211 = 255 & $neg210;
              $result = $and211;
            }
            
            
            
            
            
            
            
            
            
            
            var $add218 = $result + (HEAPU8[$p_ref + ($dy_addr - ($inpitch_addr << 1)) >> 0] & 255) + 1;
            $result = $add218;
            
            var $shr219 = $result >> 1;
            $result = $shr219;
            
            
            
            
            var $add_ptr221 = $p_cur + $outpitch_addr;
            $p_cur = $add_ptr221;
            HEAP8[$add_ptr221 >> 0] = $result & 255;
            
            
            
            
            var $add_ptr224 = $p_ref + (0 - ($inpitch_addr << 1));
            $p_ref = $add_ptr224;
            __label__ = 15;
            continue;
          }
          
          
          
          var $add_ptr227 = $p_cur + ($curr_offset - 3);
          $p_cur = $add_ptr227;
          
          var $inc = $i + 1;
          $i = $inc;
          __label__ = 13;
          continue $for_cond98$20;
        }
      }
      
      var $add230 = $j + 4;
      $j = $add230;
      
      var $add_ptr231 = $in_addr + 4;
      $in_addr = $add_ptr231;
      __label__ = 7;
      continue $for_cond$11;
    }
  } else if (__label__ == 31) {
    $j = 0;
    $for_cond233$45 : while (1) {
      
      
      var $cmp234 = ($j | 0) < ($blkwidth_addr | 0);
      if (!$cmp234) {
        __label__ = 55;
        break $for_cond233$45;
      }
      $r13 = 0;
      
      $p_ref = $in_addr;
      
      
      
      var $add_ptr237 = $p_cur + (0 - $outpitch_addr);
      $p_cur = $add_ptr237;
      
      
      
      
      $tmp = $p_ref + $ref_offset;
      $while_cond239$48 : while (1) {
        
        
        
        var $cmp240 = $p_ref >>> 0 < $tmp >>> 0;
        if (!$cmp240) {
          __label__ = 36;
          break $while_cond239$48;
        }
        
        
        
        
        
        
        
        $r0 = HEAP32[$p_ref + (0 - ($inpitch_addr << 1)) >> 2];
        
        
        var $add_ptr245 = $p_ref + $inpitch_addr;
        $p_ref = $add_ptr245;
        
        
        
        $r6 = $r0 >> 8 & 16711935;
        
        var $and248 = $r0 & 16711935;
        $r0 = $and248;
        
        
        
        
        
        
        $r1 = HEAP32[$p_ref + ($inpitch_addr << 1) >> 2];
        
        
        
        $r7 = $r1 >> 8 & 16711935;
        
        var $and253 = $r1 & 16711935;
        $r1 = $and253;
        
        
        var $add254 = $r0 + $r1;
        $r0 = $add254;
        
        
        var $add255 = $r6 + $r7;
        $r6 = $add255;
        
        
        
        $r2 = HEAP32[$p_ref >> 2];
        
        
        
        $r8 = $r2 >> 8 & 16711935;
        
        var $and258 = $r2 & 16711935;
        $r2 = $and258;
        
        
        
        
        
        
        $r1 = HEAP32[$p_ref + (0 - $inpitch_addr) >> 2];
        
        
        
        $r7 = $r1 >> 8 & 16711935;
        
        var $and263 = $r1 & 16711935;
        $r1 = $and263;
        
        
        var $add264 = $r1 + $r2;
        $r1 = $add264;
        
        
        var $add265 = $r7 + $r8;
        $r7 = $add265;
        
        
        
        var $add267 = $r0 + 20 * $r1;
        $r0 = $add267;
        
        
        
        var $add269 = $r6 + 20 * $r7;
        $r6 = $add269;
        
        var $add270 = $r0 + 1048592;
        $r0 = $add270;
        
        var $add271 = $r6 + 1048592;
        $r6 = $add271;
        
        
        
        
        
        
        
        $r2 = HEAP32[$p_ref + (0 - ($inpitch_addr << 1)) >> 2];
        
        
        
        $r8 = $r2 >> 8 & 16711935;
        
        var $and277 = $r2 & 16711935;
        $r2 = $and277;
        
        
        
        
        
        $r1 = HEAP32[$p_ref + $inpitch_addr >> 2];
        
        
        
        $r7 = $r1 >> 8 & 16711935;
        
        var $and281 = $r1 & 16711935;
        $r1 = $and281;
        
        
        var $add282 = $r1 + $r2;
        $r1 = $add282;
        
        
        var $add283 = $r7 + $r8;
        $r7 = $add283;
        
        
        
        var $sub285 = $r0 - 5 * $r1;
        $r0 = $sub285;
        
        
        
        var $sub287 = $r6 - 5 * $r7;
        $r6 = $sub287;
        
        var $shr288 = $r0 >> 5;
        $r0 = $shr288;
        
        var $shr289 = $r6 >> 5;
        $r6 = $shr289;
        
        
        var $or290 = $r13 | $r6;
        $r13 = $or290;
        
        
        var $or291 = $r13 | $r0;
        $r13 = $or291;
        
        var $and292 = $r0 & 16711935;
        $r0 = $and292;
        
        var $and293 = $r6 & 16711935;
        $r6 = $and293;
        
        
        
        var $or295 = $r0 | $r6 << 8;
        $r0 = $or295;
        
        
        
        var $add_ptr296 = $p_cur + $outpitch_addr;
        $p_cur = $add_ptr296;
        
        HEAP32[$add_ptr296 >> 2] = $r0;
        __label__ = 34;
        continue $while_cond239$48;
      }
      
      
      var $add_ptr298 = $p_cur + $curr_offset;
      $p_cur = $add_ptr298;
      
      var $and299 = $r13 & -16775424;
      
      if (($and299 | 0) != 0) {
        __label__ = 37;
      } else {
        __label__ = 53;
      }
      if (__label__ == 37) {
        
        var $add_ptr302 = $p_cur + -4;
        $p_cur = $add_ptr302;
        $i = 0;
        $for_cond303$54 : while (1) {
          
          var $cmp304 = ($i | 0) < 4;
          if (!$cmp304) {
            __label__ = 52;
            break $for_cond303$54;
          }
          
          
          
          $p_ref = $in_addr + $i;
          
          
          
          var $add_ptr308 = $p_cur + (0 - $outpitch_addr);
          $p_cur = $add_ptr308;
          
          
          
          
          $tmp = $p_ref + $ref_offset;
          while (1) {
            
            
            
            var $cmp311 = $p_ref >>> 0 < $tmp >>> 0;
            if (!$cmp311) {
              __label__ = 50;
              break;
            }
            
            
            
            
            
            
            
            $r0 = HEAPU8[$p_ref + (0 - ($inpitch_addr << 1)) >> 0] & 255;
            
            
            
            
            
            
            $r1 = HEAPU8[$p_ref + (0 - $inpitch_addr) >> 0] & 255;
            
            
            
            $r2 = HEAPU8[$p_ref >> 0] & 255;
            
            
            var $add_ptr321 = $p_ref + $inpitch_addr;
            $p_ref = $add_ptr321;
            
            
            $r3 = HEAPU8[$add_ptr321 >> 0] & 255;
            
            
            var $add_ptr323 = $p_ref + $inpitch_addr;
            $p_ref = $add_ptr323;
            
            
            $r4 = HEAPU8[$add_ptr323 >> 0] & 255;
            
            
            var $add_ptr325 = $p_ref + $inpitch_addr;
            $p_ref = $add_ptr325;
            
            
            $r5 = HEAPU8[$add_ptr325 >> 0] & 255;
            
            
            
            $result = $r0 + $r5;
            
            
            
            $r0 = $r1 + $r4;
            
            
            
            var $sub330 = $result - $r0 * 5;
            $result = $sub330;
            
            
            
            $r0 = $r2 + $r3;
            
            
            
            var $add333 = $result + $r0 * 20;
            $result = $add333;
            
            
            var $shr335 = $result + 16 >> 5;
            $result = $shr335;
            
            
            if ($result >>> 0 > 255) {
              __label__ = 42;
            } else {
              __label__ = 43;
            }
            if (__label__ == 42) {
              
              
              var $neg339 = $result >> 31 ^ -1;
              var $and340 = 255 & $neg339;
              $result = $and340;
            }
            
            
            
            
            var $add_ptr343 = $p_cur + $outpitch_addr;
            $p_cur = $add_ptr343;
            HEAP8[$add_ptr343 >> 0] = $result & 255;
            
            
            var $add_ptr344 = $p_ref + $inpitch_addr;
            $p_ref = $add_ptr344;
            
            
            $r0 = HEAPU8[$add_ptr344 >> 0] & 255;
            
            
            
            $result = $r1 + $r0;
            
            
            
            $r1 = $r2 + $r5;
            
            
            
            var $sub349 = $result - $r1 * 5;
            $result = $sub349;
            
            
            
            $r1 = $r3 + $r4;
            
            
            
            var $add352 = $result + $r1 * 20;
            $result = $add352;
            
            
            var $shr354 = $result + 16 >> 5;
            $result = $shr354;
            
            
            if ($result >>> 0 > 255) {
              __label__ = 44;
            } else {
              __label__ = 45;
            }
            if (__label__ == 44) {
              
              
              var $neg358 = $result >> 31 ^ -1;
              var $and359 = 255 & $neg358;
              $result = $and359;
            }
            
            
            
            
            var $add_ptr362 = $p_cur + $outpitch_addr;
            $p_cur = $add_ptr362;
            HEAP8[$add_ptr362 >> 0] = $result & 255;
            
            
            var $add_ptr363 = $p_ref + $inpitch_addr;
            $p_ref = $add_ptr363;
            
            
            $r1 = HEAPU8[$add_ptr363 >> 0] & 255;
            
            
            
            $result = $r2 + $r1;
            
            
            
            $r2 = $r3 + $r0;
            
            
            
            var $sub368 = $result - $r2 * 5;
            $result = $sub368;
            
            
            
            $r2 = $r4 + $r5;
            
            
            
            var $add371 = $result + $r2 * 20;
            $result = $add371;
            
            
            var $shr373 = $result + 16 >> 5;
            $result = $shr373;
            
            
            if ($result >>> 0 > 255) {
              __label__ = 46;
            } else {
              __label__ = 47;
            }
            if (__label__ == 46) {
              
              
              var $neg377 = $result >> 31 ^ -1;
              var $and378 = 255 & $neg377;
              $result = $and378;
            }
            
            
            
            
            var $add_ptr381 = $p_cur + $outpitch_addr;
            $p_cur = $add_ptr381;
            HEAP8[$add_ptr381 >> 0] = $result & 255;
            
            
            var $add_ptr382 = $p_ref + $inpitch_addr;
            $p_ref = $add_ptr382;
            
            
            $r2 = HEAPU8[$add_ptr382 >> 0] & 255;
            
            
            
            $result = $r3 + $r2;
            
            
            
            $r3 = $r4 + $r1;
            
            
            
            var $sub387 = $result - $r3 * 5;
            $result = $sub387;
            
            
            
            $r3 = $r5 + $r0;
            
            
            
            var $add390 = $result + $r3 * 20;
            $result = $add390;
            
            
            var $shr392 = $result + 16 >> 5;
            $result = $shr392;
            
            
            if ($result >>> 0 > 255) {
              __label__ = 48;
            } else {
              __label__ = 49;
            }
            if (__label__ == 48) {
              
              
              var $neg396 = $result >> 31 ^ -1;
              var $and397 = 255 & $neg396;
              $result = $and397;
            }
            
            
            
            
            var $add_ptr400 = $p_cur + $outpitch_addr;
            $p_cur = $add_ptr400;
            HEAP8[$add_ptr400 >> 0] = $result & 255;
            
            
            
            
            var $add_ptr403 = $p_ref + (0 - ($inpitch_addr << 1));
            $p_ref = $add_ptr403;
            __label__ = 40;
            continue;
          }
          
          
          
          var $add_ptr406 = $p_cur + ($curr_offset - 3);
          $p_cur = $add_ptr406;
          
          var $inc408 = $i + 1;
          $i = $inc408;
          __label__ = 38;
          continue $for_cond303$54;
        }
      }
      
      var $add412 = $j + 4;
      $j = $add412;
      
      var $add_ptr413 = $in_addr + 4;
      $in_addr = $add_ptr413;
      __label__ = 32;
      continue $for_cond233$45;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z13VertInterp2MCPhiPiiii($in, $inpitch, $out, $outpitch, $blkwidth, $blkheight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $in_addr;
  var $inpitch_addr;
  var $out_addr;
  var $outpitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $p_cur;
  var $p_ref;
  var $tmp;
  var $result;
  var $curr_offset;
  var $ref_offset;
  var $j;
  var $r0;
  var $r1;
  var $r2;
  var $r3;
  var $r4;
  var $r5;
  $in_addr = $in;
  $inpitch_addr = $inpitch;
  $out_addr = $out;
  $outpitch_addr = $outpitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  
  $p_cur = $out_addr;
  
  
  
  
  
  $curr_offset = 1 - $outpitch_addr * ($blkheight_addr - 1);
  
  
  
  $ref_offset = $blkheight_addr * $inpitch_addr;
  $j = 0;
  $for_cond$2 : while (1) {
    
    
    var $cmp = ($j | 0) < ($blkwidth_addr | 0);
    if (!$cmp) {
      __label__ = 7;
      break $for_cond$2;
    }
    
    
    
    var $add_ptr = $p_cur + 4 * (0 - $outpitch_addr);
    $p_cur = $add_ptr;
    var $9 = $in_addr;
    var $incdec_ptr = $9 + 1;
    $in_addr = $incdec_ptr;
    $p_ref = $9;
    
    
    
    
    $tmp = $p_ref + $ref_offset;
    while (1) {
      
      
      
      var $cmp14 = $p_ref >>> 0 < $tmp >>> 0;
      if (!$cmp14) {
        __label__ = 5;
        break;
      }
      
      
      
      
      
      
      
      $r0 = HEAPU8[$p_ref + (0 - ($inpitch_addr << 1)) >> 0] & 255;
      
      
      
      
      
      
      $r1 = HEAPU8[$p_ref + (0 - $inpitch_addr) >> 0] & 255;
      
      
      
      $r2 = HEAPU8[$p_ref >> 0] & 255;
      
      
      var $add_ptr21 = $p_ref + $inpitch_addr;
      $p_ref = $add_ptr21;
      
      
      $r3 = HEAPU8[$add_ptr21 >> 0] & 255;
      
      
      var $add_ptr23 = $p_ref + $inpitch_addr;
      $p_ref = $add_ptr23;
      
      
      $r4 = HEAPU8[$add_ptr23 >> 0] & 255;
      
      
      var $add_ptr25 = $p_ref + $inpitch_addr;
      $p_ref = $add_ptr25;
      
      
      $r5 = HEAPU8[$add_ptr25 >> 0] & 255;
      
      
      
      $result = $r0 + $r5;
      
      
      
      $r0 = $r1 + $r4;
      
      
      
      var $sub29 = $result - $r0 * 5;
      $result = $sub29;
      
      
      
      $r0 = $r2 + $r3;
      
      
      
      var $add32 = $result + $r0 * 20;
      $result = $add32;
      
      
      
      var $add_ptr33 = $p_cur + 4 * $outpitch_addr;
      $p_cur = $add_ptr33;
      HEAP32[$add_ptr33 >> 2] = $result;
      
      
      var $add_ptr34 = $p_ref + $inpitch_addr;
      $p_ref = $add_ptr34;
      
      
      $r0 = HEAPU8[$add_ptr34 >> 0] & 255;
      
      
      
      $result = $r1 + $r0;
      
      
      
      $r1 = $r2 + $r5;
      
      
      
      var $sub39 = $result - $r1 * 5;
      $result = $sub39;
      
      
      
      $r1 = $r3 + $r4;
      
      
      
      var $add42 = $result + $r1 * 20;
      $result = $add42;
      
      
      
      var $add_ptr43 = $p_cur + 4 * $outpitch_addr;
      $p_cur = $add_ptr43;
      HEAP32[$add_ptr43 >> 2] = $result;
      
      
      var $add_ptr44 = $p_ref + $inpitch_addr;
      $p_ref = $add_ptr44;
      
      
      $r1 = HEAPU8[$add_ptr44 >> 0] & 255;
      
      
      
      $result = $r2 + $r1;
      
      
      
      $r2 = $r3 + $r0;
      
      
      
      var $sub49 = $result - $r2 * 5;
      $result = $sub49;
      
      
      
      $r2 = $r4 + $r5;
      
      
      
      var $add52 = $result + $r2 * 20;
      $result = $add52;
      
      
      
      var $add_ptr53 = $p_cur + 4 * $outpitch_addr;
      $p_cur = $add_ptr53;
      HEAP32[$add_ptr53 >> 2] = $result;
      
      
      var $add_ptr54 = $p_ref + $inpitch_addr;
      $p_ref = $add_ptr54;
      
      
      $r2 = HEAPU8[$add_ptr54 >> 0] & 255;
      
      
      
      $result = $r3 + $r2;
      
      
      
      $r3 = $r4 + $r1;
      
      
      
      var $sub59 = $result - $r3 * 5;
      $result = $sub59;
      
      
      
      $r3 = $r5 + $r0;
      
      
      
      var $add62 = $result + $r3 * 20;
      $result = $add62;
      
      
      
      var $add_ptr63 = $p_cur + 4 * $outpitch_addr;
      $p_cur = $add_ptr63;
      HEAP32[$add_ptr63 >> 2] = $result;
      
      
      
      
      var $add_ptr66 = $p_ref + (0 - ($inpitch_addr << 1));
      $p_ref = $add_ptr66;
      __label__ = 3;
      continue;
    }
    
    
    var $add_ptr67 = $p_cur + 4 * $curr_offset;
    $p_cur = $add_ptr67;
    
    var $inc = $j + 1;
    $j = $inc;
    __label__ = 1;
    continue $for_cond$2;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z13HorzInterp2MCPiiPhiiii($in, $inpitch, $out, $outpitch, $blkwidth, $blkheight, $dx) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $in_addr;
  var $inpitch_addr;
  var $out_addr;
  var $outpitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $dx_addr;
  var $p_ref;
  var $p_cur;
  var $tmp;
  var $pkres;
  var $result;
  var $result2;
  var $curr_offset;
  var $ref_offset;
  var $j;
  var $r0;
  var $r1;
  var $r2;
  var $r3;
  var $r4;
  var $r5;
  $in_addr = $in;
  $inpitch_addr = $inpitch;
  $out_addr = $out;
  $outpitch_addr = $outpitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  $dx_addr = $dx;
  
  
  $p_cur = $out_addr;
  
  
  
  
  $curr_offset = $outpitch_addr - $blkwidth_addr >> 2;
  
  $p_ref = $in_addr;
  
  
  
  $ref_offset = $inpitch_addr - $blkwidth_addr;
  
  
  
  if (($dx_addr & 1 | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 25;
  }
  if (__label__ == 1) {
    
    
    
    var $cond = ($dx_addr >> 1 | 0) != 0 ? -3 : -4;
    $dx_addr = $cond;
    
    $j = $blkheight_addr;
    $for_cond$4 : while (1) {
      
      var $cmp = ($j | 0) > 0;
      if (!$cmp) {
        __label__ = 24;
        break $for_cond$4;
      }
      
      
      
      
      $tmp = $p_ref + 4 * $blkwidth_addr;
      while (1) {
        
        
        
        var $cmp17 = $p_ref >>> 0 < $tmp >>> 0;
        if (!$cmp17) {
          __label__ = 22;
          break;
        }
        
        var $arrayidx = $p_ref + -8;
        
        $r0 = HEAP32[$arrayidx >> 2];
        
        var $arrayidx19 = $p_ref + -4;
        
        $r1 = HEAP32[$arrayidx19 >> 2];
        var $21 = $p_ref;
        var $incdec_ptr = $21 + 4;
        $p_ref = $incdec_ptr;
        
        $r2 = HEAP32[$21 >> 2];
        var $23 = $p_ref;
        var $incdec_ptr20 = $23 + 4;
        $p_ref = $incdec_ptr20;
        
        $r3 = HEAP32[$23 >> 2];
        var $25 = $p_ref;
        var $incdec_ptr21 = $25 + 4;
        $p_ref = $incdec_ptr21;
        
        $r4 = HEAP32[$25 >> 2];
        var $27 = $p_ref;
        var $incdec_ptr22 = $27 + 4;
        $p_ref = $incdec_ptr22;
        
        $r5 = HEAP32[$27 >> 2];
        
        
        
        $result = $r0 + $r5;
        
        
        
        $r0 = $r1 + $r4;
        
        
        
        var $sub24 = $result - $r0 * 5;
        $result = $sub24;
        
        
        
        $r0 = $r2 + $r3;
        
        
        
        var $add27 = $result + $r0 * 20;
        $result = $add27;
        
        
        var $shr29 = $result + 512 >> 10;
        $result = $shr29;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 6;
        } else {
          __label__ = 7;
        }
        if (__label__ == 6) {
          
          
          var $neg = $result >> 31 ^ -1;
          var $and33 = 255 & $neg;
          $result = $and33;
        }
        
        
        
        
        
        
        $result2 = HEAP32[$p_ref + 4 * $dx_addr >> 2] + 16 >> 5;
        
        
        if ($result2 >>> 0 > 255) {
          __label__ = 8;
        } else {
          __label__ = 9;
        }
        if (__label__ == 8) {
          
          
          var $neg40 = $result2 >> 31 ^ -1;
          var $and41 = 255 & $neg40;
          $result2 = $and41;
        }
        
        
        
        var $add44 = $result + $result2 + 1;
        $result = $add44;
        
        
        $pkres = $result >> 1;
        var $50 = $p_ref;
        var $incdec_ptr46 = $50 + 4;
        $p_ref = $incdec_ptr46;
        
        $r0 = HEAP32[$50 >> 2];
        
        
        
        $result = $r1 + $r0;
        
        
        
        $r1 = $r2 + $r5;
        
        
        
        var $sub50 = $result - $r1 * 5;
        $result = $sub50;
        
        
        
        $r1 = $r3 + $r4;
        
        
        
        var $add53 = $result + $r1 * 20;
        $result = $add53;
        
        
        var $shr55 = $result + 512 >> 10;
        $result = $shr55;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 10;
        } else {
          __label__ = 11;
        }
        if (__label__ == 10) {
          
          
          var $neg59 = $result >> 31 ^ -1;
          var $and60 = 255 & $neg59;
          $result = $and60;
        }
        
        
        
        
        
        
        $result2 = HEAP32[$p_ref + 4 * $dx_addr >> 2] + 16 >> 5;
        
        
        if ($result2 >>> 0 > 255) {
          __label__ = 12;
        } else {
          __label__ = 13;
        }
        if (__label__ == 12) {
          
          
          var $neg68 = $result2 >> 31 ^ -1;
          var $and69 = 255 & $neg68;
          $result2 = $and69;
        }
        
        
        
        var $add72 = $result + $result2 + 1;
        $result = $add72;
        
        var $shr73 = $result >> 1;
        $result = $shr73;
        
        
        
        var $or = $pkres | $result << 8;
        $pkres = $or;
        var $75 = $p_ref;
        var $incdec_ptr74 = $75 + 4;
        $p_ref = $incdec_ptr74;
        
        $r1 = HEAP32[$75 >> 2];
        
        
        
        $result = $r2 + $r1;
        
        
        
        $r2 = $r3 + $r0;
        
        
        
        var $sub78 = $result - $r2 * 5;
        $result = $sub78;
        
        
        
        $r2 = $r4 + $r5;
        
        
        
        var $add81 = $result + $r2 * 20;
        $result = $add81;
        
        
        var $shr83 = $result + 512 >> 10;
        $result = $shr83;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 14;
        } else {
          __label__ = 15;
        }
        if (__label__ == 14) {
          
          
          var $neg87 = $result >> 31 ^ -1;
          var $and88 = 255 & $neg87;
          $result = $and88;
        }
        
        
        
        
        
        
        $result2 = HEAP32[$p_ref + 4 * $dx_addr >> 2] + 16 >> 5;
        
        
        if ($result2 >>> 0 > 255) {
          __label__ = 16;
        } else {
          __label__ = 17;
        }
        if (__label__ == 16) {
          
          
          var $neg96 = $result2 >> 31 ^ -1;
          var $and97 = 255 & $neg96;
          $result2 = $and97;
        }
        
        
        
        var $add100 = $result + $result2 + 1;
        $result = $add100;
        
        var $shr101 = $result >> 1;
        $result = $shr101;
        
        
        
        var $or103 = $pkres | $result << 16;
        $pkres = $or103;
        var $100 = $p_ref;
        var $incdec_ptr104 = $100 + 4;
        $p_ref = $incdec_ptr104;
        
        $r2 = HEAP32[$100 >> 2];
        
        
        
        $result = $r3 + $r2;
        
        
        
        $r3 = $r4 + $r1;
        
        
        
        var $sub108 = $result - $r3 * 5;
        $result = $sub108;
        
        
        
        $r3 = $r5 + $r0;
        
        
        
        var $add111 = $result + $r3 * 20;
        $result = $add111;
        
        
        var $shr113 = $result + 512 >> 10;
        $result = $shr113;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 18;
        } else {
          __label__ = 19;
        }
        if (__label__ == 18) {
          
          
          var $neg117 = $result >> 31 ^ -1;
          var $and118 = 255 & $neg117;
          $result = $and118;
        }
        
        
        
        
        
        
        $result2 = HEAP32[$p_ref + 4 * $dx_addr >> 2] + 16 >> 5;
        
        
        if ($result2 >>> 0 > 255) {
          __label__ = 20;
        } else {
          __label__ = 21;
        }
        if (__label__ == 20) {
          
          
          var $neg126 = $result2 >> 31 ^ -1;
          var $and127 = 255 & $neg126;
          $result2 = $and127;
        }
        
        
        
        var $add130 = $result + $result2 + 1;
        $result = $add130;
        
        var $shr131 = $result >> 1;
        $result = $shr131;
        
        
        
        var $or133 = $pkres | $result << 24;
        $pkres = $or133;
        
        var $126 = $p_cur;
        var $incdec_ptr134 = $126 + 4;
        $p_cur = $incdec_ptr134;
        HEAP32[$126 >> 2] = $pkres;
        
        var $add_ptr135 = $p_ref + -12;
        $p_ref = $add_ptr135;
        __label__ = 4;
        continue;
      }
      
      
      var $add_ptr136 = $p_cur + 4 * $curr_offset;
      $p_cur = $add_ptr136;
      
      
      var $add_ptr137 = $p_ref + 4 * $ref_offset;
      $p_ref = $add_ptr137;
      
      var $dec = $j + -1;
      $j = $dec;
      __label__ = 2;
      continue $for_cond$4;
    }
  } else if (__label__ == 25) {
    
    $j = $blkheight_addr;
    $for_cond139$38 : while (1) {
      
      var $cmp140 = ($j | 0) > 0;
      if (!$cmp140) {
        __label__ = 40;
        break $for_cond139$38;
      }
      
      
      
      
      $tmp = $p_ref + 4 * $blkwidth_addr;
      while (1) {
        
        
        
        var $cmp144 = $p_ref >>> 0 < $tmp >>> 0;
        if (!$cmp144) {
          __label__ = 38;
          break;
        }
        
        var $arrayidx146 = $p_ref + -8;
        
        $r0 = HEAP32[$arrayidx146 >> 2];
        
        var $arrayidx147 = $p_ref + -4;
        
        $r1 = HEAP32[$arrayidx147 >> 2];
        var $145 = $p_ref;
        var $incdec_ptr148 = $145 + 4;
        $p_ref = $incdec_ptr148;
        
        $r2 = HEAP32[$145 >> 2];
        var $147 = $p_ref;
        var $incdec_ptr149 = $147 + 4;
        $p_ref = $incdec_ptr149;
        
        $r3 = HEAP32[$147 >> 2];
        var $149 = $p_ref;
        var $incdec_ptr150 = $149 + 4;
        $p_ref = $incdec_ptr150;
        
        $r4 = HEAP32[$149 >> 2];
        var $151 = $p_ref;
        var $incdec_ptr151 = $151 + 4;
        $p_ref = $incdec_ptr151;
        
        $r5 = HEAP32[$151 >> 2];
        
        
        
        $result = $r0 + $r5;
        
        
        
        $r0 = $r1 + $r4;
        
        
        
        var $sub155 = $result - $r0 * 5;
        $result = $sub155;
        
        
        
        $r0 = $r2 + $r3;
        
        
        
        var $add158 = $result + $r0 * 20;
        $result = $add158;
        
        
        var $shr160 = $result + 512 >> 10;
        $result = $shr160;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 30;
        } else {
          __label__ = 31;
        }
        if (__label__ == 30) {
          
          
          var $neg164 = $result >> 31 ^ -1;
          var $and165 = 255 & $neg164;
          $result = $and165;
        }
        
        $pkres = $result;
        var $167 = $p_ref;
        var $incdec_ptr167 = $167 + 4;
        $p_ref = $incdec_ptr167;
        
        $r0 = HEAP32[$167 >> 2];
        
        
        
        $result = $r1 + $r0;
        
        
        
        $r1 = $r2 + $r5;
        
        
        
        var $sub171 = $result - $r1 * 5;
        $result = $sub171;
        
        
        
        $r1 = $r3 + $r4;
        
        
        
        var $add174 = $result + $r1 * 20;
        $result = $add174;
        
        
        var $shr176 = $result + 512 >> 10;
        $result = $shr176;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 32;
        } else {
          __label__ = 33;
        }
        if (__label__ == 32) {
          
          
          var $neg180 = $result >> 31 ^ -1;
          var $and181 = 255 & $neg180;
          $result = $and181;
        }
        
        
        
        var $or184 = $pkres | $result << 8;
        $pkres = $or184;
        var $184 = $p_ref;
        var $incdec_ptr185 = $184 + 4;
        $p_ref = $incdec_ptr185;
        
        $r1 = HEAP32[$184 >> 2];
        
        
        
        $result = $r2 + $r1;
        
        
        
        $r2 = $r3 + $r0;
        
        
        
        var $sub189 = $result - $r2 * 5;
        $result = $sub189;
        
        
        
        $r2 = $r4 + $r5;
        
        
        
        var $add192 = $result + $r2 * 20;
        $result = $add192;
        
        
        var $shr194 = $result + 512 >> 10;
        $result = $shr194;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 34;
        } else {
          __label__ = 35;
        }
        if (__label__ == 34) {
          
          
          var $neg198 = $result >> 31 ^ -1;
          var $and199 = 255 & $neg198;
          $result = $and199;
        }
        
        
        
        var $or202 = $pkres | $result << 16;
        $pkres = $or202;
        var $201 = $p_ref;
        var $incdec_ptr203 = $201 + 4;
        $p_ref = $incdec_ptr203;
        
        $r2 = HEAP32[$201 >> 2];
        
        
        
        $result = $r3 + $r2;
        
        
        
        $r3 = $r4 + $r1;
        
        
        
        var $sub207 = $result - $r3 * 5;
        $result = $sub207;
        
        
        
        $r3 = $r5 + $r0;
        
        
        
        var $add210 = $result + $r3 * 20;
        $result = $add210;
        
        
        var $shr212 = $result + 512 >> 10;
        $result = $shr212;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 36;
        } else {
          __label__ = 37;
        }
        if (__label__ == 36) {
          
          
          var $neg216 = $result >> 31 ^ -1;
          var $and217 = 255 & $neg216;
          $result = $and217;
        }
        
        
        
        var $or220 = $pkres | $result << 24;
        $pkres = $or220;
        
        var $219 = $p_cur;
        var $incdec_ptr221 = $219 + 4;
        $p_cur = $incdec_ptr221;
        HEAP32[$219 >> 2] = $pkres;
        
        var $add_ptr222 = $p_ref + -12;
        $p_ref = $add_ptr222;
        __label__ = 28;
        continue;
      }
      
      
      var $add_ptr224 = $p_cur + 4 * $curr_offset;
      $p_cur = $add_ptr224;
      
      
      var $add_ptr225 = $p_ref + 4 * $ref_offset;
      $p_ref = $add_ptr225;
      
      var $dec227 = $j + -1;
      $j = $dec227;
      __label__ = 26;
      continue $for_cond139$38;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z13HorzInterp3MCPhiPiiii($in, $inpitch, $out, $outpitch, $blkwidth, $blkheight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $in_addr;
  var $inpitch_addr;
  var $out_addr;
  var $outpitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $p_ref;
  var $p_cur;
  var $tmp;
  var $result;
  var $curr_offset;
  var $ref_offset;
  var $j;
  var $r0;
  var $r1;
  var $r2;
  var $r3;
  var $r4;
  var $r5;
  $in_addr = $in;
  $inpitch_addr = $inpitch;
  $out_addr = $out;
  $outpitch_addr = $outpitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  
  $p_cur = $out_addr;
  
  
  
  $curr_offset = $outpitch_addr - $blkwidth_addr;
  
  $p_ref = $in_addr;
  
  
  
  $ref_offset = $inpitch_addr - $blkwidth_addr;
  
  $j = $blkheight_addr;
  $for_cond$2 : while (1) {
    
    var $cmp = ($j | 0) > 0;
    if (!$cmp) {
      __label__ = 7;
      break $for_cond$2;
    }
    
    
    
    
    $tmp = $p_ref + $blkwidth_addr;
    while (1) {
      
      
      
      var $cmp13 = $p_ref >>> 0 < $tmp >>> 0;
      if (!$cmp13) {
        __label__ = 5;
        break;
      }
      
      var $arrayidx = $p_ref + -2;
      
      
      $r0 = HEAPU8[$arrayidx >> 0] & 255;
      
      var $arrayidx15 = $p_ref + -1;
      
      
      $r1 = HEAPU8[$arrayidx15 >> 0] & 255;
      var $18 = $p_ref;
      var $incdec_ptr = $18 + 1;
      $p_ref = $incdec_ptr;
      
      
      $r2 = HEAPU8[$18 >> 0] & 255;
      var $20 = $p_ref;
      var $incdec_ptr18 = $20 + 1;
      $p_ref = $incdec_ptr18;
      
      
      $r3 = HEAPU8[$20 >> 0] & 255;
      var $22 = $p_ref;
      var $incdec_ptr20 = $22 + 1;
      $p_ref = $incdec_ptr20;
      
      
      $r4 = HEAPU8[$22 >> 0] & 255;
      var $24 = $p_ref;
      var $incdec_ptr22 = $24 + 1;
      $p_ref = $incdec_ptr22;
      
      
      $r5 = HEAPU8[$24 >> 0] & 255;
      
      
      
      $result = $r0 + $r5;
      
      
      
      $r0 = $r1 + $r4;
      
      
      
      var $sub25 = $result - $r0 * 5;
      $result = $sub25;
      
      
      
      $r0 = $r2 + $r3;
      
      
      
      var $add28 = $result + $r0 * 20;
      $result = $add28;
      
      var $37 = $p_cur;
      var $incdec_ptr29 = $37 + 4;
      $p_cur = $incdec_ptr29;
      HEAP32[$37 >> 2] = $result;
      var $38 = $p_ref;
      var $incdec_ptr30 = $38 + 1;
      $p_ref = $incdec_ptr30;
      
      
      $r0 = HEAPU8[$38 >> 0] & 255;
      
      
      
      $result = $r1 + $r0;
      
      
      
      $r1 = $r2 + $r5;
      
      
      
      var $sub35 = $result - $r1 * 5;
      $result = $sub35;
      
      
      
      $r1 = $r3 + $r4;
      
      
      
      var $add38 = $result + $r1 * 20;
      $result = $add38;
      
      var $51 = $p_cur;
      var $incdec_ptr39 = $51 + 4;
      $p_cur = $incdec_ptr39;
      HEAP32[$51 >> 2] = $result;
      var $52 = $p_ref;
      var $incdec_ptr40 = $52 + 1;
      $p_ref = $incdec_ptr40;
      
      
      $r1 = HEAPU8[$52 >> 0] & 255;
      
      
      
      $result = $r2 + $r1;
      
      
      
      $r2 = $r3 + $r0;
      
      
      
      var $sub45 = $result - $r2 * 5;
      $result = $sub45;
      
      
      
      $r2 = $r4 + $r5;
      
      
      
      var $add48 = $result + $r2 * 20;
      $result = $add48;
      
      var $65 = $p_cur;
      var $incdec_ptr49 = $65 + 4;
      $p_cur = $incdec_ptr49;
      HEAP32[$65 >> 2] = $result;
      var $66 = $p_ref;
      var $incdec_ptr50 = $66 + 1;
      $p_ref = $incdec_ptr50;
      
      
      $r2 = HEAPU8[$66 >> 0] & 255;
      
      
      
      $result = $r3 + $r2;
      
      
      
      $r3 = $r4 + $r1;
      
      
      
      var $sub55 = $result - $r3 * 5;
      $result = $sub55;
      
      
      
      $r3 = $r5 + $r0;
      
      
      
      var $add58 = $result + $r3 * 20;
      $result = $add58;
      
      var $79 = $p_cur;
      var $incdec_ptr59 = $79 + 4;
      $p_cur = $incdec_ptr59;
      HEAP32[$79 >> 2] = $result;
      
      var $add_ptr60 = $p_ref + -3;
      $p_ref = $add_ptr60;
      __label__ = 3;
      continue;
    }
    
    
    var $add_ptr61 = $p_cur + 4 * $curr_offset;
    $p_cur = $add_ptr61;
    
    
    var $add_ptr62 = $p_ref + $ref_offset;
    $p_ref = $add_ptr62;
    
    var $dec = $j + -1;
    $j = $dec;
    __label__ = 1;
    continue $for_cond$2;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z13VertInterp3MCPiiPhiiii($in, $inpitch, $out, $outpitch, $blkwidth, $blkheight, $dy) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $in_addr;
  var $inpitch_addr;
  var $out_addr;
  var $outpitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $dy_addr;
  var $p_cur;
  var $p_ref;
  var $tmp;
  var $result;
  var $result2;
  var $curr_offset;
  var $ref_offset;
  var $j;
  var $r0;
  var $r1;
  var $r2;
  var $r3;
  var $r4;
  var $r5;
  $in_addr = $in;
  $inpitch_addr = $inpitch;
  $out_addr = $out;
  $outpitch_addr = $outpitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  $dy_addr = $dy;
  
  $p_cur = $out_addr;
  
  
  
  
  
  $curr_offset = 1 - $outpitch_addr * ($blkheight_addr - 1);
  
  
  
  $ref_offset = $blkheight_addr * $inpitch_addr;
  
  
  
  if (($dy_addr & 1 | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 28;
  }
  if (__label__ == 1) {
    
    
    
    if (($dy_addr >> 1 | 0) != 0) {
      __label__ = 2;
    } else {
      __label__ = 3;
    }
    if (__label__ == 2) {
      
      
      var $sub15 = 0 - ($inpitch_addr << 1);
      __lastLabel__ = 2;
    } else if (__label__ == 3) {
      
      
      
      
      var $sub18 = 0 - ($inpitch_addr << 1) - $inpitch_addr;
      __lastLabel__ = 3;
    }
    var $cond = __lastLabel__ == 2 ? $sub15 : $sub18;
    $dy_addr = $cond;
    $j = 0;
    $for_cond$8 : while (1) {
      
      
      var $cmp = ($j | 0) < ($blkwidth_addr | 0);
      if (!$cmp) {
        __label__ = 27;
        break $for_cond$8;
      }
      
      
      
      var $add_ptr = $p_cur + (0 - $outpitch_addr);
      $p_cur = $add_ptr;
      var $14 = $in_addr;
      var $incdec_ptr = $14 + 4;
      $in_addr = $incdec_ptr;
      $p_ref = $14;
      
      
      
      
      $tmp = $p_ref + 4 * $ref_offset;
      while (1) {
        
        
        
        var $cmp20 = $p_ref >>> 0 < $tmp >>> 0;
        if (!$cmp20) {
          __label__ = 25;
          break;
        }
        
        
        
        
        
        
        $r0 = HEAP32[$p_ref + 4 * (0 - ($inpitch_addr << 1)) >> 2];
        
        
        
        
        
        $r1 = HEAP32[$p_ref + 4 * (0 - $inpitch_addr) >> 2];
        
        
        $r2 = HEAP32[$p_ref >> 2];
        
        
        var $add_ptr26 = $p_ref + 4 * $inpitch_addr;
        $p_ref = $add_ptr26;
        
        $r3 = HEAP32[$add_ptr26 >> 2];
        
        
        var $add_ptr27 = $p_ref + 4 * $inpitch_addr;
        $p_ref = $add_ptr27;
        
        $r4 = HEAP32[$add_ptr27 >> 2];
        
        
        var $add_ptr28 = $p_ref + 4 * $inpitch_addr;
        $p_ref = $add_ptr28;
        
        $r5 = HEAP32[$add_ptr28 >> 2];
        
        
        
        $result = $r0 + $r5;
        
        
        
        $r0 = $r1 + $r4;
        
        
        
        var $sub31 = $result - $r0 * 5;
        $result = $sub31;
        
        
        
        $r0 = $r2 + $r3;
        
        
        
        var $add34 = $result + $r0 * 20;
        $result = $add34;
        
        
        var $shr36 = $result + 512 >> 10;
        $result = $shr36;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 9;
        } else {
          __label__ = 10;
        }
        if (__label__ == 9) {
          
          
          var $neg = $result >> 31 ^ -1;
          var $and40 = 255 & $neg;
          $result = $and40;
        }
        
        
        
        
        
        
        $result2 = HEAP32[$p_ref + 4 * $dy_addr >> 2] + 16 >> 5;
        
        
        if ($result2 >>> 0 > 255) {
          __label__ = 11;
        } else {
          __label__ = 12;
        }
        if (__label__ == 11) {
          
          
          var $neg46 = $result2 >> 31 ^ -1;
          var $and47 = 255 & $neg46;
          $result2 = $and47;
        }
        
        
        
        var $add50 = $result + $result2 + 1;
        $result = $add50;
        
        var $shr51 = $result >> 1;
        $result = $shr51;
        
        
        
        
        var $add_ptr52 = $p_cur + $outpitch_addr;
        $p_cur = $add_ptr52;
        HEAP8[$add_ptr52 >> 0] = $result & 255;
        
        
        var $add_ptr53 = $p_ref + 4 * $inpitch_addr;
        $p_ref = $add_ptr53;
        
        $r0 = HEAP32[$add_ptr53 >> 2];
        
        
        
        $result = $r1 + $r0;
        
        
        
        $r1 = $r2 + $r5;
        
        
        
        var $sub57 = $result - $r1 * 5;
        $result = $sub57;
        
        
        
        $r1 = $r3 + $r4;
        
        
        
        var $add60 = $result + $r1 * 20;
        $result = $add60;
        
        
        var $shr62 = $result + 512 >> 10;
        $result = $shr62;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 13;
        } else {
          __label__ = 14;
        }
        if (__label__ == 13) {
          
          
          var $neg66 = $result >> 31 ^ -1;
          var $and67 = 255 & $neg66;
          $result = $and67;
        }
        
        
        
        
        
        
        $result2 = HEAP32[$p_ref + 4 * $dy_addr >> 2] + 16 >> 5;
        
        
        if ($result2 >>> 0 > 255) {
          __label__ = 15;
        } else {
          __label__ = 16;
        }
        if (__label__ == 15) {
          
          
          var $neg75 = $result2 >> 31 ^ -1;
          var $and76 = 255 & $neg75;
          $result2 = $and76;
        }
        
        
        
        var $add79 = $result + $result2 + 1;
        $result = $add79;
        
        var $shr80 = $result >> 1;
        $result = $shr80;
        
        
        
        
        var $add_ptr82 = $p_cur + $outpitch_addr;
        $p_cur = $add_ptr82;
        HEAP8[$add_ptr82 >> 0] = $result & 255;
        
        
        var $add_ptr83 = $p_ref + 4 * $inpitch_addr;
        $p_ref = $add_ptr83;
        
        $r1 = HEAP32[$add_ptr83 >> 2];
        
        
        
        $result = $r2 + $r1;
        
        
        
        $r2 = $r3 + $r0;
        
        
        
        var $sub87 = $result - $r2 * 5;
        $result = $sub87;
        
        
        
        $r2 = $r4 + $r5;
        
        
        
        var $add90 = $result + $r2 * 20;
        $result = $add90;
        
        
        var $shr92 = $result + 512 >> 10;
        $result = $shr92;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 17;
        } else {
          __label__ = 18;
        }
        if (__label__ == 17) {
          
          
          var $neg96 = $result >> 31 ^ -1;
          var $and97 = 255 & $neg96;
          $result = $and97;
        }
        
        
        
        
        
        
        $result2 = HEAP32[$p_ref + 4 * $dy_addr >> 2] + 16 >> 5;
        
        
        if ($result2 >>> 0 > 255) {
          __label__ = 19;
        } else {
          __label__ = 20;
        }
        if (__label__ == 19) {
          
          
          var $neg105 = $result2 >> 31 ^ -1;
          var $and106 = 255 & $neg105;
          $result2 = $and106;
        }
        
        
        
        var $add109 = $result + $result2 + 1;
        $result = $add109;
        
        var $shr110 = $result >> 1;
        $result = $shr110;
        
        
        
        
        var $add_ptr112 = $p_cur + $outpitch_addr;
        $p_cur = $add_ptr112;
        HEAP8[$add_ptr112 >> 0] = $result & 255;
        
        
        var $add_ptr113 = $p_ref + 4 * $inpitch_addr;
        $p_ref = $add_ptr113;
        
        $r2 = HEAP32[$add_ptr113 >> 2];
        
        
        
        $result = $r3 + $r2;
        
        
        
        $r3 = $r4 + $r1;
        
        
        
        var $sub117 = $result - $r3 * 5;
        $result = $sub117;
        
        
        
        $r3 = $r5 + $r0;
        
        
        
        var $add120 = $result + $r3 * 20;
        $result = $add120;
        
        
        var $shr122 = $result + 512 >> 10;
        $result = $shr122;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 21;
        } else {
          __label__ = 22;
        }
        if (__label__ == 21) {
          
          
          var $neg126 = $result >> 31 ^ -1;
          var $and127 = 255 & $neg126;
          $result = $and127;
        }
        
        
        
        
        
        
        $result2 = HEAP32[$p_ref + 4 * $dy_addr >> 2] + 16 >> 5;
        
        
        if ($result2 >>> 0 > 255) {
          __label__ = 23;
        } else {
          __label__ = 24;
        }
        if (__label__ == 23) {
          
          
          var $neg135 = $result2 >> 31 ^ -1;
          var $and136 = 255 & $neg135;
          $result2 = $and136;
        }
        
        
        
        var $add139 = $result + $result2 + 1;
        $result = $add139;
        
        var $shr140 = $result >> 1;
        $result = $shr140;
        
        
        
        
        var $add_ptr142 = $p_cur + $outpitch_addr;
        $p_cur = $add_ptr142;
        HEAP8[$add_ptr142 >> 0] = $result & 255;
        
        
        
        
        var $add_ptr145 = $p_ref + 4 * (0 - ($inpitch_addr << 1));
        $p_ref = $add_ptr145;
        __label__ = 7;
        continue;
      }
      
      
      var $add_ptr146 = $p_cur + $curr_offset;
      $p_cur = $add_ptr146;
      
      var $inc = $j + 1;
      $j = $inc;
      __label__ = 5;
      continue $for_cond$8;
    }
  } else if (__label__ == 28) {
    $j = 0;
    $for_cond147$42 : while (1) {
      
      
      var $cmp148 = ($j | 0) < ($blkwidth_addr | 0);
      if (!$cmp148) {
        __label__ = 43;
        break $for_cond147$42;
      }
      
      
      
      var $add_ptr151 = $p_cur + (0 - $outpitch_addr);
      $p_cur = $add_ptr151;
      var $152 = $in_addr;
      var $incdec_ptr152 = $152 + 4;
      $in_addr = $incdec_ptr152;
      $p_ref = $152;
      
      
      
      
      $tmp = $p_ref + 4 * $ref_offset;
      while (1) {
        
        
        
        var $cmp155 = $p_ref >>> 0 < $tmp >>> 0;
        if (!$cmp155) {
          __label__ = 41;
          break;
        }
        
        
        
        
        
        
        $r0 = HEAP32[$p_ref + 4 * (0 - ($inpitch_addr << 1)) >> 2];
        
        
        
        
        
        $r1 = HEAP32[$p_ref + 4 * (0 - $inpitch_addr) >> 2];
        
        
        $r2 = HEAP32[$p_ref >> 2];
        
        
        var $add_ptr162 = $p_ref + 4 * $inpitch_addr;
        $p_ref = $add_ptr162;
        
        $r3 = HEAP32[$add_ptr162 >> 2];
        
        
        var $add_ptr163 = $p_ref + 4 * $inpitch_addr;
        $p_ref = $add_ptr163;
        
        $r4 = HEAP32[$add_ptr163 >> 2];
        
        
        var $add_ptr164 = $p_ref + 4 * $inpitch_addr;
        $p_ref = $add_ptr164;
        
        $r5 = HEAP32[$add_ptr164 >> 2];
        
        
        
        $result = $r0 + $r5;
        
        
        
        $r0 = $r1 + $r4;
        
        
        
        var $sub168 = $result - $r0 * 5;
        $result = $sub168;
        
        
        
        $r0 = $r2 + $r3;
        
        
        
        var $add171 = $result + $r0 * 20;
        $result = $add171;
        
        
        var $shr173 = $result + 512 >> 10;
        $result = $shr173;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 33;
        } else {
          __label__ = 34;
        }
        if (__label__ == 33) {
          
          
          var $neg177 = $result >> 31 ^ -1;
          var $and178 = 255 & $neg177;
          $result = $and178;
        }
        
        
        
        
        var $add_ptr181 = $p_cur + $outpitch_addr;
        $p_cur = $add_ptr181;
        HEAP8[$add_ptr181 >> 0] = $result & 255;
        
        
        var $add_ptr182 = $p_ref + 4 * $inpitch_addr;
        $p_ref = $add_ptr182;
        
        $r0 = HEAP32[$add_ptr182 >> 2];
        
        
        
        $result = $r1 + $r0;
        
        
        
        $r1 = $r2 + $r5;
        
        
        
        var $sub186 = $result - $r1 * 5;
        $result = $sub186;
        
        
        
        $r1 = $r3 + $r4;
        
        
        
        var $add189 = $result + $r1 * 20;
        $result = $add189;
        
        
        var $shr191 = $result + 512 >> 10;
        $result = $shr191;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 35;
        } else {
          __label__ = 36;
        }
        if (__label__ == 35) {
          
          
          var $neg195 = $result >> 31 ^ -1;
          var $and196 = 255 & $neg195;
          $result = $and196;
        }
        
        
        
        
        var $add_ptr199 = $p_cur + $outpitch_addr;
        $p_cur = $add_ptr199;
        HEAP8[$add_ptr199 >> 0] = $result & 255;
        
        
        var $add_ptr200 = $p_ref + 4 * $inpitch_addr;
        $p_ref = $add_ptr200;
        
        $r1 = HEAP32[$add_ptr200 >> 2];
        
        
        
        $result = $r2 + $r1;
        
        
        
        $r2 = $r3 + $r0;
        
        
        
        var $sub204 = $result - $r2 * 5;
        $result = $sub204;
        
        
        
        $r2 = $r4 + $r5;
        
        
        
        var $add207 = $result + $r2 * 20;
        $result = $add207;
        
        
        var $shr209 = $result + 512 >> 10;
        $result = $shr209;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 37;
        } else {
          __label__ = 38;
        }
        if (__label__ == 37) {
          
          
          var $neg213 = $result >> 31 ^ -1;
          var $and214 = 255 & $neg213;
          $result = $and214;
        }
        
        
        
        
        var $add_ptr217 = $p_cur + $outpitch_addr;
        $p_cur = $add_ptr217;
        HEAP8[$add_ptr217 >> 0] = $result & 255;
        
        
        var $add_ptr218 = $p_ref + 4 * $inpitch_addr;
        $p_ref = $add_ptr218;
        
        $r2 = HEAP32[$add_ptr218 >> 2];
        
        
        
        $result = $r3 + $r2;
        
        
        
        $r3 = $r4 + $r1;
        
        
        
        var $sub222 = $result - $r3 * 5;
        $result = $sub222;
        
        
        
        $r3 = $r5 + $r0;
        
        
        
        var $add225 = $result + $r3 * 20;
        $result = $add225;
        
        
        var $shr227 = $result + 512 >> 10;
        $result = $shr227;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 39;
        } else {
          __label__ = 40;
        }
        if (__label__ == 39) {
          
          
          var $neg231 = $result >> 31 ^ -1;
          var $and232 = 255 & $neg231;
          $result = $and232;
        }
        
        
        
        
        var $add_ptr235 = $p_cur + $outpitch_addr;
        $p_cur = $add_ptr235;
        HEAP8[$add_ptr235 >> 0] = $result & 255;
        
        
        
        
        var $add_ptr238 = $p_ref + 4 * (0 - ($inpitch_addr << 1));
        $p_ref = $add_ptr238;
        __label__ = 31;
        continue;
      }
      
      
      var $add_ptr240 = $p_cur + $curr_offset;
      $p_cur = $add_ptr240;
      
      var $inc242 = $j + 1;
      $j = $inc242;
      __label__ = 29;
      continue $for_cond147$42;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z16DiagonalInterpMCPhS_iS_iii($in1, $in2, $inpitch, $out, $outpitch, $blkwidth, $blkheight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 1152;
  var __label__;
  var $in1_addr;
  var $in2_addr;
  var $inpitch_addr;
  var $out_addr;
  var $outpitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $j;
  var $i;
  var $result;
  var $p_cur;
  var $p_ref;
  var $p_tmp8;
  var $curr_offset;
  var $ref_offset;
  var $tmp_res = __stackBase__;
  var $tmp_in = __stackBase__ + 576;
  var $p_tmp;
  var $tmp;
  var $pkres;
  var $tmp_result;
  var $r0;
  var $r1;
  var $r2;
  var $r3;
  var $r4;
  var $r5;
  var $r6;
  var $r7;
  var $r8;
  var $r9;
  var $r10;
  var $r13;
  $in1_addr = $in1;
  $in2_addr = $in2;
  $inpitch_addr = $inpitch;
  $out_addr = $out;
  $outpitch_addr = $outpitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  
  
  
  $ref_offset = $inpitch_addr - $blkwidth_addr;
  
  var $add_ptr = $in1_addr + -2;
  $p_ref = $add_ptr;
  
  
  
  $p_tmp = $tmp_res;
  
  $j = $blkheight_addr;
  $for_cond$2 : while (1) {
    
    var $cmp = ($j | 0) > 0;
    if (!$cmp) {
      __label__ = 20;
      break $for_cond$2;
    }
    $r13 = 0;
    
    
    
    
    $tmp = $p_ref + $blkwidth_addr;
    
    
    
    
    $r0 = HEAPU8[$p_ref >> 0] & 255;
    
    
    
    
    $r1 = HEAPU8[$p_ref + 2 >> 0] & 255;
    
    
    
    var $or = $r0 | $r1 << 16;
    $r0 = $or;
    
    
    
    
    $r1 = HEAPU8[$p_ref + 1 >> 0] & 255;
    
    
    
    
    $r2 = HEAPU8[$p_ref + 3 >> 0] & 255;
    
    
    
    var $or25 = $r1 | $r2 << 16;
    $r1 = $or25;
    $while_cond$5 : while (1) {
      
      
      
      var $cmp26 = $p_ref >>> 0 < $tmp >>> 0;
      if (!$cmp26) {
        __label__ = 5;
        break $while_cond$5;
      }
      
      var $add_ptr27 = $p_ref + 4;
      $p_ref = $add_ptr27;
      
      
      $r2 = HEAPU8[$add_ptr27 >> 0] & 255;
      
      
      
      
      $r3 = HEAPU8[$p_ref + 2 >> 0] & 255;
      
      
      
      var $or32 = $r2 | $r3 << 16;
      $r2 = $or32;
      
      
      
      
      $r3 = HEAPU8[$p_ref + 1 >> 0] & 255;
      
      
      
      
      $r4 = HEAPU8[$p_ref + 3 >> 0] & 255;
      
      
      
      var $or38 = $r3 | $r4 << 16;
      $r3 = $or38;
      
      
      
      $r4 = $r0 + $r3;
      
      
      
      $r5 = $r0 + $r1;
      
      
      
      $r6 = $r2 + $r3;
      
      var $shr = $r5 >> 16;
      $r5 = $shr;
      
      
      
      var $or42 = $r5 | $r6 << 16;
      $r5 = $or42;
      
      
      
      var $add43 = $r4 + $r5 * 20;
      $r4 = $add43;
      
      var $add44 = $r4 + 1048592;
      $r4 = $add44;
      
      
      
      $r5 = $r1 + $r2;
      
      
      
      var $sub47 = $r4 - $r5 * 5;
      $r4 = $sub47;
      
      var $shr48 = $r4 >> 5;
      $r4 = $shr48;
      
      
      var $or49 = $r13 | $r4;
      $r13 = $or49;
      
      var $and = $r4 & 16711935;
      $r4 = $and;
      
      
      
      
      $r5 = HEAPU8[$p_ref + 4 >> 0] & 255;
      
      
      $r6 = $r5 << 16;
      
      
      
      
      $r5 = $r6 | $r2 >> 16;
      
      
      var $add55 = $r5 + $r1;
      $r5 = $add55;
      
      var $shr56 = $r1 >> 16;
      $r1 = $shr56;
      
      
      
      var $or58 = $r1 | $r3 << 16;
      $r1 = $or58;
      
      
      var $add59 = $r1 + $r2;
      $r1 = $add59;
      
      
      
      var $add61 = $r5 + 20 * $r1;
      $r5 = $add61;
      
      var $shr62 = $r0 >> 16;
      $r0 = $shr62;
      
      
      
      var $or64 = $r0 | $r2 << 16;
      $r0 = $or64;
      
      
      var $add65 = $r0 + $r3;
      $r0 = $add65;
      
      var $add66 = $r5 + 1048592;
      $r5 = $add66;
      
      
      
      var $sub68 = $r5 - $r0 * 5;
      $r5 = $sub68;
      
      var $shr69 = $r5 >> 5;
      $r5 = $shr69;
      
      
      var $or70 = $r13 | $r5;
      $r13 = $or70;
      
      var $and71 = $r5 & 16711935;
      $r5 = $and71;
      
      
      
      var $or73 = $r4 | $r5 << 8;
      $r4 = $or73;
      
      var $85 = $p_tmp;
      var $incdec_ptr = $85 + 4;
      $p_tmp = $incdec_ptr;
      HEAP32[$85 >> 2] = $r4;
      
      $r1 = $r3;
      
      $r0 = $r2;
      __label__ = 3;
      continue $while_cond$5;
    }
    
    
    
    
    var $add_ptr76 = $p_tmp + 4 * (24 - $blkwidth_addr >> 2);
    $p_tmp = $add_ptr76;
    
    
    var $add_ptr77 = $p_ref + $ref_offset;
    $p_ref = $add_ptr77;
    
    var $and78 = $r13 & -16775424;
    
    if (($and78 | 0) != 0) {
      __label__ = 6;
    } else {
      __label__ = 18;
    }
    if (__label__ == 6) {
      
      
      
      
      
      var $add_ptr80 = $p_ref + (0 - ($ref_offset + $blkwidth_addr));
      $p_ref = $add_ptr80;
      
      var $add_ptr81 = $p_tmp + -24;
      $p_tmp = $add_ptr81;
      
      
      
      
      $tmp = $p_ref + $blkwidth_addr;
      while (1) {
        
        
        
        var $cmp84 = $p_ref >>> 0 < $tmp >>> 0;
        if (!$cmp84) {
          __label__ = 17;
          break;
        }
        var $103 = $p_ref;
        var $incdec_ptr86 = $103 + 1;
        $p_ref = $incdec_ptr86;
        
        
        $r0 = HEAPU8[$103 >> 0] & 255;
        var $105 = $p_ref;
        var $incdec_ptr88 = $105 + 1;
        $p_ref = $incdec_ptr88;
        
        
        $r1 = HEAPU8[$105 >> 0] & 255;
        var $107 = $p_ref;
        var $incdec_ptr90 = $107 + 1;
        $p_ref = $incdec_ptr90;
        
        
        $r2 = HEAPU8[$107 >> 0] & 255;
        var $109 = $p_ref;
        var $incdec_ptr92 = $109 + 1;
        $p_ref = $incdec_ptr92;
        
        
        $r3 = HEAPU8[$109 >> 0] & 255;
        var $111 = $p_ref;
        var $incdec_ptr94 = $111 + 1;
        $p_ref = $incdec_ptr94;
        
        
        $r4 = HEAPU8[$111 >> 0] & 255;
        var $113 = $p_ref;
        var $incdec_ptr96 = $113 + 1;
        $p_ref = $incdec_ptr96;
        
        
        $r5 = HEAPU8[$113 >> 0] & 255;
        
        
        
        $result = $r0 + $r5;
        
        
        
        $r0 = $r1 + $r4;
        
        
        
        var $sub101 = $result - $r0 * 5;
        $result = $sub101;
        
        
        
        $r0 = $r2 + $r3;
        
        
        
        var $add104 = $result + $r0 * 20;
        $result = $add104;
        
        
        var $shr106 = $result + 16 >> 5;
        $result = $shr106;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 9;
        } else {
          __label__ = 10;
        }
        if (__label__ == 9) {
          
          
          var $neg = $result >> 31 ^ -1;
          var $and110 = 255 & $neg;
          $result = $and110;
        }
        
        $pkres = $result;
        var $129 = $p_ref;
        var $incdec_ptr111 = $129 + 1;
        $p_ref = $incdec_ptr111;
        
        
        $r0 = HEAPU8[$129 >> 0] & 255;
        
        
        
        $result = $r1 + $r0;
        
        
        
        $r1 = $r2 + $r5;
        
        
        
        var $sub116 = $result - $r1 * 5;
        $result = $sub116;
        
        
        
        $r1 = $r3 + $r4;
        
        
        
        var $add119 = $result + $r1 * 20;
        $result = $add119;
        
        
        var $shr121 = $result + 16 >> 5;
        $result = $shr121;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 11;
        } else {
          __label__ = 12;
        }
        if (__label__ == 11) {
          
          
          var $neg125 = $result >> 31 ^ -1;
          var $and126 = 255 & $neg125;
          $result = $and126;
        }
        
        
        
        var $or129 = $pkres | $result << 8;
        $pkres = $or129;
        var $146 = $p_ref;
        var $incdec_ptr130 = $146 + 1;
        $p_ref = $incdec_ptr130;
        
        
        $r1 = HEAPU8[$146 >> 0] & 255;
        
        
        
        $result = $r2 + $r1;
        
        
        
        $r2 = $r3 + $r0;
        
        
        
        var $sub135 = $result - $r2 * 5;
        $result = $sub135;
        
        
        
        $r2 = $r4 + $r5;
        
        
        
        var $add138 = $result + $r2 * 20;
        $result = $add138;
        
        
        var $shr140 = $result + 16 >> 5;
        $result = $shr140;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 13;
        } else {
          __label__ = 14;
        }
        if (__label__ == 13) {
          
          
          var $neg144 = $result >> 31 ^ -1;
          var $and145 = 255 & $neg144;
          $result = $and145;
        }
        
        
        
        var $or148 = $pkres | $result << 16;
        $pkres = $or148;
        var $163 = $p_ref;
        var $incdec_ptr149 = $163 + 1;
        $p_ref = $incdec_ptr149;
        
        
        $r2 = HEAPU8[$163 >> 0] & 255;
        
        
        
        $result = $r3 + $r2;
        
        
        
        $r3 = $r4 + $r1;
        
        
        
        var $sub154 = $result - $r3 * 5;
        $result = $sub154;
        
        
        
        $r3 = $r5 + $r0;
        
        
        
        var $add157 = $result + $r3 * 20;
        $result = $add157;
        
        
        var $shr159 = $result + 16 >> 5;
        $result = $shr159;
        
        
        if ($result >>> 0 > 255) {
          __label__ = 15;
        } else {
          __label__ = 16;
        }
        if (__label__ == 15) {
          
          
          var $neg163 = $result >> 31 ^ -1;
          var $and164 = 255 & $neg163;
          $result = $and164;
        }
        
        
        
        var $or167 = $pkres | $result << 24;
        $pkres = $or167;
        
        var $181 = $p_tmp;
        var $incdec_ptr168 = $181 + 4;
        $p_tmp = $incdec_ptr168;
        HEAP32[$181 >> 2] = $pkres;
        
        var $add_ptr169 = $p_ref + -5;
        $p_ref = $add_ptr169;
        __label__ = 7;
        continue;
      }
      
      
      
      
      var $add_ptr173 = $p_tmp + 4 * (24 - $blkwidth_addr >> 2);
      $p_tmp = $add_ptr173;
      
      
      var $add_ptr174 = $p_ref + $ref_offset;
      $p_ref = $add_ptr174;
    }
    
    var $dec = $j + -1;
    $j = $dec;
    __label__ = 1;
    continue $for_cond$2;
  }
  
  
  
  
  if (($in2_addr & 3 | 0) != 0) {
    __label__ = 21;
  } else {
    __label__ = 22;
  }
  if (__label__ == 21) {
    
    
    
    var $arrayidx180 = $tmp_in;
    
    
    
    __Z11CreateAlignPhiiS_ii($in2_addr, $inpitch_addr, -2, $arrayidx180, $blkwidth_addr, $blkheight_addr + 5);
    
    
    $in2_addr = $tmp_in + 48;
    $inpitch_addr = 24;
  }
  
  $p_cur = $out_addr;
  
  
  
  
  
  $curr_offset = 1 - $outpitch_addr * ($blkheight_addr - 1);
  
  
  
  $pkres = $blkheight_addr * $inpitch_addr;
  
  var $add189 = $curr_offset + 3;
  $curr_offset = $add189;
  $j = 0;
  $for_cond190$33 : while (1) {
    
    
    var $cmp191 = ($j | 0) < ($blkwidth_addr | 0);
    if (!$cmp191) {
      __label__ = 46;
      break $for_cond190$33;
    }
    $r13 = 0;
    
    $p_ref = $in2_addr;
    
    
    
    $p_tmp8 = $tmp_res + $j;
    
    var $add_ptr195 = $p_tmp8 + -24;
    $p_tmp8 = $add_ptr195;
    
    
    
    var $add_ptr197 = $p_cur + (0 - $outpitch_addr);
    $p_cur = $add_ptr197;
    
    
    
    
    $tmp = $p_ref + $pkres;
    $while_cond199$36 : while (1) {
      
      
      
      var $cmp200 = $p_ref >>> 0 < $tmp >>> 0;
      if (!$cmp200) {
        __label__ = 27;
        break $while_cond199$36;
      }
      
      
      
      
      
      
      
      $r0 = HEAP32[$p_ref + (0 - ($inpitch_addr << 1)) >> 2];
      
      
      var $add_ptr205 = $p_ref + $inpitch_addr;
      $p_ref = $add_ptr205;
      
      
      
      $r6 = $r0 >> 8 & 16711935;
      
      var $and208 = $r0 & 16711935;
      $r0 = $and208;
      
      
      
      
      
      
      $r1 = HEAP32[$p_ref + ($inpitch_addr << 1) >> 2];
      
      
      
      $r7 = $r1 >> 8 & 16711935;
      
      var $and213 = $r1 & 16711935;
      $r1 = $and213;
      
      
      var $add214 = $r0 + $r1;
      $r0 = $add214;
      
      
      var $add215 = $r6 + $r7;
      $r6 = $add215;
      
      
      
      $r2 = HEAP32[$p_ref >> 2];
      
      
      
      $r8 = $r2 >> 8 & 16711935;
      
      var $and218 = $r2 & 16711935;
      $r2 = $and218;
      
      
      
      
      
      
      $r1 = HEAP32[$p_ref + (0 - $inpitch_addr) >> 2];
      
      
      
      $r7 = $r1 >> 8 & 16711935;
      
      var $and223 = $r1 & 16711935;
      $r1 = $and223;
      
      
      var $add224 = $r1 + $r2;
      $r1 = $add224;
      
      
      var $add225 = $r7 + $r8;
      $r7 = $add225;
      
      
      
      var $add227 = $r0 + 20 * $r1;
      $r0 = $add227;
      
      
      
      var $add229 = $r6 + 20 * $r7;
      $r6 = $add229;
      
      var $add230 = $r0 + 1048592;
      $r0 = $add230;
      
      var $add231 = $r6 + 1048592;
      $r6 = $add231;
      
      
      
      
      
      
      
      $r2 = HEAP32[$p_ref + (0 - ($inpitch_addr << 1)) >> 2];
      
      
      
      $r8 = $r2 >> 8 & 16711935;
      
      var $and237 = $r2 & 16711935;
      $r2 = $and237;
      
      
      
      
      
      $r1 = HEAP32[$p_ref + $inpitch_addr >> 2];
      
      
      
      $r7 = $r1 >> 8 & 16711935;
      
      var $and241 = $r1 & 16711935;
      $r1 = $and241;
      
      
      var $add242 = $r1 + $r2;
      $r1 = $add242;
      
      
      var $add243 = $r7 + $r8;
      $r7 = $add243;
      
      
      
      var $sub245 = $r0 - 5 * $r1;
      $r0 = $sub245;
      
      
      
      var $sub247 = $r6 - 5 * $r7;
      $r6 = $sub247;
      
      var $shr248 = $r0 >> 5;
      $r0 = $shr248;
      
      var $shr249 = $r6 >> 5;
      $r6 = $shr249;
      
      
      var $or250 = $r13 | $r6;
      $r13 = $or250;
      
      
      var $or251 = $r13 | $r0;
      $r13 = $or251;
      
      var $add_ptr252 = $p_tmp8 + 24;
      $p_tmp8 = $add_ptr252;
      
      
      $r10 = HEAP32[$add_ptr252 >> 2];
      
      
      
      $r9 = $r10 >> 8 & 16711935;
      
      var $and255 = $r10 & 16711935;
      $r10 = $and255;
      
      
      var $add256 = $r0 + $r10;
      $r0 = $add256;
      
      var $add257 = $r0 + 65537;
      $r0 = $add257;
      
      
      var $and259 = $r0 >> 1 & 16711935;
      $r0 = $and259;
      
      
      var $add260 = $r6 + $r9;
      $r6 = $add260;
      
      var $add261 = $r6 + 65537;
      $r6 = $add261;
      
      
      var $and263 = $r6 >> 1 & 16711935;
      $r6 = $and263;
      
      
      
      var $or265 = $r0 | $r6 << 8;
      $r0 = $or265;
      
      
      
      var $add_ptr266 = $p_cur + $outpitch_addr;
      $p_cur = $add_ptr266;
      
      HEAP32[$add_ptr266 >> 2] = $r0;
      __label__ = 25;
      continue $while_cond199$36;
    }
    
    
    var $add_ptr268 = $p_cur + $curr_offset;
    $p_cur = $add_ptr268;
    
    var $and269 = $r13 & -16775424;
    
    if (($and269 | 0) != 0) {
      __label__ = 28;
    } else {
      __label__ = 44;
    }
    if (__label__ == 28) {
      
      var $add_ptr272 = $p_cur + -4;
      $p_cur = $add_ptr272;
      $i = 0;
      $for_cond273$42 : while (1) {
        
        var $cmp274 = ($i | 0) < 4;
        if (!$cmp274) {
          __label__ = 43;
          break $for_cond273$42;
        }
        
        
        
        $p_ref = $in2_addr + $i;
        
        
        
        
        
        $p_tmp8 = $tmp_res + ($j + $i);
        
        var $add_ptr280 = $p_tmp8 + -24;
        $p_tmp8 = $add_ptr280;
        
        
        
        var $add_ptr282 = $p_cur + (0 - $outpitch_addr);
        $p_cur = $add_ptr282;
        
        
        
        
        $tmp = $p_ref + $pkres;
        while (1) {
          
          
          
          var $cmp285 = $p_ref >>> 0 < $tmp >>> 0;
          if (!$cmp285) {
            __label__ = 41;
            break;
          }
          
          
          
          
          
          
          
          $r0 = HEAPU8[$p_ref + (0 - ($inpitch_addr << 1)) >> 0] & 255;
          
          
          
          
          
          
          $r1 = HEAPU8[$p_ref + (0 - $inpitch_addr) >> 0] & 255;
          
          
          
          $r2 = HEAPU8[$p_ref >> 0] & 255;
          
          
          var $add_ptr295 = $p_ref + $inpitch_addr;
          $p_ref = $add_ptr295;
          
          
          $r3 = HEAPU8[$add_ptr295 >> 0] & 255;
          
          
          var $add_ptr297 = $p_ref + $inpitch_addr;
          $p_ref = $add_ptr297;
          
          
          $r4 = HEAPU8[$add_ptr297 >> 0] & 255;
          
          
          var $add_ptr299 = $p_ref + $inpitch_addr;
          $p_ref = $add_ptr299;
          
          
          $r5 = HEAPU8[$add_ptr299 >> 0] & 255;
          
          
          
          $result = $r0 + $r5;
          
          
          
          $r0 = $r1 + $r4;
          
          
          
          var $sub304 = $result - $r0 * 5;
          $result = $sub304;
          
          
          
          $r0 = $r2 + $r3;
          
          
          
          var $add307 = $result + $r0 * 20;
          $result = $add307;
          
          
          var $shr309 = $result + 16 >> 5;
          $result = $shr309;
          
          
          if ($result >>> 0 > 255) {
            __label__ = 33;
          } else {
            __label__ = 34;
          }
          if (__label__ == 33) {
            
            
            var $neg313 = $result >> 31 ^ -1;
            var $and314 = 255 & $neg313;
            $result = $and314;
          }
          
          var $add_ptr316 = $p_tmp8 + 24;
          $p_tmp8 = $add_ptr316;
          
          
          $tmp_result = HEAPU8[$add_ptr316 >> 0] & 255;
          
          
          
          var $add319 = $result + $tmp_result + 1;
          $result = $add319;
          
          var $shr320 = $result >> 1;
          $result = $shr320;
          
          
          
          
          var $add_ptr322 = $p_cur + $outpitch_addr;
          $p_cur = $add_ptr322;
          HEAP8[$add_ptr322 >> 0] = $result & 255;
          
          
          var $add_ptr323 = $p_ref + $inpitch_addr;
          $p_ref = $add_ptr323;
          
          
          $r0 = HEAPU8[$add_ptr323 >> 0] & 255;
          
          
          
          $result = $r1 + $r0;
          
          
          
          $r1 = $r2 + $r5;
          
          
          
          var $sub328 = $result - $r1 * 5;
          $result = $sub328;
          
          
          
          $r1 = $r3 + $r4;
          
          
          
          var $add331 = $result + $r1 * 20;
          $result = $add331;
          
          
          var $shr333 = $result + 16 >> 5;
          $result = $shr333;
          
          
          if ($result >>> 0 > 255) {
            __label__ = 35;
          } else {
            __label__ = 36;
          }
          if (__label__ == 35) {
            
            
            var $neg337 = $result >> 31 ^ -1;
            var $and338 = 255 & $neg337;
            $result = $and338;
          }
          
          var $add_ptr340 = $p_tmp8 + 24;
          $p_tmp8 = $add_ptr340;
          
          
          $tmp_result = HEAPU8[$add_ptr340 >> 0] & 255;
          
          
          
          var $add343 = $result + $tmp_result + 1;
          $result = $add343;
          
          var $shr344 = $result >> 1;
          $result = $shr344;
          
          
          
          
          var $add_ptr346 = $p_cur + $outpitch_addr;
          $p_cur = $add_ptr346;
          HEAP8[$add_ptr346 >> 0] = $result & 255;
          
          
          var $add_ptr347 = $p_ref + $inpitch_addr;
          $p_ref = $add_ptr347;
          
          
          $r1 = HEAPU8[$add_ptr347 >> 0] & 255;
          
          
          
          $result = $r2 + $r1;
          
          
          
          $r2 = $r3 + $r0;
          
          
          
          var $sub352 = $result - $r2 * 5;
          $result = $sub352;
          
          
          
          $r2 = $r4 + $r5;
          
          
          
          var $add355 = $result + $r2 * 20;
          $result = $add355;
          
          
          var $shr357 = $result + 16 >> 5;
          $result = $shr357;
          
          
          if ($result >>> 0 > 255) {
            __label__ = 37;
          } else {
            __label__ = 38;
          }
          if (__label__ == 37) {
            
            
            var $neg361 = $result >> 31 ^ -1;
            var $and362 = 255 & $neg361;
            $result = $and362;
          }
          
          var $add_ptr364 = $p_tmp8 + 24;
          $p_tmp8 = $add_ptr364;
          
          
          $tmp_result = HEAPU8[$add_ptr364 >> 0] & 255;
          
          
          
          var $add367 = $result + $tmp_result + 1;
          $result = $add367;
          
          var $shr368 = $result >> 1;
          $result = $shr368;
          
          
          
          
          var $add_ptr370 = $p_cur + $outpitch_addr;
          $p_cur = $add_ptr370;
          HEAP8[$add_ptr370 >> 0] = $result & 255;
          
          
          var $add_ptr371 = $p_ref + $inpitch_addr;
          $p_ref = $add_ptr371;
          
          
          $r2 = HEAPU8[$add_ptr371 >> 0] & 255;
          
          
          
          $result = $r3 + $r2;
          
          
          
          $r3 = $r4 + $r1;
          
          
          
          var $sub376 = $result - $r3 * 5;
          $result = $sub376;
          
          
          
          $r3 = $r5 + $r0;
          
          
          
          var $add379 = $result + $r3 * 20;
          $result = $add379;
          
          
          var $shr381 = $result + 16 >> 5;
          $result = $shr381;
          
          
          if ($result >>> 0 > 255) {
            __label__ = 39;
          } else {
            __label__ = 40;
          }
          if (__label__ == 39) {
            
            
            var $neg385 = $result >> 31 ^ -1;
            var $and386 = 255 & $neg385;
            $result = $and386;
          }
          
          var $add_ptr388 = $p_tmp8 + 24;
          $p_tmp8 = $add_ptr388;
          
          
          $tmp_result = HEAPU8[$add_ptr388 >> 0] & 255;
          
          
          
          var $add391 = $result + $tmp_result + 1;
          $result = $add391;
          
          var $shr392 = $result >> 1;
          $result = $shr392;
          
          
          
          
          var $add_ptr394 = $p_cur + $outpitch_addr;
          $p_cur = $add_ptr394;
          HEAP8[$add_ptr394 >> 0] = $result & 255;
          
          
          
          
          var $add_ptr397 = $p_ref + (0 - ($inpitch_addr << 1));
          $p_ref = $add_ptr397;
          __label__ = 31;
          continue;
        }
        
        
        
        var $add_ptr400 = $p_cur + ($curr_offset - 3);
        $p_cur = $add_ptr400;
        
        var $inc = $i + 1;
        $i = $inc;
        __label__ = 29;
        continue $for_cond273$42;
      }
    }
    
    var $add405 = $j + 4;
    $j = $add405;
    
    var $add_ptr406 = $in2_addr + 4;
    $in2_addr = $add_ptr406;
    __label__ = 23;
    continue $for_cond190$33;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z11CreateAlignPhiiS_ii($ref, $picwidth, $y_pos, $out, $blkwidth, $blkheight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $ref_addr;
  var $picwidth_addr;
  var $y_pos_addr;
  var $out_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $i;
  var $j;
  var $offset;
  var $out_offset;
  var $prev_pix;
  var $result;
  var $pix1;
  var $pix2;
  var $pix4;
  $ref_addr = $ref;
  $picwidth_addr = $picwidth;
  $y_pos_addr = $y_pos;
  $out_addr = $out;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  
  
  $out_offset = 24 - $blkwidth_addr;
  
  
  
  if (($ref_addr & 3) == 1) {
    __label__ = 1;
  } else if (($ref_addr & 3) == 2) {
    __label__ = 10;
  } else if (($ref_addr & 3) == 3) {
    __label__ = 19;
  } else {
    __label__ = 28;
  }
  if (__label__ == 1) {
    
    
    
    
    var $add_ptr = $ref_addr + $y_pos_addr * $picwidth_addr;
    $ref_addr = $add_ptr;
    
    
    
    
    $offset = $picwidth_addr - $blkwidth_addr - 3;
    $j = 0;
    $for_cond$4 : while (1) {
      
      
      var $cmp = ($j | 0) < ($blkheight_addr | 0);
      if (!$cmp) {
        __label__ = 9;
        break $for_cond$4;
      }
      var $10 = $ref_addr;
      var $incdec_ptr = $10 + 1;
      $ref_addr = $incdec_ptr;
      
      
      $pix1 = HEAPU8[$10 >> 0] & 255;
      
      
      
      
      $pix2 = HEAPU16[$ref_addr >> 1] & 65535;
      
      var $add_ptr4 = $ref_addr + 2;
      $ref_addr = $add_ptr4;
      
      
      
      
      $result = $pix2 << 8 | $pix1;
      $i = 3;
      while (1) {
        
        
        var $cmp6 = ($i | 0) < ($blkwidth_addr | 0);
        if (!$cmp6) {
          __label__ = 7;
          break;
        }
        
        
        
        $pix4 = HEAP32[$ref_addr >> 2];
        
        var $add_ptr8 = $ref_addr + 4;
        $ref_addr = $add_ptr8;
        
        
        var $and10 = $pix4 << 24 & -16777216;
        $prev_pix = $and10;
        
        
        var $or11 = $result | $prev_pix;
        $result = $or11;
        
        
        
        HEAP32[$out_addr >> 2] = $result;
        
        var $add_ptr12 = $out_addr + 4;
        $out_addr = $add_ptr12;
        
        
        $result = $pix4 >>> 8;
        
        var $add = $i + 4;
        $i = $add;
        __label__ = 4;
        continue;
      }
      
      
      var $add_ptr13 = $ref_addr + $offset;
      $ref_addr = $add_ptr13;
      
      
      var $add_ptr14 = $out_addr + $out_offset;
      $out_addr = $add_ptr14;
      
      var $inc = $j + 1;
      $j = $inc;
      __label__ = 2;
      continue $for_cond$4;
    }
  } else if (__label__ == 10) {
    
    
    
    
    var $add_ptr19 = $ref_addr + $y_pos_addr * $picwidth_addr;
    $ref_addr = $add_ptr19;
    
    
    
    
    $offset = $picwidth_addr - $blkwidth_addr - 2;
    $j = 0;
    $for_cond22$15 : while (1) {
      
      
      var $cmp23 = ($j | 0) < ($blkheight_addr | 0);
      if (!$cmp23) {
        __label__ = 18;
        break $for_cond22$15;
      }
      
      
      
      
      $result = HEAPU16[$ref_addr >> 1] & 65535;
      
      var $add_ptr26 = $ref_addr + 2;
      $ref_addr = $add_ptr26;
      $i = 2;
      while (1) {
        
        
        var $cmp28 = ($i | 0) < ($blkwidth_addr | 0);
        if (!$cmp28) {
          __label__ = 16;
          break;
        }
        
        
        
        $pix4 = HEAP32[$ref_addr >> 2];
        
        var $add_ptr30 = $ref_addr + 4;
        $ref_addr = $add_ptr30;
        
        
        var $and32 = $pix4 << 16 & -65536;
        $prev_pix = $and32;
        
        
        var $or33 = $result | $prev_pix;
        $result = $or33;
        
        
        
        HEAP32[$out_addr >> 2] = $result;
        
        var $add_ptr34 = $out_addr + 4;
        $out_addr = $add_ptr34;
        
        
        $result = $pix4 >>> 16;
        
        var $add37 = $i + 4;
        $i = $add37;
        __label__ = 13;
        continue;
      }
      
      
      var $add_ptr39 = $ref_addr + $offset;
      $ref_addr = $add_ptr39;
      
      
      var $add_ptr40 = $out_addr + $out_offset;
      $out_addr = $add_ptr40;
      
      var $inc42 = $j + 1;
      $j = $inc42;
      __label__ = 11;
      continue $for_cond22$15;
    }
  } else if (__label__ == 19) {
    
    
    
    
    var $add_ptr46 = $ref_addr + $y_pos_addr * $picwidth_addr;
    $ref_addr = $add_ptr46;
    
    
    
    
    $offset = $picwidth_addr - $blkwidth_addr - 1;
    $j = 0;
    $for_cond49$26 : while (1) {
      
      
      var $cmp50 = ($j | 0) < ($blkheight_addr | 0);
      if (!$cmp50) {
        __label__ = 27;
        break $for_cond49$26;
      }
      var $76 = $ref_addr;
      var $incdec_ptr52 = $76 + 1;
      $ref_addr = $incdec_ptr52;
      
      
      $result = HEAPU8[$76 >> 0] & 255;
      $i = 1;
      while (1) {
        
        
        var $cmp55 = ($i | 0) < ($blkwidth_addr | 0);
        if (!$cmp55) {
          __label__ = 25;
          break;
        }
        
        
        
        $pix4 = HEAP32[$ref_addr >> 2];
        
        var $add_ptr57 = $ref_addr + 4;
        $ref_addr = $add_ptr57;
        
        
        var $and59 = $pix4 << 8 & -256;
        $prev_pix = $and59;
        
        
        var $or60 = $result | $prev_pix;
        $result = $or60;
        
        
        
        HEAP32[$out_addr >> 2] = $result;
        
        var $add_ptr61 = $out_addr + 4;
        $out_addr = $add_ptr61;
        
        
        $result = $pix4 >>> 24;
        
        var $add64 = $i + 4;
        $i = $add64;
        __label__ = 22;
        continue;
      }
      
      
      var $add_ptr66 = $ref_addr + $offset;
      $ref_addr = $add_ptr66;
      
      
      var $add_ptr67 = $out_addr + $out_offset;
      $out_addr = $add_ptr67;
      
      var $inc69 = $j + 1;
      $j = $inc69;
      __label__ = 20;
      continue $for_cond49$26;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z21ChromaDiagonalMC_SIMDPhiiiS_iii($pRef, $srcPitch, $dx, $dy, $pOut, $predPitch, $blkwidth, $blkheight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 288;
  var __label__;
  var $pRef_addr;
  var $srcPitch_addr;
  var $dx_addr;
  var $dy_addr;
  var $pOut_addr;
  var $predPitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $r0;
  var $r1;
  var $r2;
  var $r3;
  var $result0;
  var $result1;
  var $temp = __stackBase__;
  var $ref;
  var $out;
  var $i;
  var $j;
  var $dx_8;
  var $dy_8;
  $pRef_addr = $pRef;
  $srcPitch_addr = $srcPitch;
  $dx_addr = $dx;
  $dy_addr = $dy;
  $pOut_addr = $pOut;
  $predPitch_addr = $predPitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  
  
  $dx_8 = 8 - $dx_addr;
  
  
  $dy_8 = 8 - $dy_addr;
  
  $out = $temp;
  $i = 0;
  $for_cond$2 : while (1) {
    
    
    
    var $cmp = ($i | 0) < ($blkheight_addr + 1 | 0);
    if (!$cmp) {
      __label__ = 8;
      break $for_cond$2;
    }
    
    $ref = $pRef_addr;
    
    
    
    
    $r0 = HEAPU8[$ref >> 0] & 255;
    $j = 0;
    while (1) {
      
      
      var $cmp3 = ($j | 0) < ($blkwidth_addr | 0);
      if (!$cmp3) {
        __label__ = 6;
        break;
      }
      
      
      
      
      
      
      var $or = $r0 | (HEAPU8[$ref + 2 >> 0] & 255) << 16;
      $r0 = $or;
      
      
      
      $result0 = $dx_8 * $r0;
      
      
      
      
      
      
      
      
      
      
      $r1 = HEAPU8[$ref + 1 >> 0] & 255 | (HEAPU8[$ref + 3 >> 0] & 255) << 16;
      
      
      
      
      var $add14 = $result0 + $dx_addr * $r1;
      $result0 = $add14;
      
      
      
      HEAP32[$out >> 2] = $result0;
      
      
      
      $result0 = $dx_8 * $r1;
      
      
      
      
      $r2 = HEAPU8[$ref + 4 >> 0] & 255;
      
      var $shr = $r0 >> 16;
      $r0 = $shr;
      
      
      
      
      $r1 = $r0 | $r2 << 16;
      
      
      
      
      var $add21 = $result0 + $dx_addr * $r1;
      $result0 = $add21;
      
      
      
      
      HEAP32[$out + 16 >> 2] = $result0;
      
      var $add_ptr22 = $ref + 4;
      $ref = $add_ptr22;
      
      var $add_ptr23 = $out + 4;
      $out = $add_ptr23;
      
      $r0 = $r2;
      
      var $add24 = $j + 4;
      $j = $add24;
      __label__ = 3;
      continue;
    }
    
    
    var $add_ptr25 = $pRef_addr + $srcPitch_addr;
    $pRef_addr = $add_ptr25;
    
    
    
    var $add_ptr27 = $out + (32 - $blkwidth_addr);
    $out = $add_ptr27;
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 1;
    continue $for_cond$2;
  }
  
  $ref = $temp;
  $j = 0;
  $for_cond31$12 : while (1) {
    
    
    var $cmp32 = ($j | 0) < ($blkwidth_addr | 0);
    if (!$cmp32) {
      __label__ = 16;
      break $for_cond31$12;
    }
    
    
    
    $r0 = HEAP32[$ref >> 2];
    
    
    
    
    $r1 = HEAP32[$ref + 16 >> 2];
    
    var $add_ptr35 = $ref + 32;
    $ref = $add_ptr35;
    
    $out = $pOut_addr;
    $i = 0;
    while (1) {
      
      
      
      var $cmp38 = ($i | 0) < ($blkheight_addr >> 1 | 0);
      if (!$cmp38) {
        __label__ = 14;
        break;
      }
      
      
      
      
      $result0 = $dy_8 * $r0 + 2097184;
      
      
      
      $r2 = HEAP32[$ref >> 2];
      
      
      
      
      var $add43 = $result0 + $dy_addr * $r2;
      $result0 = $add43;
      
      var $shr44 = $result0 >> 6;
      $result0 = $shr44;
      
      var $and = $result0 & 16711935;
      $result0 = $and;
      
      $r0 = $r2;
      
      
      
      
      $result1 = $dy_8 * $r1 + 2097184;
      
      
      
      
      $r3 = HEAP32[$ref + 16 >> 2];
      
      
      
      
      var $add49 = $result1 + $dy_addr * $r3;
      $result1 = $add49;
      
      var $shr50 = $result1 >> 6;
      $result1 = $shr50;
      
      var $and51 = $result1 & 16711935;
      $result1 = $and51;
      
      $r1 = $r3;
      
      
      
      
      
      
      HEAP32[$out >> 2] = $result0 | $result1 << 8;
      
      
      var $add_ptr54 = $out + $predPitch_addr;
      $out = $add_ptr54;
      
      var $add_ptr55 = $ref + 32;
      $ref = $add_ptr55;
      
      
      
      
      $result0 = $dy_8 * $r0 + 2097184;
      
      
      
      $r2 = HEAP32[$ref >> 2];
      
      
      
      
      var $add59 = $result0 + $dy_addr * $r2;
      $result0 = $add59;
      
      var $shr60 = $result0 >> 6;
      $result0 = $shr60;
      
      var $and61 = $result0 & 16711935;
      $result0 = $and61;
      
      $r0 = $r2;
      
      
      
      
      $result1 = $dy_8 * $r1 + 2097184;
      
      
      
      
      $r3 = HEAP32[$ref + 16 >> 2];
      
      
      
      
      var $add66 = $result1 + $dy_addr * $r3;
      $result1 = $add66;
      
      var $shr67 = $result1 >> 6;
      $result1 = $shr67;
      
      var $and68 = $result1 & 16711935;
      $result1 = $and68;
      
      $r1 = $r3;
      
      
      
      
      
      
      HEAP32[$out >> 2] = $result0 | $result1 << 8;
      
      
      var $add_ptr71 = $out + $predPitch_addr;
      $out = $add_ptr71;
      
      var $add_ptr72 = $ref + 32;
      $ref = $add_ptr72;
      
      var $inc74 = $i + 1;
      $i = $inc74;
      __label__ = 11;
      continue;
    }
    
    var $add_ptr76 = $pOut_addr + 4;
    $pOut_addr = $add_ptr76;
    
    
    $ref = $temp + 4;
    
    var $add80 = $j + 4;
    $j = $add80;
    __label__ = 9;
    continue $for_cond31$12;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z23ChromaHorizontalMC_SIMDPhiiiS_iii($pRef, $srcPitch, $dx, $dy, $pOut, $predPitch, $blkwidth, $blkheight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $pRef_addr;
  var $srcPitch_addr;
  var $dx_addr;
  var $dy_addr;
  var $pOut_addr;
  var $predPitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $r0;
  var $r1;
  var $r2;
  var $result0;
  var $result1;
  var $ref;
  var $out;
  var $i;
  var $j;
  var $dx_8;
  $pRef_addr = $pRef;
  $srcPitch_addr = $srcPitch;
  $dx_addr = $dx;
  $dy_addr = $dy;
  $pOut_addr = $pOut;
  $predPitch_addr = $predPitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  
  
  $dx_8 = 8 - $dx_addr;
  $i = 0;
  $for_cond$2 : while (1) {
    
    
    var $cmp = ($i | 0) < ($blkheight_addr | 0);
    if (!$cmp) {
      __label__ = 8;
      break $for_cond$2;
    }
    
    $ref = $pRef_addr;
    
    $out = $pOut_addr;
    
    
    
    
    $r0 = HEAPU8[$ref >> 0] & 255;
    $j = 0;
    while (1) {
      
      
      var $cmp2 = ($j | 0) < ($blkwidth_addr | 0);
      if (!$cmp2) {
        __label__ = 6;
        break;
      }
      
      
      
      
      
      
      var $or = $r0 | (HEAPU8[$ref + 2 >> 0] & 255) << 16;
      $r0 = $or;
      
      
      
      
      $result0 = $dx_8 * $r0 + 262148;
      
      
      
      
      
      
      
      
      
      
      $r1 = HEAPU8[$ref + 1 >> 0] & 255 | (HEAPU8[$ref + 3 >> 0] & 255) << 16;
      
      
      
      
      var $add13 = $result0 + $dx_addr * $r1;
      $result0 = $add13;
      
      var $shr = $result0 >> 3;
      $result0 = $shr;
      
      var $and = $result0 & 16711935;
      $result0 = $and;
      
      
      
      
      $result1 = $dx_8 * $r1 + 262148;
      
      
      
      
      $r2 = HEAPU8[$ref + 4 >> 0] & 255;
      
      var $shr18 = $r0 >> 16;
      $r0 = $shr18;
      
      
      
      
      $r1 = $r0 | $r2 << 16;
      
      
      
      
      var $add22 = $result1 + $dx_addr * $r1;
      $result1 = $add22;
      
      var $shr23 = $result1 >> 3;
      $result1 = $shr23;
      
      var $and24 = $result1 & 16711935;
      $result1 = $and24;
      
      
      
      
      
      
      HEAP32[$out >> 2] = $result0 | $result1 << 8;
      
      var $add_ptr = $ref + 4;
      $ref = $add_ptr;
      
      var $add_ptr27 = $out + 4;
      $out = $add_ptr27;
      
      $r0 = $r2;
      
      var $add28 = $j + 4;
      $j = $add28;
      __label__ = 3;
      continue;
    }
    
    
    var $add_ptr29 = $pRef_addr + $srcPitch_addr;
    $pRef_addr = $add_ptr29;
    
    
    var $add_ptr30 = $pOut_addr + $predPitch_addr;
    $pOut_addr = $add_ptr30;
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 1;
    continue $for_cond$2;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z21ChromaVerticalMC_SIMDPhiiiS_iii($pRef, $srcPitch, $dx, $dy, $pOut, $predPitch, $blkwidth, $blkheight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $pRef_addr;
  var $srcPitch_addr;
  var $dx_addr;
  var $dy_addr;
  var $pOut_addr;
  var $predPitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $r0;
  var $r1;
  var $r2;
  var $r3;
  var $result0;
  var $result1;
  var $i;
  var $j;
  var $ref;
  var $out;
  var $dy_8;
  $pRef_addr = $pRef;
  $srcPitch_addr = $srcPitch;
  $dx_addr = $dx;
  $dy_addr = $dy;
  $pOut_addr = $pOut;
  $predPitch_addr = $predPitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  
  
  $dy_8 = 8 - $dy_addr;
  $i = 0;
  $for_cond$2 : while (1) {
    
    
    var $cmp = ($i | 0) < ($blkwidth_addr | 0);
    if (!$cmp) {
      __label__ = 8;
      break $for_cond$2;
    }
    
    $ref = $pRef_addr;
    
    $out = $pOut_addr;
    
    
    
    
    
    
    
    
    
    
    $r0 = HEAPU8[$ref >> 0] & 255 | (HEAPU8[$ref + 2 >> 0] & 255) << 16;
    
    
    
    
    
    
    
    
    
    
    $r1 = HEAPU8[$ref + 1 >> 0] & 255 | (HEAPU8[$ref + 3 >> 0] & 255) << 16;
    
    
    var $add_ptr = $ref + $srcPitch_addr;
    $ref = $add_ptr;
    $j = 0;
    while (1) {
      
      
      var $cmp10 = ($j | 0) < ($blkheight_addr | 0);
      if (!$cmp10) {
        __label__ = 6;
        break;
      }
      
      
      
      
      $result0 = $dy_8 * $r0 + 262148;
      
      
      
      
      
      
      
      
      
      
      $r2 = HEAPU8[$ref >> 0] & 255 | (HEAPU8[$ref + 2 >> 0] & 255) << 16;
      
      
      
      
      var $add19 = $result0 + $dy_addr * $r2;
      $result0 = $add19;
      
      var $shr = $result0 >> 3;
      $result0 = $shr;
      
      var $and = $result0 & 16711935;
      $result0 = $and;
      
      $r0 = $r2;
      
      
      
      
      $result1 = $dy_8 * $r1 + 262148;
      
      
      
      
      
      
      
      
      
      
      $r3 = HEAPU8[$ref + 1 >> 0] & 255 | (HEAPU8[$ref + 3 >> 0] & 255) << 16;
      
      
      
      
      var $add29 = $result1 + $dy_addr * $r3;
      $result1 = $add29;
      
      var $shr30 = $result1 >> 3;
      $result1 = $shr30;
      
      var $and31 = $result1 & 16711935;
      $result1 = $and31;
      
      $r1 = $r3;
      
      
      
      
      
      
      HEAP32[$out >> 2] = $result0 | $result1 << 8;
      
      
      var $add_ptr34 = $ref + $srcPitch_addr;
      $ref = $add_ptr34;
      
      
      var $add_ptr35 = $out + $predPitch_addr;
      $out = $add_ptr35;
      
      var $inc = $j + 1;
      $j = $inc;
      __label__ = 3;
      continue;
    }
    
    var $add_ptr36 = $pOut_addr + 4;
    $pOut_addr = $add_ptr36;
    
    var $add_ptr37 = $pRef_addr + 4;
    $pRef_addr = $add_ptr37;
    
    var $add39 = $i + 4;
    $i = $add39;
    __label__ = 1;
    continue $for_cond$2;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z22ChromaDiagonalMC2_SIMDPhiiiS_iii($pRef, $srcPitch, $dx, $dy, $pOut, $predPitch, $blkwidth, $blkheight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 36;
  var __label__;
  var $pRef_addr;
  var $srcPitch_addr;
  var $dx_addr;
  var $dy_addr;
  var $pOut_addr;
  var $predPitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $r0;
  var $r1;
  var $temp0;
  var $temp1;
  var $result;
  var $temp = __stackBase__;
  var $out;
  var $i;
  var $r_temp;
  var $dy_8;
  $pRef_addr = $pRef;
  $srcPitch_addr = $srcPitch;
  $dx_addr = $dx;
  $dy_addr = $dy;
  $pOut_addr = $pOut;
  $predPitch_addr = $predPitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  
  
  $dy_8 = 8 - $dy_addr;
  
  $out = $temp;
  $i = 0;
  $for_cond$2 : while (1) {
    
    
    
    var $cmp = ($i | 0) < ($blkheight_addr + 1 | 0);
    if (!$cmp) {
      __label__ = 4;
      break $for_cond$2;
    }
    
    
    
    
    $r_temp = HEAPU8[$pRef_addr + 1 >> 0] & 255;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    $temp0 = ((HEAPU8[$pRef_addr >> 0] & 255) << 3) + $dx_addr * ($r_temp - (HEAPU8[$pRef_addr >> 0] & 255));
    
    
    
    
    
    
    
    
    
    
    
    $temp1 = ($r_temp << 3) + $dx_addr * ((HEAPU8[$pRef_addr + 2 >> 0] & 255) - $r_temp);
    
    
    
    
    $r0 = $temp0 | $temp1 << 16;
    
    var $19 = $out;
    var $incdec_ptr = $19 + 4;
    $out = $incdec_ptr;
    HEAP32[$19 >> 2] = $r0;
    
    
    var $add_ptr = $pRef_addr + $srcPitch_addr;
    $pRef_addr = $add_ptr;
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 1;
    continue $for_cond$2;
  }
  
  
  
  
  
  
  var $add_ptr16 = $pRef_addr + (0 - $srcPitch_addr * ($blkheight_addr + 1));
  $pRef_addr = $add_ptr16;
  
  $out = $temp;
  var $26 = $out;
  var $incdec_ptr18 = $26 + 4;
  $out = $incdec_ptr18;
  
  $r0 = HEAP32[$26 >> 2];
  $i = 0;
  while (1) {
    
    
    var $cmp20 = ($i | 0) < ($blkheight_addr | 0);
    if (!$cmp20) {
      __label__ = 8;
      break;
    }
    
    
    
    
    $result = $dy_8 * $r0 + 2097184;
    var $32 = $out;
    var $incdec_ptr24 = $32 + 4;
    $out = $incdec_ptr24;
    
    $r1 = HEAP32[$32 >> 2];
    
    
    
    
    var $add26 = $result + $dy_addr * $r1;
    $result = $add26;
    
    var $shr = $result >> 6;
    $result = $shr;
    
    var $and = $result & 16711935;
    $result = $and;
    
    
    
    
    
    
    
    
    HEAP16[$pOut_addr >> 1] = ($result >> 8 | $result & 255) & 65535;
    
    $r0 = $r1;
    
    
    var $add_ptr31 = $pOut_addr + $predPitch_addr;
    $pOut_addr = $add_ptr31;
    
    var $inc33 = $i + 1;
    $i = $inc33;
    __label__ = 5;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z24ChromaHorizontalMC2_SIMDPhiiiS_iii($pRef, $srcPitch, $dx, $dy, $pOut, $predPitch, $blkwidth, $blkheight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $pRef_addr;
  var $srcPitch_addr;
  var $dx_addr;
  var $dy_addr;
  var $pOut_addr;
  var $predPitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $i;
  var $temp;
  var $temp0;
  var $temp1;
  $pRef_addr = $pRef;
  $srcPitch_addr = $srcPitch;
  $dx_addr = $dx;
  $dy_addr = $dy;
  $pOut_addr = $pOut;
  $predPitch_addr = $predPitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  $i = 0;
  while (1) {
    
    
    var $cmp = ($i | 0) < ($blkheight_addr | 0);
    if (!$cmp) {
      __label__ = 4;
      break;
    }
    
    
    
    
    $temp = HEAPU8[$pRef_addr + 1 >> 0] & 255;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    $temp0 = ((HEAPU8[$pRef_addr >> 0] & 255) << 3) + $dx_addr * ($temp - (HEAPU8[$pRef_addr >> 0] & 255)) + 4 >> 3;
    
    
    
    
    
    
    
    
    
    
    
    
    
    $temp1 = ($temp << 3) + $dx_addr * ((HEAPU8[$pRef_addr + 2 >> 0] & 255) - $temp) + 4 >> 3;
    
    
    
    
    
    
    
    HEAP16[$pOut_addr >> 1] = ($temp0 | $temp1 << 8) & 65535;
    
    
    var $add_ptr = $pRef_addr + $srcPitch_addr;
    $pRef_addr = $add_ptr;
    
    
    var $add_ptr16 = $pOut_addr + $predPitch_addr;
    $pOut_addr = $add_ptr16;
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 1;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z22ChromaVerticalMC2_SIMDPhiiiS_iii($pRef, $srcPitch, $dx, $dy, $pOut, $predPitch, $blkwidth, $blkheight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $pRef_addr;
  var $srcPitch_addr;
  var $dx_addr;
  var $dy_addr;
  var $pOut_addr;
  var $predPitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $r0;
  var $r1;
  var $result;
  var $i;
  var $dy_8;
  $pRef_addr = $pRef;
  $srcPitch_addr = $srcPitch;
  $dx_addr = $dx;
  $dy_addr = $dy;
  $pOut_addr = $pOut;
  $predPitch_addr = $predPitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  
  
  $dy_8 = 8 - $dy_addr;
  
  
  
  
  
  
  
  
  
  
  $r0 = HEAPU8[$pRef_addr >> 0] & 255 | (HEAPU8[$pRef_addr + 1 >> 0] & 255) << 16;
  
  
  var $add_ptr = $pRef_addr + $srcPitch_addr;
  $pRef_addr = $add_ptr;
  $i = 0;
  while (1) {
    
    
    var $cmp = ($i | 0) < ($blkheight_addr | 0);
    if (!$cmp) {
      __label__ = 4;
      break;
    }
    
    
    
    
    $result = $dy_8 * $r0 + 262148;
    
    
    
    
    
    
    
    
    
    
    $r1 = HEAPU8[$pRef_addr >> 0] & 255 | (HEAPU8[$pRef_addr + 1 >> 0] & 255) << 16;
    
    
    
    
    var $add10 = $result + $dy_addr * $r1;
    $result = $add10;
    
    var $shr = $result >> 3;
    $result = $shr;
    
    var $and = $result & 16711935;
    $result = $and;
    
    
    
    
    
    
    
    
    HEAP16[$pOut_addr >> 1] = ($result >> 8 | $result & 255) & 65535;
    
    $r0 = $r1;
    
    
    var $add_ptr15 = $pRef_addr + $srcPitch_addr;
    $pRef_addr = $add_ptr15;
    
    
    var $add_ptr16 = $pOut_addr + $predPitch_addr;
    $pOut_addr = $add_ptr16;
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 1;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z17ChromaFullMC_SIMDPhiiiS_iii($pRef, $srcPitch, $dx, $dy, $pOut, $predPitch, $blkwidth, $blkheight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $pRef_addr;
  var $srcPitch_addr;
  var $dx_addr;
  var $dy_addr;
  var $pOut_addr;
  var $predPitch_addr;
  var $blkwidth_addr;
  var $blkheight_addr;
  var $i;
  var $j;
  var $offset_in;
  var $offset_out;
  var $temp;
  var $byte;
  $pRef_addr = $pRef;
  $srcPitch_addr = $srcPitch;
  $dx_addr = $dx;
  $dy_addr = $dy;
  $pOut_addr = $pOut;
  $predPitch_addr = $predPitch;
  $blkwidth_addr = $blkwidth;
  $blkheight_addr = $blkheight;
  
  
  
  $offset_in = $srcPitch_addr - $blkwidth_addr;
  
  
  
  $offset_out = $predPitch_addr - $blkwidth_addr;
  
  
  
  
  if (($pRef_addr & 1 | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 10;
  }
  if (__label__ == 1) {
    
    $j = $blkheight_addr;
    $for_cond$4 : while (1) {
      
      var $cmp = ($j | 0) > 0;
      if (!$cmp) {
        __label__ = 9;
        break $for_cond$4;
      }
      
      $i = $blkwidth_addr;
      while (1) {
        
        var $cmp3 = ($i | 0) > 0;
        if (!$cmp3) {
          __label__ = 7;
          break;
        }
        var $10 = $pRef_addr;
        var $incdec_ptr = $10 + 1;
        $pRef_addr = $incdec_ptr;
        
        
        $temp = HEAPU8[$10 >> 0] & 255;
        var $12 = $pRef_addr;
        var $incdec_ptr5 = $12 + 1;
        $pRef_addr = $incdec_ptr5;
        
        $byte = HEAP8[$12 >> 0];
        
        
        
        
        
        
        var $conv8 = ($temp & 65535 | ($byte & 255) << 8) & 65535;
        $temp = $conv8;
        
        
        
        HEAP16[$pOut_addr >> 1] = $temp;
        
        var $add_ptr = $pOut_addr + 2;
        $pOut_addr = $add_ptr;
        
        var $sub9 = $i - 2;
        $i = $sub9;
        __label__ = 4;
        continue;
      }
      
      
      var $add_ptr10 = $pOut_addr + $offset_out;
      $pOut_addr = $add_ptr10;
      
      
      var $add_ptr11 = $pRef_addr + $offset_in;
      $pRef_addr = $add_ptr11;
      
      var $dec = $j + -1;
      $j = $dec;
      __label__ = 2;
      continue $for_cond$4;
    }
  } else if (__label__ == 10) {
    
    $j = $blkheight_addr;
    $for_cond14$15 : while (1) {
      
      var $cmp15 = ($j | 0) > 0;
      if (!$cmp15) {
        __label__ = 18;
        break $for_cond14$15;
      }
      
      $i = $blkwidth_addr;
      while (1) {
        
        var $cmp18 = ($i | 0) > 0;
        if (!$cmp18) {
          __label__ = 16;
          break;
        }
        
        
        
        $temp = HEAP16[$pRef_addr >> 1];
        
        
        
        HEAP16[$pOut_addr >> 1] = $temp;
        
        var $add_ptr20 = $pRef_addr + 2;
        $pRef_addr = $add_ptr20;
        
        var $add_ptr21 = $pOut_addr + 2;
        $pOut_addr = $add_ptr21;
        
        var $sub23 = $i - 2;
        $i = $sub23;
        __label__ = 13;
        continue;
      }
      
      
      var $add_ptr25 = $pOut_addr + $offset_out;
      $pOut_addr = $add_ptr25;
      
      
      var $add_ptr26 = $pRef_addr + $offset_in;
      $pRef_addr = $add_ptr26;
      
      var $dec28 = $j + -1;
      $j = $dec28;
      __label__ = 11;
      continue $for_cond14$15;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z11DecodeSliceP12tagDecObject($decvid) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $retval;
  var $decvid_addr;
  var $status;
  var $video;
  var $sliceHdr;
  var $currMB;
  var $stream;
  var $slice_group_id;
  var $CurrMbAddr;
  var $moreDataFlag;
  $decvid_addr = $decvid;
  
  
  
  $video = HEAP32[$decvid_addr >> 2];
  
  
  
  $sliceHdr = HEAP32[$video + 880 >> 2];
  
  
  
  $stream = HEAP32[$decvid_addr + 4 >> 2];
  
  
  
  $CurrMbAddr = HEAP32[$sliceHdr >> 2];
  
  
  
  
  
  
  $slice_group_id = HEAP32[HEAP32[$video + 1412 >> 2] + 4 * $CurrMbAddr >> 2];
  
  
  if (($CurrMbAddr | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 4;
  }
  $land_lhs_true$$if_end$2 : do {
    if (__label__ == 1) {
      
      
      
      
      
      var $cmp = ($CurrMbAddr | 0) != (HEAP32[$video + 916 >> 2] + 1 | 0);
      if (!$cmp) {
        __label__ = 4;
        break $land_lhs_true$$if_end$2;
      }
      
      
      
      
      
      var $cmp3 = (HEAP32[HEAP32[$video + 868 >> 2] + 12 >> 2] | 0) == 1;
      if (!$cmp3) {
        __label__ = 4;
        break $land_lhs_true$$if_end$2;
      }
      
      
      
      var $21 = HEAP32[$video + 916 >> 2];
      
      var $call = __Z12ConcealSliceP12tagDecObjectii($decvid_addr, $21, $CurrMbAddr);
    }
  } while (0);
  $moreDataFlag = 1;
  
  
  HEAP32[$video + 2072 >> 2] = -1;
  $do_body$7 : while (1) {
    
    
    
    
    
    if ($CurrMbAddr >>> 0 >= HEAPU32[$video + 1308 >> 2] >>> 0) {
      __label__ = 6;
      break $do_body$7;
    }
    
    
    
    
    var $arrayidx8 = HEAP32[$video + 908 >> 2] + 420 * $CurrMbAddr;
    
    
    HEAP32[$video + 912 >> 2] = $arrayidx8;
    $currMB = $arrayidx8;
    
    
    
    HEAP32[$video + 916 >> 2] = $CurrMbAddr;
    
    
    var $34 = HEAP32[$video + 1280 >> 2];
    
    
    HEAP32[$currMB + 416 >> 2] = $34;
    
    
    
    
    
    
    
    HEAP32[$video + 920 >> 2] = ($CurrMbAddr >>> 0) % (HEAPU32[$video + 1248 >> 2] >>> 0);
    
    
    
    var $42 = HEAPU32[$video + 1248 >> 2];
    var $div = Math.floor(($CurrMbAddr >>> 0) / ($42 >>> 0));
    
    
    HEAP32[$video + 924 >> 2] = $div;
    
    
    __Z24InitNeighborAvailabilityP12tagCommonObji($video, $CurrMbAddr);
    
    var $call13 = __Z8DecodeMBP12tagDecObject($decvid_addr);
    $status = $call13;
    
    
    if (($status | 0) != 1) {
      __label__ = 8;
      break $do_body$7;
    }
    
    
    
    var $dec = HEAP32[$video + 1316 >> 2] + -1;
    HEAP32[$video + 1316 >> 2] = $dec;
    
    var $call17 = _more_rbsp_data($stream);
    
    $moreDataFlag = $call17 & 1;
    $while_cond$11 : while (1) {
      
      var $inc = $CurrMbAddr + 1;
      $CurrMbAddr = $inc;
      
      
      
      
      if ($inc >>> 0 < HEAPU32[$video + 1308 >> 2] >>> 0) {
        __lastLabel__ = 10;
        __label__ = 11;
      } else {
        __lastLabel__ = 10;
        __label__ = 12;
      }
      if (__label__ == 11) {
        
        
        
        
        
        
        
        var $cmp22 = (HEAP32[HEAP32[$video + 1412 >> 2] + 4 * $CurrMbAddr >> 2] | 0) != ($slice_group_id | 0);
        __lastLabel__ = 11;
      }
      var $60 = __lastLabel__ == 10 ? 0 : $cmp22;
      if (!$60) {
        __label__ = 14;
        break $while_cond$11;
      }
      __label__ = 10;
      continue $while_cond$11;
    }
    
    
    if (($moreDataFlag | 0) != 0) {
      __label__ = 16;
    } else {
      __label__ = 17;
    }
    $land_lhs_true24$$lor_rhs$19 : do {
      if (__label__ == 16) {
        
        
        
        
        if ((HEAP32[$video + 1316 >> 2] | 0) > 0) {
          __lastLabel__ = 16;
          __label__ = 18;
          break $land_lhs_true24$$lor_rhs$19;
        } else {
          __lastLabel__ = 16;
          __label__ = 17;
          break $land_lhs_true24$$lor_rhs$19;
        }
      }
    } while (0);
    if (__label__ == 17) {
      
      
      
      var $cmp28 = (HEAP32[$video + 2072 >> 2] | 0) > 0;
      __lastLabel__ = 17;
    }
    var $66 = __lastLabel__ == 16 ? 1 : $cmp28;
    if ($66) {
      __label__ = 5;
      continue $do_body$7;
    } else {
      __label__ = 19;
      break $do_body$7;
    }
  }
  if (__label__ == 6) {
    $retval = 0;
  } else if (__label__ == 8) {
    
    $retval = $status;
  } else if (__label__ == 19) {
    
    
    
    
    if ((HEAP32[$video + 1316 >> 2] | 0) == 0) {
      __label__ = 20;
    } else {
      __label__ = 21;
    }
    if (__label__ == 20) {
      
      
      HEAP32[$video + 896 >> 2] = 1;
      
      
      HEAP32[$video + 916 >> 2] = 0;
      $retval = 3;
    } else if (__label__ == 21) {
      $retval = 1;
    }
  }
  var $71 = $retval;
  STACKTOP = __stackBase__;
  return $71;
  return null;
}
function __Z12ConcealSliceP12tagDecObjectii($decvid, $mbnum_start, $mbnum_end) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $decvid_addr;
  var $mbnum_start_addr;
  var $mbnum_end_addr;
  var $video;
  var $currMB;
  var $CurrMbAddr;
  $decvid_addr = $decvid;
  $mbnum_start_addr = $mbnum_start;
  $mbnum_end_addr = $mbnum_end;
  
  
  
  $video = HEAP32[$decvid_addr >> 2];
  
  
  
  
  
  if ((HEAP32[$video + 1416 >> 2] | 0) == 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    $retval = 0;
  } else if (__label__ == 2) {
    
    $CurrMbAddr = $mbnum_start_addr;
    while (1) {
      
      
      var $cmp1 = ($CurrMbAddr | 0) < ($mbnum_end_addr | 0);
      if (!$cmp1) {
        __label__ = 6;
        break;
      }
      
      
      
      
      var $arrayidx2 = HEAP32[$video + 908 >> 2] + 420 * $CurrMbAddr;
      
      
      HEAP32[$video + 912 >> 2] = $arrayidx2;
      $currMB = $arrayidx2;
      
      
      
      HEAP32[$video + 916 >> 2] = $CurrMbAddr;
      
      
      var $14 = HEAP32[$video + 1280 >> 2];
      var $inc = $14 + 1;
      HEAP32[$video + 1280 >> 2] = $inc;
      
      
      HEAP32[$currMB + 416 >> 2] = $14;
      
      
      
      
      
      
      
      HEAP32[$video + 920 >> 2] = ($CurrMbAddr >>> 0) % (HEAPU32[$video + 1248 >> 2] >>> 0);
      
      
      
      var $22 = HEAPU32[$video + 1248 >> 2];
      var $div = Math.floor(($CurrMbAddr >>> 0) / ($22 >>> 0));
      
      
      HEAP32[$video + 924 >> 2] = $div;
      
      
      __Z24InitNeighborAvailabilityP12tagCommonObji($video, $CurrMbAddr);
      
      
      HEAP32[$currMB + 156 >> 2] = 0;
      
      
      HEAP32[$currMB + 164 >> 2] = 10;
      
      
      HEAP32[$currMB + 328 >> 2] = 16;
      
      
      HEAP32[$currMB + 324 >> 2] = 16;
      
      
      HEAP32[$currMB + 256 >> 2] = 1;
      
      
      
      HEAP32[$currMB + 332 + 12 >> 2] = 1;
      
      
      
      HEAP32[$currMB + 332 + 8 >> 2] = 1;
      
      
      
      HEAP32[$currMB + 332 + 4 >> 2] = 1;
      
      
      
      HEAP32[$currMB + 332 >> 2] = 1;
      
      
      var $36 = HEAP32[$currMB + 324 >> 2];
      
      
      
      HEAP32[$currMB + 348 + 12 >> 2] = $36;
      
      
      
      HEAP32[$currMB + 348 + 8 >> 2] = $36;
      
      
      
      HEAP32[$currMB + 348 + 4 >> 2] = $36;
      
      
      
      HEAP32[$currMB + 348 >> 2] = $36;
      
      
      var $42 = HEAP32[$currMB + 328 >> 2];
      
      
      
      HEAP32[$currMB + 364 + 12 >> 2] = $42;
      
      
      
      HEAP32[$currMB + 364 + 8 >> 2] = $42;
      
      
      
      HEAP32[$currMB + 364 + 4 >> 2] = $42;
      
      
      
      HEAP32[$currMB + 364 >> 2] = $42;
      
      
      HEAP32[$currMB + 404 >> 2] = 26;
      
      
      HEAP32[$currMB + 408 >> 2] = 26;
      
      
      
      var $dest$, $stop$, $stop4$, $value4$;
      $dest$ = $currMB + 380;
      $stop$ = $dest$ + 24;
      $value4$ = 0;
      if ($value4$ < 0) $value4$ += 256;
      $value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + $value4$ * 16777216;
      while ($dest$ % 4 !== 0 && $dest$ < $stop$) {
        HEAP8[$dest$++] = 0;
      }
      $dest$ >>= 2;
      $stop4$ = $stop$ >> 2;
      while ($dest$ < $stop4$) {
        HEAP32[$dest$++] = $value4$;
      }
      $dest$ <<= 2;
      while ($dest$ < $stop$) {
        HEAP8[$dest$++] = 0;
      }
      
      
      HEAP32[$currMB + 184 >> 2] = 0;
      
      
      HEAP32[$video + 928 >> 2] = 0;
      
      
      
      
      
      var $54 = HEAP16[HEAP32[$video + 1416 >> 2] >> 1];
      
      
      
      HEAP16[$currMB + 148 + 6 >> 1] = $54;
      
      
      
      HEAP16[$currMB + 148 + 4 >> 1] = $54;
      
      
      
      HEAP16[$currMB + 148 + 2 >> 1] = $54;
      
      
      
      HEAP16[$currMB + 148 >> 1] = $54;
      
      __Z17InterMBPredictionP12tagCommonObj($video);
      
      
      
      var $dec = HEAP32[$video + 1316 >> 2] + -1;
      HEAP32[$video + 1316 >> 2] = $dec;
      
      var $inc39 = $CurrMbAddr + 1;
      $CurrMbAddr = $inc39;
      __label__ = 3;
      continue;
    }
    $retval = 1;
  }
  var $63 = $retval;
  STACKTOP = __stackBase__;
  return $63;
  return null;
}
function __Z8DecodeMBP12tagDecObject($decvid) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  var __lastLabel__ = null;
  var $retval;
  var $decvid_addr;
  var $status;
  var $video;
  var $stream;
  var $currMB;
  var $mb_type = __stackBase__;
  var $slice_type;
  var $temp = __stackBase__ + 4;
  $decvid_addr = $decvid;
  
  
  
  $video = HEAP32[$decvid_addr >> 2];
  
  
  
  $stream = HEAP32[$decvid_addr + 4 >> 2];
  
  
  
  $currMB = HEAP32[$video + 912 >> 2];
  
  
  
  $slice_type = HEAP32[$video + 860 >> 2];
  
  
  var $9 = HEAP32[$video + 812 >> 2];
  
  
  HEAP32[$currMB + 404 >> 2] = $9;
  
  
  var $12 = HEAP32[$video + 816 >> 2];
  
  
  HEAP32[$currMB + 408 >> 2] = $12;
  
  
  if (($slice_type | 0) == 0) {
    __label__ = 1;
  } else {
    __label__ = 9;
  }
  $if_then$$if_else49$2 : do {
    if (__label__ == 1) {
      
      
      
      
      if ((HEAP32[$video + 2072 >> 2] | 0) < 0) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      if (__label__ == 2) {
        
        
        
        var $call = __Z4ue_vP15tagDecBitstreamPj($stream, $video + 2072);
      }
      
      
      
      
      if ((HEAP32[$video + 2072 >> 2] | 0) == 0) {
        __label__ = 4;
      } else {
        __label__ = 7;
      }
      if (__label__ == 4) {
        
        var $call11 = __Z4ue_vP15tagDecBitstreamPj($stream, $mb_type);
        
        
        if (HEAPU32[$mb_type >> 2] >>> 0 > 30) {
          __label__ = 5;
        } else {
          __label__ = 6;
        }
        if (__label__ == 5) {
          $retval = 0;
          __label__ = 69;
          break $if_then$$if_else49$2;
        } else if (__label__ == 6) {
          
          var $24 = HEAP32[$mb_type >> 2];
          __Z16InterpretMBModePP13tagMacroblockj($currMB, $24);
          
          
          HEAP32[$video + 2072 >> 2] = -1;
          __label__ = 12;
          break $if_then$$if_else49$2;
        }
      } else if (__label__ == 7) {
        
        
        HEAP32[$currMB + 156 >> 2] = 0;
        
        
        HEAP32[$currMB + 164 >> 2] = 10;
        
        
        HEAP32[$currMB + 328 >> 2] = 16;
        
        
        HEAP32[$currMB + 324 >> 2] = 16;
        
        
        HEAP32[$currMB + 256 >> 2] = 1;
        
        
        
        HEAP32[$currMB + 332 + 12 >> 2] = 1;
        
        
        
        HEAP32[$currMB + 332 + 8 >> 2] = 1;
        
        
        
        HEAP32[$currMB + 332 + 4 >> 2] = 1;
        
        
        
        HEAP32[$currMB + 332 >> 2] = 1;
        
        
        var $36 = HEAP32[$currMB + 324 >> 2];
        
        
        
        HEAP32[$currMB + 348 + 12 >> 2] = $36;
        
        
        
        HEAP32[$currMB + 348 + 8 >> 2] = $36;
        
        
        
        HEAP32[$currMB + 348 + 4 >> 2] = $36;
        
        
        
        HEAP32[$currMB + 348 >> 2] = $36;
        
        
        var $42 = HEAP32[$currMB + 328 >> 2];
        
        
        
        HEAP32[$currMB + 364 + 12 >> 2] = $42;
        
        
        
        HEAP32[$currMB + 364 + 8 >> 2] = $42;
        
        
        
        HEAP32[$currMB + 364 + 4 >> 2] = $42;
        
        
        
        HEAP32[$currMB + 364 >> 2] = $42;
        
        
        
        var $dest$, $stop$, $stop4$, $fast$, $value4$;
        $dest$ = $currMB + 380;
        $stop$ = $dest$ + 24;
        $value4$ = 0;
        if ($value4$ < 0) $value4$ += 256;
        $value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + $value4$ * 16777216;
        while ($dest$ % 4 !== 0 && $dest$ < $stop$) {
          HEAP8[$dest$++] = 0;
        }
        $dest$ >>= 2;
        $stop4$ = $stop$ >> 2;
        while ($dest$ < $stop4$) {
          HEAP32[$dest$++] = $value4$;
        }
        $dest$ <<= 2;
        while ($dest$ < $stop$) {
          HEAP8[$dest$++] = 0;
        }
        
        
        HEAP32[$currMB + 184 >> 2] = 0;
        
        
        HEAP32[$video + 928 >> 2] = 0;
        
        
        
        
        
        var $52 = HEAP16[HEAP32[$video + 1416 >> 2] >> 1];
        
        
        
        HEAP16[$currMB + 148 + 6 >> 1] = $52;
        
        
        
        HEAP16[$currMB + 148 + 4 >> 1] = $52;
        
        
        
        HEAP16[$currMB + 148 + 2 >> 1] = $52;
        
        
        
        HEAP16[$currMB + 148 >> 1] = $52;
        
        __Z17InterMBPredictionP12tagCommonObj($video);
        
        
        
        var $dec = HEAP32[$video + 2072 >> 2] + -1;
        HEAP32[$video + 2072 >> 2] = $dec;
        $retval = 1;
        __label__ = 69;
        break $if_then$$if_else49$2;
      }
    } else if (__label__ == 9) {
      
      var $call50 = __Z4ue_vP15tagDecBitstreamPj($stream, $mb_type);
      
      
      if (HEAPU32[$mb_type >> 2] >>> 0 > 25) {
        __label__ = 10;
      } else {
        __label__ = 11;
      }
      if (__label__ == 10) {
        $retval = 0;
        __label__ = 69;
        break $if_then$$if_else49$2;
      } else if (__label__ == 11) {
        
        var $63 = HEAP32[$mb_type >> 2];
        __Z16InterpretMBModeIP13tagMacroblockj($currMB, $63);
        __label__ = 12;
        break $if_then$$if_else49$2;
      }
    }
  } while (0);
  $return$$if_end54$18 : do {
    if (__label__ == 12) {
      
      
      
      
      if ((HEAP32[$currMB + 164 >> 2] | 0) != 2) {
        __label__ = 13;
      } else {
        __label__ = 52;
      }
      if (__label__ == 13) {
        
        
        
        
        if ((HEAP32[$currMB + 164 >> 2] | 0) == 8) {
          __label__ = 15;
        } else {
          __label__ = 14;
        }
        $if_then62$$lor_lhs_false$22 : do {
          if (__label__ == 14) {
            
            
            
            
            if ((HEAP32[$currMB + 164 >> 2] | 0) == 9) {
              __label__ = 15;
              break $if_then62$$lor_lhs_false$22;
            }
            
            
            
            var $call65 = __Z7mb_predP12tagCommonObjP13tagMacroblockP15tagDecBitstream($video, $currMB, $stream);
            $status = $call65;
            __label__ = 17;
            break $if_then62$$lor_lhs_false$22;
          }
        } while (0);
        if (__label__ == 15) {
          
          
          
          var $call63 = __Z11sub_mb_predP12tagCommonObjP13tagMacroblockP15tagDecBitstream($video, $currMB, $stream);
          $status = $call63;
        }
        
        
        if (($status | 0) != 1) {
          __label__ = 18;
        } else {
          __label__ = 19;
        }
        if (__label__ == 18) {
          
          $retval = $status;
        } else if (__label__ == 19) {
          
          
          
          
          if ((HEAP32[$currMB + 164 >> 2] | 0) != 1) {
            __label__ = 20;
          } else {
            __label__ = 23;
          }
          if (__label__ == 20) {
            
            
            var $call73 = __Z9DecodeCBPP13tagMacroblockP15tagDecBitstream($currMB, $stream);
            $status = $call73;
            
            
            if (($status | 0) != 1) {
              __label__ = 21;
            } else {
              __label__ = 22;
            }
            if (__label__ == 21) {
              
              $retval = $status;
              __label__ = 69;
              break $return$$if_end54$18;
            } else if (__label__ == 22) {

            }
          }
          
          
          
          
          if (HEAPU32[$currMB + 184 >> 2] >>> 0 > 0) {
            __label__ = 25;
          } else {
            __label__ = 24;
          }
          $if_then83$$lor_lhs_false80$37 : do {
            if (__label__ == 24) {
              
              
              
              
              if ((HEAP32[$currMB + 164 >> 2] | 0) == 1) {
                __label__ = 25;
                break $if_then83$$lor_lhs_false80$37;
              } else {
                __label__ = 49;
                break $if_then83$$lor_lhs_false80$37;
              }
            }
          } while (0);
          if (__label__ == 25) {
            
            var $call84 = __Z4se_vP15tagDecBitstreamPi($stream, $temp);
            
            
            if ((HEAP32[$temp >> 2] | 0) != 0) {
              __label__ = 26;
            } else {
              __label__ = 48;
            }
            if (__label__ == 26) {
              
              
              
              
              
              var $add87 = HEAP32[$temp >> 2] + (HEAP32[$video + 812 >> 2] + 52);
              HEAP32[$temp >> 2] = $add87;
              
              
              
              
              
              var $sub = HEAP32[$temp >> 2] - 52 * (HEAP32[$temp >> 2] * 79 >> 12);
              
              
              HEAP32[$video + 812 >> 2] = $sub;
              
              
              HEAP32[$currMB + 404 >> 2] = $sub;
              
              
              
              
              if ((HEAP32[$currMB + 404 >> 2] | 0) > 51) {
                __label__ = 28;
              } else {
                __label__ = 27;
              }
              $if_then96$$lor_lhs_false93$43 : do {
                if (__label__ == 27) {
                  
                  
                  
                  
                  if ((HEAP32[$currMB + 404 >> 2] | 0) < 0) {
                    __label__ = 28;
                    break $if_then96$$lor_lhs_false93$43;
                  } else {
                    __label__ = 38;
                    break $if_then96$$lor_lhs_false93$43;
                  }
                }
              } while (0);
              if (__label__ == 28) {
                
                
                
                
                if ((HEAP32[$video + 812 >> 2] | 0) < 51) {
                  __label__ = 29;
                } else {
                  __label__ = 30;
                }
                if (__label__ == 29) {
                  
                  
                  var $104 = HEAP32[$video + 812 >> 2];
                  __lastLabel__ = 29;
                } else if (__label__ == 30) {
                  __lastLabel__ = 30;
                }
                var $cond = __lastLabel__ == 29 ? $104 : 51;
                
                if (0 > ($cond | 0)) {
                  __label__ = 32;
                } else {
                  __label__ = 33;
                }
                if (__label__ == 32) {
                  __lastLabel__ = 32;
                } else if (__label__ == 33) {
                  
                  
                  
                  
                  if ((HEAP32[$video + 812 >> 2] | 0) < 51) {
                    __label__ = 34;
                  } else {
                    __label__ = 35;
                  }
                  if (__label__ == 34) {
                    
                    
                    var $108 = HEAP32[$video + 812 >> 2];
                    __lastLabel__ = 34;
                  } else if (__label__ == 35) {
                    __lastLabel__ = 35;
                  }
                  var $cond109 = __lastLabel__ == 34 ? $108 : 51;
                  __lastLabel__ = 36;
                }
                var $cond111 = __lastLabel__ == 32 ? 0 : $cond109;
                
                
                HEAP32[$video + 812 >> 2] = $cond111;
              }
              
              
              
              
              var $shr116 = HEAP32[$video + 812 >> 2] * 43 >> 8;
              
              
              HEAP32[$video + 820 >> 2] = $shr116;
              
              
              
              
              
              
              
              var $sub120 = HEAP32[$video + 812 >> 2] - 6 * HEAP32[$video + 820 >> 2];
              
              
              HEAP32[$video + 824 >> 2] = $sub120;
              
              
              
              
              
              
              
              
              
              
              if ((HEAP32[$video + 812 >> 2] + HEAP32[HEAP32[$video + 872 >> 2] + 152 >> 2] | 0) < 51) {
                __label__ = 39;
              } else {
                __label__ = 40;
              }
              if (__label__ == 39) {
                
                
                
                
                
                
                
                
                var $add128 = HEAP32[$video + 812 >> 2] + HEAP32[HEAP32[$video + 872 >> 2] + 152 >> 2];
                __lastLabel__ = 39;
              } else if (__label__ == 40) {
                __lastLabel__ = 40;
              }
              var $cond131 = __lastLabel__ == 39 ? $add128 : 51;
              
              if (0 > ($cond131 | 0)) {
                __label__ = 42;
              } else {
                __label__ = 43;
              }
              if (__label__ == 42) {
                __lastLabel__ = 42;
              } else if (__label__ == 43) {
                
                
                
                
                
                
                
                
                
                
                if ((HEAP32[$video + 812 >> 2] + HEAP32[HEAP32[$video + 872 >> 2] + 152 >> 2] | 0) < 51) {
                  __label__ = 44;
                } else {
                  __label__ = 45;
                }
                if (__label__ == 44) {
                  
                  
                  
                  
                  
                  
                  
                  
                  var $add144 = HEAP32[$video + 812 >> 2] + HEAP32[HEAP32[$video + 872 >> 2] + 152 >> 2];
                  __lastLabel__ = 44;
                } else if (__label__ == 45) {
                  __lastLabel__ = 45;
                }
                var $cond147 = __lastLabel__ == 44 ? $add144 : 51;
                __lastLabel__ = 46;
              }
              var $cond149 = __lastLabel__ == 42 ? 0 : $cond147;
              
              
              var $conv = HEAPU8[__ZL10mapQPi2QPc8 + $cond149 >> 0] & 255;
              
              
              HEAP32[$video + 816 >> 2] = $conv;
              
              
              HEAP32[$currMB + 408 >> 2] = $conv;
              
              
              
              
              var $shr155 = HEAP32[$video + 816 >> 2] * 43 >> 8;
              
              
              HEAP32[$video + 828 >> 2] = $shr155;
              
              
              
              
              
              
              
              var $sub159 = HEAP32[$video + 816 >> 2] - 6 * HEAP32[$video + 828 >> 2];
              
              
              HEAP32[$video + 832 >> 2] = $sub159;
            }
          }
          
          
          var $call162 = __Z8residualP12tagDecObjectP13tagMacroblock($decvid_addr, $currMB);
          $status = $call162;
          
          
          if (($status | 0) != 1) {
            __label__ = 50;
          } else {
            __label__ = 51;
          }
          if (__label__ == 50) {
            
            $retval = $status;
          } else if (__label__ == 51) {
            
            
            
            
            if ((HEAP32[$currMB + 164 >> 2] | 0) == 0) {
              __label__ = 66;
            } else {
              __label__ = 65;
            }
            $if_then210$$lor_lhs_false207$78 : do {
              if (__label__ == 65) {
                
                
                
                
                if ((HEAP32[$currMB + 164 >> 2] | 0) == 1) {
                  __label__ = 66;
                  break $if_then210$$lor_lhs_false207$78;
                }
                
                __Z17InterMBPredictionP12tagCommonObj($video);
                __label__ = 68;
                break $if_then210$$lor_lhs_false207$78;
              }
            } while (0);
            if (__label__ == 66) {
              
              var $call211 = __Z17IntraMBPredictionP12tagCommonObj($video);
            }
            $retval = 1;
          }
        }
      } else if (__label__ == 52) {
        
        
        
        
        
        if ((HEAP32[$stream + 36 >> 2] & 7 | 0) != 0) {
          __label__ = 53;
        } else {
          __label__ = 54;
        }
        if (__label__ == 53) {
          
          var $call169 = _BitstreamByteAlign($stream);
        }
        
        
        var $call171 = __Z14DecodeIntraPCMP12tagCommonObjP15tagDecBitstream($video, $stream);
        
        
        HEAP32[$currMB + 404 >> 2] = 0;
        
        
        
        
        
        
        if ((HEAP32[HEAP32[$video + 872 >> 2] + 152 >> 2] | 0) < 51) {
          __label__ = 55;
        } else {
          __label__ = 56;
        }
        if (__label__ == 55) {
          
          
          
          
          var $164 = HEAP32[HEAP32[$video + 872 >> 2] + 152 >> 2];
          __lastLabel__ = 55;
        } else if (__label__ == 56) {
          __lastLabel__ = 56;
        }
        var $cond181 = __lastLabel__ == 55 ? $164 : 51;
        
        if (0 > ($cond181 | 0)) {
          __label__ = 58;
        } else {
          __label__ = 59;
        }
        if (__label__ == 58) {
          __lastLabel__ = 58;
        } else if (__label__ == 59) {
          
          
          
          
          
          
          if ((HEAP32[HEAP32[$video + 872 >> 2] + 152 >> 2] | 0) < 51) {
            __label__ = 60;
          } else {
            __label__ = 61;
          }
          if (__label__ == 60) {
            
            
            
            
            var $170 = HEAP32[HEAP32[$video + 872 >> 2] + 152 >> 2];
            __lastLabel__ = 60;
          } else if (__label__ == 61) {
            __lastLabel__ = 61;
          }
          var $cond193 = __lastLabel__ == 60 ? $170 : 51;
          __lastLabel__ = 62;
        }
        var $cond195 = __lastLabel__ == 58 ? 0 : $cond193;
        
        
        var $conv197 = HEAPU8[__ZL10mapQPi2QPc8 + $cond195 >> 0] & 255;
        
        
        HEAP32[$currMB + 408 >> 2] = $conv197;
        
        
        HEAP32[$currMB + 184 >> 2] = 63;
        
        
        HEAP32[$video + 928 >> 2] = 65535;
        
        
        HEAP32[$currMB + 156 >> 2] = 1;
        
        
        
        var $dest$, $stop$, $stop4$, $fast$, $value4$;
        $dest$ = $currMB + 380;
        $stop$ = $dest$ + 24;
        $value4$ = 16;
        if ($value4$ < 0) $value4$ += 256;
        $value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + $value4$ * 16777216;
        while ($dest$ % 4 !== 0 && $dest$ < $stop$) {
          HEAP8[$dest$++] = 16;
        }
        $dest$ >>= 2;
        $stop4$ = $stop$ >> 2;
        while ($dest$ < $stop4$) {
          HEAP32[$dest$++] = $value4$;
        }
        $dest$ <<= 2;
        while ($dest$ < $stop$) {
          HEAP8[$dest$++] = 16;
        }
        $retval = 1;
      }
    }
  } while (0);
  var $183 = $retval;
  STACKTOP = __stackBase__;
  return $183;
  return null;
}
function __Z16InterpretMBModePP13tagMacroblockj($mblock, $mb_type) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $mblock_addr;
  var $mb_type_addr;
  $mblock_addr = $mblock;
  $mb_type_addr = $mb_type;
  
  
  HEAP32[$mblock_addr + 156 >> 2] = 0;
  
  
  if ($mb_type_addr >>> 0 < 5) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    var $3 = HEAP32[__ZZ16InterpretMBModePP13tagMacroblockjE10map2mbMode + $mb_type_addr * 4 >> 2];
    
    
    HEAP32[$mblock_addr + 164 >> 2] = $3;
    
    
    var $6 = HEAP32[__ZZ16InterpretMBModePP13tagMacroblockjE13map2PartWidth + $mb_type_addr * 4 >> 2];
    
    
    HEAP32[$mblock_addr + 324 >> 2] = $6;
    
    
    var $9 = HEAP32[__ZZ16InterpretMBModePP13tagMacroblockjE14map2PartHeight + $mb_type_addr * 4 >> 2];
    
    
    HEAP32[$mblock_addr + 328 >> 2] = $9;
    
    
    var $12 = HEAP32[__ZZ16InterpretMBModePP13tagMacroblockjE11map2NumPart + $mb_type_addr * 4 >> 2];
    
    
    HEAP32[$mblock_addr + 256 >> 2] = $12;
    
    
    
    HEAP32[$mblock_addr + 332 + 12 >> 2] = 1;
    
    
    
    HEAP32[$mblock_addr + 332 + 8 >> 2] = 1;
    
    
    
    HEAP32[$mblock_addr + 332 + 4 >> 2] = 1;
    
    
    
    HEAP32[$mblock_addr + 332 >> 2] = 1;
    
    
    var $19 = HEAP32[$mblock_addr + 324 >> 2];
    
    
    
    HEAP32[$mblock_addr + 348 + 12 >> 2] = $19;
    
    
    
    HEAP32[$mblock_addr + 348 + 8 >> 2] = $19;
    
    
    
    HEAP32[$mblock_addr + 348 + 4 >> 2] = $19;
    
    
    
    HEAP32[$mblock_addr + 348 >> 2] = $19;
    
    
    var $25 = HEAP32[$mblock_addr + 328 >> 2];
    
    
    
    HEAP32[$mblock_addr + 364 + 12 >> 2] = $25;
    
    
    
    HEAP32[$mblock_addr + 364 + 8 >> 2] = $25;
    
    
    
    HEAP32[$mblock_addr + 364 + 4 >> 2] = $25;
    
    
    
    HEAP32[$mblock_addr + 364 >> 2] = $25;
  } else if (__label__ == 2) {
    
    
    
    __Z16InterpretMBModeIP13tagMacroblockj($mblock_addr, $mb_type_addr - 5);
    
    
    
    
    var $dest$, $stop$, $stop4$, $value4$;
    $dest$ = $mblock_addr + 4;
    $stop$ = $dest$ + 64;
    $value4$ = 0;
    if ($value4$ < 0) $value4$ += 256;
    $value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + $value4$ * 16777216;
    while ($dest$ % 4 !== 0 && $dest$ < $stop$) {
      HEAP8[$dest$++] = 0;
    }
    $dest$ >>= 2;
    $stop4$ = $stop$ >> 2;
    while ($dest$ < $stop4$) {
      HEAP32[$dest$++] = $value4$;
    }
    $dest$ <<= 2;
    while ($dest$ < $stop$) {
      HEAP8[$dest$++] = 0;
    }
    
    
    
    HEAP16[$mblock_addr + 132 + 6 >> 1] = -1;
    
    
    
    HEAP16[$mblock_addr + 132 + 4 >> 1] = -1;
    
    
    
    HEAP16[$mblock_addr + 132 + 2 >> 1] = -1;
    
    
    
    HEAP16[$mblock_addr + 132 >> 1] = -1;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z16InterpretMBModeIP13tagMacroblockj($mblock, $mb_type) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $mblock_addr;
  var $mb_type_addr;
  $mblock_addr = $mblock;
  $mb_type_addr = $mb_type;
  
  
  HEAP32[$mblock_addr + 256 >> 2] = 1;
  
  
  HEAP32[$mblock_addr + 156 >> 2] = 1;
  
  
  if (($mb_type_addr | 0) == 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    HEAP32[$mblock_addr + 164 >> 2] = 0;
  } else if (__label__ == 2) {
    
    
    if ($mb_type_addr >>> 0 < 25) {
      __label__ = 3;
    } else {
      __label__ = 7;
    }
    if (__label__ == 3) {
      
      
      HEAP32[$mblock_addr + 164 >> 2] = 1;
      
      
      
      
      
      HEAP32[$mblock_addr + 188 >> 2] = $mb_type_addr - 1 & 3;
      
      
      if ($mb_type_addr >>> 0 > 12) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      if (__label__ == 4) {
        
        
        
        
        
        
        
        HEAP32[$mblock_addr + 184 >> 2] = ($mb_type_addr - 13 >>> 2 << 4) + 15;
      } else if (__label__ == 5) {
        
        
        
        
        
        
        HEAP32[$mblock_addr + 184 >> 2] = $mb_type_addr - 1 >>> 2 << 4;
      }
    } else if (__label__ == 7) {
      
      
      HEAP32[$mblock_addr + 164 >> 2] = 2;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z11sub_mb_predP12tagCommonObjP13tagMacroblockP15tagDecBitstream($video, $currMB, $stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 20;
  var __label__;
  var $retval;
  var $video_addr;
  var $currMB_addr;
  var $stream_addr;
  var $mbPartIdx;
  var $subMbPartIdx;
  var $sliceHdr;
  var $max_ref_idx;
  var $sub_mb_type = __stackBase__;
  var $code = __stackBase__ + 16;
  $video_addr = $video;
  $currMB_addr = $currMB;
  $stream_addr = $stream;
  
  
  
  $sliceHdr = HEAP32[$video_addr + 880 >> 2];
  
  
  
  
  var $dest$, $stop$, $stop4$, $value4$;
  $dest$ = $currMB_addr + 132;
  $stop$ = $dest$ + 8;
  $value4$ = 0;
  if ($value4$ < 0) $value4$ += 256;
  $value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + $value4$ * 16777216;
  while ($dest$ % 4 !== 0 && $dest$ < $stop$) {
    HEAP8[$dest$++] = 0;
  }
  $dest$ >>= 2;
  $stop4$ = $stop$ >> 2;
  while ($dest$ < $stop4$) {
    HEAP32[$dest$++] = $value4$;
  }
  $dest$ <<= 2;
  while ($dest$ < $stop$) {
    HEAP8[$dest$++] = 0;
  }
  $mbPartIdx = 0;
  $for_cond$2 : while (1) {
    
    var $cmp = ($mbPartIdx | 0) < 4;
    if (!$cmp) {
      __label__ = 6;
      break $for_cond$2;
    }
    
    
    var $arrayidx = $sub_mb_type + $mbPartIdx * 4;
    var $call = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $arrayidx);
    
    
    
    
    if (HEAPU32[$sub_mb_type + $mbPartIdx * 4 >> 2] >>> 0 > 3) {
      __label__ = 3;
      break $for_cond$2;
    }
    
    var $inc = $mbPartIdx + 1;
    $mbPartIdx = $inc;
    __label__ = 1;
    continue $for_cond$2;
  }
  $for_end$$if_then$7 : do {
    if (__label__ == 6) {
      
      var $arraydecay4 = $sub_mb_type;
      __Z19InterpretSubMBModePP13tagMacroblockPj($currMB_addr, $arraydecay4);
      
      
      
      
      $max_ref_idx = HEAP32[$video_addr + 2064 >> 2] - 1;
      
      
      
      
      if (HEAPU32[$sliceHdr + 56 >> 2] >>> 0 > 0) {
        __label__ = 7;
      } else {
        __label__ = 15;
      }
      $land_lhs_true$$if_end20$9 : do {
        if (__label__ == 7) {
          
          
          
          var $cmp6 = (HEAP32[$currMB_addr + 164 >> 2] | 0) != 9;
          if (!$cmp6) {
            __label__ = 15;
            break $land_lhs_true$$if_end20$9;
          }
          $mbPartIdx = 0;
          while (1) {
            
            var $cmp9 = ($mbPartIdx | 0) < 4;
            if (!$cmp9) {
              __label__ = 14;
              break;
            }
            
            
            var $call11 = __Z4te_vP15tagDecBitstreamPjj($stream_addr, $code, $max_ref_idx);
            
            
            
            if (HEAPU32[$code >> 2] >>> 0 > $max_ref_idx >>> 0) {
              __label__ = 11;
              break;
            }
            
            
            
            
            
            
            HEAP16[$currMB_addr + 132 + $mbPartIdx * 2 >> 1] = HEAP32[$code >> 2] & 65535;
            
            var $inc18 = $mbPartIdx + 1;
            $mbPartIdx = $inc18;
            __label__ = 9;
            continue;
          }
          if (__label__ == 14) {

          } else if (__label__ == 11) {
            $retval = 0;
            __label__ = 24;
            break $for_end$$if_then$7;
          }
        }
      } while (0);
      
      
      
      $max_ref_idx = HEAP32[$sliceHdr + 60 >> 2];
      $mbPartIdx = 0;
      $for_cond21$21 : while (1) {
        
        var $cmp22 = ($mbPartIdx | 0) < 4;
        if (!$cmp22) {
          __label__ = 23;
          break $for_cond21$21;
        }
        $subMbPartIdx = 0;
        while (1) {
          
          
          
          
          
          
          var $cmp26 = ($subMbPartIdx | 0) < (HEAP32[$currMB_addr + 332 + $mbPartIdx * 4 >> 2] | 0);
          if (!$cmp26) {
            __label__ = 21;
            break;
          }
          
          
          
          
          
          
          
          
          var $call31 = __Z4se_vP15tagDecBitstreamPi($stream_addr, $video_addr + 932 + $mbPartIdx * 32 + $subMbPartIdx * 8);
          
          
          
          
          
          
          
          
          var $call36 = __Z4se_vP15tagDecBitstreamPi($stream_addr, $video_addr + 932 + $mbPartIdx * 32 + $subMbPartIdx * 8 + 4);
          
          var $inc38 = $subMbPartIdx + 1;
          $subMbPartIdx = $inc38;
          __label__ = 18;
          continue;
        }
        
        
        
        
        
        var $idxprom = (tempInt = HEAP16[$currMB_addr + 132 + $mbPartIdx * 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
        
        
        
        
        
        var $47 = HEAP16[HEAP32[$video_addr + 1416 + $idxprom * 4 >> 2] >> 1];
        
        
        
        
        HEAP16[$currMB_addr + 148 + $mbPartIdx * 2 >> 1] = $47;
        
        var $inc46 = $mbPartIdx + 1;
        $mbPartIdx = $inc46;
        __label__ = 16;
        continue $for_cond21$21;
      }
      $retval = 1;
    } else if (__label__ == 3) {
      $retval = 0;
    }
  } while (0);
  var $51 = $retval;
  STACKTOP = __stackBase__;
  return $51;
  return null;
}
function __Z7mb_predP12tagCommonObjP13tagMacroblockP15tagDecBitstream($video, $currMB, $stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $retval;
  var $video_addr;
  var $currMB_addr;
  var $stream_addr;
  var $mbPartIdx;
  var $sliceHdr;
  var $max_ref_idx;
  var $temp_0;
  var $temp_1;
  var $code = __stackBase__;
  $video_addr = $video;
  $currMB_addr = $currMB;
  $stream_addr = $stream;
  
  
  
  $sliceHdr = HEAP32[$video_addr + 880 >> 2];
  
  
  
  
  if ((HEAP32[$currMB_addr + 164 >> 2] | 0) == 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $if_then$$lor_lhs_false$2 : do {
    if (__label__ == 1) {
      
      
      
      
      if ((HEAP32[$currMB_addr + 164 >> 2] | 0) == 1) {
        __label__ = 2;
        break $if_then$$lor_lhs_false$2;
      }
      
      
      
      
      var $dest$, $stop$, $stop4$, $value4$;
      $dest$ = $currMB_addr + 132;
      $stop$ = $dest$ + 8;
      $value4$ = 0;
      if ($value4$ < 0) $value4$ += 256;
      $value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + $value4$ * 16777216;
      while ($dest$ % 4 !== 0 && $dest$ < $stop$) {
        HEAP8[$dest$++] = 0;
      }
      $dest$ >>= 2;
      $stop4$ = $stop$ >> 2;
      while ($dest$ < $stop4$) {
        HEAP32[$dest$++] = $value4$;
      }
      $dest$ <<= 2;
      while ($dest$ < $stop$) {
        HEAP8[$dest$++] = 0;
      }
      
      
      
      
      $max_ref_idx = HEAP32[$video_addr + 2064 >> 2] - 1;
      
      
      
      
      if (HEAPU32[$sliceHdr + 56 >> 2] >>> 0 > 0) {
        __label__ = 19;
      } else {
        __label__ = 26;
      }
      if (__label__ == 19) {
        $mbPartIdx = 0;
        while (1) {
          
          
          
          
          var $cmp49 = ($mbPartIdx | 0) < (HEAP32[$currMB_addr + 256 >> 2] | 0);
          if (!$cmp49) {
            __label__ = 25;
            break;
          }
          
          
          var $call50 = __Z4te_vP15tagDecBitstreamPjj($stream_addr, $code, $max_ref_idx);
          
          
          
          if (HEAPU32[$code >> 2] >>> 0 > $max_ref_idx >>> 0) {
            __label__ = 22;
            break;
          }
          
          
          
          
          
          
          HEAP16[$currMB_addr + 132 + $mbPartIdx * 2 >> 1] = HEAP32[$code >> 2] & 65535;
          
          var $inc = $mbPartIdx + 1;
          $mbPartIdx = $inc;
          __label__ = 20;
          continue;
        }
        if (__label__ == 25) {

        } else if (__label__ == 22) {
          $retval = 0;
          __label__ = 32;
          break $if_then$$lor_lhs_false$2;
        }
      }
      
      
      
      
      
      
      $temp_0 = __ZL13mbPart2raster + (HEAP32[$currMB_addr + 164 >> 2] - 5) * 16;
      
      
      
      $temp_1 = $currMB_addr + 132 + 6;
      var $86 = $temp_0;
      var $incdec_ptr = $86 + 4;
      $temp_0 = $incdec_ptr;
      
      
      
      
      var $89 = HEAP16[$currMB_addr + 132 + HEAP32[$86 >> 2] * 2 >> 1];
      var $90 = $temp_1;
      var $incdec_ptr65 = $90 + -2;
      $temp_1 = $incdec_ptr65;
      HEAP16[$90 >> 1] = $89;
      var $91 = $temp_0;
      var $incdec_ptr66 = $91 + 4;
      $temp_0 = $incdec_ptr66;
      
      
      
      
      var $94 = HEAP16[$currMB_addr + 132 + HEAP32[$91 >> 2] * 2 >> 1];
      var $95 = $temp_1;
      var $incdec_ptr69 = $95 + -2;
      $temp_1 = $incdec_ptr69;
      HEAP16[$95 >> 1] = $94;
      var $96 = $temp_0;
      var $incdec_ptr70 = $96 + 4;
      $temp_0 = $incdec_ptr70;
      
      
      
      
      var $99 = HEAP16[$currMB_addr + 132 + HEAP32[$96 >> 2] * 2 >> 1];
      var $100 = $temp_1;
      var $incdec_ptr73 = $100 + -2;
      $temp_1 = $incdec_ptr73;
      HEAP16[$100 >> 1] = $99;
      var $101 = $temp_0;
      var $incdec_ptr74 = $101 + 4;
      $temp_0 = $incdec_ptr74;
      
      
      
      
      var $104 = HEAP16[$currMB_addr + 132 + HEAP32[$101 >> 2] * 2 >> 1];
      var $105 = $temp_1;
      var $incdec_ptr77 = $105 + -2;
      $temp_1 = $incdec_ptr77;
      HEAP16[$105 >> 1] = $104;
      
      
      
      
      var $idxprom = (tempInt = HEAP16[$currMB_addr + 132 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      
      
      
      
      var $110 = HEAP16[HEAP32[$video_addr + 1416 + $idxprom * 4 >> 2] >> 1];
      
      
      
      HEAP16[$currMB_addr + 148 >> 1] = $110;
      
      
      
      
      var $idxprom85 = (tempInt = HEAP16[$currMB_addr + 132 + 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      
      
      
      
      var $116 = HEAP16[HEAP32[$video_addr + 1416 + $idxprom85 * 4 >> 2] >> 1];
      
      
      
      HEAP16[$currMB_addr + 148 + 2 >> 1] = $116;
      
      
      
      
      var $idxprom93 = (tempInt = HEAP16[$currMB_addr + 132 + 4 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      
      
      
      
      var $122 = HEAP16[HEAP32[$video_addr + 1416 + $idxprom93 * 4 >> 2] >> 1];
      
      
      
      HEAP16[$currMB_addr + 148 + 4 >> 1] = $122;
      
      
      
      
      var $idxprom101 = (tempInt = HEAP16[$currMB_addr + 132 + 6 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      
      
      
      
      var $128 = HEAP16[HEAP32[$video_addr + 1416 + $idxprom101 * 4 >> 2] >> 1];
      
      
      
      HEAP16[$currMB_addr + 148 + 6 >> 1] = $128;
      
      
      
      $max_ref_idx = HEAP32[$sliceHdr + 60 >> 2];
      $mbPartIdx = 0;
      while (1) {
        
        
        
        
        var $cmp109 = ($mbPartIdx | 0) < (HEAP32[$currMB_addr + 256 >> 2] | 0);
        if (!$cmp109) {
          __label__ = 30;
          break;
        }
        
        
        
        
        
        
        
        var $call114 = __Z4se_vP15tagDecBitstreamPi($stream_addr, $video_addr + 932 + $mbPartIdx * 32);
        
        
        
        
        
        
        
        var $call119 = __Z4se_vP15tagDecBitstreamPi($stream_addr, $video_addr + 932 + $mbPartIdx * 32 + 4);
        
        var $inc121 = $mbPartIdx + 1;
        $mbPartIdx = $inc121;
        __label__ = 27;
        continue;
      }
      __label__ = 31;
      break $if_then$$lor_lhs_false$2;
    }
  } while (0);
  $if_then$$return$$if_end123$21 : do {
    if (__label__ == 2) {
      
      
      HEAP32[$video_addr + 1232 >> 2] = 0;
      
      
      HEAP32[$video_addr + 1228 >> 2] = 0;
      
      
      HEAP32[$video_addr + 1224 >> 2] = 0;
      
      
      HEAP32[$video_addr + 1220 >> 2] = 0;
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$video_addr + 872 >> 2] + 160 >> 2] | 0) != 0) {
        __label__ = 4;
      } else {
        __label__ = 3;
      }
      if (__label__ == 4) {
        
        
        
        
        if ((HEAP32[$video_addr + 1204 >> 2] | 0) != 0) {
          __label__ = 5;
        } else {
          __label__ = 6;
        }
        if (__label__ == 5) {
          
          
          
          
          
          
          
          
          var $31 = HEAP32[HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1188 >> 2] + 156 >> 2];
          
          
          HEAP32[$video_addr + 1220 >> 2] = $31;
        }
        
        
        
        
        if ((HEAP32[$video_addr + 1208 >> 2] | 0) != 0) {
          __label__ = 7;
        } else {
          __label__ = 8;
        }
        if (__label__ == 7) {
          
          
          
          
          
          
          
          
          var $39 = HEAP32[HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1192 >> 2] + 156 >> 2];
          
          
          HEAP32[$video_addr + 1224 >> 2] = $39;
        }
        
        
        
        
        if ((HEAP32[$video_addr + 1212 >> 2] | 0) != 0) {
          __label__ = 9;
        } else {
          __label__ = 10;
        }
        if (__label__ == 9) {
          
          
          
          
          
          
          
          
          var $47 = HEAP32[HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1196 >> 2] + 156 >> 2];
          
          
          HEAP32[$video_addr + 1228 >> 2] = $47;
        }
        
        
        
        
        if ((HEAP32[$video_addr + 1216 >> 2] | 0) != 0) {
          __label__ = 11;
        } else {
          __label__ = 12;
        }
        if (__label__ == 11) {
          
          
          
          
          
          
          
          
          var $55 = HEAP32[HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1200 >> 2] + 156 >> 2];
          
          
          HEAP32[$video_addr + 1232 >> 2] = $55;
        }
      } else if (__label__ == 3) {
        
        
        var $14 = HEAP32[$video_addr + 1204 >> 2];
        
        
        HEAP32[$video_addr + 1220 >> 2] = $14;
        
        
        var $17 = HEAP32[$video_addr + 1208 >> 2];
        
        
        HEAP32[$video_addr + 1224 >> 2] = $17;
        
        
        var $20 = HEAP32[$video_addr + 1212 >> 2];
        
        
        HEAP32[$video_addr + 1228 >> 2] = $20;
        
        
        var $23 = HEAP32[$video_addr + 1216 >> 2];
        
        
        HEAP32[$video_addr + 1232 >> 2] = $23;
      }
      
      
      
      
      if ((HEAP32[$currMB_addr + 164 >> 2] | 0) == 0) {
        __label__ = 14;
      } else {
        __label__ = 15;
      }
      if (__label__ == 14) {
        
        
        
        var $call = __Z18DecodeIntra4x4ModeP12tagCommonObjP13tagMacroblockP15tagDecBitstream($video_addr, $currMB_addr, $stream_addr);
      }
      
      var $call42 = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $code);
      
      
      if (HEAPU32[$code >> 2] >>> 0 > 3) {
        __label__ = 16;
      } else {
        __label__ = 17;
      }
      if (__label__ == 16) {
        $retval = 0;
        __label__ = 32;
        break $if_then$$return$$if_end123$21;
      } else if (__label__ == 17) {
        var $64 = HEAP32[$code >> 2];
        
        
        HEAP32[$currMB_addr >> 2] = $64;
        __label__ = 31;
        break $if_then$$return$$if_end123$21;
      }
    }
  } while (0);
  if (__label__ == 31) {
    $retval = 1;
  }
  var $142 = $retval;
  STACKTOP = __stackBase__;
  return $142;
  return null;
}
function __Z18DecodeIntra4x4ModeP12tagCommonObjP13tagMacroblockP15tagDecBitstream($video, $currMB, $stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 128;
  var __label__;
  var $video_addr;
  var $currMB_addr;
  var $stream_addr;
  var $intra4x4PredModeA;
  var $intra4x4PredModeB;
  var $predIntra4x4PredMode;
  var $component;
  var $SubBlock_indx;
  var $block_x;
  var $block_y;
  var $dcOnlyPredictionFlag;
  var $prev_intra4x4_pred_mode_flag = __stackBase__;
  var $rem_intra4x4_pred_mode = __stackBase__ + 64;
  var $bindx;
  $video_addr = $video;
  $currMB_addr = $currMB;
  $stream_addr = $stream;
  $intra4x4PredModeA = 0;
  $intra4x4PredModeB = 0;
  $predIntra4x4PredMode = 0;
  $bindx = 0;
  $component = 0;
  $for_cond$2 : while (1) {
    
    var $cmp = ($component | 0) < 4;
    if (!$cmp) {
      __label__ = 36;
      break $for_cond$2;
    }
    
    
    
    $block_x = ($component & 1) << 1;
    
    
    
    $block_y = $component >> 1 << 1;
    $SubBlock_indx = 0;
    while (1) {
      
      var $cmp3 = ($SubBlock_indx | 0) < 4;
      if (!$cmp3) {
        __label__ = 34;
        break;
      }
      
      
      var $arrayidx = $prev_intra4x4_pred_mode_flag + $bindx * 4;
      var $call = _BitstreamRead1Bit($stream_addr, $arrayidx);
      
      
      
      
      if ((HEAP32[$prev_intra4x4_pred_mode_flag + $bindx * 4 >> 2] | 0) != 0) {
        __label__ = 6;
      } else {
        __label__ = 5;
      }
      if (__label__ == 5) {
        
        
        var $arrayidx6 = $rem_intra4x4_pred_mode + $bindx * 4;
        var $call7 = _BitstreamReadBits($stream_addr, 3, $arrayidx6);
      }
      $dcOnlyPredictionFlag = 0;
      
      
      if (($block_x | 0) > 0) {
        __label__ = 7;
      } else {
        __label__ = 8;
      }
      if (__label__ == 7) {
        
        
        
        
        
        
        
        
        
        $intra4x4PredModeA = HEAP32[$currMB_addr + 192 + (($block_y << 2) + $block_x - 1) * 4 >> 2];
      } else if (__label__ == 8) {
        
        
        
        
        if ((HEAP32[$video_addr + 1220 >> 2] | 0) != 0) {
          __label__ = 9;
        } else {
          __label__ = 13;
        }
        if (__label__ == 9) {
          
          
          
          
          
          
          
          
          
          
          if ((HEAP32[HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1188 >> 2] + 164 >> 2] | 0) == 0) {
            __label__ = 10;
          } else {
            __label__ = 11;
          }
          if (__label__ == 10) {
            
            
            
            
            
            
            
            
            
            
            
            
            
            $intra4x4PredModeA = HEAP32[HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1188 >> 2] + 192 + (($block_y << 2) + 3) * 4 >> 2];
          } else if (__label__ == 11) {
            $intra4x4PredModeA = 2;
          }
        } else if (__label__ == 13) {
          $dcOnlyPredictionFlag = 1;
        }
      }
      
      
      if (($block_y | 0) > 0) {
        __label__ = 16;
      } else {
        __label__ = 17;
      }
      if (__label__ == 16) {
        
        
        
        
        
        
        
        
        
        $intra4x4PredModeB = HEAP32[$currMB_addr + 192 + (($block_y - 1 << 2) + $block_x) * 4 >> 2];
      } else if (__label__ == 17) {
        
        
        
        
        if ((HEAP32[$video_addr + 1224 >> 2] | 0) != 0) {
          __label__ = 18;
        } else {
          __label__ = 22;
        }
        if (__label__ == 18) {
          
          
          
          
          
          
          
          
          
          
          if ((HEAP32[HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1192 >> 2] + 164 >> 2] | 0) == 0) {
            __label__ = 19;
          } else {
            __label__ = 20;
          }
          if (__label__ == 19) {
            
            
            
            
            
            
            
            
            
            
            
            
            $intra4x4PredModeB = HEAP32[HEAP32[$video_addr + 908 >> 2] + 420 * HEAP32[$video_addr + 1192 >> 2] + 192 + (12 + $block_x) * 4 >> 2];
          } else if (__label__ == 20) {
            $intra4x4PredModeB = 2;
          }
        } else if (__label__ == 22) {
          $dcOnlyPredictionFlag = 1;
        }
      }
      
      
      if (($dcOnlyPredictionFlag | 0) != 0) {
        __label__ = 25;
      } else {
        __label__ = 26;
      }
      if (__label__ == 25) {
        $intra4x4PredModeB = 2;
        $intra4x4PredModeA = 2;
      }
      
      
      
      
      
      var $cond = ($intra4x4PredModeA | 0) < ($intra4x4PredModeB | 0) ? $intra4x4PredModeA : $intra4x4PredModeB;
      $predIntra4x4PredMode = $cond;
      
      
      
      
      if ((HEAP32[$prev_intra4x4_pred_mode_flag + $bindx * 4 >> 2] | 0) != 0) {
        __label__ = 27;
      } else {
        __label__ = 28;
      }
      if (__label__ == 27) {
        
        
        
        
        
        
        
        
        HEAP32[$currMB_addr + 192 + (($block_y << 2) + $block_x) * 4 >> 2] = $predIntra4x4PredMode;
      } else if (__label__ == 28) {
        
        
        
        
        
        if ((HEAP32[$rem_intra4x4_pred_mode + $bindx * 4 >> 2] | 0) < ($predIntra4x4PredMode | 0)) {
          __label__ = 29;
        } else {
          __label__ = 30;
        }
        if (__label__ == 29) {
          
          
          var $61 = HEAP32[$rem_intra4x4_pred_mode + $bindx * 4 >> 2];
          
          
          
          
          
          
          
          HEAP32[$currMB_addr + 192 + (($block_y << 2) + $block_x) * 4 >> 2] = $61;
        } else if (__label__ == 30) {
          
          
          
          var $add77 = HEAP32[$rem_intra4x4_pred_mode + $bindx * 4 >> 2] + 1;
          
          
          
          
          
          
          
          HEAP32[$currMB_addr + 192 + (($block_y << 2) + $block_x) * 4 >> 2] = $add77;
        }
      }
      
      var $inc = $bindx + 1;
      $bindx = $inc;
      
      
      
      var $add85 = $block_y + ($SubBlock_indx & 1);
      $block_y = $add85;
      
      
      
      
      
      var $add88 = $block_x + (1 - 2 * ($SubBlock_indx & 1));
      $block_x = $add88;
      
      var $inc89 = $SubBlock_indx + 1;
      $SubBlock_indx = $inc89;
      __label__ = 3;
      continue;
    }
    
    var $inc91 = $component + 1;
    $component = $inc91;
    __label__ = 1;
    continue $for_cond$2;
  }
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z19InterpretSubMBModePP13tagMacroblockPj($mblock, $sub_mb_type) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $mblock_addr;
  var $sub_mb_type_addr;
  var $i;
  var $sub_type;
  $mblock_addr = $mblock;
  $sub_mb_type_addr = $sub_mb_type;
  $i = 0;
  while (1) {
    
    var $cmp = ($i | 0) < 4;
    if (!$cmp) {
      __label__ = 4;
      break;
    }
    
    
    
    
    $sub_type = HEAP32[$sub_mb_type_addr + 4 * $i >> 2];
    
    
    var $5 = HEAP32[__ZZ19InterpretSubMBModePP13tagMacroblockPjE14map2numSubPart + $sub_type * 4 >> 2];
    
    
    
    
    HEAP32[$mblock_addr + 332 + $i * 4 >> 2] = $5;
    
    
    var $9 = HEAP32[__ZZ19InterpretSubMBModePP13tagMacroblockPjE16map2subPartWidth + $sub_type * 4 >> 2];
    
    
    
    
    HEAP32[$mblock_addr + 348 + $i * 4 >> 2] = $9;
    
    
    var $13 = HEAP32[__ZZ19InterpretSubMBModePP13tagMacroblockPjE17map2subPartHeight + $sub_type * 4 >> 2];
    
    
    
    
    HEAP32[$mblock_addr + 364 + $i * 4 >> 2] = $13;
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 1;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z16InterpretMBModeBP13tagMacroblockj($mblock, $mb_type) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $mblock_addr;
  var $mb_type_addr;
  $mblock_addr = $mblock;
  $mb_type_addr = $mb_type;
  
  
  HEAP32[$mblock_addr + 156 >> 2] = 0;
  
  
  if ($mb_type_addr >>> 0 < 23) {
    __label__ = 1;
  } else {
    __label__ = 4;
  }
  if (__label__ == 1) {
    
    
    var $3 = HEAP32[__ZZ16InterpretMBModeBP13tagMacroblockjE10map2mbMode + $mb_type_addr * 4 >> 2];
    
    
    HEAP32[$mblock_addr + 164 >> 2] = $3;
    
    
    var $6 = HEAP32[__ZZ16InterpretMBModeBP13tagMacroblockjE11map2NumPart + $mb_type_addr * 4 >> 2];
    
    
    HEAP32[$mblock_addr + 256 >> 2] = $6;
    
    
    var $9 = HEAP32[__ZZ16InterpretMBModeBP13tagMacroblockjE13map2PredMode1 + $mb_type_addr * 4 >> 2];
    
    
    
    
    HEAP32[$mblock_addr + 260 >> 2] = $9;
    
    
    
    
    if ((HEAP32[$mblock_addr + 256 >> 2] | 0) > 1) {
      __label__ = 2;
    } else {
      __label__ = 3;
    }
    if (__label__ == 2) {
      
      
      var $14 = HEAP32[__ZZ16InterpretMBModeBP13tagMacroblockjE13map2PredMode2 + $mb_type_addr * 4 >> 2];
      
      
      
      
      HEAP32[$mblock_addr + 260 + 16 >> 2] = $14;
    }
    
    
    var $17 = HEAP32[__ZZ16InterpretMBModeBP13tagMacroblockjE13map2PartWidth + $mb_type_addr * 4 >> 2];
    
    
    HEAP32[$mblock_addr + 324 >> 2] = $17;
    
    
    var $20 = HEAP32[__ZZ16InterpretMBModeBP13tagMacroblockjE14map2PartHeight + $mb_type_addr * 4 >> 2];
    
    
    HEAP32[$mblock_addr + 328 >> 2] = $20;
  } else if (__label__ == 4) {
    
    
    
    __Z16InterpretMBModeIP13tagMacroblockj($mblock_addr, $mb_type_addr - 23);
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z17InterpretMBModeSIP13tagMacroblockj($mblock, $mb_type) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $mblock_addr;
  var $mb_type_addr;
  $mblock_addr = $mblock;
  $mb_type_addr = $mb_type;
  
  
  HEAP32[$mblock_addr + 156 >> 2] = 1;
  
  
  if (($mb_type_addr | 0) == 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    HEAP32[$mblock_addr + 164 >> 2] = 3;
  } else if (__label__ == 2) {
    
    
    
    __Z16InterpretMBModeIP13tagMacroblockj($mblock_addr, $mb_type_addr - 1);
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z19InterpretSubMBModeBP13tagMacroblockPj($mblock, $sub_mb_type) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $mblock_addr;
  var $sub_mb_type_addr;
  var $i;
  var $j;
  var $sub_type;
  $mblock_addr = $mblock;
  $sub_mb_type_addr = $sub_mb_type;
  $i = 0;
  $for_cond$2 : while (1) {
    
    var $cmp = ($i | 0) < 4;
    if (!$cmp) {
      __label__ = 8;
      break $for_cond$2;
    }
    
    
    
    
    $sub_type = HEAP32[$sub_mb_type_addr + 4 * $i >> 2];
    
    
    var $5 = HEAP32[__ZZ19InterpretSubMBModeBP13tagMacroblockPjE13map2subMbMode + $sub_type * 4 >> 2];
    
    
    
    
    HEAP32[$mblock_addr + 168 + $i * 4 >> 2] = $5;
    
    
    var $9 = HEAP32[__ZZ19InterpretSubMBModeBP13tagMacroblockPjE14map2numSubPart + $sub_type * 4 >> 2];
    
    
    
    
    HEAP32[$mblock_addr + 332 + $i * 4 >> 2] = $9;
    
    
    var $13 = HEAP32[__ZZ19InterpretSubMBModeBP13tagMacroblockPjE16map2subPartWidth + $sub_type * 4 >> 2];
    
    
    
    
    HEAP32[$mblock_addr + 348 + $i * 4 >> 2] = $13;
    
    
    var $17 = HEAP32[__ZZ19InterpretSubMBModeBP13tagMacroblockPjE17map2subPartHeight + $sub_type * 4 >> 2];
    
    
    
    
    HEAP32[$mblock_addr + 364 + $i * 4 >> 2] = $17;
    $j = 0;
    while (1) {
      
      var $cmp10 = ($j | 0) < 4;
      if (!$cmp10) {
        __label__ = 6;
        break;
      }
      
      
      var $22 = HEAP32[__ZZ19InterpretSubMBModeBP13tagMacroblockPjE12map2predMode + $sub_type * 4 >> 2];
      
      
      
      
      
      
      HEAP32[$mblock_addr + 260 + $i * 16 + $j * 4 >> 2] = $22;
      
      var $inc = $j + 1;
      $j = $inc;
      __label__ = 3;
      continue;
    }
    
    var $inc16 = $i + 1;
    $i = $inc16;
    __label__ = 1;
    continue $for_cond$2;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z14DecodeIntraPCMP12tagCommonObjP15tagDecBitstream($video, $stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  var $retval;
  var $video_addr;
  var $stream_addr;
  var $status;
  var $j;
  var $mb_x;
  var $mb_y;
  var $offset1;
  var $pDst;
  var $byte0 = __stackBase__;
  var $byte1 = __stackBase__ + 4;
  var $pitch;
  $video_addr = $video;
  $stream_addr = $stream;
  
  
  
  $mb_x = HEAP32[$video_addr + 920 >> 2];
  
  
  
  $mb_y = HEAP32[$video_addr + 924 >> 2];
  
  
  
  
  
  
  
  
  
  $offset1 = ($mb_x << 4) + ($mb_y << 4) * HEAP32[$video_addr + 1252 >> 2];
  
  
  
  
  
  
  
  $pDst = HEAP32[HEAP32[$video_addr + 884 >> 2] + 4 >> 2] + $offset1;
  
  
  
  
  
  $pitch = HEAP32[HEAP32[$video_addr + 884 >> 2] + 48 >> 2];
  $j = 16;
  $while_cond$2 : while (1) {
    
    var $cmp = ($j | 0) > 0;
    if (!$cmp) {
      __label__ = 5;
      break $while_cond$2;
    }
    
    var $call = _BitstreamReadBits($stream_addr, 8, $byte0);
    $status = $call;
    
    var $call6 = _BitstreamReadBits($stream_addr, 8, $byte1);
    $status = $call6;
    
    
    
    var $or = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 8;
    HEAP32[$byte0 >> 2] = $or;
    
    var $call8 = _BitstreamReadBits($stream_addr, 8, $byte1);
    $status = $call8;
    
    
    
    var $or10 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 16;
    HEAP32[$byte0 >> 2] = $or10;
    
    var $call11 = _BitstreamReadBits($stream_addr, 8, $byte1);
    $status = $call11;
    
    
    
    var $or13 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 24;
    HEAP32[$byte0 >> 2] = $or13;
    var $26 = HEAP32[$byte0 >> 2];
    
    
    HEAP32[$pDst >> 2] = $26;
    
    var $call14 = _BitstreamReadBits($stream_addr, 8, $byte0);
    $status = $call14;
    
    var $call15 = _BitstreamReadBits($stream_addr, 8, $byte1);
    $status = $call15;
    
    
    
    var $or17 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 8;
    HEAP32[$byte0 >> 2] = $or17;
    
    var $call18 = _BitstreamReadBits($stream_addr, 8, $byte1);
    $status = $call18;
    
    
    
    var $or20 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 16;
    HEAP32[$byte0 >> 2] = $or20;
    
    var $call21 = _BitstreamReadBits($stream_addr, 8, $byte1);
    $status = $call21;
    
    
    
    var $or23 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 24;
    HEAP32[$byte0 >> 2] = $or23;
    var $39 = HEAP32[$byte0 >> 2];
    
    
    
    HEAP32[$pDst + 4 >> 2] = $39;
    
    var $call25 = _BitstreamReadBits($stream_addr, 8, $byte0);
    $status = $call25;
    
    var $call26 = _BitstreamReadBits($stream_addr, 8, $byte1);
    $status = $call26;
    
    
    
    var $or28 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 8;
    HEAP32[$byte0 >> 2] = $or28;
    
    var $call29 = _BitstreamReadBits($stream_addr, 8, $byte1);
    $status = $call29;
    
    
    
    var $or31 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 16;
    HEAP32[$byte0 >> 2] = $or31;
    
    var $call32 = _BitstreamReadBits($stream_addr, 8, $byte1);
    $status = $call32;
    
    
    
    var $or34 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 24;
    HEAP32[$byte0 >> 2] = $or34;
    var $52 = HEAP32[$byte0 >> 2];
    
    
    
    HEAP32[$pDst + 8 >> 2] = $52;
    
    var $call36 = _BitstreamReadBits($stream_addr, 8, $byte0);
    $status = $call36;
    
    var $call37 = _BitstreamReadBits($stream_addr, 8, $byte1);
    $status = $call37;
    
    
    
    var $or39 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 8;
    HEAP32[$byte0 >> 2] = $or39;
    
    var $call40 = _BitstreamReadBits($stream_addr, 8, $byte1);
    $status = $call40;
    
    
    
    var $or42 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 16;
    HEAP32[$byte0 >> 2] = $or42;
    
    var $call43 = _BitstreamReadBits($stream_addr, 8, $byte1);
    $status = $call43;
    
    
    
    var $or45 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 24;
    HEAP32[$byte0 >> 2] = $or45;
    var $65 = HEAP32[$byte0 >> 2];
    
    
    
    HEAP32[$pDst + 12 >> 2] = $65;
    
    var $dec = $j + -1;
    $j = $dec;
    
    
    var $add_ptr47 = $pDst + $pitch;
    $pDst = $add_ptr47;
    
    
    if (($status | 0) != 1) {
      __label__ = 3;
      break $while_cond$2;
    }
    __label__ = 1;
    continue $while_cond$2;
  }
  if (__label__ == 5) {
    
    
    
    
    var $add50 = ($offset1 >> 2) + ($mb_x << 2);
    $offset1 = $add50;
    
    
    
    
    
    
    
    $pDst = HEAP32[HEAP32[$video_addr + 884 >> 2] + 8 >> 2] + $offset1;
    
    var $shr53 = $pitch >> 1;
    $pitch = $shr53;
    $j = 8;
    $while_cond54$8 : while (1) {
      
      var $cmp55 = ($j | 0) > 0;
      if (!$cmp55) {
        __label__ = 10;
        break $while_cond54$8;
      }
      
      var $call57 = _BitstreamReadBits($stream_addr, 8, $byte0);
      $status = $call57;
      
      var $call58 = _BitstreamReadBits($stream_addr, 8, $byte1);
      $status = $call58;
      
      
      
      var $or60 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 8;
      HEAP32[$byte0 >> 2] = $or60;
      
      var $call61 = _BitstreamReadBits($stream_addr, 8, $byte1);
      $status = $call61;
      
      
      
      var $or63 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 16;
      HEAP32[$byte0 >> 2] = $or63;
      
      var $call64 = _BitstreamReadBits($stream_addr, 8, $byte1);
      $status = $call64;
      
      
      
      var $or66 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 24;
      HEAP32[$byte0 >> 2] = $or66;
      var $91 = HEAP32[$byte0 >> 2];
      
      
      HEAP32[$pDst >> 2] = $91;
      
      var $call67 = _BitstreamReadBits($stream_addr, 8, $byte0);
      $status = $call67;
      
      var $call68 = _BitstreamReadBits($stream_addr, 8, $byte1);
      $status = $call68;
      
      
      
      var $or70 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 8;
      HEAP32[$byte0 >> 2] = $or70;
      
      var $call71 = _BitstreamReadBits($stream_addr, 8, $byte1);
      $status = $call71;
      
      
      
      var $or73 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 16;
      HEAP32[$byte0 >> 2] = $or73;
      
      var $call74 = _BitstreamReadBits($stream_addr, 8, $byte1);
      $status = $call74;
      
      
      
      var $or76 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 24;
      HEAP32[$byte0 >> 2] = $or76;
      var $104 = HEAP32[$byte0 >> 2];
      
      
      
      HEAP32[$pDst + 4 >> 2] = $104;
      
      var $dec78 = $j + -1;
      $j = $dec78;
      
      
      var $add_ptr79 = $pDst + $pitch;
      $pDst = $add_ptr79;
      
      
      if (($status | 0) != 1) {
        __label__ = 8;
        break $while_cond54$8;
      }
      __label__ = 6;
      continue $while_cond54$8;
    }
    if (__label__ == 10) {
      
      
      
      
      
      
      
      $pDst = HEAP32[HEAP32[$video_addr + 884 >> 2] + 12 >> 2] + $offset1;
      $j = 8;
      while (1) {
        
        var $cmp87 = ($j | 0) > 0;
        if (!$cmp87) {
          __label__ = 15;
          break;
        }
        
        var $call89 = _BitstreamReadBits($stream_addr, 8, $byte0);
        $status = $call89;
        
        var $call90 = _BitstreamReadBits($stream_addr, 8, $byte1);
        $status = $call90;
        
        
        
        var $or92 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 8;
        HEAP32[$byte0 >> 2] = $or92;
        
        var $call93 = _BitstreamReadBits($stream_addr, 8, $byte1);
        $status = $call93;
        
        
        
        var $or95 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 16;
        HEAP32[$byte0 >> 2] = $or95;
        
        var $call96 = _BitstreamReadBits($stream_addr, 8, $byte1);
        $status = $call96;
        
        
        
        var $or98 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 24;
        HEAP32[$byte0 >> 2] = $or98;
        var $127 = HEAP32[$byte0 >> 2];
        
        
        HEAP32[$pDst >> 2] = $127;
        
        var $call99 = _BitstreamReadBits($stream_addr, 8, $byte0);
        $status = $call99;
        
        var $call100 = _BitstreamReadBits($stream_addr, 8, $byte1);
        $status = $call100;
        
        
        
        var $or102 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 8;
        HEAP32[$byte0 >> 2] = $or102;
        
        var $call103 = _BitstreamReadBits($stream_addr, 8, $byte1);
        $status = $call103;
        
        
        
        var $or105 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 16;
        HEAP32[$byte0 >> 2] = $or105;
        
        var $call106 = _BitstreamReadBits($stream_addr, 8, $byte1);
        $status = $call106;
        
        
        
        var $or108 = HEAP32[$byte0 >> 2] | HEAP32[$byte1 >> 2] << 24;
        HEAP32[$byte0 >> 2] = $or108;
        var $140 = HEAP32[$byte0 >> 2];
        
        
        
        HEAP32[$pDst + 4 >> 2] = $140;
        
        var $dec110 = $j + -1;
        $j = $dec110;
        
        
        var $add_ptr111 = $pDst + $pitch;
        $pDst = $add_ptr111;
        
        
        if (($status | 0) != 1) {
          __label__ = 13;
          break;
        }
        __label__ = 11;
        continue;
      }
      if (__label__ == 15) {
        $retval = 1;
      } else if (__label__ == 13) {
        
        $retval = $status;
      }
    } else if (__label__ == 8) {
      
      $retval = $status;
    }
  } else if (__label__ == 3) {
    
    $retval = $status;
  }
  var $148 = $retval;
  STACKTOP = __stackBase__;
  return $148;
  return null;
}
function __Z8residualP12tagDecObjectP13tagMacroblock($decvid, $currMB) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 132;
  var __label__;
  var $retval;
  var $decvid_addr;
  var $currMB_addr;
  var $video;
  var $block;
  var $level = __stackBase__;
  var $run = __stackBase__ + 64;
  var $numcoeff = __stackBase__ + 128;
  var $block_x;
  var $i;
  var $j;
  var $k;
  var $idx;
  var $iCbCr;
  var $mbPartIdx;
  var $subMbPartIdx;
  var $mbPartIdx_X;
  var $mbPartIdx_Y;
  var $nC;
  var $maxNumCoeff;
  var $coeffNum;
  var $start_scan;
  var $zz_scan;
  var $Rq;
  var $Qq;
  var $cbp4x4;
  $decvid_addr = $decvid;
  $currMB_addr = $currMB;
  
  
  
  $video = HEAP32[$decvid_addr >> 2];
  $maxNumCoeff = 16;
  $start_scan = 0;
  $cbp4x4 = 0;
  $zz_scan = __ZL13ZZ_SCAN_BLOCK;
  
  
  
  $Qq = HEAP32[$video + 820 >> 2];
  
  
  
  $Rq = HEAP32[$video + 824 >> 2];
  
  
  
  
  var $dest$, $stop$, $stop4$, $fast$, $value4$;
  $dest$ = $video;
  $stop$ = $dest$ + 768;
  $value4$ = 0;
  if ($value4$ < 0) $value4$ += 256;
  $value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + $value4$ * 16777216;
  while ($dest$ % 4 !== 0 && $dest$ < $stop$) {
    HEAP8[$dest$++] = 0;
  }
  $dest$ >>= 2;
  $stop4$ = $stop$ >> 2;
  while ($dest$ < $stop4$) {
    HEAP32[$dest$++] = $value4$;
  }
  $dest$ <<= 2;
  while ($dest$ < $stop$) {
    HEAP8[$dest$++] = 0;
  }
  
  
  
  
  if ((HEAP32[$currMB_addr + 164 >> 2] | 0) == 1) {
    __label__ = 1;
  } else {
    __label__ = 10;
  }
  $if_then$$if_end17$2 : do {
    if (__label__ == 1) {
      
      var $call = __Z11predict_nnzP12tagCommonObjii($video, 0, 0);
      $nC = $call;
      
      
      var $12 = HEAP32[$decvid_addr + 1192 >> 2];
      
      
      var $arraydecay2 = $level;
      var $arraydecay3 = $run;
      var $call4 = FUNCTION_TABLE[$12]($decvid_addr, $nC, 16, $arraydecay2, $arraydecay3, $numcoeff);
      
      
      
      $block = $video;
      $coeffNum = -1;
      
      
      $i = HEAP32[$numcoeff >> 2] - 1;
      while (1) {
        
        var $cmp7 = ($i | 0) >= 0;
        if (!$cmp7) {
          __label__ = 7;
          break;
        }
        
        
        
        
        
        var $add8 = $coeffNum + (HEAP32[$run + $i * 4 >> 2] + 1);
        $coeffNum = $add8;
        
        
        if (($coeffNum | 0) > 15) {
          __label__ = 4;
          break;
        }
        
        
        
        
        
        
        $idx = (HEAPU8[$zz_scan + $coeffNum >> 0] & 255) << 2;
        
        
        
        
        
        
        
        HEAP16[$block + 2 * $idx >> 1] = HEAP32[$level + $i * 4 >> 2] & 65535;
        
        var $dec = $i + -1;
        $i = $dec;
        __label__ = 2;
        continue;
      }
      if (__label__ == 7) {
        
        
        if ((HEAP32[$numcoeff >> 2] | 0) != 0) {
          __label__ = 8;
        } else {
          __label__ = 9;
        }
        if (__label__ == 8) {
          
          
          
          __Z14Intra16DCTransPsii($block, $Qq, $Rq);
          $cbp4x4 = 65535;
        }
        $maxNumCoeff = 15;
        $start_scan = 1;
        __label__ = 10;
        break $if_then$$if_end17$2;
      } else if (__label__ == 4) {
        $retval = 0;
        __label__ = 65;
        break $if_then$$if_end17$2;
      }
    }
  } while (0);
  $return$$if_end17$15 : do {
    if (__label__ == 10) {
      
      
      
      var $dest$, $stop$, $stop4$, $fast$, $value4$;
      $dest$ = $currMB_addr + 380;
      $stop$ = $dest$ + 24;
      $value4$ = 0;
      if ($value4$ < 0) $value4$ += 256;
      $value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + $value4$ * 16777216;
      while ($dest$ % 4 !== 0 && $dest$ < $stop$) {
        HEAP8[$dest$++] = 0;
      }
      $dest$ >>= 2;
      $stop4$ = $stop$ >> 2;
      while ($dest$ < $stop4$) {
        HEAP32[$dest$++] = $value4$;
      }
      $dest$ <<= 2;
      while ($dest$ < $stop$) {
        HEAP8[$dest$++] = 0;
      }
      $mbPartIdx = 0;
      $for_cond19$17 : while (1) {
        
        var $cmp20 = ($mbPartIdx | 0) < 4;
        if (!$cmp20) {
          __label__ = 28;
          break $for_cond19$17;
        }
        
        
        
        $mbPartIdx_X = ($mbPartIdx & 1) << 1;
        
        var $and23 = $mbPartIdx & -2;
        $mbPartIdx_Y = $and23;
        
        
        
        
        
        
        
        if ((HEAP32[$currMB_addr + 184 >> 2] & 1 << $mbPartIdx | 0) != 0) {
          __label__ = 13;
        } else {
          __label__ = 26;
        }
        if (__label__ == 13) {
          $subMbPartIdx = 0;
          $for_cond28$22 : while (1) {
            
            var $cmp29 = ($subMbPartIdx | 0) < 4;
            if (!$cmp29) {
              __label__ = 25;
              break $for_cond28$22;
            }
            
            
            
            
            $i = $mbPartIdx_X + ($subMbPartIdx & 1);
            
            
            
            
            $j = $mbPartIdx_Y + ($subMbPartIdx >> 1);
            
            
            
            
            
            
            
            
            
            $block = $video + 2 * ($j << 6) + 2 * ($i << 2);
            
            
            
            var $call39 = __Z11predict_nnzP12tagCommonObjii($video, $i, $j);
            $nC = $call39;
            
            
            var $53 = HEAP32[$decvid_addr + 1192 >> 2];
            
            
            
            var $arraydecay41 = $level;
            var $arraydecay42 = $run;
            var $call43 = FUNCTION_TABLE[$53]($decvid_addr, $nC, $maxNumCoeff, $arraydecay41, $arraydecay42, $numcoeff);
            
            var $add44 = -1 + $start_scan;
            $coeffNum = $add44;
            
            
            $k = HEAP32[$numcoeff >> 2] - 1;
            while (1) {
              
              var $cmp47 = ($k | 0) >= 0;
              if (!$cmp47) {
                __label__ = 21;
                break;
              }
              
              
              
              
              
              var $add51 = $coeffNum + (HEAP32[$run + $k * 4 >> 2] + 1);
              $coeffNum = $add51;
              
              
              if (($coeffNum | 0) > 15) {
                __label__ = 18;
                break $for_cond19$17;
              }
              
              
              
              
              
              $idx = HEAPU8[$zz_scan + $coeffNum >> 0] & 255;
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              HEAP16[$block + 2 * $idx >> 1] = HEAP32[$level + $k * 4 >> 2] * HEAP32[__ZL15dequant_coefres10 + $Rq * 64 + $coeffNum * 4 >> 2] << $Qq & 65535;
              
              var $dec64 = $k + -1;
              $k = $dec64;
              __label__ = 16;
              continue;
            }
            
            
            
            
            
            
            
            
            
            HEAP8[$currMB_addr + 380 + (($j << 2) + $i) >> 0] = HEAP32[$numcoeff >> 2] & 255;
            
            
            if ((HEAP32[$numcoeff >> 2] | 0) != 0) {
              __label__ = 22;
            } else {
              __label__ = 23;
            }
            if (__label__ == 22) {
              
              
              
              
              
              
              var $or = $cbp4x4 | 1 << ($j << 2) + $i;
              $cbp4x4 = $or;
            }
            
            var $inc = $subMbPartIdx + 1;
            $subMbPartIdx = $inc;
            __label__ = 14;
            continue $for_cond28$22;
          }
        }
        
        var $inc81 = $mbPartIdx + 1;
        $mbPartIdx = $inc81;
        __label__ = 11;
        continue $for_cond19$17;
      }
      if (__label__ == 28) {
        
        
        
        $Qq = HEAP32[$video + 828 >> 2];
        
        
        
        $Rq = HEAP32[$video + 832 >> 2];
        
        
        
        
        
        if ((HEAP32[$currMB_addr + 184 >> 2] & 48 | 0) != 0) {
          __label__ = 29;
        } else {
          __label__ = 42;
        }
        if (__label__ == 29) {
          $iCbCr = 0;
          $for_cond87$42 : while (1) {
            
            var $cmp88 = ($iCbCr | 0) < 2;
            if (!$cmp88) {
              __label__ = 41;
              break $for_cond87$42;
            }
            
            
            var $94 = HEAP32[$decvid_addr + 1192 >> 2];
            
            var $arraydecay91 = $level;
            var $arraydecay92 = $run;
            var $call93 = FUNCTION_TABLE[$94]($decvid_addr, -1, 4, $arraydecay91, $arraydecay92, $numcoeff);
            
            
            
            
            
            
            
            $block = $video + 512 + 2 * ($iCbCr << 3);
            $coeffNum = -1;
            
            
            $i = HEAP32[$numcoeff >> 2] - 1;
            while (1) {
              
              var $cmp101 = ($i | 0) >= 0;
              if (!$cmp101) {
                __label__ = 37;
                break;
              }
              
              
              
              
              
              var $add105 = $coeffNum + (HEAP32[$run + $i * 4 >> 2] + 1);
              $coeffNum = $add105;
              
              
              if (($coeffNum | 0) > 3) {
                __label__ = 34;
                break $for_cond87$42;
              }
              
              
              
              
              
              
              
              
              
              
              
              
              
              HEAP16[$block + 2 * (($coeffNum >> 1) * 64 + ($coeffNum & 1) * 4) >> 1] = HEAP32[$level + $i * 4 >> 2] & 65535;
              
              var $dec118 = $i + -1;
              $i = $dec118;
              __label__ = 32;
              continue;
            }
            
            
            if ((HEAP32[$numcoeff >> 2] | 0) != 0) {
              __label__ = 38;
            } else {
              __label__ = 39;
            }
            if (__label__ == 38) {
              
              
              
              __Z13ChromaDCTransPsii($block, $Qq, $Rq);
              
              
              var $cond = ($iCbCr | 0) != 0 ? 13369344 : 3342336;
              
              var $or123 = $cbp4x4 | $cond;
              $cbp4x4 = $or123;
            }
            
            var $inc126 = $iCbCr + 1;
            $iCbCr = $inc126;
            __label__ = 30;
            continue $for_cond87$42;
          }
          if (__label__ == 41) {

          } else if (__label__ == 34) {
            $retval = 0;
            __label__ = 65;
            break $return$$if_end17$15;
          }
        }
        
        
        
        
        
        if ((HEAP32[$currMB_addr + 184 >> 2] & 32 | 0) != 0) {
          __label__ = 43;
        } else {
          __label__ = 64;
        }
        if (__label__ == 43) {
          $block_x = 0;
          $for_cond133$61 : while (1) {
            
            var $cmp134 = ($block_x | 0) < 4;
            if (!$cmp134) {
              __label__ = 63;
              break $for_cond133$61;
            }
            $j = 4;
            $for_cond136$64 : while (1) {
              
              var $cmp137 = ($j | 0) < 6;
              if (!$cmp137) {
                __label__ = 61;
                break $for_cond136$64;
              }
              
              $i = $block_x;
              $for_cond139$67 : while (1) {
                
                
                
                var $cmp141 = ($i | 0) < ($block_x + 2 | 0);
                if (!$cmp141) {
                  __label__ = 59;
                  break $for_cond139$67;
                }
                
                
                
                
                
                
                
                
                
                $block = $video + 2 * ($j << 6) + 2 * ($i << 2);
                
                
                
                var $call149 = __Z18predict_nnz_chromaP12tagCommonObjii($video, $i, $j);
                $nC = $call149;
                
                
                var $131 = HEAP32[$decvid_addr + 1192 >> 2];
                
                
                var $arraydecay151 = $level;
                var $arraydecay152 = $run;
                var $call153 = FUNCTION_TABLE[$131]($decvid_addr, $nC, 15, $arraydecay151, $arraydecay152, $numcoeff);
                $coeffNum = 0;
                
                
                $k = HEAP32[$numcoeff >> 2] - 1;
                while (1) {
                  
                  var $cmp156 = ($k | 0) >= 0;
                  if (!$cmp156) {
                    __label__ = 55;
                    break;
                  }
                  
                  
                  
                  
                  
                  var $add160 = $coeffNum + (HEAP32[$run + $k * 4 >> 2] + 1);
                  $coeffNum = $add160;
                  
                  
                  if (($coeffNum | 0) > 15) {
                    __label__ = 52;
                    break $for_cond133$61;
                  }
                  
                  
                  
                  
                  
                  $idx = HEAPU8[$zz_scan + $coeffNum >> 0] & 255;
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  HEAP16[$block + 2 * $idx >> 1] = HEAP32[$level + $k * 4 >> 2] * HEAP32[__ZL15dequant_coefres10 + $Rq * 64 + $coeffNum * 4 >> 2] << $Qq & 65535;
                  
                  var $dec174 = $k + -1;
                  $k = $dec174;
                  __label__ = 50;
                  continue;
                }
                
                
                
                
                
                
                
                
                
                HEAP8[$currMB_addr + 380 + (($j << 2) + $i) >> 0] = HEAP32[$numcoeff >> 2] & 255;
                
                
                if ((HEAP32[$numcoeff >> 2] | 0) != 0) {
                  __label__ = 56;
                } else {
                  __label__ = 57;
                }
                if (__label__ == 56) {
                  
                  
                  
                  
                  
                  
                  var $or186 = $cbp4x4 | 1 << ($j << 2) + $i;
                  $cbp4x4 = $or186;
                }
                
                var $inc189 = $i + 1;
                $i = $inc189;
                __label__ = 48;
                continue $for_cond139$67;
              }
              
              var $inc192 = $j + 1;
              $j = $inc192;
              __label__ = 46;
              continue $for_cond136$64;
            }
            
            var $add195 = $block_x + 2;
            $block_x = $add195;
            __label__ = 44;
            continue $for_cond133$61;
          }
          if (__label__ == 63) {

          } else if (__label__ == 52) {
            $retval = 0;
            __label__ = 65;
            break $return$$if_end17$15;
          }
        }
        
        
        
        HEAP32[$video + 928 >> 2] = $cbp4x4;
        $retval = 1;
      } else if (__label__ == 18) {
        $retval = 0;
      }
    }
  } while (0);
  var $165 = $retval;
  STACKTOP = __stackBase__;
  return $165;
  return null;
}
function __Z20residual_block_cavlcP12tagDecObjectiiPiS1_S1_($decvid, $nC, $maxNumCoeff, $level, $run, $numcoeff) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 28;
  var __label__;
  var $retval;
  var $decvid_addr;
  var $nC_addr;
  var $maxNumCoeff_addr;
  var $level_addr;
  var $run_addr;
  var $numcoeff_addr;
  var $i;
  var $j;
  var $TrailingOnes = __stackBase__;
  var $TotalCoeff = __stackBase__ + 4;
  var $stream;
  var $suffixLength;
  var $trailing_ones_sign_flag = __stackBase__ + 8;
  var $level_prefix = __stackBase__ + 12;
  var $level_suffix = __stackBase__ + 16;
  var $levelCode;
  var $levelSuffixSize;
  var $zerosLeft = __stackBase__ + 20;
  var $run_before = __stackBase__ + 24;
  $decvid_addr = $decvid;
  $nC_addr = $nC;
  $maxNumCoeff_addr = $maxNumCoeff;
  $level_addr = $level;
  $run_addr = $run;
  $numcoeff_addr = $numcoeff;
  
  
  
  $stream = HEAP32[$decvid_addr + 4 >> 2];
  
  
  if (($nC_addr | 0) >= 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    var $call = __Z25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_i($stream, $TrailingOnes, $TotalCoeff, $nC_addr);
  } else if (__label__ == 2) {
    
    var $call1 = __Z33ce_TotalCoeffTrailingOnesChromaDCP15tagDecBitstreamPiS1_($stream, $TrailingOnes, $TotalCoeff);
  }
  var $6 = HEAP32[$TotalCoeff >> 2];
  
  HEAP32[$numcoeff_addr >> 2] = $6;
  
  
  if ((HEAP32[$TotalCoeff >> 2] | 0) == 0) {
    __label__ = 4;
  } else {
    __label__ = 5;
  }
  if (__label__ == 4) {
    $retval = 1;
  } else if (__label__ == 5) {
    
    
    if ((HEAP32[$TrailingOnes >> 2] | 0) != 0) {
      __label__ = 6;
    } else {
      __label__ = 11;
    }
    if (__label__ == 6) {
      
      var $11 = HEAP32[$TrailingOnes >> 2];
      var $call6 = _BitstreamReadBits($stream, $11, $trailing_ones_sign_flag);
      
      var $shl = HEAP32[$trailing_ones_sign_flag >> 2] << 1;
      HEAP32[$trailing_ones_sign_flag >> 2] = $shl;
      $i = 0;
      while (1) {
        
        
        var $cmp7 = ($i | 0) < (HEAP32[$TrailingOnes >> 2] | 0);
        if (!$cmp7) {
          __label__ = 10;
          break;
        }
        
        
        
        
        
        
        
        var $sub9 = 1 - (HEAPU32[$trailing_ones_sign_flag >> 2] >>> (HEAP32[$TrailingOnes >> 2] - $i - 1 >>> 0) & 2);
        
        
        
        HEAP32[$level_addr + 4 * $i >> 2] = $sub9;
        
        var $inc = $i + 1;
        $i = $inc;
        __label__ = 7;
        continue;
      }
    }
    
    $i = HEAP32[$TrailingOnes >> 2];
    $suffixLength = 1;
    
    
    
    if ((HEAP32[$TotalCoeff >> 2] | 0) > (HEAP32[$TrailingOnes >> 2] | 0)) {
      __label__ = 12;
    } else {
      __label__ = 32;
    }
    if (__label__ == 12) {
      
      var $call13 = __Z14ce_LevelPrefixP15tagDecBitstreamPj($stream, $level_prefix);
      
      
      if ((HEAP32[$TotalCoeff >> 2] | 0) < 11) {
        __label__ = 14;
      } else {
        __label__ = 13;
      }
      $if_then16$$lor_lhs_false$19 : do {
        if (__label__ == 13) {
          
          
          if ((HEAP32[$TrailingOnes >> 2] | 0) == 3) {
            __label__ = 14;
            break $if_then16$$lor_lhs_false$19;
          }
          
          
          if (HEAPU32[$level_prefix >> 2] >>> 0 < 15) {
            __label__ = 22;
          } else {
            __label__ = 23;
          }
          if (__label__ == 22) {
            
            $levelSuffixSize = $suffixLength;
          } else if (__label__ == 23) {
            $levelSuffixSize = 12;
          }
          
          
          var $call33 = _BitstreamReadBits($stream, $levelSuffixSize, $level_suffix);
          
          
          
          
          $levelCode = (HEAP32[$level_prefix >> 2] << 1) + HEAP32[$level_suffix >> 2];
          __label__ = 25;
          break $if_then16$$lor_lhs_false$19;
        }
      } while (0);
      if (__label__ == 14) {
        
        
        if (HEAPU32[$level_prefix >> 2] >>> 0 < 14) {
          __label__ = 15;
        } else {
          __label__ = 16;
        }
        if (__label__ == 15) {
          
          $levelCode = HEAP32[$level_prefix >> 2];
        } else if (__label__ == 16) {
          
          
          if ((HEAP32[$level_prefix >> 2] | 0) == 14) {
            __label__ = 17;
          } else {
            __label__ = 18;
          }
          if (__label__ == 17) {
            
            var $call22 = _BitstreamReadBits($stream, 4, $level_suffix);
            
            
            $levelCode = 14 + HEAP32[$level_suffix >> 2];
          } else if (__label__ == 18) {
            
            var $call24 = _BitstreamReadBits($stream, 12, $level_suffix);
            
            
            $levelCode = 30 + HEAP32[$level_suffix >> 2];
          }
        }
      }
      
      
      if ((HEAP32[$TrailingOnes >> 2] | 0) < 3) {
        __label__ = 26;
      } else {
        __label__ = 27;
      }
      if (__label__ == 26) {
        
        var $add39 = $levelCode + 2;
        $levelCode = $add39;
      }
      
      
      
      
      
      
      HEAP32[$level_addr + 4 * $i >> 2] = $levelCode + 2 >> 1;
      
      
      
      
      
      if ((HEAP32[$level_addr + 4 * $i >> 2] | 0) > 3) {
        __label__ = 28;
      } else {
        __label__ = 29;
      }
      if (__label__ == 28) {
        $suffixLength = 2;
      }
      
      
      
      if (($levelCode & 1 | 0) != 0) {
        __label__ = 30;
      } else {
        __label__ = 31;
      }
      if (__label__ == 30) {
        
        
        
        
        var $sub52 = 0 - HEAP32[$level_addr + 4 * $i >> 2];
        
        
        
        HEAP32[$level_addr + 4 * $i >> 2] = $sub52;
      }
      
      var $inc55 = $i + 1;
      $i = $inc55;
    }
    
    
    
    $j = HEAP32[$TotalCoeff >> 2] - $i;
    $for_cond58$47 : while (1) {
      
      var $cmp59 = ($j | 0) > 0;
      if (!$cmp59) {
        __label__ = 44;
        break $for_cond58$47;
      }
      
      var $call61 = __Z14ce_LevelPrefixP15tagDecBitstreamPj($stream, $level_prefix);
      
      
      if (HEAPU32[$level_prefix >> 2] >>> 0 < 15) {
        __label__ = 35;
      } else {
        __label__ = 36;
      }
      if (__label__ == 35) {
        
        $levelSuffixSize = $suffixLength;
      } else if (__label__ == 36) {
        $levelSuffixSize = 12;
      }
      
      
      var $call66 = _BitstreamReadBits($stream, $levelSuffixSize, $level_suffix);
      
      
      
      
      
      $levelCode = (HEAP32[$level_prefix >> 2] << $suffixLength) + HEAP32[$level_suffix >> 2];
      
      
      
      
      
      
      HEAP32[$level_addr + 4 * $i >> 2] = ($levelCode >> 1) + 1;
      
      
      
      
      
      
      
      
      if ((HEAP32[$level_addr + 4 * $i >> 2] | 0) > (3 << $suffixLength - 1 | 0)) {
        __label__ = 38;
      } else {
        __label__ = 40;
      }
      $land_lhs_true$$if_end79$54 : do {
        if (__label__ == 38) {
          
          var $cmp76 = ($suffixLength | 0) < 6;
          if (!$cmp76) {
            __label__ = 40;
            break $land_lhs_true$$if_end79$54;
          }
          
          var $inc78 = $suffixLength + 1;
          $suffixLength = $inc78;
        }
      } while (0);
      
      
      
      if (($levelCode & 1 | 0) != 0) {
        __label__ = 41;
      } else {
        __label__ = 42;
      }
      if (__label__ == 41) {
        
        
        
        
        var $sub84 = 0 - HEAP32[$level_addr + 4 * $i >> 2];
        
        
        
        HEAP32[$level_addr + 4 * $i >> 2] = $sub84;
      }
      
      var $inc87 = $i + 1;
      $i = $inc87;
      
      var $dec = $j + -1;
      $j = $dec;
      __label__ = 33;
      continue $for_cond58$47;
    }
    
    
    
    if ((HEAP32[$TotalCoeff >> 2] | 0) < ($maxNumCoeff_addr | 0)) {
      __label__ = 45;
    } else {
      __label__ = 49;
    }
    if (__label__ == 45) {
      
      
      if (($nC_addr | 0) >= 0) {
        __label__ = 46;
      } else {
        __label__ = 47;
      }
      if (__label__ == 46) {
        
        var $87 = HEAP32[$TotalCoeff >> 2];
        var $call94 = __Z13ce_TotalZerosP15tagDecBitstreamPii($stream, $zerosLeft, $87);
      } else if (__label__ == 47) {
        
        var $89 = HEAP32[$TotalCoeff >> 2];
        var $call96 = __Z21ce_TotalZerosChromaDCP15tagDecBitstreamPii($stream, $zerosLeft, $89);
      }
    } else if (__label__ == 49) {
      HEAP32[$zerosLeft >> 2] = 0;
    }
    $i = 0;
    while (1) {
      
      
      
      var $cmp102 = ($i | 0) < (HEAP32[$TotalCoeff >> 2] - 1 | 0);
      if (!$cmp102) {
        __label__ = 57;
        break;
      }
      
      
      if ((HEAP32[$zerosLeft >> 2] | 0) > 0) {
        __label__ = 53;
      } else {
        __label__ = 54;
      }
      if (__label__ == 53) {
        
        var $94 = HEAP32[$zerosLeft >> 2];
        var $call106 = __Z12ce_RunBeforeP15tagDecBitstreamPii($stream, $run_before, $94);
        var $95 = HEAP32[$run_before >> 2];
        
        
        
        HEAP32[$run_addr + 4 * $i >> 2] = $95;
      } else if (__label__ == 54) {
        
        
        
        HEAP32[$run_addr + 4 * $i >> 2] = 0;
        HEAP32[$zerosLeft >> 2] = 0;
      }
      
      
      
      
      
      var $sub112 = HEAP32[$zerosLeft >> 2] - HEAP32[$run_addr + 4 * $i >> 2];
      HEAP32[$zerosLeft >> 2] = $sub112;
      
      var $inc114 = $i + 1;
      $i = $inc114;
      __label__ = 51;
      continue;
    }
    
    
    if ((HEAP32[$zerosLeft >> 2] | 0) < 0) {
      __label__ = 58;
    } else {
      __label__ = 59;
    }
    if (__label__ == 58) {
      HEAP32[$zerosLeft >> 2] = 0;
    }
    var $106 = HEAP32[$zerosLeft >> 2];
    
    
    
    var $arrayidx120 = $run_addr + 4 * (HEAP32[$TotalCoeff >> 2] - 1);
    HEAP32[$arrayidx120 >> 2] = $106;
    $retval = 1;
  }
  var $109 = $retval;
  STACKTOP = __stackBase__;
  return $109;
  return null;
}
function __Z14DeblockPictureP12tagCommonObj($video) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $video_addr;
  var $i;
  var $j;
  var $pitch;
  var $pitch_c;
  var $width;
  var $SrcY;
  var $SrcU;
  var $SrcV;
  $video_addr = $video;
  
  
  
  
  
  $pitch = HEAP32[HEAP32[$video_addr + 884 >> 2] + 48 >> 2];
  
  
  
  
  
  $SrcY = HEAP32[HEAP32[$video_addr + 884 >> 2] + 4 >> 2];
  
  
  
  
  
  $SrcU = HEAP32[HEAP32[$video_addr + 884 >> 2] + 8 >> 2];
  
  
  
  
  
  $SrcV = HEAP32[HEAP32[$video_addr + 884 >> 2] + 12 >> 2];
  
  
  $pitch_c = $pitch >> 1;
  
  
  
  
  
  $width = HEAP32[HEAP32[$video_addr + 884 >> 2] + 40 >> 2];
  $i = 0;
  $for_cond$2 : while (1) {
    
    
    
    
    var $cmp = $i >>> 0 < HEAPU32[$video_addr + 1296 >> 2] >>> 0;
    if (!$cmp) {
      __label__ = 8;
      break $for_cond$2;
    }
    $j = 0;
    while (1) {
      
      
      
      
      var $cmp8 = $j >>> 0 < HEAPU32[$video_addr + 1248 >> 2] >>> 0;
      if (!$cmp8) {
        __label__ = 6;
        break;
      }
      
      
      
      
      
      
      __ZL9DeblockMbP12tagCommonObjiiPhS1_S1_($video_addr, $j, $i, $SrcY, $SrcU, $SrcV);
      
      var $add_ptr = $SrcY + 16;
      $SrcY = $add_ptr;
      
      var $add_ptr10 = $SrcU + 8;
      $SrcU = $add_ptr10;
      
      var $add_ptr11 = $SrcV + 8;
      $SrcV = $add_ptr11;
      
      var $inc = $j + 1;
      $j = $inc;
      __label__ = 3;
      continue;
    }
    
    
    
    
    
    var $add_ptr12 = $SrcY + (($pitch << 4) - $width);
    $SrcY = $add_ptr12;
    
    
    
    
    
    
    var $add_ptr16 = $SrcU + (($pitch_c << 3) - ($width >> 1));
    $SrcU = $add_ptr16;
    
    
    
    
    
    
    var $add_ptr20 = $SrcV + (($pitch_c << 3) - ($width >> 1));
    $SrcV = $add_ptr20;
    
    var $inc22 = $i + 1;
    $i = $inc22;
    __label__ = 1;
    continue $for_cond$2;
  }
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __ZL9DeblockMbP12tagCommonObjiiPhS1_S1_($video, $mb_x, $mb_y, $SrcY, $SrcU, $SrcV) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  var $video_addr;
  var $mb_x_addr;
  var $mb_y_addr;
  var $SrcY_addr;
  var $SrcU_addr;
  var $SrcV_addr;
  var $MbP;
  var $MbQ;
  var $edge;
  var $QP;
  var $QPC;
  var $filterLeftMbEdgeFlag;
  var $filterTopMbEdgeFlag;
  var $pitch;
  var $indexA;
  var $indexB;
  var $tmp;
  var $Alpha;
  var $Beta;
  var $Alpha_c;
  var $Beta_c;
  var $mbNum;
  var $clipTable;
  var $clipTable_c;
  var $qp_clip_tab;
  var $Strength = __stackBase__;
  var $str;
  $video_addr = $video;
  $mb_x_addr = $mb_x;
  $mb_y_addr = $mb_y;
  $SrcY_addr = $SrcY;
  $SrcU_addr = $SrcU;
  $SrcV_addr = $SrcV;
  
  
  
  $filterLeftMbEdgeFlag = ($mb_x_addr | 0) != 0 & 1;
  
  
  
  $filterTopMbEdgeFlag = ($mb_y_addr | 0) != 0 & 1;
  
  
  
  
  
  $pitch = HEAP32[HEAP32[$video_addr + 884 >> 2] + 48 >> 2];
  
  
  
  
  
  
  
  $mbNum = $mb_y_addr * HEAP32[$video_addr + 1248 >> 2] + $mb_x_addr;
  
  
  
  
  
  $MbQ = HEAP32[$video_addr + 908 >> 2] + 420 * $mbNum;
  
  
  
  
  
  
  if ((HEAP32[HEAP32[$video_addr + 880 >> 2] + 2148 >> 2] | 0) == 1) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {

  } else if (__label__ == 2) {
    
    
    
    
    
    
    if ((HEAP32[HEAP32[$video_addr + 880 >> 2] + 2148 >> 2] | 0) == 2) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    if (__label__ == 3) {
      
      
      var $19 = HEAP32[$video_addr + 908 >> 2];
      
      
      var $21 = HEAP32[$video_addr + 1308 >> 2];
      
      
      
      var $call = __Z15mb_is_availableP13tagMacroblockjii($19, $21, $mbNum - 1, $mbNum);
      
      $filterLeftMbEdgeFlag = $call & 1;
      
      
      var $25 = HEAP32[$video_addr + 908 >> 2];
      
      
      var $27 = HEAP32[$video_addr + 1308 >> 2];
      
      
      
      
      var $sub24 = $mbNum - HEAP32[$video_addr + 1248 >> 2];
      
      var $call25 = __Z15mb_is_availableP13tagMacroblockjii($25, $27, $sub24, $mbNum);
      
      $filterTopMbEdgeFlag = $call25 & 1;
    }
    $qp_clip_tab = __ZL11QP_CLIP_TAB + 48;
    
    
    if (($filterLeftMbEdgeFlag | 0) != 0) {
      __label__ = 5;
    } else {
      __label__ = 14;
    }
    if (__label__ == 5) {
      
      var $add_ptr = $MbQ + -420;
      $MbP = $add_ptr;
      var $arraydecay = $Strength;
      
      
      __ZL17GetStrength_Edge0PhP13tagMacroblockS1_i($arraydecay, $MbP, $MbQ, 0);
      
      $str = $Strength;
      
      
      
      
      if ((HEAP32[$str >> 2] | 0) != 0) {
        __label__ = 6;
      } else {
        __label__ = 13;
      }
      if (__label__ == 6) {
        
        
        
        
        
        
        
        
        
        $QP = HEAP32[$MbP + 404 >> 2] + HEAP32[$MbQ + 404 >> 2] + 1 >> 1;
        
        
        
        
        
        $indexA = $QP + HEAP32[$video_addr + 1332 >> 2];
        
        
        
        
        
        $indexB = $QP + HEAP32[$video_addr + 1336 >> 2];
        
        
        
        var $51 = HEAP32[$qp_clip_tab + 4 * $indexA >> 2];
        $indexA = $51;
        
        
        
        var $54 = HEAP32[$qp_clip_tab + 4 * $indexB >> 2];
        $indexB = $54;
        
        
        
        $Alpha = HEAP32[__ZL11ALPHA_TABLE + $indexA * 4 >> 2];
        
        
        
        $Beta = HEAP32[__ZL10BETA_TABLE + $indexB * 4 >> 2];
        
        
        
        $clipTable = __ZL8CLIP_TAB + $indexA * 20;
        
        
        if (($Alpha | 0) > 0) {
          __label__ = 7;
        } else {
          __label__ = 9;
        }
        $land_lhs_true$$if_end47$12 : do {
          if (__label__ == 7) {
            
            var $cmp44 = ($Beta | 0) > 0;
            if (!$cmp44) {
              __label__ = 9;
              break $land_lhs_true$$if_end47$12;
            }
            
            var $arraydecay46 = $Strength;
            
            
            
            
            __ZL22EdgeLoop_Luma_verticalPhS_iiPii($SrcY_addr, $arraydecay46, $Alpha, $Beta, $clipTable, $pitch);
          }
        } while (0);
        
        
        
        
        
        
        
        
        
        $QPC = HEAP32[$MbP + 408 >> 2] + HEAP32[$MbQ + 408 >> 2] + 1 >> 1;
        
        
        
        
        
        $indexA = $QPC + HEAP32[$video_addr + 1332 >> 2];
        
        
        
        
        
        $indexB = $QPC + HEAP32[$video_addr + 1336 >> 2];
        
        
        
        var $79 = HEAP32[$qp_clip_tab + 4 * $indexA >> 2];
        $indexA = $79;
        
        
        
        var $82 = HEAP32[$qp_clip_tab + 4 * $indexB >> 2];
        $indexB = $82;
        
        
        
        $Alpha = HEAP32[__ZL11ALPHA_TABLE + $indexA * 4 >> 2];
        
        
        
        $Beta = HEAP32[__ZL10BETA_TABLE + $indexB * 4 >> 2];
        
        
        
        $clipTable = __ZL8CLIP_TAB + $indexA * 20;
        
        
        if (($Alpha | 0) > 0) {
          __label__ = 10;
        } else {
          __label__ = 12;
        }
        $land_lhs_true63$$if_end70$16 : do {
          if (__label__ == 10) {
            
            var $cmp64 = ($Beta | 0) > 0;
            if (!$cmp64) {
              __label__ = 12;
              break $land_lhs_true63$$if_end70$16;
            }
            
            var $arraydecay66 = $Strength;
            
            
            
            
            
            __ZL24EdgeLoop_Chroma_verticalPhS_iiPii($SrcU_addr, $arraydecay66, $Alpha, $Beta, $clipTable, $pitch >> 1);
            
            var $arraydecay68 = $Strength;
            
            
            
            
            
            __ZL24EdgeLoop_Chroma_verticalPhS_iiPii($SrcV_addr, $arraydecay68, $Alpha, $Beta, $clipTable, $pitch >> 1);
          }
        } while (0);
      }
    }
    
    $MbP = $MbQ;
    
    
    
    
    
    
    
    $indexA = HEAP32[$MbQ + 404 >> 2] + HEAP32[$video_addr + 1332 >> 2];
    
    
    
    
    
    
    
    $indexB = HEAP32[$MbQ + 404 >> 2] + HEAP32[$video_addr + 1336 >> 2];
    
    
    
    var $111 = HEAP32[$qp_clip_tab + 4 * $indexA >> 2];
    $indexA = $111;
    
    
    
    var $114 = HEAP32[$qp_clip_tab + 4 * $indexB >> 2];
    $indexB = $114;
    
    
    
    $Alpha = HEAP32[__ZL11ALPHA_TABLE + $indexA * 4 >> 2];
    
    
    
    $Beta = HEAP32[__ZL10BETA_TABLE + $indexB * 4 >> 2];
    
    
    
    $clipTable = __ZL8CLIP_TAB + $indexA * 20;
    
    $filterLeftMbEdgeFlag = $Alpha;
    
    $mbNum = $Beta;
    
    
    $tmp = $clipTable;
    
    
    
    
    
    
    
    $indexA = HEAP32[$MbQ + 408 >> 2] + HEAP32[$video_addr + 1332 >> 2];
    
    
    
    
    
    
    
    $indexB = HEAP32[$MbQ + 408 >> 2] + HEAP32[$video_addr + 1336 >> 2];
    
    
    
    var $134 = HEAP32[$qp_clip_tab + 4 * $indexA >> 2];
    $indexA = $134;
    
    
    
    var $137 = HEAP32[$qp_clip_tab + 4 * $indexB >> 2];
    $indexB = $137;
    
    
    
    $Alpha_c = HEAP32[__ZL11ALPHA_TABLE + $indexA * 4 >> 2];
    
    
    
    $Beta_c = HEAP32[__ZL10BETA_TABLE + $indexB * 4 >> 2];
    
    
    
    $clipTable_c = __ZL8CLIP_TAB + $indexA * 20;
    
    var $add_ptr98 = $Strength + 4;
    
    __ZL25GetStrength_VerticalEdgesPhP13tagMacroblock($add_ptr98, $MbQ);
    $edge = 1;
    $for_cond$22 : while (1) {
      
      var $cmp99 = ($edge | 0) < 4;
      if (!$cmp99) {
        __label__ = 27;
        break $for_cond$22;
      }
      
      
      
      
      
      
      
      if ((HEAP32[$Strength + ($edge << 2) >> 2] | 0) != 0) {
        __label__ = 17;
      } else {
        __label__ = 25;
      }
      if (__label__ == 17) {
        
        
        if (($Alpha | 0) > 0) {
          __label__ = 18;
        } else {
          __label__ = 20;
        }
        $land_lhs_true105$$if_end113$27 : do {
          if (__label__ == 18) {
            
            var $cmp106 = ($Beta | 0) > 0;
            if (!$cmp106) {
              __label__ = 20;
              break $land_lhs_true105$$if_end113$27;
            }
            
            
            
            
            
            
            
            var $add_ptr112 = $Strength + ($edge << 2);
            
            
            
            
            __ZL22EdgeLoop_Luma_verticalPhS_iiPii($SrcY_addr + ($edge << 2), $add_ptr112, $Alpha, $Beta, $clipTable, $pitch);
          }
        } while (0);
        
        
        
        if (($edge & 1 | 0) != 0) {
          __label__ = 24;
        } else {
          __label__ = 21;
        }
        $if_end132$$land_lhs_true115$31 : do {
          if (__label__ == 21) {
            
            var $cmp116 = ($Alpha_c | 0) > 0;
            if (!$cmp116) {
              __label__ = 24;
              break $if_end132$$land_lhs_true115$31;
            }
            
            var $cmp118 = ($Beta_c | 0) > 0;
            if (!$cmp118) {
              __label__ = 24;
              break $if_end132$$land_lhs_true115$31;
            }
            
            
            
            
            
            
            
            var $add_ptr124 = $Strength + ($edge << 2);
            
            
            
            
            
            __ZL24EdgeLoop_Chroma_verticalPhS_iiPii($SrcU_addr + ($edge << 1), $add_ptr124, $Alpha_c, $Beta_c, $clipTable_c, $pitch >> 1);
            
            
            
            
            
            
            
            var $add_ptr130 = $Strength + ($edge << 2);
            
            
            
            
            
            __ZL24EdgeLoop_Chroma_verticalPhS_iiPii($SrcV_addr + ($edge << 1), $add_ptr130, $Alpha_c, $Beta_c, $clipTable_c, $pitch >> 1);
          }
        } while (0);
      }
      
      var $inc = $edge + 1;
      $edge = $inc;
      __label__ = 15;
      continue $for_cond$22;
    }
    
    
    if (($filterTopMbEdgeFlag | 0) != 0) {
      __label__ = 28;
    } else {
      __label__ = 37;
    }
    if (__label__ == 28) {
      
      
      
      
      
      
      $MbP = $MbQ + 420 * (0 - HEAP32[$video_addr + 1248 >> 2]);
      var $arraydecay138 = $Strength;
      
      
      __ZL17GetStrength_Edge0PhP13tagMacroblockS1_i($arraydecay138, $MbP, $MbQ, 1);
      
      $str = $Strength;
      
      
      
      
      if ((HEAP32[$str >> 2] | 0) != 0) {
        __label__ = 29;
      } else {
        __label__ = 36;
      }
      if (__label__ == 29) {
        
        
        
        
        
        
        
        
        
        $QP = HEAP32[$MbP + 404 >> 2] + HEAP32[$MbQ + 404 >> 2] + 1 >> 1;
        
        
        
        
        
        $indexA = $QP + HEAP32[$video_addr + 1332 >> 2];
        
        
        
        
        
        $indexB = $QP + HEAP32[$video_addr + 1336 >> 2];
        
        
        
        var $196 = HEAP32[$qp_clip_tab + 4 * $indexA >> 2];
        $indexA = $196;
        
        
        
        var $199 = HEAP32[$qp_clip_tab + 4 * $indexB >> 2];
        $indexB = $199;
        
        
        
        $Alpha = HEAP32[__ZL11ALPHA_TABLE + $indexA * 4 >> 2];
        
        
        
        $Beta = HEAP32[__ZL10BETA_TABLE + $indexB * 4 >> 2];
        
        
        
        $clipTable = __ZL8CLIP_TAB + $indexA * 20;
        
        
        if (($Alpha | 0) > 0) {
          __label__ = 30;
        } else {
          __label__ = 32;
        }
        $land_lhs_true158$$if_end162$43 : do {
          if (__label__ == 30) {
            
            var $cmp159 = ($Beta | 0) > 0;
            if (!$cmp159) {
              __label__ = 32;
              break $land_lhs_true158$$if_end162$43;
            }
            
            var $arraydecay161 = $Strength;
            
            
            
            
            __ZL24EdgeLoop_Luma_horizontalPhS_iiPii($SrcY_addr, $arraydecay161, $Alpha, $Beta, $clipTable, $pitch);
          }
        } while (0);
        
        
        
        
        
        
        
        
        
        $QPC = HEAP32[$MbP + 408 >> 2] + HEAP32[$MbQ + 408 >> 2] + 1 >> 1;
        
        
        
        
        
        $indexA = $QPC + HEAP32[$video_addr + 1332 >> 2];
        
        
        
        
        
        $indexB = $QPC + HEAP32[$video_addr + 1336 >> 2];
        
        
        
        var $224 = HEAP32[$qp_clip_tab + 4 * $indexA >> 2];
        $indexA = $224;
        
        
        
        var $227 = HEAP32[$qp_clip_tab + 4 * $indexB >> 2];
        $indexB = $227;
        
        
        
        $Alpha = HEAP32[__ZL11ALPHA_TABLE + $indexA * 4 >> 2];
        
        
        
        $Beta = HEAP32[__ZL10BETA_TABLE + $indexB * 4 >> 2];
        
        
        
        $clipTable = __ZL8CLIP_TAB + $indexA * 20;
        
        
        if (($Alpha | 0) > 0) {
          __label__ = 33;
        } else {
          __label__ = 35;
        }
        $land_lhs_true179$$if_end186$47 : do {
          if (__label__ == 33) {
            
            var $cmp180 = ($Beta | 0) > 0;
            if (!$cmp180) {
              __label__ = 35;
              break $land_lhs_true179$$if_end186$47;
            }
            
            var $arraydecay182 = $Strength;
            
            
            
            
            
            __ZL26EdgeLoop_Chroma_horizontalPhS_iiPii($SrcU_addr, $arraydecay182, $Alpha, $Beta, $clipTable, $pitch >> 1);
            
            var $arraydecay184 = $Strength;
            
            
            
            
            
            __ZL26EdgeLoop_Chroma_horizontalPhS_iiPii($SrcV_addr, $arraydecay184, $Alpha, $Beta, $clipTable, $pitch >> 1);
          }
        } while (0);
      }
    }
    
    $MbP = $MbQ;
    
    $Alpha = $filterLeftMbEdgeFlag;
    
    $Beta = $mbNum;
    
    
    $clipTable = $tmp;
    
    var $add_ptr190 = $Strength + 4;
    
    __ZL27GetStrength_HorizontalEdgesPhP13tagMacroblock($add_ptr190, $MbQ);
    $edge = 1;
    $for_cond191$53 : while (1) {
      
      var $cmp192 = ($edge | 0) < 4;
      if (!$cmp192) {
        __label__ = 50;
        break $for_cond191$53;
      }
      
      
      
      
      
      
      
      if ((HEAP32[$Strength + ($edge << 2) >> 2] | 0) != 0) {
        __label__ = 40;
      } else {
        __label__ = 48;
      }
      if (__label__ == 40) {
        
        
        if (($Alpha | 0) > 0) {
          __label__ = 41;
        } else {
          __label__ = 43;
        }
        $land_lhs_true200$$if_end209$58 : do {
          if (__label__ == 41) {
            
            var $cmp201 = ($Beta | 0) > 0;
            if (!$cmp201) {
              __label__ = 43;
              break $land_lhs_true200$$if_end209$58;
            }
            
            
            
            
            
            
            
            
            
            var $add_ptr208 = $Strength + ($edge << 2);
            
            
            
            
            __ZL24EdgeLoop_Luma_horizontalPhS_iiPii($SrcY_addr + ($edge << 2) * $pitch, $add_ptr208, $Alpha, $Beta, $clipTable, $pitch);
          }
        } while (0);
        
        
        
        if (($edge & 1 | 0) != 0) {
          __label__ = 47;
        } else {
          __label__ = 44;
        }
        $if_end233$$land_lhs_true212$62 : do {
          if (__label__ == 44) {
            
            var $cmp213 = ($Alpha_c | 0) > 0;
            if (!$cmp213) {
              __label__ = 47;
              break $if_end233$$land_lhs_true212$62;
            }
            
            var $cmp215 = ($Beta_c | 0) > 0;
            if (!$cmp215) {
              __label__ = 47;
              break $if_end233$$land_lhs_true212$62;
            }
            
            
            
            
            
            
            
            
            
            
            var $add_ptr223 = $Strength + ($edge << 2);
            
            
            
            
            
            __ZL26EdgeLoop_Chroma_horizontalPhS_iiPii($SrcU_addr + ($edge << 1) * ($pitch >> 1), $add_ptr223, $Alpha_c, $Beta_c, $clipTable_c, $pitch >> 1);
            
            
            
            
            
            
            
            
            
            
            var $add_ptr231 = $Strength + ($edge << 2);
            
            
            
            
            
            __ZL26EdgeLoop_Chroma_horizontalPhS_iiPii($SrcV_addr + ($edge << 1) * ($pitch >> 1), $add_ptr231, $Alpha_c, $Beta_c, $clipTable_c, $pitch >> 1);
          }
        } while (0);
      }
      
      var $inc236 = $edge + 1;
      $edge = $inc236;
      __label__ = 38;
      continue $for_cond191$53;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __ZL17GetStrength_Edge0PhP13tagMacroblockS1_i($Strength, $MbP, $MbQ, $dir) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $Strength_addr;
  var $MbP_addr;
  var $MbQ_addr;
  var $dir_addr;
  var $tmp;
  var $ptrQ;
  var $ptrP;
  var $vptr;
  var $pStrength;
  var $refIdx;
  $Strength_addr = $Strength;
  $MbP_addr = $MbP;
  $MbQ_addr = $MbQ;
  $dir_addr = $dir;
  
  
  
  
  if ((HEAP32[$MbP_addr + 164 >> 2] | 0) == 0) {
    __label__ = 4;
  } else {
    __label__ = 1;
  }
  $if_then$$lor_lhs_false$2 : do {
    if (__label__ == 1) {
      
      
      
      
      if ((HEAP32[$MbP_addr + 164 >> 2] | 0) == 1) {
        __label__ = 4;
        break $if_then$$lor_lhs_false$2;
      }
      
      
      
      
      if ((HEAP32[$MbQ_addr + 164 >> 2] | 0) == 0) {
        __label__ = 4;
        break $if_then$$lor_lhs_false$2;
      }
      
      
      
      
      if ((HEAP32[$MbQ_addr + 164 >> 2] | 0) == 1) {
        __label__ = 4;
        break $if_then$$lor_lhs_false$2;
      }
      
      
      HEAP32[$Strength_addr >> 2] = 0;
      
      
      if (($dir_addr | 0) == 0) {
        __label__ = 6;
      } else {
        __label__ = 63;
      }
      if (__label__ == 6) {
        
        
        
        
        $refIdx = $MbQ_addr + 148;
        
        
        $ptrQ = $refIdx;
        
        
        
        
        $refIdx = $MbP_addr + 148;
        
        
        $ptrP = $refIdx;
        
        $pStrength = $Strength_addr;
        
        
        
        var $conv = (tempInt = HEAP16[$ptrQ >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
        
        
        
        var $conv19 = (tempInt = HEAP16[$ptrP + 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
        
        if (($conv | 0) != ($conv19 | 0)) {
          __label__ = 7;
        } else {
          __label__ = 8;
        }
        if (__label__ == 7) {
          
          
          HEAP8[$pStrength >> 0] = 1;
        }
        
        
        
        var $conv24 = (tempInt = HEAP16[$ptrQ + 4 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
        
        
        
        var $conv26 = (tempInt = HEAP16[$ptrP + 6 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
        
        if (($conv24 | 0) != ($conv26 | 0)) {
          __label__ = 9;
        } else {
          __label__ = 10;
        }
        if (__label__ == 9) {
          
          
          HEAP8[$pStrength + 2 >> 0] = 1;
        }
        
        
        var $34 = HEAP8[$pStrength >> 0];
        
        
        HEAP8[$pStrength + 1 >> 0] = $34;
        
        
        var $37 = HEAP8[$pStrength + 2 >> 0];
        
        
        HEAP8[$pStrength + 3 >> 0] = $37;
        
        
        
        
        
        
        if ((HEAPU8[$MbQ_addr + 380 >> 0] & 255 | 0) != 0) {
          __label__ = 12;
        } else {
          __label__ = 11;
        }
        $if_then43$$lor_lhs_false38$15 : do {
          if (__label__ == 11) {
            
            
            
            
            
            
            if ((HEAPU8[$MbP_addr + 380 + 3 >> 0] & 255 | 0) != 0) {
              __label__ = 12;
              break $if_then43$$lor_lhs_false38$15;
            } else {
              __label__ = 13;
              break $if_then43$$lor_lhs_false38$15;
            }
          }
        } while (0);
        if (__label__ == 12) {
          
          
          HEAP8[$pStrength >> 0] = 2;
        }
        
        
        
        
        
        
        if ((HEAPU8[$MbQ_addr + 380 + 4 >> 0] & 255 | 0) != 0) {
          __label__ = 15;
        } else {
          __label__ = 14;
        }
        $if_then55$$lor_lhs_false50$20 : do {
          if (__label__ == 14) {
            
            
            
            
            
            
            if ((HEAPU8[$MbP_addr + 380 + 7 >> 0] & 255 | 0) != 0) {
              __label__ = 15;
              break $if_then55$$lor_lhs_false50$20;
            } else {
              __label__ = 16;
              break $if_then55$$lor_lhs_false50$20;
            }
          }
        } while (0);
        if (__label__ == 15) {
          
          
          HEAP8[$pStrength + 1 >> 0] = 2;
        }
        
        
        
        
        
        
        if ((HEAPU8[$MbQ_addr + 380 + 8 >> 0] & 255 | 0) != 0) {
          __label__ = 18;
        } else {
          __label__ = 17;
        }
        $if_then67$$lor_lhs_false62$25 : do {
          if (__label__ == 17) {
            
            
            
            
            
            
            if ((HEAPU8[$MbP_addr + 380 + 11 >> 0] & 255 | 0) != 0) {
              __label__ = 18;
              break $if_then67$$lor_lhs_false62$25;
            } else {
              __label__ = 19;
              break $if_then67$$lor_lhs_false62$25;
            }
          }
        } while (0);
        if (__label__ == 18) {
          
          
          HEAP8[$pStrength + 2 >> 0] = 2;
        }
        
        
        
        
        
        
        if ((HEAPU8[$MbQ_addr + 380 + 12 >> 0] & 255 | 0) != 0) {
          __label__ = 21;
        } else {
          __label__ = 20;
        }
        $if_then79$$lor_lhs_false74$30 : do {
          if (__label__ == 20) {
            
            
            
            
            
            
            if ((HEAPU8[$MbP_addr + 380 + 15 >> 0] & 255 | 0) != 0) {
              __label__ = 21;
              break $if_then79$$lor_lhs_false74$30;
            } else {
              __label__ = 22;
              break $if_then79$$lor_lhs_false74$30;
            }
          }
        } while (0);
        if (__label__ == 21) {
          
          
          HEAP8[$pStrength + 3 >> 0] = 2;
        }
        
        
        
        
        $vptr = $MbQ_addr + 4;
        
        
        $ptrQ = $vptr;
        
        
        
        
        
        $ptrP = $MbP_addr + 4 + 12;
        
        
        
        
        if ((HEAPU8[$pStrength >> 0] & 255 | 0) == 0) {
          __label__ = 23;
        } else {
          __label__ = 32;
        }
        if (__label__ == 23) {
          var $67 = $ptrQ;
          var $incdec_ptr = $67 + 2;
          $ptrQ = $incdec_ptr;
          
          var $conv88 = (tempInt = HEAP16[$67 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          var $69 = $ptrP;
          var $incdec_ptr89 = $69 + 2;
          $ptrP = $incdec_ptr89;
          
          var $conv90 = (tempInt = HEAP16[$69 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv88 - $conv90;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 24;
          } else {
            __label__ = 25;
          }
          if (__label__ == 24) {
            
            var $sub93 = 0 - $tmp;
            $tmp = $sub93;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 26;
          } else {
            __label__ = 27;
          }
          if (__label__ == 26) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
          var $75 = $ptrQ;
          var $incdec_ptr98 = $75 + -2;
          $ptrQ = $incdec_ptr98;
          
          var $conv99 = (tempInt = HEAP16[$75 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          var $77 = $ptrP;
          var $incdec_ptr100 = $77 + -2;
          $ptrP = $incdec_ptr100;
          
          var $conv101 = (tempInt = HEAP16[$77 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv99 - $conv101;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 28;
          } else {
            __label__ = 29;
          }
          if (__label__ == 28) {
            
            var $sub105 = 0 - $tmp;
            $tmp = $sub105;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 30;
          } else {
            __label__ = 31;
          }
          if (__label__ == 30) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
        }
        
        var $incdec_ptr111 = $pStrength + 1;
        $pStrength = $incdec_ptr111;
        
        var $add_ptr112 = $ptrQ + 16;
        $ptrQ = $add_ptr112;
        
        var $add_ptr113 = $ptrP + 16;
        $ptrP = $add_ptr113;
        
        
        
        
        if ((HEAPU8[$pStrength >> 0] & 255 | 0) == 0) {
          __label__ = 33;
        } else {
          __label__ = 42;
        }
        if (__label__ == 33) {
          var $88 = $ptrQ;
          var $incdec_ptr117 = $88 + 2;
          $ptrQ = $incdec_ptr117;
          
          var $conv118 = (tempInt = HEAP16[$88 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          var $90 = $ptrP;
          var $incdec_ptr119 = $90 + 2;
          $ptrP = $incdec_ptr119;
          
          var $conv120 = (tempInt = HEAP16[$90 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv118 - $conv120;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 34;
          } else {
            __label__ = 35;
          }
          if (__label__ == 34) {
            
            var $sub124 = 0 - $tmp;
            $tmp = $sub124;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 36;
          } else {
            __label__ = 37;
          }
          if (__label__ == 36) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
          var $96 = $ptrQ;
          var $incdec_ptr129 = $96 + -2;
          $ptrQ = $incdec_ptr129;
          
          var $conv130 = (tempInt = HEAP16[$96 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          var $98 = $ptrP;
          var $incdec_ptr131 = $98 + -2;
          $ptrP = $incdec_ptr131;
          
          var $conv132 = (tempInt = HEAP16[$98 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv130 - $conv132;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 38;
          } else {
            __label__ = 39;
          }
          if (__label__ == 38) {
            
            var $sub136 = 0 - $tmp;
            $tmp = $sub136;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 40;
          } else {
            __label__ = 41;
          }
          if (__label__ == 40) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
        }
        
        var $incdec_ptr142 = $pStrength + 1;
        $pStrength = $incdec_ptr142;
        
        var $add_ptr143 = $ptrQ + 16;
        $ptrQ = $add_ptr143;
        
        var $add_ptr144 = $ptrP + 16;
        $ptrP = $add_ptr144;
        
        
        
        
        if ((HEAPU8[$pStrength >> 0] & 255 | 0) == 0) {
          __label__ = 43;
        } else {
          __label__ = 52;
        }
        if (__label__ == 43) {
          var $109 = $ptrQ;
          var $incdec_ptr148 = $109 + 2;
          $ptrQ = $incdec_ptr148;
          
          var $conv149 = (tempInt = HEAP16[$109 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          var $111 = $ptrP;
          var $incdec_ptr150 = $111 + 2;
          $ptrP = $incdec_ptr150;
          
          var $conv151 = (tempInt = HEAP16[$111 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv149 - $conv151;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 44;
          } else {
            __label__ = 45;
          }
          if (__label__ == 44) {
            
            var $sub155 = 0 - $tmp;
            $tmp = $sub155;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 46;
          } else {
            __label__ = 47;
          }
          if (__label__ == 46) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
          var $117 = $ptrQ;
          var $incdec_ptr160 = $117 + -2;
          $ptrQ = $incdec_ptr160;
          
          var $conv161 = (tempInt = HEAP16[$117 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          var $119 = $ptrP;
          var $incdec_ptr162 = $119 + -2;
          $ptrP = $incdec_ptr162;
          
          var $conv163 = (tempInt = HEAP16[$119 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv161 - $conv163;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 48;
          } else {
            __label__ = 49;
          }
          if (__label__ == 48) {
            
            var $sub167 = 0 - $tmp;
            $tmp = $sub167;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 50;
          } else {
            __label__ = 51;
          }
          if (__label__ == 50) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
        }
        
        var $incdec_ptr173 = $pStrength + 1;
        $pStrength = $incdec_ptr173;
        
        var $add_ptr174 = $ptrQ + 16;
        $ptrQ = $add_ptr174;
        
        var $add_ptr175 = $ptrP + 16;
        $ptrP = $add_ptr175;
        
        
        
        
        if ((HEAPU8[$pStrength >> 0] & 255 | 0) == 0) {
          __label__ = 53;
        } else {
          __label__ = 62;
        }
        if (__label__ == 53) {
          var $130 = $ptrQ;
          var $incdec_ptr179 = $130 + 2;
          $ptrQ = $incdec_ptr179;
          
          var $conv180 = (tempInt = HEAP16[$130 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          var $132 = $ptrP;
          var $incdec_ptr181 = $132 + 2;
          $ptrP = $incdec_ptr181;
          
          var $conv182 = (tempInt = HEAP16[$132 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv180 - $conv182;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 54;
          } else {
            __label__ = 55;
          }
          if (__label__ == 54) {
            
            var $sub186 = 0 - $tmp;
            $tmp = $sub186;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 56;
          } else {
            __label__ = 57;
          }
          if (__label__ == 56) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
          var $138 = $ptrQ;
          var $incdec_ptr191 = $138 + -2;
          $ptrQ = $incdec_ptr191;
          
          var $conv192 = (tempInt = HEAP16[$138 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          var $140 = $ptrP;
          var $incdec_ptr193 = $140 + -2;
          $ptrP = $incdec_ptr193;
          
          var $conv194 = (tempInt = HEAP16[$140 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv192 - $conv194;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 58;
          } else {
            __label__ = 59;
          }
          if (__label__ == 58) {
            
            var $sub198 = 0 - $tmp;
            $tmp = $sub198;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 60;
          } else {
            __label__ = 61;
          }
          if (__label__ == 60) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
        }
      } else if (__label__ == 63) {
        
        
        
        
        $refIdx = $MbQ_addr + 148;
        
        
        $ptrQ = $refIdx;
        
        
        
        
        $refIdx = $MbP_addr + 148;
        
        
        $ptrP = $refIdx;
        
        $pStrength = $Strength_addr;
        
        
        
        var $conv210 = (tempInt = HEAP16[$ptrQ >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
        
        
        
        var $conv212 = (tempInt = HEAP16[$ptrP + 4 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
        
        if (($conv210 | 0) != ($conv212 | 0)) {
          __label__ = 64;
        } else {
          __label__ = 65;
        }
        if (__label__ == 64) {
          
          
          HEAP8[$pStrength >> 0] = 1;
        }
        
        
        
        var $conv218 = (tempInt = HEAP16[$ptrQ + 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
        
        
        
        var $conv220 = (tempInt = HEAP16[$ptrP + 6 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
        
        if (($conv218 | 0) != ($conv220 | 0)) {
          __label__ = 66;
        } else {
          __label__ = 67;
        }
        if (__label__ == 66) {
          
          
          HEAP8[$pStrength + 2 >> 0] = 1;
        }
        
        
        var $166 = HEAP8[$pStrength >> 0];
        
        
        HEAP8[$pStrength + 1 >> 0] = $166;
        
        
        var $169 = HEAP8[$pStrength + 2 >> 0];
        
        
        HEAP8[$pStrength + 3 >> 0] = $169;
        
        
        
        
        
        
        if ((HEAPU8[$MbQ_addr + 380 >> 0] & 255 | 0) != 0) {
          __label__ = 69;
        } else {
          __label__ = 68;
        }
        $if_then238$$lor_lhs_false233$102 : do {
          if (__label__ == 68) {
            
            
            
            
            
            
            if ((HEAPU8[$MbP_addr + 380 + 12 >> 0] & 255 | 0) != 0) {
              __label__ = 69;
              break $if_then238$$lor_lhs_false233$102;
            } else {
              __label__ = 70;
              break $if_then238$$lor_lhs_false233$102;
            }
          }
        } while (0);
        if (__label__ == 69) {
          
          
          HEAP8[$pStrength >> 0] = 2;
        }
        
        
        
        
        
        
        if ((HEAPU8[$MbQ_addr + 380 + 1 >> 0] & 255 | 0) != 0) {
          __label__ = 72;
        } else {
          __label__ = 71;
        }
        $if_then250$$lor_lhs_false245$107 : do {
          if (__label__ == 71) {
            
            
            
            
            
            
            if ((HEAPU8[$MbP_addr + 380 + 13 >> 0] & 255 | 0) != 0) {
              __label__ = 72;
              break $if_then250$$lor_lhs_false245$107;
            } else {
              __label__ = 73;
              break $if_then250$$lor_lhs_false245$107;
            }
          }
        } while (0);
        if (__label__ == 72) {
          
          
          HEAP8[$pStrength + 1 >> 0] = 2;
        }
        
        
        
        
        
        
        if ((HEAPU8[$MbQ_addr + 380 + 2 >> 0] & 255 | 0) != 0) {
          __label__ = 75;
        } else {
          __label__ = 74;
        }
        $if_then262$$lor_lhs_false257$112 : do {
          if (__label__ == 74) {
            
            
            
            
            
            
            if ((HEAPU8[$MbP_addr + 380 + 14 >> 0] & 255 | 0) != 0) {
              __label__ = 75;
              break $if_then262$$lor_lhs_false257$112;
            } else {
              __label__ = 76;
              break $if_then262$$lor_lhs_false257$112;
            }
          }
        } while (0);
        if (__label__ == 75) {
          
          
          HEAP8[$pStrength + 2 >> 0] = 2;
        }
        
        
        
        
        
        
        if ((HEAPU8[$MbQ_addr + 380 + 3 >> 0] & 255 | 0) != 0) {
          __label__ = 78;
        } else {
          __label__ = 77;
        }
        $if_then274$$lor_lhs_false269$117 : do {
          if (__label__ == 77) {
            
            
            
            
            
            
            if ((HEAPU8[$MbP_addr + 380 + 15 >> 0] & 255 | 0) != 0) {
              __label__ = 78;
              break $if_then274$$lor_lhs_false269$117;
            } else {
              __label__ = 79;
              break $if_then274$$lor_lhs_false269$117;
            }
          }
        } while (0);
        if (__label__ == 78) {
          
          
          HEAP8[$pStrength + 3 >> 0] = 2;
        }
        
        
        
        
        $vptr = $MbQ_addr + 4;
        
        
        $ptrQ = $vptr;
        
        
        
        
        
        $ptrP = $MbP_addr + 4 + 48;
        
        
        
        
        if ((HEAPU8[$pStrength >> 0] & 255 | 0) == 0) {
          __label__ = 80;
        } else {
          __label__ = 89;
        }
        if (__label__ == 80) {
          var $199 = $ptrQ;
          var $incdec_ptr285 = $199 + 2;
          $ptrQ = $incdec_ptr285;
          
          var $conv286 = (tempInt = HEAP16[$199 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          var $201 = $ptrP;
          var $incdec_ptr287 = $201 + 2;
          $ptrP = $incdec_ptr287;
          
          var $conv288 = (tempInt = HEAP16[$201 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv286 - $conv288;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 81;
          } else {
            __label__ = 82;
          }
          if (__label__ == 81) {
            
            var $sub292 = 0 - $tmp;
            $tmp = $sub292;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 83;
          } else {
            __label__ = 84;
          }
          if (__label__ == 83) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
          var $207 = $ptrQ;
          var $incdec_ptr297 = $207 + -2;
          $ptrQ = $incdec_ptr297;
          
          var $conv298 = (tempInt = HEAP16[$207 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          var $209 = $ptrP;
          var $incdec_ptr299 = $209 + -2;
          $ptrP = $incdec_ptr299;
          
          var $conv300 = (tempInt = HEAP16[$209 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv298 - $conv300;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 85;
          } else {
            __label__ = 86;
          }
          if (__label__ == 85) {
            
            var $sub304 = 0 - $tmp;
            $tmp = $sub304;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 87;
          } else {
            __label__ = 88;
          }
          if (__label__ == 87) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
        }
        
        var $incdec_ptr310 = $pStrength + 1;
        $pStrength = $incdec_ptr310;
        
        var $add_ptr311 = $ptrQ + 4;
        $ptrQ = $add_ptr311;
        
        var $add_ptr312 = $ptrP + 4;
        $ptrP = $add_ptr312;
        
        
        
        
        if ((HEAPU8[$pStrength >> 0] & 255 | 0) == 0) {
          __label__ = 90;
        } else {
          __label__ = 99;
        }
        if (__label__ == 90) {
          var $220 = $ptrQ;
          var $incdec_ptr316 = $220 + 2;
          $ptrQ = $incdec_ptr316;
          
          var $conv317 = (tempInt = HEAP16[$220 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          var $222 = $ptrP;
          var $incdec_ptr318 = $222 + 2;
          $ptrP = $incdec_ptr318;
          
          var $conv319 = (tempInt = HEAP16[$222 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv317 - $conv319;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 91;
          } else {
            __label__ = 92;
          }
          if (__label__ == 91) {
            
            var $sub323 = 0 - $tmp;
            $tmp = $sub323;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 93;
          } else {
            __label__ = 94;
          }
          if (__label__ == 93) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
          var $228 = $ptrQ;
          var $incdec_ptr328 = $228 + -2;
          $ptrQ = $incdec_ptr328;
          
          var $conv329 = (tempInt = HEAP16[$228 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          var $230 = $ptrP;
          var $incdec_ptr330 = $230 + -2;
          $ptrP = $incdec_ptr330;
          
          var $conv331 = (tempInt = HEAP16[$230 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv329 - $conv331;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 95;
          } else {
            __label__ = 96;
          }
          if (__label__ == 95) {
            
            var $sub335 = 0 - $tmp;
            $tmp = $sub335;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 97;
          } else {
            __label__ = 98;
          }
          if (__label__ == 97) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
        }
        
        var $incdec_ptr341 = $pStrength + 1;
        $pStrength = $incdec_ptr341;
        
        var $add_ptr342 = $ptrQ + 4;
        $ptrQ = $add_ptr342;
        
        var $add_ptr343 = $ptrP + 4;
        $ptrP = $add_ptr343;
        
        
        
        
        if ((HEAPU8[$pStrength >> 0] & 255 | 0) == 0) {
          __label__ = 100;
        } else {
          __label__ = 109;
        }
        if (__label__ == 100) {
          var $241 = $ptrQ;
          var $incdec_ptr347 = $241 + 2;
          $ptrQ = $incdec_ptr347;
          
          var $conv348 = (tempInt = HEAP16[$241 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          var $243 = $ptrP;
          var $incdec_ptr349 = $243 + 2;
          $ptrP = $incdec_ptr349;
          
          var $conv350 = (tempInt = HEAP16[$243 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv348 - $conv350;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 101;
          } else {
            __label__ = 102;
          }
          if (__label__ == 101) {
            
            var $sub354 = 0 - $tmp;
            $tmp = $sub354;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 103;
          } else {
            __label__ = 104;
          }
          if (__label__ == 103) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
          var $249 = $ptrQ;
          var $incdec_ptr359 = $249 + -2;
          $ptrQ = $incdec_ptr359;
          
          var $conv360 = (tempInt = HEAP16[$249 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          var $251 = $ptrP;
          var $incdec_ptr361 = $251 + -2;
          $ptrP = $incdec_ptr361;
          
          var $conv362 = (tempInt = HEAP16[$251 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv360 - $conv362;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 105;
          } else {
            __label__ = 106;
          }
          if (__label__ == 105) {
            
            var $sub366 = 0 - $tmp;
            $tmp = $sub366;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 107;
          } else {
            __label__ = 108;
          }
          if (__label__ == 107) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
        }
        
        var $incdec_ptr372 = $pStrength + 1;
        $pStrength = $incdec_ptr372;
        
        var $add_ptr373 = $ptrQ + 4;
        $ptrQ = $add_ptr373;
        
        var $add_ptr374 = $ptrP + 4;
        $ptrP = $add_ptr374;
        
        
        
        
        if ((HEAPU8[$pStrength >> 0] & 255 | 0) == 0) {
          __label__ = 110;
        } else {
          __label__ = 119;
        }
        if (__label__ == 110) {
          var $262 = $ptrQ;
          var $incdec_ptr378 = $262 + 2;
          $ptrQ = $incdec_ptr378;
          
          var $conv379 = (tempInt = HEAP16[$262 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          var $264 = $ptrP;
          var $incdec_ptr380 = $264 + 2;
          $ptrP = $incdec_ptr380;
          
          var $conv381 = (tempInt = HEAP16[$264 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv379 - $conv381;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 111;
          } else {
            __label__ = 112;
          }
          if (__label__ == 111) {
            
            var $sub385 = 0 - $tmp;
            $tmp = $sub385;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 113;
          } else {
            __label__ = 114;
          }
          if (__label__ == 113) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
          var $270 = $ptrQ;
          var $incdec_ptr390 = $270 + -2;
          $ptrQ = $incdec_ptr390;
          
          var $conv391 = (tempInt = HEAP16[$270 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          var $272 = $ptrP;
          var $incdec_ptr392 = $272 + -2;
          $ptrP = $incdec_ptr392;
          
          var $conv393 = (tempInt = HEAP16[$272 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv391 - $conv393;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 115;
          } else {
            __label__ = 116;
          }
          if (__label__ == 115) {
            
            var $sub397 = 0 - $tmp;
            $tmp = $sub397;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 117;
          } else {
            __label__ = 118;
          }
          if (__label__ == 117) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
        }
      }
      __label__ = 121;
      break $if_then$$lor_lhs_false$2;
    }
  } while (0);
  if (__label__ == 4) {
    var $8 = HEAP32[__ZL14ININT_STRENGTH >> 2];
    
    
    HEAP32[$Strength_addr >> 2] = $8;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __ZL22EdgeLoop_Luma_verticalPhS_iiPii($SrcPtr, $Strength, $Alpha, $Beta, $clipTable, $pitch) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $SrcPtr_addr;
  var $Strength_addr;
  var $Alpha_addr;
  var $Beta_addr;
  var $clipTable_addr;
  var $pitch_addr;
  var $pel;
  var $ap;
  var $aq;
  var $C0;
  var $c0;
  var $dif;
  var $AbsDelta;
  var $Strng;
  var $tmp;
  var $tmp1;
  var $L2;
  var $L1;
  var $L0;
  var $R0;
  var $R1;
  var $R2;
  var $ptr;
  var $ptr1;
  var $R_in;
  var $L_in;
  var $R_out;
  var $L_out;
  $SrcPtr_addr = $SrcPtr;
  $Strength_addr = $Strength;
  $Alpha_addr = $Alpha;
  $Beta_addr = $Beta;
  $clipTable_addr = $clipTable;
  $pitch_addr = $pitch;
  $ap = 1;
  $aq = 1;
  $L2 = 0;
  $R2 = 0;
  
  
  
  
  
  if ((HEAPU8[$Strength_addr >> 0] & 255 | 0) == 4) {
    __label__ = 1;
  } else {
    __label__ = 24;
  }
  if (__label__ == 1) {
    $pel = 0;
    while (1) {
      
      var $cmp14 = ($pel | 0) < 16;
      if (!$cmp14) {
        __label__ = 23;
        break;
      }
      
      
      
      $R_in = HEAP32[$SrcPtr_addr >> 2];
      
      var $add_ptr = $SrcPtr_addr + -4;
      
      
      $L_in = HEAP32[$add_ptr >> 2];
      
      
      
      $R1 = $R_in >>> 8 & 255;
      
      
      $R0 = $R_in & 255;
      
      
      $L0 = $L_in >>> 24;
      
      
      
      $L1 = $L_in >>> 16 & 255;
      
      
      
      
      $tmp1 = ($R_in & 255) - $R1;
      
      
      if (($tmp1 | 0) < 0) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      if (__label__ == 4) {
        
        var $sub22 = 0 - $tmp1;
        $tmp1 = $sub22;
      }
      
      
      
      $tmp = $tmp1 - $Beta_addr;
      
      
      
      
      $tmp1 = ($L_in >>> 24) - $L1;
      
      
      if (($tmp1 | 0) < 0) {
        __label__ = 6;
      } else {
        __label__ = 7;
      }
      if (__label__ == 6) {
        
        var $sub28 = 0 - $tmp1;
        $tmp1 = $sub28;
      }
      
      
      
      
      var $and31 = $tmp & $tmp1 - $Beta_addr;
      $tmp = $and31;
      
      
      
      
      
      $AbsDelta = ($R_in & 255) - ($L_in >>> 24);
      
      
      if (($AbsDelta | 0) < 0) {
        __label__ = 8;
      } else {
        __label__ = 9;
      }
      if (__label__ == 8) {
        
        var $sub37 = 0 - $AbsDelta;
        $AbsDelta = $sub37;
      }
      
      
      
      
      var $and40 = $tmp & $AbsDelta - $Alpha_addr;
      $tmp = $and40;
      
      
      if (($tmp | 0) < 0) {
        __label__ = 10;
      } else {
        __label__ = 21;
      }
      if (__label__ == 10) {
        
        
        
        
        var $sub44 = $AbsDelta - (($Alpha_addr >> 2) + 2);
        $AbsDelta = $sub44;
        
        
        
        $R2 = $R_in >>> 16 & 255;
        
        
        
        $L2 = $L_in >>> 8 & 255;
        
        
        
        
        $tmp1 = ($R_in & 255) - $R2;
        
        
        if (($tmp1 | 0) < 0) {
          __label__ = 11;
        } else {
          __label__ = 12;
        }
        if (__label__ == 11) {
          
          var $sub53 = 0 - $tmp1;
          $tmp1 = $sub53;
        }
        
        
        
        
        
        $aq = $AbsDelta & $tmp1 - $Beta_addr;
        
        
        
        
        $tmp1 = ($L_in >>> 24) - $L2;
        
        
        if (($tmp1 | 0) < 0) {
          __label__ = 13;
        } else {
          __label__ = 14;
        }
        if (__label__ == 13) {
          
          var $sub61 = 0 - $tmp1;
          $tmp1 = $sub61;
        }
        
        
        
        
        
        $ap = $AbsDelta & $tmp1 - $Beta_addr;
        
        $ptr = $SrcPtr_addr;
        
        
        if (($aq | 0) < 0) {
          __label__ = 15;
        } else {
          __label__ = 16;
        }
        if (__label__ == 15) {
          
          
          
          $R_out = $R_in >>> 24 << 24;
          
          
          
          
          
          $tmp = $R0 + $L0 + $R1;
          
          
          
          
          
          
          
          
          
          var $or = $R_out | ($tmp << 1) + $L1 + $R2 + 4 >> 3;
          $R_out = $or;
          
          
          var $add75 = $tmp + $R2;
          $tmp = $add75;
          
          
          
          
          
          var $or79 = $R_out | $tmp + 2 >> 2 << 8;
          $R_out = $or79;
          
          
          
          
          
          $tmp1 = ($R_in >>> 24) + $R2 << 1;
          
          
          
          
          
          
          
          var $or87 = $R_out | $tmp1 + $tmp + 4 >> 3 << 16;
          $R_out = $or87;
          
          
          
          HEAP32[$SrcPtr_addr >> 2] = $R_out;
        } else if (__label__ == 16) {
          
          
          
          
          
          
          
          
          
          
          HEAP8[$ptr >> 0] = ($R1 << 1) + $R0 + $L1 + 2 >> 2 & 255;
        }
        
        
        if (($ap | 0) < 0) {
          __label__ = 18;
        } else {
          __label__ = 19;
        }
        if (__label__ == 18) {
          
          
          
          $L_out = $L_in << 24 >>> 24;
          
          
          
          
          
          $tmp = $R0 + $L0 + $L1;
          
          
          
          
          
          
          
          
          
          
          var $or107 = $L_out | ($tmp << 1) + $R1 + $L2 + 4 >> 3 << 24;
          $L_out = $or107;
          
          
          var $add108 = $tmp + $L2;
          $tmp = $add108;
          
          
          
          
          
          var $or112 = $L_out | $tmp + 2 >> 2 << 16;
          $L_out = $or112;
          
          
          
          
          
          $tmp1 = ($L_in & 255) + $L2 << 1;
          
          
          
          
          
          
          
          var $or120 = $L_out | $tmp1 + $tmp + 4 >> 3 << 8;
          $L_out = $or120;
          
          
          var $add_ptr121 = $SrcPtr_addr + -4;
          
          HEAP32[$add_ptr121 >> 2] = $L_out;
        } else if (__label__ == 19) {
          
          
          
          
          
          
          
          
          
          
          var $incdec_ptr = $ptr + -1;
          $ptr = $incdec_ptr;
          HEAP8[$incdec_ptr >> 0] = ($L1 << 1) + $L0 + $R1 + 2 >> 2 & 255;
        }
      }
      
      
      var $add_ptr131 = $SrcPtr_addr + $pitch_addr;
      $SrcPtr_addr = $add_ptr131;
      
      var $inc = $pel + 1;
      $pel = $inc;
      __label__ = 2;
      continue;
    }
  } else if (__label__ == 24) {
    $pel = 0;
    while (1) {
      
      var $cmp134 = ($pel | 0) < 16;
      if (!$cmp134) {
        __label__ = 62;
        break;
      }
      
      
      
      
      
      
      $Strng = HEAPU8[$Strength_addr + ($pel >> 2) >> 0] & 255;
      
      
      if (($Strng | 0) != 0) {
        __label__ = 27;
      } else {
        __label__ = 60;
      }
      if (__label__ == 27) {
        
        
        
        $R_in = HEAP32[$SrcPtr_addr >> 2];
        
        var $add_ptr140 = $SrcPtr_addr + -4;
        
        
        $L_in = HEAP32[$add_ptr140 >> 2];
        
        
        
        $R1 = $R_in >>> 8 & 255;
        
        
        $R0 = $R_in & 255;
        
        
        $L0 = $L_in >>> 24;
        
        
        
        $L1 = $L_in >>> 16 & 255;
        
        
        
        $tmp = $R0 - $L0;
        
        
        if (($tmp | 0) < 0) {
          __label__ = 28;
        } else {
          __label__ = 29;
        }
        if (__label__ == 28) {
          
          var $sub150 = 0 - $tmp;
          $tmp = $sub150;
        }
        
        
        var $sub152 = $tmp - $Alpha_addr;
        $tmp = $sub152;
        
        
        
        $tmp1 = $R0 - $R1;
        
        
        if (($tmp1 | 0) < 0) {
          __label__ = 30;
        } else {
          __label__ = 31;
        }
        if (__label__ == 30) {
          
          var $sub156 = 0 - $tmp1;
          $tmp1 = $sub156;
        }
        
        
        
        
        var $and159 = $tmp & $tmp1 - $Beta_addr;
        $tmp = $and159;
        
        
        
        $tmp1 = $L0 - $L1;
        
        
        if (($tmp1 | 0) < 0) {
          __label__ = 32;
        } else {
          __label__ = 33;
        }
        if (__label__ == 32) {
          
          var $sub163 = 0 - $tmp1;
          $tmp1 = $sub163;
        }
        
        
        
        
        var $and166 = $tmp & $tmp1 - $Beta_addr;
        $tmp = $and166;
        
        
        if (($tmp | 0) < 0) {
          __label__ = 34;
        } else {
          __label__ = 59;
        }
        if (__label__ == 34) {
          
          var $arrayidx169 = $SrcPtr_addr + -3;
          
          
          $L2 = HEAPU8[$arrayidx169 >> 0] & 255;
          
          
          
          
          $R2 = HEAPU8[$SrcPtr_addr + 2 >> 0] & 255;
          
          
          
          $tmp = $R0 - $R2;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 35;
          } else {
            __label__ = 36;
          }
          if (__label__ == 35) {
            
            var $sub176 = 0 - $tmp;
            $tmp = $sub176;
          }
          
          
          
          $aq = $tmp - $Beta_addr;
          
          
          
          $tmp = $L0 - $L2;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 37;
          } else {
            __label__ = 38;
          }
          if (__label__ == 37) {
            
            var $sub182 = 0 - $tmp;
            $tmp = $sub182;
          }
          
          
          
          $ap = $tmp - $Beta_addr;
          
          
          
          
          $C0 = HEAP32[$clipTable_addr + 4 * $Strng >> 2];
          $c0 = HEAP32[$clipTable_addr + 4 * $Strng >> 2];
          
          
          if (($ap | 0) < 0) {
            __label__ = 39;
          } else {
            __label__ = 40;
          }
          if (__label__ == 39) {
            
            var $inc188 = $c0 + 1;
            $c0 = $inc188;
          }
          
          
          if (($aq | 0) < 0) {
            __label__ = 41;
          } else {
            __label__ = 42;
          }
          if (__label__ == 41) {
            
            var $inc192 = $c0 + 1;
            $c0 = $inc192;
          }
          
          
          
          
          
          
          
          
          
          
          $dif = ($R0 - $L0 << 2) + ($L1 - $R1) + 4 >> 3;
          
          
          
          $tmp = $dif + $c0;
          
          
          
          
          if ($tmp >>> 0 > $c0 << 1 >>> 0) {
            __label__ = 43;
          } else {
            __label__ = 44;
          }
          if (__label__ == 43) {
            
            
            var $neg = $tmp >> 31 ^ -1;
            $tmp = $neg;
            
            
            
            
            
            
            $dif = ($tmp & $c0 << 1) - $c0;
          }
          
          $ptr = $SrcPtr_addr;
          
          var $add_ptr209 = $SrcPtr_addr + -1;
          $ptr1 = $add_ptr209;
          
          
          
          $R_in = $R0 - $dif;
          
          
          
          $L_in = $L0 + $dif;
          
          
          if ($R_in >>> 0 > 255) {
            __label__ = 45;
          } else {
            __label__ = 46;
          }
          if (__label__ == 45) {
            
            
            var $neg215 = $R_in >> 31 ^ -1;
            $tmp = $neg215;
            
            
            $R_in = $tmp & 255;
          }
          
          
          if ($L_in >>> 0 > 255) {
            __label__ = 47;
          } else {
            __label__ = 48;
          }
          if (__label__ == 47) {
            
            
            var $neg221 = $L_in >> 31 ^ -1;
            $tmp = $neg221;
            
            
            $L_in = $tmp & 255;
          }
          
          
          var $190 = $ptr1;
          var $incdec_ptr225 = $190 + -1;
          $ptr1 = $incdec_ptr225;
          HEAP8[$190 >> 0] = $L_in & 255;
          
          
          var $192 = $ptr;
          var $incdec_ptr227 = $192 + 1;
          $ptr = $incdec_ptr227;
          HEAP8[$192 >> 0] = $R_in & 255;
          
          
          if (($C0 | 0) != 0) {
            __label__ = 49;
          } else {
            __label__ = 58;
          }
          if (__label__ == 49) {
            
            
            if (($ap | 0) < 0) {
              __label__ = 50;
            } else {
              __label__ = 53;
            }
            if (__label__ == 50) {
              
              
              
              
              
              
              
              
              
              
              var $shr238 = $L2 + ($R0 + $L0 + 1 >> 1) - ($L1 << 1) >> 1;
              $L2 = $shr238;
              
              
              
              $tmp = $L2 + $C0;
              
              
              
              
              if ($tmp >>> 0 > $C0 << 1 >>> 0) {
                __label__ = 51;
              } else {
                __label__ = 52;
              }
              if (__label__ == 51) {
                
                
                var $neg244 = $tmp >> 31 ^ -1;
                $tmp = $neg244;
                
                
                
                
                
                
                $L2 = ($tmp & $C0 << 1) - $C0;
              }
              
              
              
              
              
              
              HEAP8[$ptr1 >> 0] = (HEAPU8[$ptr1 >> 0] & 255) + $L2 & 255;
            }
            
            
            if (($aq | 0) < 0) {
              __label__ = 54;
            } else {
              __label__ = 57;
            }
            if (__label__ == 54) {
              
              
              
              
              
              
              
              
              
              
              var $shr261 = $R2 + ($R0 + $L0 + 1 >> 1) - ($R1 << 1) >> 1;
              $R2 = $shr261;
              
              
              
              $tmp = $R2 + $C0;
              
              
              
              
              if ($tmp >>> 0 > $C0 << 1 >>> 0) {
                __label__ = 55;
              } else {
                __label__ = 56;
              }
              if (__label__ == 55) {
                
                
                var $neg267 = $tmp >> 31 ^ -1;
                $tmp = $neg267;
                
                
                
                
                
                
                $R2 = ($tmp & $C0 << 1) - $C0;
              }
              
              
              
              
              
              
              HEAP8[$ptr >> 0] = (HEAPU8[$ptr >> 0] & 255) + $R2 & 255;
            }
          }
        }
      }
      
      
      var $add_ptr279 = $SrcPtr_addr + $pitch_addr;
      $SrcPtr_addr = $add_ptr279;
      
      var $inc281 = $pel + 1;
      $pel = $inc281;
      __label__ = 25;
      continue;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __ZL24EdgeLoop_Chroma_verticalPhS_iiPii($SrcPtr, $Strength, $Alpha, $Beta, $clipTable, $pitch) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $SrcPtr_addr;
  var $Strength_addr;
  var $Alpha_addr;
  var $Beta_addr;
  var $clipTable_addr;
  var $pitch_addr;
  var $pel;
  var $Strng;
  var $c0;
  var $dif;
  var $L1;
  var $L0;
  var $R0;
  var $R1;
  var $tmp;
  var $tmp1;
  var $ptr;
  var $R_in;
  var $L_in;
  $SrcPtr_addr = $SrcPtr;
  $Strength_addr = $Strength;
  $Alpha_addr = $Alpha;
  $Beta_addr = $Beta;
  $clipTable_addr = $clipTable;
  $pitch_addr = $pitch;
  $pel = 0;
  while (1) {
    
    var $cmp = ($pel | 0) < 16;
    if (!$cmp) {
      __label__ = 24;
      break;
    }
    
    
    
    
    
    
    $Strng = HEAPU8[$Strength_addr + ($pel >> 2) >> 0] & 255;
    
    
    if (($Strng | 0) != 0) {
      __label__ = 3;
    } else {
      __label__ = 21;
    }
    if (__label__ == 3) {
      
      
      
      $R_in = HEAP32[$SrcPtr_addr >> 2];
      
      var $add_ptr = $SrcPtr_addr + -4;
      
      
      $L_in = HEAP32[$add_ptr >> 2];
      
      
      
      $R1 = $R_in >>> 8 & 255;
      
      
      $R0 = $R_in & 255;
      
      
      $L0 = $L_in >>> 24;
      
      
      
      $L1 = $L_in >>> 16 & 255;
      
      
      
      $tmp1 = $R0 - $R1;
      
      
      if (($tmp1 | 0) < 0) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      if (__label__ == 4) {
        
        var $sub12 = 0 - $tmp1;
        $tmp1 = $sub12;
      }
      
      
      
      $tmp = $tmp1 - $Beta_addr;
      
      
      
      $tmp1 = $L0 - $L1;
      
      
      if (($tmp1 | 0) < 0) {
        __label__ = 6;
      } else {
        __label__ = 7;
      }
      if (__label__ == 6) {
        
        var $sub17 = 0 - $tmp1;
        $tmp1 = $sub17;
      }
      
      
      
      
      var $and20 = $tmp & $tmp1 - $Beta_addr;
      $tmp = $and20;
      
      
      
      $tmp1 = $R0 - $L0;
      
      
      if (($tmp1 | 0) < 0) {
        __label__ = 8;
      } else {
        __label__ = 9;
      }
      if (__label__ == 8) {
        
        var $sub24 = 0 - $tmp1;
        $tmp1 = $sub24;
      }
      
      
      
      
      var $and27 = $tmp & $tmp1 - $Alpha_addr;
      $tmp = $and27;
      
      
      if (($tmp | 0) < 0) {
        __label__ = 10;
      } else {
        __label__ = 20;
      }
      if (__label__ == 10) {
        
        $ptr = $SrcPtr_addr;
        
        
        if (($Strng | 0) == 4) {
          __label__ = 11;
        } else {
          __label__ = 12;
        }
        if (__label__ == 11) {
          
          
          
          
          
          
          
          
          
          var $41 = $ptr;
          var $incdec_ptr = $41 + -1;
          $ptr = $incdec_ptr;
          HEAP8[$41 >> 0] = ($R1 << 1) + $R0 + $L1 + 2 >> 2 & 255;
          
          
          
          
          
          
          
          
          
          
          HEAP8[$ptr >> 0] = ($L1 << 1) + $L0 + $R1 + 2 >> 2 & 255;
        } else if (__label__ == 12) {
          
          
          
          
          
          $c0 = HEAP32[$clipTable_addr + 4 * $Strng >> 2] + 1;
          
          
          
          
          
          
          
          
          
          
          $dif = ($R0 - $L0 << 2) + ($L1 - $R1) + 4 >> 3;
          
          
          
          $tmp = $dif + $c0;
          
          
          
          
          if ($tmp >>> 0 > $c0 << 1 >>> 0) {
            __label__ = 13;
          } else {
            __label__ = 14;
          }
          if (__label__ == 13) {
            
            
            var $neg = $tmp >> 31 ^ -1;
            $tmp = $neg;
            
            
            
            
            
            
            $dif = ($tmp & $c0 << 1) - $c0;
          }
          
          
          var $add59 = $L0 + $dif;
          $L0 = $add59;
          
          
          var $sub60 = $R0 - $dif;
          $R0 = $sub60;
          
          
          if ($L0 >>> 0 > 255) {
            __label__ = 15;
          } else {
            __label__ = 16;
          }
          if (__label__ == 15) {
            
            
            var $neg64 = $L0 >> 31 ^ -1;
            $tmp = $neg64;
            
            
            $L0 = $tmp & 255;
          }
          
          
          if ($R0 >>> 0 > 255) {
            __label__ = 17;
          } else {
            __label__ = 18;
          }
          if (__label__ == 17) {
            
            
            var $neg70 = $R0 >> 31 ^ -1;
            $tmp = $neg70;
            
            
            $R0 = $tmp & 255;
          }
          
          
          var $72 = $ptr;
          var $incdec_ptr74 = $72 + -1;
          $ptr = $incdec_ptr74;
          HEAP8[$72 >> 0] = $R0 & 255;
          
          
          
          HEAP8[$ptr >> 0] = $L0 & 255;
        }
      }
      
      var $inc = $pel + 1;
      $pel = $inc;
      
      
      var $add_ptr78 = $SrcPtr_addr + $pitch_addr;
      $SrcPtr_addr = $add_ptr78;
    } else if (__label__ == 21) {
      
      var $add80 = $pel + 3;
      $pel = $add80;
      
      
      
      var $add_ptr82 = $SrcPtr_addr + ($pitch_addr << 1);
      $SrcPtr_addr = $add_ptr82;
    }
    
    var $inc84 = $pel + 1;
    $pel = $inc84;
    __label__ = 1;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __ZL25GetStrength_VerticalEdgesPhP13tagMacroblock($Strength, $MbQ) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $Strength_addr;
  var $MbQ_addr;
  var $idx;
  var $tmp;
  var $ptr;
  var $pmvx;
  var $pmvy;
  var $pnz;
  var $pStrength;
  var $pStr;
  var $refIdx;
  $Strength_addr = $Strength;
  $MbQ_addr = $MbQ;
  
  
  
  
  if ((HEAP32[$MbQ_addr + 164 >> 2] | 0) == 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $if_then$$lor_lhs_false$2 : do {
    if (__label__ == 1) {
      
      
      
      
      if ((HEAP32[$MbQ_addr + 164 >> 2] | 0) == 1) {
        __label__ = 2;
        break $if_then$$lor_lhs_false$2;
      }
      
      
      HEAP32[$Strength_addr >> 2] = 0;
      
      
      
      HEAP32[$Strength_addr + 4 >> 2] = 0;
      
      
      
      HEAP32[$Strength_addr + 8 >> 2] = 0;
      
      
      
      
      $refIdx = $MbQ_addr + 148;
      
      
      $ptr = $refIdx;
      
      $pStrength = $Strength_addr;
      
      
      
      var $conv = (tempInt = HEAP16[$ptr >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      
      
      var $conv14 = (tempInt = HEAP16[$ptr + 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      if (($conv | 0) != ($conv14 | 0)) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      if (__label__ == 4) {
        
        
        HEAP8[$pStrength + 4 >> 0] = 1;
      }
      
      
      
      var $conv19 = (tempInt = HEAP16[$ptr + 4 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      
      
      var $conv21 = (tempInt = HEAP16[$ptr + 6 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      if (($conv19 | 0) != ($conv21 | 0)) {
        __label__ = 6;
      } else {
        __label__ = 7;
      }
      if (__label__ == 6) {
        
        
        HEAP8[$pStrength + 6 >> 0] = 1;
      }
      
      
      var $35 = HEAP8[$pStrength + 4 >> 0];
      
      
      HEAP8[$pStrength + 5 >> 0] = $35;
      
      
      var $38 = HEAP8[$pStrength + 6 >> 0];
      
      
      HEAP8[$pStrength + 7 >> 0] = $38;
      
      
      
      
      
      $pmvx = $MbQ_addr + 4 + 4;
      
      
      $pmvy = $pmvx + 2;
      $idx = 0;
      while (1) {
        
        var $cmp33 = ($idx | 0) < 4;
        if (!$cmp33) {
          __label__ = 87;
          break;
        }
        
        
        
        
        
        
        $pnz = $MbQ_addr + 380 + ($idx << 2);
        var $46 = $pnz;
        var $incdec_ptr = $46 + 1;
        $pnz = $incdec_ptr;
        
        
        
        if ((HEAPU8[$46 >> 0] & 255 | 0) != 0) {
          __label__ = 10;
        } else {
          __label__ = 11;
        }
        if (__label__ == 10) {
          
          HEAP8[$pStrength >> 0] = 2;
        }
        var $49 = $pnz;
        var $incdec_ptr40 = $49 + 1;
        $pnz = $incdec_ptr40;
        
        
        
        if ((HEAPU8[$49 >> 0] & 255 | 0) != 0) {
          __label__ = 12;
        } else {
          __label__ = 13;
        }
        if (__label__ == 12) {
          
          HEAP8[$pStrength >> 0] = 2;
          
          
          HEAP8[$pStrength + 4 >> 0] = 2;
        }
        var $53 = $pnz;
        var $incdec_ptr46 = $53 + 1;
        $pnz = $incdec_ptr46;
        
        
        
        if ((HEAPU8[$53 >> 0] & 255 | 0) != 0) {
          __label__ = 14;
        } else {
          __label__ = 15;
        }
        if (__label__ == 14) {
          
          
          HEAP8[$pStrength + 4 >> 0] = 2;
          
          
          HEAP8[$pStrength + 8 >> 0] = 2;
        }
        
        
        
        
        if ((HEAPU8[$pnz >> 0] & 255 | 0) != 0) {
          __label__ = 16;
        } else {
          __label__ = 17;
        }
        if (__label__ == 16) {
          
          
          HEAP8[$pStrength + 8 >> 0] = 2;
        }
        
        
        
        
        if ((HEAPU8[$pStrength >> 0] & 255 | 0) == 0) {
          __label__ = 18;
        } else {
          __label__ = 27;
        }
        if (__label__ == 18) {
          
          
          var $conv61 = (tempInt = HEAP16[$pmvx >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr62 = $pmvx + -4;
          
          var $conv63 = (tempInt = HEAP16[$add_ptr62 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv61 - $conv63;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 19;
          } else {
            __label__ = 20;
          }
          if (__label__ == 19) {
            
            var $sub66 = 0 - $tmp;
            $tmp = $sub66;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 21;
          } else {
            __label__ = 22;
          }
          if (__label__ == 21) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
          
          
          var $conv71 = (tempInt = HEAP16[$pmvy >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr72 = $pmvy + -4;
          
          var $conv73 = (tempInt = HEAP16[$add_ptr72 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv71 - $conv73;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 23;
          } else {
            __label__ = 24;
          }
          if (__label__ == 23) {
            
            var $sub77 = 0 - $tmp;
            $tmp = $sub77;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 25;
          } else {
            __label__ = 26;
          }
          if (__label__ == 25) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
        }
        
        var $add_ptr83 = $pmvx + 4;
        $pmvx = $add_ptr83;
        
        var $add_ptr84 = $pmvy + 4;
        $pmvy = $add_ptr84;
        
        
        $pStr = $pStrength + 4;
        
        
        
        
        if ((HEAPU8[$pStr >> 0] & 255 | 0) == 0) {
          __label__ = 28;
        } else {
          __label__ = 37;
        }
        if (__label__ == 28) {
          
          
          var $conv89 = (tempInt = HEAP16[$pmvx >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr90 = $pmvx + -4;
          
          var $conv91 = (tempInt = HEAP16[$add_ptr90 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv89 - $conv91;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 29;
          } else {
            __label__ = 30;
          }
          if (__label__ == 29) {
            
            var $sub95 = 0 - $tmp;
            $tmp = $sub95;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 31;
          } else {
            __label__ = 32;
          }
          if (__label__ == 31) {
            
            HEAP8[$pStr >> 0] = 1;
          }
          
          
          var $conv100 = (tempInt = HEAP16[$pmvy >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr101 = $pmvy + -4;
          
          var $conv102 = (tempInt = HEAP16[$add_ptr101 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv100 - $conv102;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 33;
          } else {
            __label__ = 34;
          }
          if (__label__ == 33) {
            
            var $sub106 = 0 - $tmp;
            $tmp = $sub106;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 35;
          } else {
            __label__ = 36;
          }
          if (__label__ == 35) {
            
            HEAP8[$pStr >> 0] = 1;
          }
        }
        
        var $add_ptr112 = $pmvx + 4;
        $pmvx = $add_ptr112;
        
        var $add_ptr113 = $pmvy + 4;
        $pmvy = $add_ptr113;
        
        
        $pStr = $pStrength + 8;
        
        
        
        
        if ((HEAPU8[$pStr >> 0] & 255 | 0) == 0) {
          __label__ = 38;
        } else {
          __label__ = 47;
        }
        if (__label__ == 38) {
          
          
          var $conv118 = (tempInt = HEAP16[$pmvx >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr119 = $pmvx + -4;
          
          var $conv120 = (tempInt = HEAP16[$add_ptr119 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv118 - $conv120;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 39;
          } else {
            __label__ = 40;
          }
          if (__label__ == 39) {
            
            var $sub124 = 0 - $tmp;
            $tmp = $sub124;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 41;
          } else {
            __label__ = 42;
          }
          if (__label__ == 41) {
            
            HEAP8[$pStr >> 0] = 1;
          }
          
          
          var $conv129 = (tempInt = HEAP16[$pmvy >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr130 = $pmvy + -4;
          
          var $conv131 = (tempInt = HEAP16[$add_ptr130 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv129 - $conv131;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 43;
          } else {
            __label__ = 44;
          }
          if (__label__ == 43) {
            
            var $sub135 = 0 - $tmp;
            $tmp = $sub135;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 45;
          } else {
            __label__ = 46;
          }
          if (__label__ == 45) {
            
            HEAP8[$pStr >> 0] = 1;
          }
        }
        
        
        
        
        
        
        
        $pnz = $MbQ_addr + 380 + ($idx + 1 << 2);
        var $122 = $pnz;
        var $incdec_ptr145 = $122 + 1;
        $pnz = $incdec_ptr145;
        
        
        
        if ((HEAPU8[$122 >> 0] & 255 | 0) != 0) {
          __label__ = 48;
        } else {
          __label__ = 49;
        }
        if (__label__ == 48) {
          
          
          HEAP8[$pStrength + 1 >> 0] = 2;
        }
        var $125 = $pnz;
        var $incdec_ptr151 = $125 + 1;
        $pnz = $incdec_ptr151;
        
        
        
        if ((HEAPU8[$125 >> 0] & 255 | 0) != 0) {
          __label__ = 50;
        } else {
          __label__ = 51;
        }
        if (__label__ == 50) {
          
          
          HEAP8[$pStrength + 1 >> 0] = 2;
          
          
          HEAP8[$pStrength + 5 >> 0] = 2;
        }
        var $129 = $pnz;
        var $incdec_ptr158 = $129 + 1;
        $pnz = $incdec_ptr158;
        
        
        
        if ((HEAPU8[$129 >> 0] & 255 | 0) != 0) {
          __label__ = 52;
        } else {
          __label__ = 53;
        }
        if (__label__ == 52) {
          
          
          HEAP8[$pStrength + 5 >> 0] = 2;
          
          
          HEAP8[$pStrength + 9 >> 0] = 2;
        }
        
        
        
        
        if ((HEAPU8[$pnz >> 0] & 255 | 0) != 0) {
          __label__ = 54;
        } else {
          __label__ = 55;
        }
        if (__label__ == 54) {
          
          
          HEAP8[$pStrength + 9 >> 0] = 2;
        }
        
        var $add_ptr170 = $pmvx + 8;
        $pmvx = $add_ptr170;
        
        var $add_ptr171 = $pmvy + 8;
        $pmvy = $add_ptr171;
        
        
        $pStr = $pStrength + 1;
        
        
        
        
        if ((HEAPU8[$pStr >> 0] & 255 | 0) == 0) {
          __label__ = 56;
        } else {
          __label__ = 65;
        }
        if (__label__ == 56) {
          
          
          var $conv176 = (tempInt = HEAP16[$pmvx >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr177 = $pmvx + -4;
          
          var $conv178 = (tempInt = HEAP16[$add_ptr177 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv176 - $conv178;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 57;
          } else {
            __label__ = 58;
          }
          if (__label__ == 57) {
            
            var $sub182 = 0 - $tmp;
            $tmp = $sub182;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 59;
          } else {
            __label__ = 60;
          }
          if (__label__ == 59) {
            
            HEAP8[$pStr >> 0] = 1;
          }
          
          
          var $conv187 = (tempInt = HEAP16[$pmvy >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr188 = $pmvy + -4;
          
          var $conv189 = (tempInt = HEAP16[$add_ptr188 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv187 - $conv189;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 61;
          } else {
            __label__ = 62;
          }
          if (__label__ == 61) {
            
            var $sub193 = 0 - $tmp;
            $tmp = $sub193;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 63;
          } else {
            __label__ = 64;
          }
          if (__label__ == 63) {
            
            HEAP8[$pStr >> 0] = 1;
          }
        }
        
        var $add_ptr199 = $pmvx + 4;
        $pmvx = $add_ptr199;
        
        var $add_ptr200 = $pmvy + 4;
        $pmvy = $add_ptr200;
        
        
        $pStr = $pStrength + 5;
        
        
        
        
        if ((HEAPU8[$pStr >> 0] & 255 | 0) == 0) {
          __label__ = 66;
        } else {
          __label__ = 75;
        }
        if (__label__ == 66) {
          
          
          var $conv205 = (tempInt = HEAP16[$pmvx >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr206 = $pmvx + -4;
          
          var $conv207 = (tempInt = HEAP16[$add_ptr206 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv205 - $conv207;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 67;
          } else {
            __label__ = 68;
          }
          if (__label__ == 67) {
            
            var $sub211 = 0 - $tmp;
            $tmp = $sub211;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 69;
          } else {
            __label__ = 70;
          }
          if (__label__ == 69) {
            
            HEAP8[$pStr >> 0] = 1;
          }
          
          
          var $conv216 = (tempInt = HEAP16[$pmvy >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr217 = $pmvy + -4;
          
          var $conv218 = (tempInt = HEAP16[$add_ptr217 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv216 - $conv218;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 71;
          } else {
            __label__ = 72;
          }
          if (__label__ == 71) {
            
            var $sub222 = 0 - $tmp;
            $tmp = $sub222;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 73;
          } else {
            __label__ = 74;
          }
          if (__label__ == 73) {
            
            HEAP8[$pStr >> 0] = 1;
          }
        }
        
        var $add_ptr228 = $pmvx + 4;
        $pmvx = $add_ptr228;
        
        var $add_ptr229 = $pmvy + 4;
        $pmvy = $add_ptr229;
        
        
        $pStr = $pStrength + 9;
        
        
        
        
        if ((HEAPU8[$pStr >> 0] & 255 | 0) == 0) {
          __label__ = 76;
        } else {
          __label__ = 85;
        }
        if (__label__ == 76) {
          
          
          var $conv234 = (tempInt = HEAP16[$pmvx >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr235 = $pmvx + -4;
          
          var $conv236 = (tempInt = HEAP16[$add_ptr235 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv234 - $conv236;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 77;
          } else {
            __label__ = 78;
          }
          if (__label__ == 77) {
            
            var $sub240 = 0 - $tmp;
            $tmp = $sub240;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 79;
          } else {
            __label__ = 80;
          }
          if (__label__ == 79) {
            
            HEAP8[$pStr >> 0] = 1;
          }
          
          
          var $conv245 = (tempInt = HEAP16[$pmvy >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr246 = $pmvy + -4;
          
          var $conv247 = (tempInt = HEAP16[$add_ptr246 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv245 - $conv247;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 81;
          } else {
            __label__ = 82;
          }
          if (__label__ == 81) {
            
            var $sub251 = 0 - $tmp;
            $tmp = $sub251;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 83;
          } else {
            __label__ = 84;
          }
          if (__label__ == 83) {
            
            HEAP8[$pStr >> 0] = 1;
          }
        }
        
        var $add_ptr257 = $pmvx + 8;
        $pmvx = $add_ptr257;
        
        var $add_ptr258 = $pmvy + 8;
        $pmvy = $add_ptr258;
        
        var $add_ptr259 = $pStrength + 2;
        $pStrength = $add_ptr259;
        
        var $add260 = $idx + 2;
        $idx = $add260;
        __label__ = 8;
        continue;
      }
      __label__ = 88;
      break $if_then$$lor_lhs_false$2;
    }
  } while (0);
  if (__label__ == 2) {
    var $4 = HEAP32[__ZL14ININT_STRENGTH + 4 >> 2];
    
    
    HEAP32[$Strength_addr >> 2] = $4;
    var $7 = HEAP32[__ZL14ININT_STRENGTH + 8 >> 2];
    
    
    
    HEAP32[$Strength_addr + 4 >> 2] = $7;
    var $10 = HEAP32[__ZL14ININT_STRENGTH + 12 >> 2];
    
    
    
    HEAP32[$Strength_addr + 8 >> 2] = $10;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __ZL24EdgeLoop_Luma_horizontalPhS_iiPii($SrcPtr, $Strength, $Alpha, $Beta, $clipTable, $pitch) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $SrcPtr_addr;
  var $Strength_addr;
  var $Alpha_addr;
  var $Beta_addr;
  var $clipTable_addr;
  var $pitch_addr;
  var $pel;
  var $ap;
  var $aq;
  var $Strng;
  var $C0;
  var $c0;
  var $dif;
  var $AbsDelta;
  var $tmp;
  var $tmp1;
  var $L2;
  var $L1;
  var $L0;
  var $R0;
  var $R1;
  var $R2;
  var $RL0;
  $SrcPtr_addr = $SrcPtr;
  $Strength_addr = $Strength;
  $Alpha_addr = $Alpha;
  $Beta_addr = $Beta;
  $clipTable_addr = $clipTable;
  $pitch_addr = $pitch;
  $ap = 0;
  $aq = 0;
  $L2 = 0;
  $R2 = 0;
  
  
  
  
  
  if ((HEAPU8[$Strength_addr >> 0] & 255 | 0) == 4) {
    __label__ = 1;
  } else {
    __label__ = 24;
  }
  if (__label__ == 1) {
    $pel = 0;
    while (1) {
      
      var $cmp9 = ($pel | 0) < 16;
      if (!$cmp9) {
        __label__ = 23;
        break;
      }
      
      
      
      
      $R0 = HEAPU8[$SrcPtr_addr >> 0] & 255;
      
      
      
      
      
      $R1 = HEAPU8[$SrcPtr_addr + $pitch_addr >> 0] & 255;
      
      
      
      
      
      
      $L0 = HEAPU8[$SrcPtr_addr + (0 - $pitch_addr) >> 0] & 255;
      
      
      
      
      
      
      
      $L1 = HEAPU8[$SrcPtr_addr + (0 - ($pitch_addr << 1)) >> 0] & 255;
      
      
      
      $tmp1 = $R0 - $R1;
      
      
      if (($tmp1 | 0) < 0) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      if (__label__ == 4) {
        
        var $sub22 = 0 - $tmp1;
        $tmp1 = $sub22;
      }
      
      
      
      $tmp = $tmp1 - $Beta_addr;
      
      
      
      $tmp1 = $L0 - $L1;
      
      
      if (($tmp1 | 0) < 0) {
        __label__ = 6;
      } else {
        __label__ = 7;
      }
      if (__label__ == 6) {
        
        var $sub27 = 0 - $tmp1;
        $tmp1 = $sub27;
      }
      
      
      
      
      var $and = $tmp & $tmp1 - $Beta_addr;
      $tmp = $and;
      
      
      
      $AbsDelta = $R0 - $L0;
      
      
      if (($AbsDelta | 0) < 0) {
        __label__ = 8;
      } else {
        __label__ = 9;
      }
      if (__label__ == 8) {
        
        var $sub33 = 0 - $AbsDelta;
        $AbsDelta = $sub33;
      }
      
      
      
      
      var $and36 = $tmp & $AbsDelta - $Alpha_addr;
      $tmp = $and36;
      
      
      if (($tmp | 0) < 0) {
        __label__ = 10;
      } else {
        __label__ = 21;
      }
      if (__label__ == 10) {
        
        
        
        
        var $sub39 = $AbsDelta - (($Alpha_addr >> 2) + 2);
        $AbsDelta = $sub39;
        
        
        
        
        
        
        $R2 = HEAPU8[$SrcPtr_addr + ($pitch_addr << 1) >> 0] & 255;
        
        
        
        
        
        
        
        
        
        $L2 = HEAPU8[$SrcPtr_addr + (0 - ($pitch_addr + ($pitch_addr << 1))) >> 0] & 255;
        
        
        
        $tmp = $R0 - $R2;
        
        
        if (($tmp | 0) < 0) {
          __label__ = 11;
        } else {
          __label__ = 12;
        }
        if (__label__ == 11) {
          
          var $sub51 = 0 - $tmp;
          $tmp = $sub51;
        }
        
        
        
        
        
        $aq = $AbsDelta & $tmp - $Beta_addr;
        
        
        
        $tmp = $L0 - $L2;
        
        
        if (($tmp | 0) < 0) {
          __label__ = 13;
        } else {
          __label__ = 14;
        }
        if (__label__ == 13) {
          
          var $sub58 = 0 - $tmp;
          $tmp = $sub58;
        }
        
        
        
        
        
        $ap = $AbsDelta & $tmp - $Beta_addr;
        
        
        if (($aq | 0) < 0) {
          __label__ = 15;
        } else {
          __label__ = 16;
        }
        if (__label__ == 15) {
          
          
          
          
          
          $tmp = $R1 + $R0 + $L0;
          
          
          
          
          
          
          
          
          
          
          
          HEAP8[$SrcPtr_addr >> 0] = $L1 + ($tmp << 1) + $R2 + 4 >> 3 & 255;
          
          
          var $add73 = $tmp + $R2;
          $tmp = $add73;
          
          
          
          
          
          
          
          HEAP8[$SrcPtr_addr + $pitch_addr >> 0] = $tmp + 2 >> 2 & 255;
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          HEAP8[$SrcPtr_addr + ($pitch_addr << 1) >> 0] = ((HEAPU8[$SrcPtr_addr + ($pitch_addr + ($pitch_addr << 1)) >> 0] & 255) + $R2 << 1) + $tmp + 4 >> 3 & 255;
        } else if (__label__ == 16) {
          
          
          
          
          
          
          
          
          
          
          
          HEAP8[$SrcPtr_addr >> 0] = ($R1 << 1) + $R0 + $L1 + 2 >> 2 & 255;
        }
        
        
        if (($ap | 0) < 0) {
          __label__ = 18;
        } else {
          __label__ = 19;
        }
        if (__label__ == 18) {
          
          
          
          
          
          $tmp = $L1 + $R0 + $L0;
          
          
          
          
          
          
          
          
          
          
          
          
          
          HEAP8[$SrcPtr_addr + (0 - $pitch_addr) >> 0] = $R1 + ($tmp << 1) + $L2 + 4 >> 3 & 255;
          
          
          var $add110 = $tmp + $L2;
          $tmp = $add110;
          
          
          
          
          
          
          
          
          
          HEAP8[$SrcPtr_addr + (0 - ($pitch_addr << 1)) >> 0] = $tmp + 2 >> 2 & 255;
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          HEAP8[$SrcPtr_addr + (0 - ($pitch_addr + ($pitch_addr << 1))) >> 0] = ((HEAPU8[$SrcPtr_addr + (0 - ($pitch_addr << 2)) >> 0] & 255) + $L2 << 1) + $tmp + 4 >> 3 & 255;
        } else if (__label__ == 19) {
          
          
          
          
          
          
          
          
          
          
          
          
          
          HEAP8[$SrcPtr_addr + (0 - $pitch_addr) >> 0] = ($L1 << 1) + $L0 + $R1 + 2 >> 2 & 255;
        }
      }
      
      var $incdec_ptr = $SrcPtr_addr + 1;
      $SrcPtr_addr = $incdec_ptr;
      
      var $inc = $pel + 1;
      $pel = $inc;
      __label__ = 2;
      continue;
    }
  } else if (__label__ == 24) {
    $pel = 0;
    while (1) {
      
      var $cmp144 = ($pel | 0) < 16;
      if (!$cmp144) {
        __label__ = 62;
        break;
      }
      
      
      
      
      
      
      $Strng = HEAPU8[$Strength_addr + ($pel >> 2) >> 0] & 255;
      
      
      if (($Strng | 0) != 0) {
        __label__ = 27;
      } else {
        __label__ = 60;
      }
      if (__label__ == 27) {
        
        
        
        
        $R0 = HEAPU8[$SrcPtr_addr >> 0] & 255;
        
        
        
        
        
        $R1 = HEAPU8[$SrcPtr_addr + $pitch_addr >> 0] & 255;
        
        
        
        
        
        
        $L0 = HEAPU8[$SrcPtr_addr + (0 - $pitch_addr) >> 0] & 255;
        
        
        
        
        
        
        
        $L1 = HEAPU8[$SrcPtr_addr + (0 - ($pitch_addr << 1)) >> 0] & 255;
        
        
        
        $tmp1 = $R0 - $L0;
        
        
        if (($tmp1 | 0) < 0) {
          __label__ = 28;
        } else {
          __label__ = 29;
        }
        if (__label__ == 28) {
          
          var $sub164 = 0 - $tmp1;
          $tmp1 = $sub164;
        }
        
        
        
        $tmp = $tmp1 - $Alpha_addr;
        
        
        
        $tmp1 = $R0 - $R1;
        
        
        if (($tmp1 | 0) < 0) {
          __label__ = 30;
        } else {
          __label__ = 31;
        }
        if (__label__ == 30) {
          
          var $sub170 = 0 - $tmp1;
          $tmp1 = $sub170;
        }
        
        
        
        
        var $and173 = $tmp & $tmp1 - $Beta_addr;
        $tmp = $and173;
        
        
        
        $tmp1 = $L0 - $L1;
        
        
        if (($tmp1 | 0) < 0) {
          __label__ = 32;
        } else {
          __label__ = 33;
        }
        if (__label__ == 32) {
          
          var $sub177 = 0 - $tmp1;
          $tmp1 = $sub177;
        }
        
        
        
        
        var $and180 = $tmp & $tmp1 - $Beta_addr;
        $tmp = $and180;
        
        
        if (($tmp | 0) < 0) {
          __label__ = 34;
        } else {
          __label__ = 59;
        }
        if (__label__ == 34) {
          
          
          
          
          
          
          $R2 = HEAPU8[$SrcPtr_addr + ($pitch_addr << 1) >> 0] & 255;
          
          
          
          
          
          
          
          
          
          $L2 = HEAPU8[$SrcPtr_addr + (0 - ($pitch_addr + ($pitch_addr << 1))) >> 0] & 255;
          
          
          
          $tmp = $R0 - $R2;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 35;
          } else {
            __label__ = 36;
          }
          if (__label__ == 35) {
            
            var $sub194 = 0 - $tmp;
            $tmp = $sub194;
          }
          
          
          
          $aq = $tmp - $Beta_addr;
          
          
          
          $tmp = $L0 - $L2;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 37;
          } else {
            __label__ = 38;
          }
          if (__label__ == 37) {
            
            var $sub200 = 0 - $tmp;
            $tmp = $sub200;
          }
          
          
          
          $ap = $tmp - $Beta_addr;
          
          
          
          
          $C0 = HEAP32[$clipTable_addr + 4 * $Strng >> 2];
          $c0 = HEAP32[$clipTable_addr + 4 * $Strng >> 2];
          
          
          if (($ap | 0) < 0) {
            __label__ = 39;
          } else {
            __label__ = 40;
          }
          if (__label__ == 39) {
            
            var $inc206 = $c0 + 1;
            $c0 = $inc206;
          }
          
          
          if (($aq | 0) < 0) {
            __label__ = 41;
          } else {
            __label__ = 42;
          }
          if (__label__ == 41) {
            
            var $inc210 = $c0 + 1;
            $c0 = $inc210;
          }
          
          
          
          
          
          
          
          
          
          
          $dif = ($R0 - $L0 << 2) + ($L1 - $R1) + 4 >> 3;
          
          
          
          $tmp = $dif + $c0;
          
          
          
          
          if ($tmp >>> 0 > $c0 << 1 >>> 0) {
            __label__ = 43;
          } else {
            __label__ = 44;
          }
          if (__label__ == 43) {
            
            
            var $neg = $tmp >> 31 ^ -1;
            $tmp = $neg;
            
            
            
            
            
            
            $dif = ($tmp & $c0 << 1) - $c0;
          }
          
          
          
          $RL0 = $R0 + $L0;
          
          
          var $sub228 = $R0 - $dif;
          $R0 = $sub228;
          
          
          var $add229 = $L0 + $dif;
          $L0 = $add229;
          
          
          if ($R0 >>> 0 > 255) {
            __label__ = 45;
          } else {
            __label__ = 46;
          }
          if (__label__ == 45) {
            
            
            var $neg233 = $R0 >> 31 ^ -1;
            $tmp = $neg233;
            
            
            $R0 = $tmp & 255;
          }
          
          
          if ($L0 >>> 0 > 255) {
            __label__ = 47;
          } else {
            __label__ = 48;
          }
          if (__label__ == 47) {
            
            
            var $neg239 = $L0 >> 31 ^ -1;
            $tmp = $neg239;
            
            
            $L0 = $tmp & 255;
          }
          
          
          
          
          
          
          HEAP8[$SrcPtr_addr + (0 - $pitch_addr) >> 0] = $L0 & 255;
          
          
          
          
          HEAP8[$SrcPtr_addr >> 0] = $R0 & 255;
          
          
          if (($C0 | 0) != 0) {
            __label__ = 49;
          } else {
            __label__ = 58;
          }
          if (__label__ == 49) {
            
            
            if (($aq | 0) < 0) {
              __label__ = 50;
            } else {
              __label__ = 53;
            }
            if (__label__ == 50) {
              
              
              
              
              
              
              
              
              var $shr256 = $R2 + ($RL0 + 1 >> 1) - ($R1 << 1) >> 1;
              $R2 = $shr256;
              
              
              
              $tmp = $R2 + $C0;
              
              
              
              
              if ($tmp >>> 0 > $C0 << 1 >>> 0) {
                __label__ = 51;
              } else {
                __label__ = 52;
              }
              if (__label__ == 51) {
                
                
                var $neg262 = $tmp >> 31 ^ -1;
                $tmp = $neg262;
                
                
                
                
                
                
                $R2 = ($tmp & $C0 << 1) - $C0;
              }
              
              
              
              
              
              
              
              
              HEAP8[$SrcPtr_addr + $pitch_addr >> 0] = (HEAPU8[$SrcPtr_addr + $pitch_addr >> 0] & 255) + $R2 & 255;
            }
            
            
            if (($ap | 0) < 0) {
              __label__ = 54;
            } else {
              __label__ = 57;
            }
            if (__label__ == 54) {
              
              
              
              
              
              
              
              
              var $shr279 = $L2 + ($RL0 + 1 >> 1) - ($L1 << 1) >> 1;
              $L2 = $shr279;
              
              
              
              $tmp = $L2 + $C0;
              
              
              
              
              if ($tmp >>> 0 > $C0 << 1 >>> 0) {
                __label__ = 55;
              } else {
                __label__ = 56;
              }
              if (__label__ == 55) {
                
                
                var $neg285 = $tmp >> 31 ^ -1;
                $tmp = $neg285;
                
                
                
                
                
                
                $L2 = ($tmp & $C0 << 1) - $C0;
              }
              
              
              
              
              
              
              
              
              
              
              HEAP8[$SrcPtr_addr + (0 - ($pitch_addr << 1)) >> 0] = (HEAPU8[$SrcPtr_addr + (0 - ($pitch_addr << 1)) >> 0] & 255) + $L2 & 255;
            }
          }
        }
      }
      
      var $incdec_ptr300 = $SrcPtr_addr + 1;
      $SrcPtr_addr = $incdec_ptr300;
      
      var $inc302 = $pel + 1;
      $pel = $inc302;
      __label__ = 25;
      continue;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __ZL26EdgeLoop_Chroma_horizontalPhS_iiPii($SrcPtr, $Strength, $Alpha, $Beta, $clipTable, $pitch) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $SrcPtr_addr;
  var $Strength_addr;
  var $Alpha_addr;
  var $Beta_addr;
  var $clipTable_addr;
  var $pitch_addr;
  var $pel;
  var $Strng;
  var $c0;
  var $dif;
  var $L1;
  var $L0;
  var $R0;
  var $R1;
  var $tmp;
  var $tmp1;
  $SrcPtr_addr = $SrcPtr;
  $Strength_addr = $Strength;
  $Alpha_addr = $Alpha;
  $Beta_addr = $Beta;
  $clipTable_addr = $clipTable;
  $pitch_addr = $pitch;
  $pel = 0;
  while (1) {
    
    var $cmp = ($pel | 0) < 16;
    if (!$cmp) {
      __label__ = 24;
      break;
    }
    
    
    
    
    
    
    $Strng = HEAPU8[$Strength_addr + ($pel >> 2) >> 0] & 255;
    
    
    if (($Strng | 0) != 0) {
      __label__ = 3;
    } else {
      __label__ = 21;
    }
    if (__label__ == 3) {
      
      
      
      
      $R0 = HEAPU8[$SrcPtr_addr >> 0] & 255;
      
      
      
      
      
      
      $L0 = HEAPU8[$SrcPtr_addr + (0 - $pitch_addr) >> 0] & 255;
      
      
      
      
      
      
      
      $L1 = HEAPU8[$SrcPtr_addr + (0 - ($pitch_addr << 1)) >> 0] & 255;
      
      
      
      
      
      $R1 = HEAPU8[$SrcPtr_addr + $pitch_addr >> 0] & 255;
      
      
      
      $tmp1 = $R0 - $R1;
      
      
      if (($tmp1 | 0) < 0) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      if (__label__ == 4) {
        
        var $sub14 = 0 - $tmp1;
        $tmp1 = $sub14;
      }
      
      
      
      $tmp = $tmp1 - $Beta_addr;
      
      
      
      $tmp1 = $L0 - $L1;
      
      
      if (($tmp1 | 0) < 0) {
        __label__ = 6;
      } else {
        __label__ = 7;
      }
      if (__label__ == 6) {
        
        var $sub19 = 0 - $tmp1;
        $tmp1 = $sub19;
      }
      
      
      
      
      var $and = $tmp & $tmp1 - $Beta_addr;
      $tmp = $and;
      
      
      
      $tmp1 = $R0 - $L0;
      
      
      if (($tmp1 | 0) < 0) {
        __label__ = 8;
      } else {
        __label__ = 9;
      }
      if (__label__ == 8) {
        
        var $sub25 = 0 - $tmp1;
        $tmp1 = $sub25;
      }
      
      
      
      
      var $and28 = $tmp & $tmp1 - $Alpha_addr;
      $tmp = $and28;
      
      
      if (($tmp | 0) < 0) {
        __label__ = 10;
      } else {
        __label__ = 20;
      }
      if (__label__ == 10) {
        
        
        if (($Strng | 0) == 4) {
          __label__ = 11;
        } else {
          __label__ = 12;
        }
        if (__label__ == 11) {
          
          
          
          
          
          
          
          
          
          
          
          HEAP8[$SrcPtr_addr >> 0] = ($R1 << 1) + $R0 + $L1 + 2 >> 2 & 255;
          
          
          
          
          
          
          
          
          
          
          
          
          
          HEAP8[$SrcPtr_addr + (0 - $pitch_addr) >> 0] = ($L1 << 1) + $L0 + $R1 + 2 >> 2 & 255;
        } else if (__label__ == 12) {
          
          
          
          
          
          $c0 = HEAP32[$clipTable_addr + 4 * $Strng >> 2] + 1;
          
          
          
          
          
          
          
          
          
          
          $dif = ($R0 - $L0 << 2) + ($L1 - $R1) + 4 >> 3;
          
          
          
          $tmp = $dif + $c0;
          
          
          
          
          if ($tmp >>> 0 > $c0 << 1 >>> 0) {
            __label__ = 13;
          } else {
            __label__ = 14;
          }
          if (__label__ == 13) {
            
            
            var $neg = $tmp >> 31 ^ -1;
            $tmp = $neg;
            
            
            
            
            
            
            $dif = ($tmp & $c0 << 1) - $c0;
          }
          
          
          var $add64 = $L0 + $dif;
          $L0 = $add64;
          
          
          var $sub65 = $R0 - $dif;
          $R0 = $sub65;
          
          
          if ($L0 >>> 0 > 255) {
            __label__ = 15;
          } else {
            __label__ = 16;
          }
          if (__label__ == 15) {
            
            
            var $neg69 = $L0 >> 31 ^ -1;
            $tmp = $neg69;
            
            
            $L0 = $tmp & 255;
          }
          
          
          if ($R0 >>> 0 > 255) {
            __label__ = 17;
          } else {
            __label__ = 18;
          }
          if (__label__ == 17) {
            
            
            var $neg75 = $R0 >> 31 ^ -1;
            $tmp = $neg75;
            
            
            $R0 = $tmp & 255;
          }
          
          
          
          
          HEAP8[$SrcPtr_addr >> 0] = $R0 & 255;
          
          
          
          
          
          
          HEAP8[$SrcPtr_addr + (0 - $pitch_addr) >> 0] = $L0 & 255;
        }
      }
      
      var $inc = $pel + 1;
      $pel = $inc;
      
      var $incdec_ptr = $SrcPtr_addr + 1;
      $SrcPtr_addr = $incdec_ptr;
    } else if (__label__ == 21) {
      
      var $add86 = $pel + 3;
      $pel = $add86;
      
      var $add_ptr = $SrcPtr_addr + 2;
      $SrcPtr_addr = $add_ptr;
    }
    
    var $inc88 = $pel + 1;
    $pel = $inc88;
    __label__ = 1;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __ZL27GetStrength_HorizontalEdgesPhP13tagMacroblock($Strength, $MbQ) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $Strength_addr;
  var $MbQ_addr;
  var $idx;
  var $tmp;
  var $ptr;
  var $pmvx;
  var $pmvy;
  var $pStrength;
  var $pStr;
  var $refIdx;
  $Strength_addr = $Strength;
  $MbQ_addr = $MbQ;
  
  
  
  
  if ((HEAP32[$MbQ_addr + 164 >> 2] | 0) == 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $if_then$$lor_lhs_false$2 : do {
    if (__label__ == 1) {
      
      
      
      
      if ((HEAP32[$MbQ_addr + 164 >> 2] | 0) == 1) {
        __label__ = 2;
        break $if_then$$lor_lhs_false$2;
      }
      
      
      HEAP32[$Strength_addr >> 2] = 0;
      
      
      
      HEAP32[$Strength_addr + 4 >> 2] = 0;
      
      
      
      HEAP32[$Strength_addr + 8 >> 2] = 0;
      
      
      
      
      $refIdx = $MbQ_addr + 148;
      
      
      $ptr = $refIdx;
      
      $pStrength = $Strength_addr;
      
      
      
      var $conv = (tempInt = HEAP16[$ptr >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      
      
      var $conv13 = (tempInt = HEAP16[$ptr + 4 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      if (($conv | 0) != ($conv13 | 0)) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      if (__label__ == 4) {
        
        
        HEAP8[$pStrength + 4 >> 0] = 1;
      }
      
      
      
      var $conv18 = (tempInt = HEAP16[$ptr + 2 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      
      
      var $conv20 = (tempInt = HEAP16[$ptr + 6 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
      
      if (($conv18 | 0) != ($conv20 | 0)) {
        __label__ = 6;
      } else {
        __label__ = 7;
      }
      if (__label__ == 6) {
        
        
        HEAP8[$pStrength + 6 >> 0] = 1;
      }
      
      
      var $35 = HEAP8[$pStrength + 4 >> 0];
      
      
      HEAP8[$pStrength + 5 >> 0] = $35;
      
      
      var $38 = HEAP8[$pStrength + 6 >> 0];
      
      
      HEAP8[$pStrength + 7 >> 0] = $38;
      
      
      
      
      
      $pmvx = $MbQ_addr + 4 + 16;
      
      
      $pmvy = $pmvx + 2;
      $idx = 0;
      while (1) {
        
        var $cmp32 = ($idx | 0) < 4;
        if (!$cmp32) {
          __label__ = 87;
          break;
        }
        
        
        
        
        
        
        
        if ((HEAPU8[$MbQ_addr + 380 + $idx >> 0] & 255 | 0) != 0) {
          __label__ = 10;
        } else {
          __label__ = 11;
        }
        if (__label__ == 10) {
          
          HEAP8[$pStrength >> 0] = 2;
        }
        
        
        
        
        
        
        
        
        if ((HEAPU8[$MbQ_addr + 380 + (4 + $idx) >> 0] & 255 | 0) != 0) {
          __label__ = 12;
        } else {
          __label__ = 13;
        }
        if (__label__ == 12) {
          
          HEAP8[$pStrength >> 0] = 2;
          
          
          HEAP8[$pStrength + 4 >> 0] = 2;
        }
        
        
        
        
        
        
        
        
        if ((HEAPU8[$MbQ_addr + 380 + (8 + $idx) >> 0] & 255 | 0) != 0) {
          __label__ = 14;
        } else {
          __label__ = 15;
        }
        if (__label__ == 14) {
          
          
          HEAP8[$pStrength + 4 >> 0] = 2;
          
          
          HEAP8[$pStrength + 8 >> 0] = 2;
        }
        
        
        
        
        
        
        
        
        if ((HEAPU8[$MbQ_addr + 380 + (12 + $idx) >> 0] & 255 | 0) != 0) {
          __label__ = 16;
        } else {
          __label__ = 17;
        }
        if (__label__ == 16) {
          
          
          HEAP8[$pStrength + 8 >> 0] = 2;
        }
        
        
        
        
        if ((HEAPU8[$pStrength >> 0] & 255 | 0) == 0) {
          __label__ = 18;
        } else {
          __label__ = 27;
        }
        if (__label__ == 18) {
          
          
          var $conv65 = (tempInt = HEAP16[$pmvx >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr66 = $pmvx + -16;
          
          var $conv67 = (tempInt = HEAP16[$add_ptr66 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv65 - $conv67;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 19;
          } else {
            __label__ = 20;
          }
          if (__label__ == 19) {
            
            var $sub70 = 0 - $tmp;
            $tmp = $sub70;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 21;
          } else {
            __label__ = 22;
          }
          if (__label__ == 21) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
          
          
          var $conv75 = (tempInt = HEAP16[$pmvy >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr76 = $pmvy + -16;
          
          var $conv77 = (tempInt = HEAP16[$add_ptr76 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv75 - $conv77;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 23;
          } else {
            __label__ = 24;
          }
          if (__label__ == 23) {
            
            var $sub81 = 0 - $tmp;
            $tmp = $sub81;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 25;
          } else {
            __label__ = 26;
          }
          if (__label__ == 25) {
            
            HEAP8[$pStrength >> 0] = 1;
          }
        }
        
        var $add_ptr87 = $pmvx + 16;
        $pmvx = $add_ptr87;
        
        var $add_ptr88 = $pmvy + 16;
        $pmvy = $add_ptr88;
        
        
        $pStr = $pStrength + 4;
        
        
        
        
        if ((HEAPU8[$pStr >> 0] & 255 | 0) == 0) {
          __label__ = 28;
        } else {
          __label__ = 37;
        }
        if (__label__ == 28) {
          
          
          var $conv93 = (tempInt = HEAP16[$pmvx >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr94 = $pmvx + -16;
          
          var $conv95 = (tempInt = HEAP16[$add_ptr94 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv93 - $conv95;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 29;
          } else {
            __label__ = 30;
          }
          if (__label__ == 29) {
            
            var $sub99 = 0 - $tmp;
            $tmp = $sub99;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 31;
          } else {
            __label__ = 32;
          }
          if (__label__ == 31) {
            
            HEAP8[$pStr >> 0] = 1;
          }
          
          
          var $conv104 = (tempInt = HEAP16[$pmvy >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr105 = $pmvy + -16;
          
          var $conv106 = (tempInt = HEAP16[$add_ptr105 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv104 - $conv106;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 33;
          } else {
            __label__ = 34;
          }
          if (__label__ == 33) {
            
            var $sub110 = 0 - $tmp;
            $tmp = $sub110;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 35;
          } else {
            __label__ = 36;
          }
          if (__label__ == 35) {
            
            HEAP8[$pStr >> 0] = 1;
          }
        }
        
        var $add_ptr116 = $pmvx + 16;
        $pmvx = $add_ptr116;
        
        var $add_ptr117 = $pmvy + 16;
        $pmvy = $add_ptr117;
        
        
        $pStr = $pStrength + 8;
        
        
        
        
        if ((HEAPU8[$pStr >> 0] & 255 | 0) == 0) {
          __label__ = 38;
        } else {
          __label__ = 47;
        }
        if (__label__ == 38) {
          
          
          var $conv122 = (tempInt = HEAP16[$pmvx >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr123 = $pmvx + -16;
          
          var $conv124 = (tempInt = HEAP16[$add_ptr123 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv122 - $conv124;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 39;
          } else {
            __label__ = 40;
          }
          if (__label__ == 39) {
            
            var $sub128 = 0 - $tmp;
            $tmp = $sub128;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 41;
          } else {
            __label__ = 42;
          }
          if (__label__ == 41) {
            
            HEAP8[$pStr >> 0] = 1;
          }
          
          
          var $conv133 = (tempInt = HEAP16[$pmvy >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr134 = $pmvy + -16;
          
          var $conv135 = (tempInt = HEAP16[$add_ptr134 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv133 - $conv135;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 43;
          } else {
            __label__ = 44;
          }
          if (__label__ == 43) {
            
            var $sub139 = 0 - $tmp;
            $tmp = $sub139;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 45;
          } else {
            __label__ = 46;
          }
          if (__label__ == 45) {
            
            HEAP8[$pStr >> 0] = 1;
          }
        }
        
        
        
        
        
        
        
        
        if ((HEAPU8[$MbQ_addr + 380 + ($idx + 1) >> 0] & 255 | 0) != 0) {
          __label__ = 48;
        } else {
          __label__ = 49;
        }
        if (__label__ == 48) {
          
          
          HEAP8[$pStrength + 1 >> 0] = 2;
        }
        
        
        
        
        
        
        
        
        
        if ((HEAPU8[$MbQ_addr + 380 + (4 + $idx + 1) >> 0] & 255 | 0) != 0) {
          __label__ = 50;
        } else {
          __label__ = 51;
        }
        if (__label__ == 50) {
          
          
          HEAP8[$pStrength + 1 >> 0] = 2;
          
          
          HEAP8[$pStrength + 5 >> 0] = 2;
        }
        
        
        
        
        
        
        
        
        
        if ((HEAPU8[$MbQ_addr + 380 + (8 + $idx + 1) >> 0] & 255 | 0) != 0) {
          __label__ = 52;
        } else {
          __label__ = 53;
        }
        if (__label__ == 52) {
          
          
          HEAP8[$pStrength + 5 >> 0] = 2;
          
          
          HEAP8[$pStrength + 9 >> 0] = 2;
        }
        
        
        
        
        
        
        
        
        
        if ((HEAPU8[$MbQ_addr + 380 + (12 + $idx + 1) >> 0] & 255 | 0) != 0) {
          __label__ = 54;
        } else {
          __label__ = 55;
        }
        if (__label__ == 54) {
          
          
          HEAP8[$pStrength + 9 >> 0] = 2;
        }
        
        var $add_ptr182 = $pmvx + -28;
        $pmvx = $add_ptr182;
        
        var $add_ptr183 = $pmvy + -28;
        $pmvy = $add_ptr183;
        
        
        $pStr = $pStrength + 1;
        
        
        
        
        if ((HEAPU8[$pStr >> 0] & 255 | 0) == 0) {
          __label__ = 56;
        } else {
          __label__ = 65;
        }
        if (__label__ == 56) {
          
          
          var $conv188 = (tempInt = HEAP16[$pmvx >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr189 = $pmvx + -16;
          
          var $conv190 = (tempInt = HEAP16[$add_ptr189 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv188 - $conv190;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 57;
          } else {
            __label__ = 58;
          }
          if (__label__ == 57) {
            
            var $sub194 = 0 - $tmp;
            $tmp = $sub194;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 59;
          } else {
            __label__ = 60;
          }
          if (__label__ == 59) {
            
            HEAP8[$pStr >> 0] = 1;
          }
          
          
          var $conv199 = (tempInt = HEAP16[$pmvy >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr200 = $pmvy + -16;
          
          var $conv201 = (tempInt = HEAP16[$add_ptr200 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv199 - $conv201;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 61;
          } else {
            __label__ = 62;
          }
          if (__label__ == 61) {
            
            var $sub205 = 0 - $tmp;
            $tmp = $sub205;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 63;
          } else {
            __label__ = 64;
          }
          if (__label__ == 63) {
            
            HEAP8[$pStr >> 0] = 1;
          }
        }
        
        var $add_ptr211 = $pmvx + 16;
        $pmvx = $add_ptr211;
        
        var $add_ptr212 = $pmvy + 16;
        $pmvy = $add_ptr212;
        
        
        $pStr = $pStrength + 5;
        
        
        
        
        if ((HEAPU8[$pStr >> 0] & 255 | 0) == 0) {
          __label__ = 66;
        } else {
          __label__ = 75;
        }
        if (__label__ == 66) {
          
          
          var $conv217 = (tempInt = HEAP16[$pmvx >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr218 = $pmvx + -16;
          
          var $conv219 = (tempInt = HEAP16[$add_ptr218 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv217 - $conv219;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 67;
          } else {
            __label__ = 68;
          }
          if (__label__ == 67) {
            
            var $sub223 = 0 - $tmp;
            $tmp = $sub223;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 69;
          } else {
            __label__ = 70;
          }
          if (__label__ == 69) {
            
            HEAP8[$pStr >> 0] = 1;
          }
          
          
          var $conv228 = (tempInt = HEAP16[$pmvy >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr229 = $pmvy + -16;
          
          var $conv230 = (tempInt = HEAP16[$add_ptr229 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv228 - $conv230;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 71;
          } else {
            __label__ = 72;
          }
          if (__label__ == 71) {
            
            var $sub234 = 0 - $tmp;
            $tmp = $sub234;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 73;
          } else {
            __label__ = 74;
          }
          if (__label__ == 73) {
            
            HEAP8[$pStr >> 0] = 1;
          }
        }
        
        var $add_ptr240 = $pmvx + 16;
        $pmvx = $add_ptr240;
        
        var $add_ptr241 = $pmvy + 16;
        $pmvy = $add_ptr241;
        
        
        $pStr = $pStrength + 9;
        
        
        
        
        if ((HEAPU8[$pStr >> 0] & 255 | 0) == 0) {
          __label__ = 76;
        } else {
          __label__ = 85;
        }
        if (__label__ == 76) {
          
          
          var $conv246 = (tempInt = HEAP16[$pmvx >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr247 = $pmvx + -16;
          
          var $conv248 = (tempInt = HEAP16[$add_ptr247 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv246 - $conv248;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 77;
          } else {
            __label__ = 78;
          }
          if (__label__ == 77) {
            
            var $sub252 = 0 - $tmp;
            $tmp = $sub252;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 79;
          } else {
            __label__ = 80;
          }
          if (__label__ == 79) {
            
            HEAP8[$pStr >> 0] = 1;
          }
          
          
          var $conv257 = (tempInt = HEAP16[$pmvy >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          var $add_ptr258 = $pmvy + -16;
          
          var $conv259 = (tempInt = HEAP16[$add_ptr258 >> 1], tempInt >= 32768 ? tempInt - 65536 : tempInt);
          
          $tmp = $conv257 - $conv259;
          
          
          if (($tmp | 0) < 0) {
            __label__ = 81;
          } else {
            __label__ = 82;
          }
          if (__label__ == 81) {
            
            var $sub263 = 0 - $tmp;
            $tmp = $sub263;
          }
          
          
          if (($tmp | 0) >= 4) {
            __label__ = 83;
          } else {
            __label__ = 84;
          }
          if (__label__ == 83) {
            
            HEAP8[$pStr >> 0] = 1;
          }
        }
        
        var $add_ptr269 = $pmvx + -28;
        $pmvx = $add_ptr269;
        
        var $add_ptr270 = $pmvy + -28;
        $pmvy = $add_ptr270;
        
        var $add_ptr271 = $pStrength + 2;
        $pStrength = $add_ptr271;
        
        var $add272 = $idx + 2;
        $idx = $add272;
        __label__ = 8;
        continue;
      }
      __label__ = 88;
      break $if_then$$lor_lhs_false$2;
    }
  } while (0);
  if (__label__ == 2) {
    var $4 = HEAP32[__ZL14ININT_STRENGTH + 4 >> 2];
    
    
    HEAP32[$Strength_addr >> 2] = $4;
    var $7 = HEAP32[__ZL14ININT_STRENGTH + 8 >> 2];
    
    
    
    HEAP32[$Strength_addr + 4 >> 2] = $7;
    var $10 = HEAP32[__ZL14ININT_STRENGTH + 12 >> 2];
    
    
    
    HEAP32[$Strength_addr + 8 >> 2] = $10;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z7FMOInitP12tagCommonObj($video) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $video_addr;
  var $currPPS;
  var $MbToSliceGroupMap;
  var $PicSizeInMapUnits;
  var $PicWidthInMbs;
  $video_addr = $video;
  
  
  
  $currPPS = HEAP32[$video_addr + 872 >> 2];
  
  
  
  $MbToSliceGroupMap = HEAP32[$video_addr + 1412 >> 2];
  
  
  
  $PicSizeInMapUnits = HEAP32[$video_addr + 1264 >> 2];
  
  
  
  $PicWidthInMbs = HEAP32[$video_addr + 1248 >> 2];
  
  
  
  
  if ((HEAP32[$currPPS + 16 >> 2] | 0) == 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $if_then$$if_else$2 : do {
    if (__label__ == 1) {
      
      
      
      
      
      
      
      var $mul = HEAP32[$video_addr + 1264 >> 2] * 4;
      var $dest$, $stop$, $stop4$, $value4$;
      $dest$ = HEAP32[$video_addr + 1412 >> 2];
      $stop$ = $dest$ + $mul;
      $value4$ = 0;
      if ($value4$ < 0) $value4$ += 256;
      $value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + $value4$ * 16777216;
      while ($dest$ % 4 !== 0 && $dest$ < $stop$) {
        HEAP8[$dest$++] = 0;
      }
      $dest$ >>= 2;
      $stop4$ = $stop$ >> 2;
      while ($dest$ < $stop4$) {
        HEAP32[$dest$++] = $value4$;
      }
      $dest$ <<= 2;
      while ($dest$ < $stop$) {
        HEAP8[$dest$++] = 0;
      }
      __label__ = 12;
      break $if_then$$if_else$2;
    } else if (__label__ == 2) {
      
      
      var $16 = HEAP32[$currPPS + 20 >> 2];
      if ($16 == 0) {
        __label__ = 3;
      } else if ($16 == 1) {
        __label__ = 4;
      } else if ($16 == 2) {
        __label__ = 5;
      } else if ($16 == 3) {
        __label__ = 6;
      } else if ($16 == 4) {
        __label__ = 7;
      } else if ($16 == 5) {
        __label__ = 8;
      } else if ($16 == 6) {
        __label__ = 9;
      } else {
        __label__ = 10;
      }
      if (__label__ == 10) {
        $retval = 0;
        __label__ = 13;
        break $if_then$$if_else$2;
      } else if (__label__ == 3) {
        
        
        
        
        
        
        var $20 = HEAP32[$currPPS + 16 >> 2];
        
        __Z26FmoGenerateType0MapUnitMapPiPjjj($MbToSliceGroupMap, $currPPS + 24, $20, $PicSizeInMapUnits);
      } else if (__label__ == 4) {
        
        
        
        
        var $25 = HEAP32[$currPPS + 16 >> 2];
        
        __Z26FmoGenerateType1MapUnitMapPiijj($MbToSliceGroupMap, $PicWidthInMbs, $25, $PicSizeInMapUnits);
      } else if (__label__ == 5) {
        
        
        
        
        
        var $31 = HEAP32[$currPPS + 16 >> 2];
        
        __Z26FmoGenerateType2MapUnitMapP14tagPicParamSetPiijj($currPPS, $MbToSliceGroupMap, $PicWidthInMbs, $31, $PicSizeInMapUnits);
      } else if (__label__ == 6) {
        
        
        
        
        __Z26FmoGenerateType3MapUnitMapP12tagCommonObjP14tagPicParamSetPii($video_addr, $currPPS, $MbToSliceGroupMap, $PicWidthInMbs);
      } else if (__label__ == 7) {
        
        
        
        var $39 = HEAP32[$video_addr + 1340 >> 2];
        
        
        var $41 = HEAP32[$currPPS + 112 >> 2];
        
        __Z26FmoGenerateType4MapUnitMapPiiij($MbToSliceGroupMap, $39, $41, $PicSizeInMapUnits);
      } else if (__label__ == 8) {
        
        
        
        
        var $46 = HEAP32[$currPPS + 112 >> 2];
        
        __Z26FmoGenerateType5MapUnitMapPiP12tagCommonObjij($MbToSliceGroupMap, $video_addr, $46, $PicSizeInMapUnits);
      } else if (__label__ == 9) {
        
        
        
        var $50 = HEAP32[$currPPS + 124 >> 2];
        
        __Z26FmoGenerateType6MapUnitMapPiS_j($MbToSliceGroupMap, $50, $PicSizeInMapUnits);
      }
      __label__ = 12;
      break $if_then$$if_else$2;
    }
  } while (0);
  if (__label__ == 12) {
    $retval = 1;
  }
  var $52 = $retval;
  STACKTOP = __stackBase__;
  return $52;
  return null;
}
function __Z26FmoGenerateType0MapUnitMapPiPjjj($mapUnitToSliceGroupMap, $run_length_minus1, $num_slice_groups_minus1, $PicSizeInMapUnits) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $mapUnitToSliceGroupMap_addr;
  var $run_length_minus1_addr;
  var $num_slice_groups_minus1_addr;
  var $PicSizeInMapUnits_addr;
  var $iGroup;
  var $j;
  var $i;
  $mapUnitToSliceGroupMap_addr = $mapUnitToSliceGroupMap;
  $run_length_minus1_addr = $run_length_minus1;
  $num_slice_groups_minus1_addr = $num_slice_groups_minus1;
  $PicSizeInMapUnits_addr = $PicSizeInMapUnits;
  $i = 0;
  $do_body$2 : while (1) {
    $iGroup = 0;
    $for_cond$4 : while (1) {
      
      
      
      if ($iGroup >>> 0 <= $num_slice_groups_minus1_addr >>> 0) {
        __lastLabel__ = 2;
        __label__ = 3;
      } else {
        __lastLabel__ = 2;
        __label__ = 4;
      }
      if (__label__ == 3) {
        
        
        var $cmp1 = $i >>> 0 < $PicSizeInMapUnits_addr >>> 0;
        __lastLabel__ = 3;
      }
      var $4 = __lastLabel__ == 2 ? 0 : $cmp1;
      if (!$4) {
        __label__ = 13;
        break $for_cond$4;
      }
      $j = 0;
      while (1) {
        
        
        
        
        
        
        if ($j >>> 0 <= HEAPU32[$run_length_minus1_addr + 4 * $iGroup >> 2] >>> 0) {
          __lastLabel__ = 6;
          __label__ = 7;
        } else {
          __lastLabel__ = 6;
          __label__ = 8;
        }
        if (__label__ == 7) {
          
          
          
          
          var $cmp5 = $i + $j >>> 0 < $PicSizeInMapUnits_addr >>> 0;
          __lastLabel__ = 7;
        }
        var $12 = __lastLabel__ == 6 ? 0 : $cmp5;
        if (!$12) {
          __label__ = 11;
          break;
        }
        
        
        
        
        
        
        HEAP32[$mapUnitToSliceGroupMap_addr + 4 * ($i + $j) >> 2] = $iGroup;
        
        var $inc = $j + 1;
        $j = $inc;
        __label__ = 6;
        continue;
      }
      var $18 = $iGroup;
      var $inc11 = $18 + 1;
      $iGroup = $inc11;
      
      
      
      
      
      var $add14 = $i + (HEAP32[$run_length_minus1_addr + 4 * $18 >> 2] + 1);
      $i = $add14;
      __label__ = 2;
      continue $for_cond$4;
    }
    
    
    
    if ($i >>> 0 < $PicSizeInMapUnits_addr >>> 0) {
      __label__ = 1;
      continue $do_body$2;
    } else {
      __label__ = 15;
      break $do_body$2;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z26FmoGenerateType1MapUnitMapPiijj($mapUnitToSliceGroupMap, $PicWidthInMbs, $num_slice_groups_minus1, $PicSizeInMapUnits) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $mapUnitToSliceGroupMap_addr;
  var $PicWidthInMbs_addr;
  var $num_slice_groups_minus1_addr;
  var $PicSizeInMapUnits_addr;
  var $i;
  $mapUnitToSliceGroupMap_addr = $mapUnitToSliceGroupMap;
  $PicWidthInMbs_addr = $PicWidthInMbs;
  $num_slice_groups_minus1_addr = $num_slice_groups_minus1;
  $PicSizeInMapUnits_addr = $PicSizeInMapUnits;
  $i = 0;
  while (1) {
    
    
    var $cmp = $i >>> 0 < $PicSizeInMapUnits_addr >>> 0;
    if (!$cmp) {
      __label__ = 4;
      break;
    }
    
    
    var $rem = ($i >>> 0) % ($PicWidthInMbs_addr >>> 0);
    
    
    var $div = Math.floor(($i >>> 0) / ($PicWidthInMbs_addr >>> 0));
    
    
    var $mul = $div * ($num_slice_groups_minus1_addr + 1);
    var $div1 = Math.floor(($mul >>> 0) / 2);
    
    
    
    
    
    
    
    HEAP32[$mapUnitToSliceGroupMap_addr + 4 * $i >> 2] = ($rem + $div1 >>> 0) % ($num_slice_groups_minus1_addr + 1 >>> 0);
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 1;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z26FmoGenerateType2MapUnitMapP14tagPicParamSetPiijj($pps, $mapUnitToSliceGroupMap, $PicWidthInMbs, $num_slice_groups_minus1, $PicSizeInMapUnits) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $pps_addr;
  var $mapUnitToSliceGroupMap_addr;
  var $PicWidthInMbs_addr;
  var $num_slice_groups_minus1_addr;
  var $PicSizeInMapUnits_addr;
  var $iGroup;
  var $i;
  var $x;
  var $y;
  var $yTopLeft;
  var $xTopLeft;
  var $yBottomRight;
  var $xBottomRight;
  $pps_addr = $pps;
  $mapUnitToSliceGroupMap_addr = $mapUnitToSliceGroupMap;
  $PicWidthInMbs_addr = $PicWidthInMbs;
  $num_slice_groups_minus1_addr = $num_slice_groups_minus1;
  $PicSizeInMapUnits_addr = $PicSizeInMapUnits;
  $i = 0;
  $for_cond$2 : while (1) {
    
    
    var $cmp = $i >>> 0 < $PicSizeInMapUnits_addr >>> 0;
    if (!$cmp) {
      __label__ = 4;
      break $for_cond$2;
    }
    
    
    
    
    HEAP32[$mapUnitToSliceGroupMap_addr + 4 * $i >> 2] = $num_slice_groups_minus1_addr;
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 1;
    continue $for_cond$2;
  }
  
  
  $iGroup = $num_slice_groups_minus1_addr - 1;
  $for_cond1$7 : while (1) {
    
    var $cmp2 = ($iGroup | 0) >= 0;
    if (!$cmp2) {
      __label__ = 16;
      break $for_cond1$7;
    }
    
    
    
    
    var $10 = HEAPU32[$pps_addr + 56 + $iGroup * 4 >> 2];
    
    var $div = Math.floor(($10 >>> 0) / ($PicWidthInMbs_addr >>> 0));
    $yTopLeft = $div;
    
    
    
    
    
    
    
    $xTopLeft = (HEAPU32[$pps_addr + 56 + $iGroup * 4 >> 2] >>> 0) % ($PicWidthInMbs_addr >>> 0);
    
    
    
    
    var $18 = HEAPU32[$pps_addr + 84 + $iGroup * 4 >> 2];
    
    var $div8 = Math.floor(($18 >>> 0) / ($PicWidthInMbs_addr >>> 0));
    $yBottomRight = $div8;
    
    
    
    
    
    
    
    $xBottomRight = (HEAPU32[$pps_addr + 84 + $iGroup * 4 >> 2] >>> 0) % ($PicWidthInMbs_addr >>> 0);
    
    $y = $yTopLeft;
    $for_cond12$10 : while (1) {
      
      
      var $cmp13 = $y >>> 0 <= $yBottomRight >>> 0;
      if (!$cmp13) {
        __label__ = 14;
        break $for_cond12$10;
      }
      
      $x = $xTopLeft;
      while (1) {
        
        
        var $cmp16 = $x >>> 0 <= $xBottomRight >>> 0;
        if (!$cmp16) {
          __label__ = 12;
          break;
        }
        
        
        
        
        
        
        
        
        HEAP32[$mapUnitToSliceGroupMap_addr + 4 * ($y * $PicWidthInMbs_addr + $x) >> 2] = $iGroup;
        
        var $inc20 = $x + 1;
        $x = $inc20;
        __label__ = 9;
        continue;
      }
      
      var $inc23 = $y + 1;
      $y = $inc23;
      __label__ = 7;
      continue $for_cond12$10;
    }
    
    var $dec = $iGroup + -1;
    $iGroup = $dec;
    __label__ = 5;
    continue $for_cond1$7;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z26FmoGenerateType3MapUnitMapP12tagCommonObjP14tagPicParamSetPii($video, $pps, $mapUnitToSliceGroupMap, $PicWidthInMbs) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $video_addr;
  var $pps_addr;
  var $mapUnitToSliceGroupMap_addr;
  var $PicWidthInMbs_addr;
  var $i;
  var $k;
  var $leftBound;
  var $topBound;
  var $rightBound;
  var $bottomBound;
  var $x;
  var $y;
  var $xDir;
  var $yDir;
  var $mapUnitVacant;
  var $PicSizeInMapUnits;
  var $MapUnitsInSliceGroup0;
  $video_addr = $video;
  $pps_addr = $pps;
  $mapUnitToSliceGroupMap_addr = $mapUnitToSliceGroupMap;
  $PicWidthInMbs_addr = $PicWidthInMbs;
  
  
  
  $PicSizeInMapUnits = HEAP32[$video_addr + 1264 >> 2];
  
  
  
  $MapUnitsInSliceGroup0 = HEAP32[$video_addr + 1340 >> 2];
  $i = 0;
  $for_cond$2 : while (1) {
    
    
    var $cmp = $i >>> 0 < $PicSizeInMapUnits >>> 0;
    if (!$cmp) {
      __label__ = 4;
      break $for_cond$2;
    }
    
    
    
    HEAP32[$mapUnitToSliceGroupMap_addr + 4 * $i >> 2] = 1;
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 1;
    continue $for_cond$2;
  }
  
  
  
  
  var $sub = $PicWidthInMbs_addr - HEAP32[$pps_addr + 112 >> 2];
  var $div = Math.floor(($sub >>> 0) / 2);
  $x = $div;
  
  
  
  
  
  
  var $sub4 = HEAP32[$video_addr + 1260 >> 2] - HEAP32[$pps_addr + 112 >> 2];
  var $div5 = Math.floor(($sub4 >>> 0) / 2);
  $y = $div5;
  
  $leftBound = $x;
  
  $topBound = $y;
  
  $rightBound = $x;
  
  $bottomBound = $y;
  
  
  
  
  $xDir = HEAP32[$pps_addr + 112 >> 2] - 1;
  
  
  
  $yDir = HEAP32[$pps_addr + 112 >> 2];
  $k = 0;
  $for_cond9$7 : while (1) {
    
    
    var $cmp10 = $k >>> 0 < $MapUnitsInSliceGroup0 >>> 0;
    if (!$cmp10) {
      __label__ = 38;
      break $for_cond9$7;
    }
    
    
    
    
    
    
    
    
    
    
    $mapUnitVacant = (HEAP32[$mapUnitToSliceGroupMap_addr + 4 * ($y * $PicWidthInMbs_addr + $x) >> 2] | 0) == 1 & 1;
    
    
    if (($mapUnitVacant | 0) != 0) {
      __label__ = 7;
    } else {
      __label__ = 8;
    }
    if (__label__ == 7) {
      
      
      
      
      
      
      
      HEAP32[$mapUnitToSliceGroupMap_addr + 4 * ($y * $PicWidthInMbs_addr + $x) >> 2] = 0;
    }
    
    var $cmp17 = ($xDir | 0) == -1;
    if ($cmp17) {
      __label__ = 9;
    } else {
      __label__ = 14;
    }
    $land_lhs_true$$if_else$13 : do {
      if (__label__ == 9) {
        
        
        var $cmp18 = ($x | 0) == ($leftBound | 0);
        if (!$cmp18) {
          __label__ = 14;
          break $land_lhs_true$$if_else$13;
        }
        
        
        
        if (($leftBound - 1 | 0) > 0) {
          __label__ = 11;
        } else {
          __label__ = 12;
        }
        if (__label__ == 11) {
          
          var $sub22 = $leftBound - 1;
          __lastLabel__ = 11;
        } else if (__label__ == 12) {
          __lastLabel__ = 12;
        }
        var $cond = __lastLabel__ == 11 ? $sub22 : 0;
        $leftBound = $cond;
        
        $x = $leftBound;
        $xDir = 0;
        
        
        
        
        
        $yDir = 2 * HEAP32[$pps_addr + 112 >> 2] - 1;
        __label__ = 36;
        break $land_lhs_true$$if_else$13;
      }
    } while (0);
    if (__label__ == 14) {
      
      
      if (($xDir | 0) == 1) {
        __label__ = 15;
      } else {
        __label__ = 20;
      }
      $land_lhs_true27$$if_else42$22 : do {
        if (__label__ == 15) {
          
          
          var $cmp28 = ($x | 0) == ($rightBound | 0);
          if (!$cmp28) {
            __label__ = 20;
            break $land_lhs_true27$$if_else42$22;
          }
          
          
          
          
          
          if (($rightBound + 1 | 0) < ($PicWidthInMbs_addr - 1 | 0)) {
            __label__ = 17;
          } else {
            __label__ = 18;
          }
          if (__label__ == 17) {
            
            var $add34 = $rightBound + 1;
            __lastLabel__ = 17;
          } else if (__label__ == 18) {
            
            var $sub36 = $PicWidthInMbs_addr - 1;
            __lastLabel__ = 18;
          }
          var $cond38 = __lastLabel__ == 17 ? $add34 : $sub36;
          $rightBound = $cond38;
          
          $x = $rightBound;
          $xDir = 0;
          
          
          
          
          
          $yDir = 1 - 2 * HEAP32[$pps_addr + 112 >> 2];
          __label__ = 35;
          break $land_lhs_true27$$if_else42$22;
        }
      } while (0);
      if (__label__ == 20) {
        
        var $cmp43 = ($yDir | 0) == -1;
        if ($cmp43) {
          __label__ = 21;
        } else {
          __label__ = 26;
        }
        $land_lhs_true44$$if_else57$31 : do {
          if (__label__ == 21) {
            
            
            var $cmp45 = ($y | 0) == ($topBound | 0);
            if (!$cmp45) {
              __label__ = 26;
              break $land_lhs_true44$$if_else57$31;
            }
            
            
            
            if (($topBound - 1 | 0) > 0) {
              __label__ = 23;
            } else {
              __label__ = 24;
            }
            if (__label__ == 23) {
              
              var $sub50 = $topBound - 1;
              __lastLabel__ = 23;
            } else if (__label__ == 24) {
              __lastLabel__ = 24;
            }
            var $cond53 = __lastLabel__ == 23 ? $sub50 : 0;
            $topBound = $cond53;
            
            $y = $topBound;
            
            
            
            
            
            $xDir = 1 - 2 * HEAP32[$pps_addr + 112 >> 2];
            $yDir = 0;
            __label__ = 34;
            break $land_lhs_true44$$if_else57$31;
          }
        } while (0);
        if (__label__ == 26) {
          
          
          if (($yDir | 0) == 1) {
            __label__ = 27;
          } else {
            __label__ = 32;
          }
          $land_lhs_true59$$if_else76$40 : do {
            if (__label__ == 27) {
              
              
              var $cmp60 = ($y | 0) == ($bottomBound | 0);
              if (!$cmp60) {
                __label__ = 32;
                break $land_lhs_true59$$if_else76$40;
              }
              
              
              
              
              
              
              
              if (($bottomBound + 1 | 0) < (HEAP32[$video_addr + 1260 >> 2] - 1 | 0)) {
                __label__ = 29;
              } else {
                __label__ = 30;
              }
              if (__label__ == 29) {
                
                var $add67 = $bottomBound + 1;
                __lastLabel__ = 29;
              } else if (__label__ == 30) {
                
                
                
                var $sub70 = HEAP32[$video_addr + 1260 >> 2] - 1;
                __lastLabel__ = 30;
              }
              var $cond72 = __lastLabel__ == 29 ? $add67 : $sub70;
              $bottomBound = $cond72;
              
              $y = $bottomBound;
              
              
              
              
              
              $xDir = 2 * HEAP32[$pps_addr + 112 >> 2] - 1;
              $yDir = 0;
              __label__ = 33;
              break $land_lhs_true59$$if_else76$40;
            }
          } while (0);
          if (__label__ == 32) {
            
            
            var $add77 = $x + $xDir;
            $x = $add77;
            
            
            var $add78 = $y + $yDir;
            $y = $add78;
          }
        }
      }
    }
    
    
    var $add84 = $k + $mapUnitVacant;
    $k = $add84;
    __label__ = 5;
    continue $for_cond9$7;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z26FmoGenerateType4MapUnitMapPiiij($mapUnitToSliceGroupMap, $MapUnitsInSliceGroup0, $slice_group_change_direction_flag, $PicSizeInMapUnits) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $mapUnitToSliceGroupMap_addr;
  var $MapUnitsInSliceGroup0_addr;
  var $slice_group_change_direction_flag_addr;
  var $PicSizeInMapUnits_addr;
  var $sizeOfUpperLeftGroup;
  var $i;
  $mapUnitToSliceGroupMap_addr = $mapUnitToSliceGroupMap;
  $MapUnitsInSliceGroup0_addr = $MapUnitsInSliceGroup0;
  $slice_group_change_direction_flag_addr = $slice_group_change_direction_flag;
  $PicSizeInMapUnits_addr = $PicSizeInMapUnits;
  
  
  if (($slice_group_change_direction_flag_addr | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    var $sub = $PicSizeInMapUnits_addr - $MapUnitsInSliceGroup0_addr;
    __lastLabel__ = 1;
  } else if (__label__ == 2) {
    var $3 = $MapUnitsInSliceGroup0_addr;
    __lastLabel__ = 2;
  }
  var $cond = __lastLabel__ == 1 ? $sub : $3;
  $sizeOfUpperLeftGroup = $cond;
  $i = 0;
  while (1) {
    
    
    var $cmp = $i >>> 0 < $PicSizeInMapUnits_addr >>> 0;
    if (!$cmp) {
      __label__ = 10;
      break;
    }
    
    
    
    if ($i >>> 0 < $sizeOfUpperLeftGroup >>> 0) {
      __label__ = 6;
    } else {
      __label__ = 7;
    }
    if (__label__ == 6) {
      
      
      
      
      
      HEAP32[$mapUnitToSliceGroupMap_addr + 4 * $i >> 2] = 1 - $slice_group_change_direction_flag_addr;
    } else if (__label__ == 7) {
      
      
      
      
      HEAP32[$mapUnitToSliceGroupMap_addr + 4 * $i >> 2] = $slice_group_change_direction_flag_addr;
    }
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 4;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z26FmoGenerateType5MapUnitMapPiP12tagCommonObjij($mapUnitToSliceGroupMap, $video, $slice_group_change_direction_flag, $PicSizeInMapUnits) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $mapUnitToSliceGroupMap_addr;
  var $video_addr;
  var $slice_group_change_direction_flag_addr;
  var $PicSizeInMapUnits_addr;
  var $PicWidthInMbs;
  var $PicHeightInMapUnits;
  var $MapUnitsInSliceGroup0;
  var $sizeOfUpperLeftGroup;
  var $i;
  var $j;
  var $k;
  $mapUnitToSliceGroupMap_addr = $mapUnitToSliceGroupMap;
  $video_addr = $video;
  $slice_group_change_direction_flag_addr = $slice_group_change_direction_flag;
  $PicSizeInMapUnits_addr = $PicSizeInMapUnits;
  
  
  
  $PicWidthInMbs = HEAP32[$video_addr + 1248 >> 2];
  
  
  
  $PicHeightInMapUnits = HEAP32[$video_addr + 1260 >> 2];
  
  
  
  $MapUnitsInSliceGroup0 = HEAP32[$video_addr + 1340 >> 2];
  
  
  if (($slice_group_change_direction_flag_addr | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    var $sub = $PicSizeInMapUnits_addr - $MapUnitsInSliceGroup0;
    __lastLabel__ = 1;
  } else if (__label__ == 2) {
    var $9 = $MapUnitsInSliceGroup0;
    __lastLabel__ = 2;
  }
  var $cond = __lastLabel__ == 1 ? $sub : $9;
  $sizeOfUpperLeftGroup = $cond;
  $k = 0;
  $j = 0;
  $for_cond$6 : while (1) {
    
    
    var $cmp = ($j | 0) < ($PicWidthInMbs | 0);
    if (!$cmp) {
      __label__ = 14;
      break $for_cond$6;
    }
    $i = 0;
    while (1) {
      
      
      var $cmp5 = ($i | 0) < ($PicHeightInMapUnits | 0);
      if (!$cmp5) {
        __label__ = 12;
        break;
      }
      var $14 = $k;
      var $inc = $14 + 1;
      $k = $inc;
      
      
      if (($14 | 0) < ($sizeOfUpperLeftGroup | 0)) {
        __label__ = 8;
      } else {
        __label__ = 9;
      }
      if (__label__ == 8) {
        
        
        
        
        
        
        
        
        
        HEAP32[$mapUnitToSliceGroupMap_addr + 4 * ($i * $PicWidthInMbs + $j) >> 2] = 1 - $slice_group_change_direction_flag_addr;
      } else if (__label__ == 9) {
        
        
        
        
        
        
        
        
        HEAP32[$mapUnitToSliceGroupMap_addr + 4 * ($i * $PicWidthInMbs + $j) >> 2] = $slice_group_change_direction_flag_addr;
      }
      
      var $inc12 = $i + 1;
      $i = $inc12;
      __label__ = 6;
      continue;
    }
    
    var $inc14 = $j + 1;
    $j = $inc14;
    __label__ = 4;
    continue $for_cond$6;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z26FmoGenerateType6MapUnitMapPiS_j($mapUnitToSliceGroupMap, $slice_group_id, $PicSizeInMapUnits) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $mapUnitToSliceGroupMap_addr;
  var $slice_group_id_addr;
  var $PicSizeInMapUnits_addr;
  var $i;
  $mapUnitToSliceGroupMap_addr = $mapUnitToSliceGroupMap;
  $slice_group_id_addr = $slice_group_id;
  $PicSizeInMapUnits_addr = $PicSizeInMapUnits;
  $i = 0;
  while (1) {
    
    
    var $cmp = $i >>> 0 < $PicSizeInMapUnits_addr >>> 0;
    if (!$cmp) {
      __label__ = 4;
      break;
    }
    
    
    
    var $4 = HEAP32[$slice_group_id_addr + 4 * $i >> 2];
    
    
    
    HEAP32[$mapUnitToSliceGroupMap_addr + 4 * $i >> 2] = $4;
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 1;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z11RefListInitP12tagCommonObj($video) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $video_addr;
  var $sliceHdr;
  var $dpb;
  var $slice_type;
  var $i;
  var $list0idx;
  var $tmp_s;
  $video_addr = $video;
  
  
  
  $sliceHdr = HEAP32[$video_addr + 880 >> 2];
  
  
  
  $dpb = HEAP32[$video_addr + 864 >> 2];
  
  
  
  $slice_type = HEAP32[$video_addr + 860 >> 2];
  $list0idx = 0;
  
  
  if (($slice_type | 0) == 2) {
    __label__ = 1;
  } else {
    __label__ = 12;
  }
  if (__label__ == 1) {
    
    
    HEAP32[$video_addr + 2064 >> 2] = 0;
    
    
    HEAP32[$video_addr + 2068 >> 2] = 0;
    $i = 0;
    $for_cond$4 : while (1) {
      
      
      
      
      var $cmp3 = ($i | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
      if (!$cmp3) {
        __label__ = 11;
        break $for_cond$4;
      }
      
      
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 4 >> 2] | 0) == 3) {
        __label__ = 4;
      } else {
        __label__ = 9;
      }
      $land_lhs_true$$if_end28$7 : do {
        if (__label__ == 4) {
          
          
          
          
          
          
          
          
          if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 8 >> 2] | 0) != 0) {
            __label__ = 9;
            break $land_lhs_true$$if_end28$7;
          }
          
          
          
          
          
          
          
          
          
          
          
          if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 72 >> 2] | 0) > (HEAP32[$sliceHdr + 12 >> 2] | 0)) {
            __label__ = 6;
          } else {
            __label__ = 7;
          }
          if (__label__ == 6) {
            
            
            
            
            
            
            
            
            
            
            var $sub = HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 72 >> 2] - HEAP32[$video_addr + 1240 >> 2];
            
            
            
            
            
            var $FrameNumWrap = HEAP32[$dpb + 12 + $i * 4 >> 2] + 76;
            HEAP32[$FrameNumWrap >> 2] = $sub;
          } else if (__label__ == 7) {
            
            
            
            
            
            
            var $38 = HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 72 >> 2];
            
            
            
            
            
            var $FrameNumWrap22 = HEAP32[$dpb + 12 + $i * 4 >> 2] + 76;
            HEAP32[$FrameNumWrap22 >> 2] = $38;
          }
          
          
          
          
          
          
          var $45 = HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 76 >> 2];
          
          
          
          
          
          
          var $PicNum = HEAP32[$dpb + 12 + $i * 4 >> 2] + 16 + 32;
          HEAP32[$PicNum >> 2] = $45;
        }
      } while (0);
      
      var $inc = $i + 1;
      $i = $inc;
      __label__ = 2;
      continue $for_cond$4;
    }
  } else if (__label__ == 12) {
    
    
    if (($slice_type | 0) == 0) {
      __label__ = 13;
    } else {
      __label__ = 32;
    }
    if (__label__ == 13) {
      $i = 0;
      $for_cond32$20 : while (1) {
        
        
        
        
        var $cmp34 = ($i | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
        if (!$cmp34) {
          __label__ = 23;
          break $for_cond32$20;
        }
        
        
        
        
        
        
        
        
        if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 4 >> 2] | 0) == 3) {
          __label__ = 16;
        } else {
          __label__ = 21;
        }
        $land_lhs_true40$$if_end80$23 : do {
          if (__label__ == 16) {
            
            
            
            
            
            
            
            
            if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 8 >> 2] | 0) != 0) {
              __label__ = 21;
              break $land_lhs_true40$$if_end80$23;
            }
            
            
            
            
            
            
            
            
            
            
            
            if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 72 >> 2] | 0) > (HEAP32[$sliceHdr + 12 >> 2] | 0)) {
              __label__ = 18;
            } else {
              __label__ = 19;
            }
            if (__label__ == 18) {
              
              
              
              
              
              
              
              
              
              
              var $sub56 = HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 72 >> 2] - HEAP32[$video_addr + 1240 >> 2];
              
              
              
              
              
              var $FrameNumWrap59 = HEAP32[$dpb + 12 + $i * 4 >> 2] + 76;
              HEAP32[$FrameNumWrap59 >> 2] = $sub56;
            } else if (__label__ == 19) {
              
              
              
              
              
              
              var $80 = HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 72 >> 2];
              
              
              
              
              
              var $FrameNumWrap66 = HEAP32[$dpb + 12 + $i * 4 >> 2] + 76;
              HEAP32[$FrameNumWrap66 >> 2] = $80;
            }
            
            
            
            
            
            
            var $87 = HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 76 >> 2];
            
            
            
            
            
            
            var $PicNum74 = HEAP32[$dpb + 12 + $i * 4 >> 2] + 16 + 32;
            HEAP32[$PicNum74 >> 2] = $87;
            
            
            
            
            
            var $frame77 = HEAP32[$dpb + 12 + $i * 4 >> 2] + 16;
            var $94 = $list0idx;
            var $inc78 = $94 + 1;
            $list0idx = $inc78;
            
            
            
            HEAP32[$video_addr + 1416 + $94 * 4 >> 2] = $frame77;
          }
        } while (0);
        
        var $inc82 = $i + 1;
        $i = $inc82;
        __label__ = 14;
        continue $for_cond32$20;
      }
      
      
      if (($list0idx | 0) == 0) {
        __label__ = 24;
      } else {
        __label__ = 25;
      }
      if (__label__ == 24) {
        
        
        
        
        var $IsReference88 = HEAP32[$dpb + 12 >> 2] + 4;
        HEAP32[$IsReference88 >> 2] = 3;
        
        
        
        
        var $frame91 = HEAP32[$dpb + 12 >> 2] + 16;
        
        
        
        HEAP32[$video_addr + 1416 >> 2] = $frame91;
        $list0idx = 1;
      }
      
      
      
      
      __Z15SortPicByPicNumPP14tagPictureDatai($video_addr + 1416, $list0idx);
      
      
      
      HEAP32[$video_addr + 2064 >> 2] = $list0idx;
      $i = 0;
      while (1) {
        
        
        
        
        var $cmp99 = ($i | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
        if (!$cmp99) {
          __label__ = 31;
          break;
        }
        
        
        
        
        
        
        
        
        if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 8 >> 2] | 0) == 3) {
          __label__ = 28;
        } else {
          __label__ = 29;
        }
        if (__label__ == 28) {
          
          
          
          
          
          
          var $117 = HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 80 >> 2];
          
          
          
          
          
          
          var $LongTermPicNum = HEAP32[$dpb + 12 + $i * 4 >> 2] + 16 + 36;
          HEAP32[$LongTermPicNum >> 2] = $117;
          
          
          
          
          
          var $frame113 = HEAP32[$dpb + 12 + $i * 4 >> 2] + 16;
          var $124 = $list0idx;
          var $inc114 = $124 + 1;
          $list0idx = $inc114;
          
          
          
          HEAP32[$video_addr + 1416 + $124 * 4 >> 2] = $frame113;
        }
        
        var $inc119 = $i + 1;
        $i = $inc119;
        __label__ = 26;
        continue;
      }
      
      
      
      
      
      var $arrayidx123 = $video_addr + 1416 + HEAP32[$video_addr + 2064 >> 2] * 4;
      
      
      
      
      var $sub125 = $list0idx - HEAP32[$video_addr + 2064 >> 2];
      __Z23SortPicByPicNumLongTermPP14tagPictureDatai($arrayidx123, $sub125);
      
      
      
      HEAP32[$video_addr + 2064 >> 2] = $list0idx;
      
      
      HEAP32[$video_addr + 2068 >> 2] = 0;
    }
    
    
    
    
    
    
    
    if ((HEAP32[$video_addr + 2064 >> 2] | 0) == (HEAP32[$video_addr + 2068 >> 2] | 0)) {
      __label__ = 33;
    } else {
      __label__ = 43;
    }
    $land_lhs_true132$$if_end161$45 : do {
      if (__label__ == 33) {
        
        
        
        var $cmp134 = (HEAP32[$video_addr + 2064 >> 2] | 0) > 1;
        if (!$cmp134) {
          __label__ = 43;
          break $land_lhs_true132$$if_end161$45;
        }
        $i = 0;
        while (1) {
          
          
          
          
          var $cmp138 = ($i | 0) < (HEAP32[$video_addr + 2064 >> 2] | 0);
          if (!$cmp138) {
            __label__ = 40;
            break;
          }
          
          
          
          
          
          
          
          
          
          
          
          if ((HEAP32[$video_addr + 1416 + $i * 4 >> 2] | 0) != (HEAP32[$video_addr + 1548 + $i * 4 >> 2] | 0)) {
            __label__ = 37;
            break;
          }
          
          var $inc147 = $i + 1;
          $i = $inc147;
          __label__ = 35;
          continue;
        }
        if (__label__ == 37) {

        }
        
        
        
        
        
        if (($i | 0) == (HEAP32[$video_addr + 2064 >> 2] | 0)) {
          __label__ = 41;
        } else {
          __label__ = 42;
        }
        if (__label__ == 41) {
          
          
          
          
          $tmp_s = HEAP32[$video_addr + 1548 >> 2];
          
          
          
          var $158 = HEAP32[$video_addr + 1548 + 4 >> 2];
          
          
          
          HEAP32[$video_addr + 1548 >> 2] = $158;
          
          
          
          
          HEAP32[$video_addr + 1548 + 4 >> 2] = $tmp_s;
        }
      }
    } while (0);
    
    
    
    
    
    
    
    
    
    
    if ((HEAP32[$video_addr + 2064 >> 2] | 0) < (HEAP32[HEAP32[$video_addr + 880 >> 2] + 56 >> 2] + 1 | 0)) {
      __label__ = 44;
    } else {
      __label__ = 45;
    }
    if (__label__ == 44) {
      
      
      var $168 = HEAP32[$video_addr + 2064 >> 2];
      __lastLabel__ = 44;
    } else if (__label__ == 45) {
      
      
      
      
      
      var $add168 = HEAP32[HEAP32[$video_addr + 880 >> 2] + 56 >> 2] + 1;
      __lastLabel__ = 45;
    }
    var $cond = __lastLabel__ == 44 ? $168 : $add168;
    
    
    HEAP32[$video_addr + 2064 >> 2] = $cond;
    
    
    
    
    
    
    
    
    
    
    if ((HEAP32[$video_addr + 2068 >> 2] | 0) < (HEAP32[HEAP32[$video_addr + 880 >> 2] + 60 >> 2] + 1 | 0)) {
      __label__ = 47;
    } else {
      __label__ = 48;
    }
    if (__label__ == 47) {
      
      
      var $179 = HEAP32[$video_addr + 2068 >> 2];
      __lastLabel__ = 47;
    } else if (__label__ == 48) {
      
      
      
      
      
      var $add179 = HEAP32[HEAP32[$video_addr + 880 >> 2] + 60 >> 2] + 1;
      __lastLabel__ = 48;
    }
    var $cond181 = __lastLabel__ == 47 ? $179 : $add179;
    
    
    HEAP32[$video_addr + 2068 >> 2] = $cond181;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z15SortPicByPicNumPP14tagPictureDatai($data, $num) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $data_addr;
  var $num_addr;
  var $i;
  var $j;
  var $temp;
  $data_addr = $data;
  $num_addr = $num;
  $i = 0;
  $for_cond$2 : while (1) {
    
    
    
    var $cmp = ($i | 0) < ($num_addr - 1 | 0);
    if (!$cmp) {
      __label__ = 10;
      break $for_cond$2;
    }
    
    
    $j = $i + 1;
    while (1) {
      
      
      var $cmp2 = ($j | 0) < ($num_addr | 0);
      if (!$cmp2) {
        __label__ = 8;
        break;
      }
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$data_addr + 4 * $j >> 2] + 32 >> 2] | 0) > (HEAP32[HEAP32[$data_addr + 4 * $i >> 2] + 32 >> 2] | 0)) {
        __label__ = 5;
      } else {
        __label__ = 6;
      }
      if (__label__ == 5) {
        
        
        
        
        $temp = HEAP32[$data_addr + 4 * $j >> 2];
        
        
        
        var $18 = HEAP32[$data_addr + 4 * $i >> 2];
        
        
        
        HEAP32[$data_addr + 4 * $j >> 2] = $18;
        
        
        
        
        HEAP32[$data_addr + 4 * $i >> 2] = $temp;
      }
      
      var $inc = $j + 1;
      $j = $inc;
      __label__ = 3;
      continue;
    }
    
    var $inc12 = $i + 1;
    $i = $inc12;
    __label__ = 1;
    continue $for_cond$2;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z23SortPicByPicNumLongTermPP14tagPictureDatai($data, $num) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $data_addr;
  var $num_addr;
  var $i;
  var $j;
  var $temp;
  $data_addr = $data;
  $num_addr = $num;
  $i = 0;
  $for_cond$2 : while (1) {
    
    
    
    var $cmp = ($i | 0) < ($num_addr - 1 | 0);
    if (!$cmp) {
      __label__ = 10;
      break $for_cond$2;
    }
    
    
    $j = $i + 1;
    while (1) {
      
      
      var $cmp2 = ($j | 0) < ($num_addr | 0);
      if (!$cmp2) {
        __label__ = 8;
        break;
      }
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$data_addr + 4 * $j >> 2] + 36 >> 2] | 0) < (HEAP32[HEAP32[$data_addr + 4 * $i >> 2] + 36 >> 2] | 0)) {
        __label__ = 5;
      } else {
        __label__ = 6;
      }
      if (__label__ == 5) {
        
        
        
        
        $temp = HEAP32[$data_addr + 4 * $j >> 2];
        
        
        
        var $18 = HEAP32[$data_addr + 4 * $i >> 2];
        
        
        
        HEAP32[$data_addr + 4 * $j >> 2] = $18;
        
        
        
        
        HEAP32[$data_addr + 4 * $i >> 2] = $temp;
      }
      
      var $inc = $j + 1;
      $j = $inc;
      __label__ = 3;
      continue;
    }
    
    var $inc12 = $i + 1;
    $i = $inc12;
    __label__ = 1;
    continue $for_cond$2;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z11ReOrderListP12tagCommonObj($video) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $video_addr;
  var $sliceHdr;
  var $status;
  var $slice_type;
  $video_addr = $video;
  
  
  
  $sliceHdr = HEAP32[$video_addr + 880 >> 2];
  $status = 1;
  
  
  
  $slice_type = HEAP32[$video_addr + 860 >> 2];
  
  
  if (($slice_type | 0) != 2) {
    __label__ = 1;
  } else {
    __label__ = 8;
  }
  $if_then$$if_end10$2 : do {
    if (__label__ == 1) {
      
      
      
      
      if ((HEAP32[$sliceHdr + 64 >> 2] | 0) != 0) {
        __label__ = 2;
      } else {
        __label__ = 5;
      }
      if (__label__ == 2) {
        
        var $call = __Z17ReorderRefPicListP12tagCommonObji($video_addr, 0);
        $status = $call;
        
        
        if (($status | 0) != 1) {
          __label__ = 3;
        } else {
          __label__ = 4;
        }
        if (__label__ == 3) {
          
          $retval = $status;
          __label__ = 9;
          break $if_then$$if_end10$2;
        } else if (__label__ == 4) {

        }
      }
      
      
      
      
      if ((HEAP32[$video_addr + 2064 >> 2] | 0) == 0) {
        __label__ = 6;
      } else {
        __label__ = 7;
      }
      if (__label__ == 6) {
        $retval = 0;
        __label__ = 9;
        break $if_then$$if_end10$2;
      } else if (__label__ == 7) {
        __label__ = 8;
        break $if_then$$if_end10$2;
      }
    }
  } while (0);
  if (__label__ == 8) {
    
    $retval = $status;
  }
  var $13 = $retval;
  STACKTOP = __stackBase__;
  return $13;
  return null;
}
function __Z17ReorderRefPicListP12tagCommonObji($video, $isL1) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $retval;
  var $video_addr;
  var $isL1_addr;
  var $sliceHdr;
  var $status;
  var $list_size;
  var $num_ref_idx_lX_active_minus1;
  var $remapping_of_pic_nums_idc;
  var $abs_diff_pic_num_minus1;
  var $long_term_pic_idx;
  var $i;
  var $maxPicNum;
  var $currPicNum;
  var $picNumLXNoWrap;
  var $picNumLXPred;
  var $picNumLX;
  var $refIdxLX = __stackBase__;
  var $tmp;
  $video_addr = $video;
  $isL1_addr = $isL1;
  
  
  
  $sliceHdr = HEAP32[$video_addr + 880 >> 2];
  HEAP32[$refIdxLX >> 2] = 0;
  
  
  if (($isL1_addr | 0) != 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  if (__label__ == 2) {
    
    
    $list_size = $video_addr + 2068;
    
    
    
    $num_ref_idx_lX_active_minus1 = HEAP32[$sliceHdr + 60 >> 2];
    
    
    
    $remapping_of_pic_nums_idc = $sliceHdr + 456;
    
    
    
    
    $tmp = $sliceHdr + 584;
    
    
    $abs_diff_pic_num_minus1 = $tmp;
    
    
    
    
    $tmp = $sliceHdr + 712;
    
    
    $long_term_pic_idx = $tmp;
  } else if (__label__ == 1) {
    
    
    $list_size = $video_addr + 2064;
    
    
    
    $num_ref_idx_lX_active_minus1 = HEAP32[$sliceHdr + 56 >> 2];
    
    
    
    $remapping_of_pic_nums_idc = $sliceHdr + 68;
    
    
    
    
    $tmp = $sliceHdr + 196;
    
    
    $abs_diff_pic_num_minus1 = $tmp;
    
    
    
    
    $tmp = $sliceHdr + 324;
    
    
    $long_term_pic_idx = $tmp;
  }
  
  
  
  $maxPicNum = HEAP32[$video_addr + 1320 >> 2];
  
  
  
  $currPicNum = HEAP32[$video_addr + 1324 >> 2];
  
  $picNumLXPred = $currPicNum;
  $i = 0;
  while (1) {
    
    
    
    
    var $cmp = (HEAP32[$remapping_of_pic_nums_idc + 4 * $i >> 2] | 0) != 3;
    if (!$cmp) {
      __label__ = 29;
      break;
    }
    
    
    
    
    
    if (HEAPU32[$remapping_of_pic_nums_idc + 4 * $i >> 2] >>> 0 > 3) {
      __label__ = 7;
      break;
    }
    
    
    if (($i | 0) >= 32) {
      __label__ = 7;
      break;
    }
    
    
    
    
    
    if (HEAPU32[$remapping_of_pic_nums_idc + 4 * $i >> 2] >>> 0 < 2) {
      __label__ = 9;
    } else {
      __label__ = 24;
    }
    if (__label__ == 9) {
      
      
      
      
      
      if ((HEAP32[$remapping_of_pic_nums_idc + 4 * $i >> 2] | 0) == 0) {
        __label__ = 10;
      } else {
        __label__ = 14;
      }
      if (__label__ == 10) {
        
        
        
        
        
        
        
        
        if (($picNumLXPred - (HEAP32[$abs_diff_pic_num_minus1 + 4 * $i >> 2] + 1) | 0) < 0) {
          __label__ = 11;
        } else {
          __label__ = 12;
        }
        if (__label__ == 11) {
          
          
          
          
          
          
          
          
          
          $picNumLXNoWrap = $picNumLXPred - (HEAP32[$abs_diff_pic_num_minus1 + 4 * $i >> 2] + 1) + $maxPicNum;
        } else if (__label__ == 12) {
          
          
          
          
          
          
          
          $picNumLXNoWrap = $picNumLXPred - (HEAP32[$abs_diff_pic_num_minus1 + 4 * $i >> 2] + 1);
        }
      } else if (__label__ == 14) {
        
        
        
        
        
        
        
        
        
        if (($picNumLXPred + (HEAP32[$abs_diff_pic_num_minus1 + 4 * $i >> 2] + 1) | 0) >= ($maxPicNum | 0)) {
          __label__ = 15;
        } else {
          __label__ = 16;
        }
        if (__label__ == 15) {
          
          
          
          
          
          
          
          
          
          $picNumLXNoWrap = $picNumLXPred + (HEAP32[$abs_diff_pic_num_minus1 + 4 * $i >> 2] + 1) - $maxPicNum;
        } else if (__label__ == 16) {
          
          
          
          
          
          
          
          $picNumLXNoWrap = $picNumLXPred + (HEAP32[$abs_diff_pic_num_minus1 + 4 * $i >> 2] + 1);
        }
      }
      
      $picNumLXPred = $picNumLXNoWrap;
      
      
      
      if (($picNumLXNoWrap | 0) > ($currPicNum | 0)) {
        __label__ = 19;
      } else {
        __label__ = 20;
      }
      if (__label__ == 19) {
        
        
        
        $picNumLX = $picNumLXNoWrap - $maxPicNum;
      } else if (__label__ == 20) {
        
        $picNumLX = $picNumLXNoWrap;
      }
      
      
      
      var $call = __Z16ReorderShortTermP12tagCommonObjiPii($video_addr, $picNumLX, $refIdxLX, $isL1_addr);
      $status = $call;
      
      
      if (($status | 0) != 1) {
        __label__ = 22;
        break;
      }
    } else if (__label__ == 24) {
      
      
      
      
      var $86 = HEAP32[$long_term_pic_idx + 4 * $i >> 2];
      
      var $call56 = __Z15ReorderLongTermP12tagCommonObjiPii($video_addr, $86, $refIdxLX, $isL1_addr);
      $status = $call56;
      
      
      if (($status | 0) != 1) {
        __label__ = 25;
        break;
      }
    }
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 4;
    continue;
  }
  if (__label__ == 29) {
    
    
    
    HEAP32[$list_size >> 2] = $num_ref_idx_lX_active_minus1 + 1;
    $retval = 1;
  } else if (__label__ == 7) {
    $retval = 0;
  } else if (__label__ == 22) {
    
    $retval = $status;
  } else if (__label__ == 25) {
    
    $retval = $status;
  }
  var $93 = $retval;
  STACKTOP = __stackBase__;
  return $93;
  return null;
}
function __Z16ReorderShortTermP12tagCommonObjiPii($video, $picNumLX, $refIdxLX, $isL1) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $video_addr;
  var $picNumLX_addr;
  var $refIdxLX_addr;
  var $isL1_addr;
  var $cIdx;
  var $nIdx;
  var $num_ref_idx_lX_active_minus1;
  var $picLX;
  var $RefPicListX;
  $video_addr = $video;
  $picNumLX_addr = $picNumLX;
  $refIdxLX_addr = $refIdxLX;
  $isL1_addr = $isL1;
  
  
  if (($isL1_addr | 0) != 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  if (__label__ == 2) {
    
    
    
    $RefPicListX = $video_addr + 1548;
    
    
    
    
    
    $num_ref_idx_lX_active_minus1 = HEAP32[HEAP32[$video_addr + 880 >> 2] + 60 >> 2];
  } else if (__label__ == 1) {
    
    
    
    $RefPicListX = $video_addr + 1416;
    
    
    
    
    
    $num_ref_idx_lX_active_minus1 = HEAP32[HEAP32[$video_addr + 880 >> 2] + 56 >> 2];
  }
  
  
  var $call = __Z15GetShortTermPicP12tagCommonObji($video_addr, $picNumLX_addr);
  $picLX = $call;
  
  
  if (($picLX | 0) == 0) {
    __label__ = 4;
  } else {
    __label__ = 5;
  }
  if (__label__ == 4) {
    $retval = 0;
  } else if (__label__ == 5) {
    
    
    
    if (($num_ref_idx_lX_active_minus1 + 1 | 0) >= 33) {
      __label__ = 6;
    } else {
      __label__ = 7;
    }
    if (__label__ == 6) {
      $retval = 0;
    } else if (__label__ == 7) {
      
      
      $cIdx = $num_ref_idx_lX_active_minus1 + 1;
      $for_cond$12 : while (1) {
        
        
        
        var $cmp9 = ($cIdx | 0) > (HEAP32[$refIdxLX_addr >> 2] | 0);
        if (!$cmp9) {
          __label__ = 11;
          break $for_cond$12;
        }
        
        
        
        
        var $19 = HEAP32[$RefPicListX + 4 * ($cIdx - 1) >> 2];
        
        
        
        HEAP32[$RefPicListX + 4 * $cIdx >> 2] = $19;
        
        var $dec = $cIdx + -1;
        $cIdx = $dec;
        __label__ = 8;
        continue $for_cond$12;
      }
      
      
      var $25 = HEAP32[$refIdxLX_addr >> 2];
      var $inc = $25 + 1;
      HEAP32[$refIdxLX_addr >> 2] = $inc;
      
      var $arrayidx11 = $RefPicListX + 4 * $25;
      HEAP32[$arrayidx11 >> 2] = $picLX;
      
      
      $nIdx = HEAP32[$refIdxLX_addr >> 2];
      
      
      $cIdx = HEAP32[$refIdxLX_addr >> 2];
      $for_cond12$17 : while (1) {
        
        
        
        var $cmp14 = ($cIdx | 0) <= ($num_ref_idx_lX_active_minus1 + 1 | 0);
        if (!$cmp14) {
          __label__ = 20;
          break $for_cond12$17;
        }
        
        
        
        
        
        if ((HEAP32[$RefPicListX + 4 * $cIdx >> 2] | 0) != 0) {
          __label__ = 14;
        } else {
          __label__ = 18;
        }
        if (__label__ == 14) {
          
          
          
          
          
          
          
          if ((HEAP32[HEAP32[$RefPicListX + 4 * $cIdx >> 2] + 24 >> 2] | 0) != 0) {
            __label__ = 16;
          } else {
            __label__ = 15;
          }
          $if_then23$$lor_lhs_false$22 : do {
            if (__label__ == 15) {
              
              
              
              
              
              
              
              
              if ((HEAP32[HEAP32[$RefPicListX + 4 * $cIdx >> 2] + 32 >> 2] | 0) != ($picNumLX_addr | 0)) {
                __label__ = 16;
                break $if_then23$$lor_lhs_false$22;
              } else {
                __label__ = 17;
                break $if_then23$$lor_lhs_false$22;
              }
            }
          } while (0);
          if (__label__ == 16) {
            
            
            
            var $47 = HEAP32[$RefPicListX + 4 * $cIdx >> 2];
            var $48 = $nIdx;
            var $inc25 = $48 + 1;
            $nIdx = $inc25;
            
            
            HEAP32[$RefPicListX + 4 * $48 >> 2] = $47;
          }
        }
        
        var $inc30 = $cIdx + 1;
        $cIdx = $inc30;
        __label__ = 12;
        continue $for_cond12$17;
      }
      $retval = 1;
    }
  }
  var $51 = $retval;
  STACKTOP = __stackBase__;
  return $51;
  return null;
}
function __Z15ReorderLongTermP12tagCommonObjiPii($video, $LongTermPicNum, $refIdxLX, $isL1) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $video_addr;
  var $LongTermPicNum_addr;
  var $refIdxLX_addr;
  var $isL1_addr;
  var $RefPicListX;
  var $num_ref_idx_lX_active_minus1;
  var $cIdx;
  var $nIdx;
  var $picLX;
  $video_addr = $video;
  $LongTermPicNum_addr = $LongTermPicNum;
  $refIdxLX_addr = $refIdxLX;
  $isL1_addr = $isL1;
  
  
  if (($isL1_addr | 0) != 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  if (__label__ == 2) {
    
    
    
    $RefPicListX = $video_addr + 1548;
    
    
    
    
    
    $num_ref_idx_lX_active_minus1 = HEAP32[HEAP32[$video_addr + 880 >> 2] + 60 >> 2];
  } else if (__label__ == 1) {
    
    
    
    $RefPicListX = $video_addr + 1416;
    
    
    
    
    
    $num_ref_idx_lX_active_minus1 = HEAP32[HEAP32[$video_addr + 880 >> 2] + 56 >> 2];
  }
  
  
  var $call = __Z14GetLongTermPicP12tagCommonObji($video_addr, $LongTermPicNum_addr);
  $picLX = $call;
  
  
  if (($picLX | 0) == 0) {
    __label__ = 4;
  } else {
    __label__ = 5;
  }
  if (__label__ == 4) {
    $retval = 0;
  } else if (__label__ == 5) {
    
    
    
    if (($num_ref_idx_lX_active_minus1 + 1 | 0) >= 33) {
      __label__ = 6;
    } else {
      __label__ = 7;
    }
    if (__label__ == 6) {
      $retval = 0;
    } else if (__label__ == 7) {
      
      
      $cIdx = $num_ref_idx_lX_active_minus1 + 1;
      $for_cond$12 : while (1) {
        
        
        
        var $cmp9 = ($cIdx | 0) > (HEAP32[$refIdxLX_addr >> 2] | 0);
        if (!$cmp9) {
          __label__ = 11;
          break $for_cond$12;
        }
        
        
        
        
        var $19 = HEAP32[$RefPicListX + 4 * ($cIdx - 1) >> 2];
        
        
        
        HEAP32[$RefPicListX + 4 * $cIdx >> 2] = $19;
        
        var $dec = $cIdx + -1;
        $cIdx = $dec;
        __label__ = 8;
        continue $for_cond$12;
      }
      
      
      var $25 = HEAP32[$refIdxLX_addr >> 2];
      var $inc = $25 + 1;
      HEAP32[$refIdxLX_addr >> 2] = $inc;
      
      var $arrayidx11 = $RefPicListX + 4 * $25;
      HEAP32[$arrayidx11 >> 2] = $picLX;
      
      
      $nIdx = HEAP32[$refIdxLX_addr >> 2];
      
      
      $cIdx = HEAP32[$refIdxLX_addr >> 2];
      $for_cond12$17 : while (1) {
        
        
        
        var $cmp14 = ($cIdx | 0) <= ($num_ref_idx_lX_active_minus1 + 1 | 0);
        if (!$cmp14) {
          __label__ = 18;
          break $for_cond12$17;
        }
        
        
        
        
        
        
        
        if ((HEAP32[HEAP32[$RefPicListX + 4 * $cIdx >> 2] + 24 >> 2] | 0) != 0) {
          __label__ = 14;
        } else {
          __label__ = 15;
        }
        $lor_lhs_false$$if_then21$20 : do {
          if (__label__ == 14) {
            
            
            
            
            
            
            
            
            if ((HEAP32[HEAP32[$RefPicListX + 4 * $cIdx >> 2] + 36 >> 2] | 0) != ($LongTermPicNum_addr | 0)) {
              __label__ = 15;
              break $lor_lhs_false$$if_then21$20;
            } else {
              __label__ = 16;
              break $lor_lhs_false$$if_then21$20;
            }
          }
        } while (0);
        if (__label__ == 15) {
          
          
          
          var $44 = HEAP32[$RefPicListX + 4 * $cIdx >> 2];
          var $45 = $nIdx;
          var $inc23 = $45 + 1;
          $nIdx = $inc23;
          
          
          HEAP32[$RefPicListX + 4 * $45 >> 2] = $44;
        }
        
        var $inc27 = $cIdx + 1;
        $cIdx = $inc27;
        __label__ = 12;
        continue $for_cond12$17;
      }
      $retval = 1;
    }
  }
  var $48 = $retval;
  STACKTOP = __stackBase__;
  return $48;
  return null;
}
function __Z15GetShortTermPicP12tagCommonObji($video, $picNum) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $video_addr;
  var $picNum_addr;
  var $i;
  var $dpb;
  $video_addr = $video;
  $picNum_addr = $picNum;
  
  
  
  $dpb = HEAP32[$video_addr + 864 >> 2];
  $i = 0;
  while (1) {
    
    
    
    
    var $cmp = ($i | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
    if (!$cmp) {
      __label__ = 9;
      break;
    }
    
    
    
    
    
    
    
    
    if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 4 >> 2] | 0) == 3) {
      __label__ = 3;
    } else {
      __label__ = 7;
    }
    if (__label__ == 3) {
      
      
      
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 16 + 24 >> 2] | 0) == 0) {
        __label__ = 4;
      } else {
        __label__ = 6;
      }
      if (__label__ == 4) {
        
        
        
        
        
        
        
        
        
        
        if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 16 + 32 >> 2] | 0) == ($picNum_addr | 0)) {
          __label__ = 5;
          break;
        }
      }
    }
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 1;
    continue;
  }
  if (__label__ == 9) {
    $retval = 0;
  } else if (__label__ == 5) {
    
    
    
    
    
    
    $retval = HEAP32[$dpb + 12 + $i * 4 >> 2] + 16;
  }
  var $22 = $retval;
  STACKTOP = __stackBase__;
  return $22;
  return null;
}
function __Z14GetLongTermPicP12tagCommonObji($video, $LongtermPicNum) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $video_addr;
  var $LongtermPicNum_addr;
  var $dpb;
  var $i;
  $video_addr = $video;
  $LongtermPicNum_addr = $LongtermPicNum;
  
  
  
  $dpb = HEAP32[$video_addr + 864 >> 2];
  $i = 0;
  while (1) {
    
    
    
    
    var $cmp = ($i | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
    if (!$cmp) {
      __label__ = 9;
      break;
    }
    
    
    
    
    
    
    
    
    if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 4 >> 2] | 0) == 3) {
      __label__ = 3;
    } else {
      __label__ = 7;
    }
    if (__label__ == 3) {
      
      
      
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 16 + 24 >> 2] | 0) == 1) {
        __label__ = 4;
      } else {
        __label__ = 6;
      }
      if (__label__ == 4) {
        
        
        
        
        
        
        
        
        
        
        if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 16 + 36 >> 2] | 0) == ($LongtermPicNum_addr | 0)) {
          __label__ = 5;
          break;
        }
      }
    }
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 1;
    continue;
  }
  if (__label__ == 9) {
    $retval = 0;
  } else if (__label__ == 5) {
    
    
    
    
    
    
    $retval = HEAP32[$dpb + 12 + $i * 4 >> 2] + 16;
  }
  var $22 = $retval;
  STACKTOP = __stackBase__;
  return $22;
  return null;
}
function __Z12is_short_refP14tagPictureData($s) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $s_addr;
  $s_addr = $s;
  
  
  
  
  if ((HEAP32[$s_addr + 20 >> 2] | 0) != 0) {
    __lastLabel__ = 0;
    __label__ = 1;
  } else {
    __lastLabel__ = 0;
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    
    
    var $lnot = (HEAP32[$s_addr + 24 >> 2] | 0) != 0 ^ 1;
    __lastLabel__ = 1;
  }
  var $4 = __lastLabel__ == 0 ? 0 : $lnot;
  var $conv = $4 & 1;
  STACKTOP = __stackBase__;
  return $conv;
  return null;
}
function __Z11is_long_refP14tagPictureData($s) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $s_addr;
  $s_addr = $s;
  
  
  
  
  if ((HEAP32[$s_addr + 20 >> 2] | 0) != 0) {
    __lastLabel__ = 0;
    __label__ = 1;
  } else {
    __lastLabel__ = 0;
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    
    var $tobool1 = (HEAP32[$s_addr + 24 >> 2] | 0) != 0;
    __lastLabel__ = 1;
  }
  var $4 = __lastLabel__ == 0 ? 0 : $tobool1;
  var $conv = $4 & 1;
  STACKTOP = __stackBase__;
  return $conv;
  return null;
}
function __Z23SortFrameByFrameNumWrapPP13tagFrameStorei($data, $num) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $data_addr;
  var $num_addr;
  var $i;
  var $j;
  var $temp;
  $data_addr = $data;
  $num_addr = $num;
  $i = 0;
  $for_cond$2 : while (1) {
    
    
    
    var $cmp = ($i | 0) < ($num_addr - 1 | 0);
    if (!$cmp) {
      __label__ = 10;
      break $for_cond$2;
    }
    
    
    $j = $i + 1;
    while (1) {
      
      
      var $cmp2 = ($j | 0) < ($num_addr | 0);
      if (!$cmp2) {
        __label__ = 8;
        break;
      }
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$data_addr + 4 * $j >> 2] + 76 >> 2] | 0) > (HEAP32[HEAP32[$data_addr + 4 * $i >> 2] + 76 >> 2] | 0)) {
        __label__ = 5;
      } else {
        __label__ = 6;
      }
      if (__label__ == 5) {
        
        
        
        
        $temp = HEAP32[$data_addr + 4 * $j >> 2];
        
        
        
        var $18 = HEAP32[$data_addr + 4 * $i >> 2];
        
        
        
        HEAP32[$data_addr + 4 * $j >> 2] = $18;
        
        
        
        
        HEAP32[$data_addr + 4 * $i >> 2] = $temp;
      }
      
      var $inc = $j + 1;
      $j = $inc;
      __label__ = 3;
      continue;
    }
    
    var $inc12 = $i + 1;
    $i = $inc12;
    __label__ = 1;
    continue $for_cond$2;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z21SortFrameByLTFrameIdxPP13tagFrameStorei($data, $num) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $data_addr;
  var $num_addr;
  var $i;
  var $j;
  var $temp;
  $data_addr = $data;
  $num_addr = $num;
  $i = 0;
  $for_cond$2 : while (1) {
    
    
    
    var $cmp = ($i | 0) < ($num_addr - 1 | 0);
    if (!$cmp) {
      __label__ = 10;
      break $for_cond$2;
    }
    
    
    $j = $i + 1;
    while (1) {
      
      
      var $cmp2 = ($j | 0) < ($num_addr | 0);
      if (!$cmp2) {
        __label__ = 8;
        break;
      }
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$data_addr + 4 * $j >> 2] + 80 >> 2] | 0) < (HEAP32[HEAP32[$data_addr + 4 * $i >> 2] + 80 >> 2] | 0)) {
        __label__ = 5;
      } else {
        __label__ = 6;
      }
      if (__label__ == 5) {
        
        
        
        
        $temp = HEAP32[$data_addr + 4 * $j >> 2];
        
        
        
        var $18 = HEAP32[$data_addr + 4 * $i >> 2];
        
        
        
        HEAP32[$data_addr + 4 * $j >> 2] = $18;
        
        
        
        
        HEAP32[$data_addr + 4 * $i >> 2] = $temp;
      }
      
      var $inc = $j + 1;
      $j = $inc;
      __label__ = 3;
      continue;
    }
    
    var $inc12 = $i + 1;
    $i = $inc12;
    __label__ = 1;
    continue $for_cond$2;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z12SortPicByPOCPP14tagPictureDataii($data, $num, $descending) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $data_addr;
  var $num_addr;
  var $descending_addr;
  var $i;
  var $j;
  var $temp;
  $data_addr = $data;
  $num_addr = $num;
  $descending_addr = $descending;
  
  
  if (($descending_addr | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 12;
  }
  if (__label__ == 1) {
    $i = 0;
    $for_cond$4 : while (1) {
      
      
      
      var $cmp = ($i | 0) < ($num_addr - 1 | 0);
      if (!$cmp) {
        __label__ = 11;
        break $for_cond$4;
      }
      
      
      $j = $i + 1;
      while (1) {
        
        
        var $cmp2 = ($j | 0) < ($num_addr | 0);
        if (!$cmp2) {
          __label__ = 9;
          break;
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        if ((HEAP32[HEAP32[$data_addr + 4 * $j >> 2] + 28 >> 2] | 0) > (HEAP32[HEAP32[$data_addr + 4 * $i >> 2] + 28 >> 2] | 0)) {
          __label__ = 6;
        } else {
          __label__ = 7;
        }
        if (__label__ == 6) {
          
          
          
          
          $temp = HEAP32[$data_addr + 4 * $j >> 2];
          
          
          
          var $19 = HEAP32[$data_addr + 4 * $i >> 2];
          
          
          
          HEAP32[$data_addr + 4 * $j >> 2] = $19;
          
          
          
          
          HEAP32[$data_addr + 4 * $i >> 2] = $temp;
        }
        
        var $inc = $j + 1;
        $j = $inc;
        __label__ = 4;
        continue;
      }
      
      var $inc13 = $i + 1;
      $i = $inc13;
      __label__ = 2;
      continue $for_cond$4;
    }
  } else if (__label__ == 12) {
    $i = 0;
    $for_cond15$18 : while (1) {
      
      
      
      var $cmp17 = ($i | 0) < ($num_addr - 1 | 0);
      if (!$cmp17) {
        __label__ = 22;
        break $for_cond15$18;
      }
      
      
      $j = $i + 1;
      while (1) {
        
        
        var $cmp21 = ($j | 0) < ($num_addr | 0);
        if (!$cmp21) {
          __label__ = 20;
          break;
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        if ((HEAP32[HEAP32[$data_addr + 4 * $j >> 2] + 28 >> 2] | 0) < (HEAP32[HEAP32[$data_addr + 4 * $i >> 2] + 28 >> 2] | 0)) {
          __label__ = 17;
        } else {
          __label__ = 18;
        }
        if (__label__ == 17) {
          
          
          
          
          $temp = HEAP32[$data_addr + 4 * $j >> 2];
          
          
          
          var $45 = HEAP32[$data_addr + 4 * $i >> 2];
          
          
          
          HEAP32[$data_addr + 4 * $j >> 2] = $45;
          
          
          
          
          HEAP32[$data_addr + 4 * $i >> 2] = $temp;
        }
        
        var $inc35 = $j + 1;
        $j = $inc35;
        __label__ = 15;
        continue;
      }
      
      var $inc38 = $i + 1;
      $i = $inc38;
      __label__ = 13;
      continue $for_cond15$18;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z17SortPicByLTPicNumPP14tagPictureDatai($data, $num) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $data_addr;
  var $num_addr;
  var $i;
  var $j;
  var $temp;
  $data_addr = $data;
  $num_addr = $num;
  $i = 0;
  $for_cond$2 : while (1) {
    
    
    
    var $cmp = ($i | 0) < ($num_addr - 1 | 0);
    if (!$cmp) {
      __label__ = 10;
      break $for_cond$2;
    }
    
    
    $j = $i + 1;
    while (1) {
      
      
      var $cmp2 = ($j | 0) < ($num_addr | 0);
      if (!$cmp2) {
        __label__ = 8;
        break;
      }
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$data_addr + 4 * $j >> 2] + 36 >> 2] | 0) < (HEAP32[HEAP32[$data_addr + 4 * $i >> 2] + 36 >> 2] | 0)) {
        __label__ = 5;
      } else {
        __label__ = 6;
      }
      if (__label__ == 5) {
        
        
        
        
        $temp = HEAP32[$data_addr + 4 * $j >> 2];
        
        
        
        var $18 = HEAP32[$data_addr + 4 * $i >> 2];
        
        
        
        HEAP32[$data_addr + 4 * $j >> 2] = $18;
        
        
        
        
        HEAP32[$data_addr + 4 * $i >> 2] = $temp;
      }
      
      var $inc = $j + 1;
      $j = $inc;
      __label__ = 3;
      continue;
    }
    
    var $inc12 = $i + 1;
    $i = $inc12;
    __label__ = 1;
    continue $for_cond$2;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z14SortFrameByPOCPP13tagFrameStoreii($data, $num, $descending) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $data_addr;
  var $num_addr;
  var $descending_addr;
  var $i;
  var $j;
  var $temp;
  $data_addr = $data;
  $num_addr = $num;
  $descending_addr = $descending;
  
  
  if (($descending_addr | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 12;
  }
  if (__label__ == 1) {
    $i = 0;
    $for_cond$4 : while (1) {
      
      
      
      var $cmp = ($i | 0) < ($num_addr - 1 | 0);
      if (!$cmp) {
        __label__ = 11;
        break $for_cond$4;
      }
      
      
      $j = $i + 1;
      while (1) {
        
        
        var $cmp2 = ($j | 0) < ($num_addr | 0);
        if (!$cmp2) {
          __label__ = 9;
          break;
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        if ((HEAP32[HEAP32[$data_addr + 4 * $j >> 2] + 84 >> 2] | 0) > (HEAP32[HEAP32[$data_addr + 4 * $i >> 2] + 84 >> 2] | 0)) {
          __label__ = 6;
        } else {
          __label__ = 7;
        }
        if (__label__ == 6) {
          
          
          
          
          $temp = HEAP32[$data_addr + 4 * $j >> 2];
          
          
          
          var $19 = HEAP32[$data_addr + 4 * $i >> 2];
          
          
          
          HEAP32[$data_addr + 4 * $j >> 2] = $19;
          
          
          
          
          HEAP32[$data_addr + 4 * $i >> 2] = $temp;
        }
        
        var $inc = $j + 1;
        $j = $inc;
        __label__ = 4;
        continue;
      }
      
      var $inc13 = $i + 1;
      $i = $inc13;
      __label__ = 2;
      continue $for_cond$4;
    }
  } else if (__label__ == 12) {
    $i = 0;
    $for_cond15$18 : while (1) {
      
      
      
      var $cmp17 = ($i | 0) < ($num_addr - 1 | 0);
      if (!$cmp17) {
        __label__ = 22;
        break $for_cond15$18;
      }
      
      
      $j = $i + 1;
      while (1) {
        
        
        var $cmp21 = ($j | 0) < ($num_addr | 0);
        if (!$cmp21) {
          __label__ = 20;
          break;
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        if ((HEAP32[HEAP32[$data_addr + 4 * $j >> 2] + 84 >> 2] | 0) < (HEAP32[HEAP32[$data_addr + 4 * $i >> 2] + 84 >> 2] | 0)) {
          __label__ = 17;
        } else {
          __label__ = 18;
        }
        if (__label__ == 17) {
          
          
          
          
          $temp = HEAP32[$data_addr + 4 * $j >> 2];
          
          
          
          var $45 = HEAP32[$data_addr + 4 * $i >> 2];
          
          
          
          HEAP32[$data_addr + 4 * $j >> 2] = $45;
          
          
          
          
          HEAP32[$data_addr + 4 * $i >> 2] = $temp;
        }
        
        var $inc35 = $j + 1;
        $j = $inc35;
        __label__ = 15;
        continue;
      }
      
      var $inc38 = $i + 1;
      $i = $inc38;
      __label__ = 13;
      continue $for_cond15$18;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function __Z8readFilePKcPi($filename, $size) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $filename_addr;
  var $size_addr;
  var $file;
  var $bufferSize;
  var $buffer;
  $filename_addr = $filename;
  $size_addr = $size;
  
  var $call = _fopen($filename_addr, __str);
  $file = $call;
  
  
  if (($file | 0) != 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  if (__label__ == 2) {
    
    var $call2 = _fseek($file, 0, 2);
    
    var $call3 = _ftell($file);
    
    $bufferSize = $call3 + 1;
    
    var $call4 = _fseek($file, 0, 0);
    
    var $call5 = _malloc($bufferSize);
    $buffer = $call5;
    
    
    if (($buffer | 0) != 0) {
      __label__ = 4;
    } else {
      __label__ = 3;
    }
    if (__label__ == 4) {
      
      
      
      var $call11 = _fread($buffer, $bufferSize, 1, $file);
      
      var $call12 = _fclose($file);
      
      
      HEAP32[$size_addr >> 2] = $bufferSize;
      
      $retval = $buffer;
    } else if (__label__ == 3) {
      var $9 = HEAP32[_stderr >> 2];
      var $call8 = _fprintf($9, __str2, allocate(1, "i32", ALLOC_STACK));
      
      var $call9 = _fclose($file);
      $retval = 0;
    }
  } else if (__label__ == 1) {
    var $2 = HEAP32[_stderr >> 2];
    
    var $call1 = _fprintf($2, __str1, allocate([ $filename_addr, 0, 0, 0 ], [ "i8*", 0, 0, 0 ], ALLOC_STACK));
    $retval = 0;
  }
  var $18 = $retval;
  STACKTOP = __stackBase__;
  return $18;
  return null;
}
function __Z9my_mallocPvii($userData, $size, $attribute) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  
  var $userData_addr;
  var $size_addr;
  var $attribute_addr;
  $userData_addr = $userData;
  $size_addr = $size;
  $attribute_addr = $attribute;
  
  var $call = _malloc($size_addr);
  var $1 = $call;
  STACKTOP = __stackBase__;
  return $1;
  return null;
}
function __Z7my_freePvj($userData, $mem) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  
  var $userData_addr;
  var $mem_addr;
  $userData_addr = $userData;
  $mem_addr = $mem;
  
  
  STACKTOP = __stackBase__;
  return;
  return;
}
function _main($argc, $argv) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $retval;
  var $argc_addr;
  var $argv_addr;
  $retval = 0;
  $argc_addr = $argc;
  $argv_addr = $argv;
  HEAP32[_decoder >> 2] = 0;
  HEAP32[_decoder + 20 >> 2] = 2;
  HEAP32[_decoder + 24 >> 2] = 4;
  HEAP32[_decoder + 32 >> 2] = 1;
  HEAP32[_size >> 2] = 0;
  
  
  if (($argc_addr | 0) == 2) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    var $2 = HEAP32[$argv_addr + 4 >> 2];
    __lastLabel__ = 1;
  } else if (__label__ == 2) {
    __lastLabel__ = 2;
  }
  var $cond = __lastLabel__ == 1 ? $2 : __str3;
  var $call = __Z8readFilePKcPi($cond, _size);
  HEAP32[_buffer >> 2] = $call;
  var $3 = HEAP32[_buffer >> 2];
  HEAP32[_stream >> 2] = $3;
  HEAP32[_nal_unit >> 2] = 0;
  var $4 = HEAP32[_size >> 2];
  HEAP32[_remaining >> 2] = $4;
  var $5 = HEAP32[_remaining >> 2];
  HEAP32[_nal_size >> 2] = $5;
  var $call1 = _SDL_Init(32);
  __Z11runMainLoopv();
  STACKTOP = __stackBase__;
  return 0;
  return null;
}
Module["_main"] = _main;
function __Z11runMainLoopv() {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $status;
  while (1) {
    var $call = __Z17mainLoopIterationv();
    $status = $call;
    var $cmp = ($call | 0) != 0;
    if (!$cmp) {
      __label__ = 5;
      break;
    }
    
    
    if (($status | 0) == 2) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    if (__label__ == 3) {
      _SDL_Delay(20);
    }
    __label__ = 1;
    continue;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
Module["__Z11runMainLoopv"] = __Z11runMainLoopv;
function __Z17mainLoopIterationv() {
  var __stackBase__ = STACKTOP;
  STACKTOP += 92;
  var __label__;
  var __lastLabel__ = null;
  var $retval;
  var $nal;
  var $status;
  var $nal_type = __stackBase__;
  var $nal_ref_idc = __stackBase__ + 4;
  var $ret;
  var $indx = __stackBase__ + 8;
  var $release = __stackBase__ + 12;
  var $output = __stackBase__ + 16;
  var $luma;
  var $cb;
  var $cr;
  var $dst;
  var $stride;
  var $strideChroma;
  var $y;
  var $lineOffLuma;
  var $lineOffChroma;
  var $x;
  var $c;
  var $d;
  var $e;
  var $red;
  var $green;
  var $blue;
  var $alpha;
  var $event = __stackBase__ + 72;
  $nal = 0;
  var $0 = HEAP32[_stream >> 2];
  var $call = _PVAVCAnnexBGetNALUnit($0, _nal_unit, _nal_size);
  
  if (($call | 0) != 1) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    _SDL_Quit();
    _PVAVCCleanUpDecoder(_decoder);
    $retval = 0;
  } else if (__label__ == 2) {
    $status = 1;
    HEAP32[$nal_type >> 2] = 0;
    HEAP32[$nal_ref_idc >> 2] = 0;
    var $1 = HEAP32[_nal_unit >> 2];
    var $2 = HEAP32[_nal_size >> 2];
    var $call1 = _PVAVCDecGetNALType($1, $2, $nal_type, $nal_ref_idc);
    
    
    if ((HEAP32[$nal_type >> 2] | 0) == 7) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    if (__label__ == 3) {
      var $4 = HEAP32[_nal_unit >> 2];
      var $5 = HEAP32[_nal_size >> 2];
      var $call4 = _PVAVCDecSeqParamSet(_decoder, $4, $5);
    } else if (__label__ == 4) {
      
      
      if ((HEAP32[$nal_type >> 2] | 0) == 8) {
        __label__ = 5;
      } else {
        __label__ = 6;
      }
      if (__label__ == 5) {
        var $7 = HEAP32[_nal_unit >> 2];
        var $8 = HEAP32[_nal_size >> 2];
        var $call7 = _PVAVCDecPicParamSet(_decoder, $7, $8);
      } else if (__label__ == 6) {
        
        
        if ((HEAP32[$nal_type >> 2] | 0) == 1) {
          __label__ = 8;
        } else {
          __label__ = 7;
        }
        $if_then11$$lor_lhs_false$11 : do {
          if (__label__ == 7) {
            
            
            if ((HEAP32[$nal_type >> 2] | 0) == 5) {
              __label__ = 8;
              break $if_then11$$lor_lhs_false$11;
            }
            var $74 = HEAP32[$nal_type >> 2];
            var $call102 = _printf(__str4, allocate([ $74, 0, 0, 0 ], [ "i32", 0, 0, 0 ], ALLOC_STACK));
            __label__ = 43;
            break $if_then11$$lor_lhs_false$11;
          }
        } while (0);
        if (__label__ == 8) {
          var $11 = HEAP32[_nal_unit >> 2];
          var $12 = HEAP32[_nal_size >> 2];
          var $call12 = _PVAVCDecodeSlice(_decoder, $11, $12);
          $ret = $call12;
          var $call13 = _PVAVCDecGetOutput(_decoder, $indx, $release, $output);
          
          
          if ((HEAP32[_screen >> 2] | 0) != 0) {
            __label__ = 10;
          } else {
            __label__ = 9;
          }
          if (__label__ == 9) {
            
            var $14 = HEAP32[$output + 16 >> 2];
            
            var $15 = HEAP32[$output + 20 >> 2];
            var $call15 = _SDL_SetVideoMode($14, $15, 32, 17);
            HEAP32[_screen >> 2] = $call15;
          }
          var $16 = HEAP32[_screen >> 2];
          var $call17 = _SDL_LockSurface($16);
          
          
          
          $luma = HEAP32[$output + 4 >> 2];
          
          
          
          $cb = HEAP32[$output + 4 + 4 >> 2];
          
          
          
          $cr = HEAP32[$output + 4 + 8 >> 2];
          
          
          
          
          $dst = HEAP32[HEAP32[_screen >> 2] + 20 >> 2];
          
          
          $stride = HEAP32[$output + 16 >> 2];
          
          
          
          $strideChroma = HEAP32[$output + 16 >> 2] >> 1;
          $y = 0;
          $for_cond$19 : while (1) {
            
            
            
            var $cmp25 = ($y | 0) < (HEAP32[$output + 20 >> 2] | 0);
            if (!$cmp25) {
              __label__ = 36;
              break $for_cond$19;
            }
            
            
            
            $lineOffLuma = $y * $stride;
            
            
            
            
            $lineOffChroma = ($y >> 1) * $strideChroma;
            $x = 0;
            while (1) {
              
              
              
              var $cmp30 = ($x | 0) < (HEAP32[$output + 16 >> 2] | 0);
              if (!$cmp30) {
                __label__ = 34;
                break;
              }
              
              
              
              
              
              
              
              
              $c = (HEAPU8[$luma + ($lineOffLuma + $x) >> 0] & 255) - 16;
              
              
              
              
              
              
              
              
              
              $d = (HEAPU8[$cb + ($lineOffChroma + ($x >> 1)) >> 0] & 255) - 128;
              
              
              
              
              
              
              
              
              
              $e = (HEAPU8[$cr + ($lineOffChroma + ($x >> 1)) >> 0] & 255) - 128;
              
              
              
              
              
              
              
              $red = 298 * $c + 409 * $e + 128 >> 8;
              
              
              if (($red | 0) < 0) {
                __label__ = 15;
              } else {
                __label__ = 16;
              }
              if (__label__ == 15) {
                __lastLabel__ = 15;
              } else if (__label__ == 16) {
                
                
                if (($red | 0) > 255) {
                  __label__ = 17;
                } else {
                  __label__ = 18;
                }
                if (__label__ == 17) {
                  __lastLabel__ = 17;
                } else if (__label__ == 18) {
                  var $49 = $red;
                  __lastLabel__ = 18;
                }
                var $cond = __lastLabel__ == 17 ? 255 : $49;
                __lastLabel__ = 19;
              }
              var $cond53 = __lastLabel__ == 15 ? 0 : $cond;
              $red = $cond53;
              
              
              
              
              
              
              
              
              
              
              $green = 298 * $c - 100 * $d - 208 * $e + 128 >> 8;
              
              
              if (($green | 0) < 0) {
                __label__ = 21;
              } else {
                __label__ = 22;
              }
              if (__label__ == 21) {
                __lastLabel__ = 21;
              } else if (__label__ == 22) {
                
                
                if (($green | 0) > 255) {
                  __label__ = 23;
                } else {
                  __label__ = 24;
                }
                if (__label__ == 23) {
                  __lastLabel__ = 23;
                } else if (__label__ == 24) {
                  var $55 = $green;
                  __lastLabel__ = 24;
                }
                var $cond68 = __lastLabel__ == 23 ? 255 : $55;
                __lastLabel__ = 25;
              }
              var $cond70 = __lastLabel__ == 21 ? 0 : $cond68;
              $green = $cond70;
              
              
              
              
              
              
              
              $blue = 298 * $c + 516 * $d + 128 >> 8;
              
              
              if (($blue | 0) < 0) {
                __label__ = 27;
              } else {
                __label__ = 28;
              }
              if (__label__ == 27) {
                __lastLabel__ = 27;
              } else if (__label__ == 28) {
                
                
                if (($blue | 0) > 255) {
                  __label__ = 29;
                } else {
                  __label__ = 30;
                }
                if (__label__ == 29) {
                  __lastLabel__ = 29;
                } else if (__label__ == 30) {
                  var $60 = $blue;
                  __lastLabel__ = 30;
                }
                var $cond83 = __lastLabel__ == 29 ? 255 : $60;
                __lastLabel__ = 31;
              }
              var $cond85 = __lastLabel__ == 27 ? 0 : $cond83;
              $blue = $cond85;
              $alpha = 255;
              
              
              var $62 = HEAP32[HEAP32[_screen >> 2] + 4 >> 2];
              
              
              
              
              
              
              
              
              
              var $call91 = _SDL_MapRGB($62, $red & 255 & 255, $green & 255 & 255, $blue & 255 & 255);
              
              
              
              
              
              HEAP32[$dst + 4 * ($lineOffLuma + $x) >> 2] = $call91;
              
              var $inc = $x + 1;
              $x = $inc;
              __label__ = 13;
              continue;
            }
            
            var $inc95 = $y + 1;
            $y = $inc95;
            __label__ = 11;
            continue $for_cond$19;
          }
          var $71 = HEAP32[_screen >> 2];
          _SDL_UnlockSurface($71);
          var $72 = HEAP32[_screen >> 2];
          var $call97 = _SDL_Flip($72);
          $status = 2;
          while (1) {
            var $call98 = _SDL_PollEvent($event);
            var $tobool99 = ($call98 | 0) != 0;
            if (!$tobool99) {
              __label__ = 41;
              break;
            }
            
            
            
            if ((HEAPU8[$event >> 0] & 255) == 12) {
              __label__ = 39;
              break;
            } else {

            }
            __label__ = 37;
            continue;
          }
          if (__label__ == 41) {

          } else if (__label__ == 39) {
            _exit(0);
            throw "Reached an unreachable!";
          }
        }
      }
    }
    
    
    var $add_ptr = HEAP32[_nal_unit >> 2] + HEAP32[_nal_size >> 2];
    HEAP32[_stream >> 2] = $add_ptr;
    
    
    
    
    
    
    var $sub106 = HEAP32[_size >> 2] - (HEAP32[_stream >> 2] - HEAP32[_buffer >> 2]);
    HEAP32[_nal_size >> 2] = $sub106;
    
    $retval = $status;
  }
  var $81 = $retval;
  STACKTOP = __stackBase__;
  return $81;
  return null;
}
function __Z4ue_vP15tagDecBitstreamPj($bitstream, $codeNum) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $bitstream_addr;
  var $codeNum_addr;
  var $temp = __stackBase__;
  var $tmp_cnt;
  var $leading_zeros;
  $bitstream_addr = $bitstream;
  $codeNum_addr = $codeNum;
  $leading_zeros = 0;
  
  var $call = _BitstreamShowBits($bitstream_addr, 16, $temp);
  
  
  $tmp_cnt = HEAP32[$temp >> 2] | 1;
  while (1) {
    
    
    var $cmp = ($tmp_cnt & 32768 | 0) == 0;
    if (!$cmp) {
      __label__ = 3;
      break;
    }
    
    var $shl = $tmp_cnt << 1;
    $tmp_cnt = $shl;
    
    var $inc = $leading_zeros + 1;
    $leading_zeros = $inc;
    __label__ = 1;
    continue;
  }
  
  
  if (($leading_zeros | 0) < 8) {
    __label__ = 4;
  } else {
    __label__ = 5;
  }
  if (__label__ == 4) {
    
    
    
    
    
    
    
    HEAP32[$codeNum_addr >> 2] = (HEAPU32[$temp >> 2] >>> (15 - ($leading_zeros << 1) >>> 0)) - 1;
    
    
    
    
    
    
    var $add5 = HEAP32[$bitstream_addr + 36 >> 2] + (($leading_zeros << 1) + 1);
    HEAP32[$bitstream_addr + 36 >> 2] = $add5;
    
    
    
    
    
    
    var $sub8 = HEAP32[$bitstream_addr + 28 >> 2] - (($leading_zeros << 1) + 1);
    HEAP32[$bitstream_addr + 28 >> 2] = $sub8;
    
    
    
    
    
    
    var $shl11 = HEAP32[$bitstream_addr + 16 >> 2] << ($leading_zeros << 1) + 1;
    HEAP32[$bitstream_addr + 16 >> 2] = $shl11;
  } else if (__label__ == 5) {
    
    
    
    
    var $call14 = _BitstreamReadBits($bitstream_addr, ($leading_zeros << 1) + 1, $temp);
    
    var $sub15 = HEAP32[$temp >> 2] - 1;
    
    HEAP32[$codeNum_addr >> 2] = $sub15;
  }
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z4se_vP15tagDecBitstreamPi($bitstream, $value) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $bitstream_addr;
  var $value_addr;
  var $temp = __stackBase__;
  var $tmp_cnt;
  var $leading_zeros;
  $bitstream_addr = $bitstream;
  $value_addr = $value;
  $leading_zeros = 0;
  
  var $call = _BitstreamShowBits($bitstream_addr, 16, $temp);
  
  
  $tmp_cnt = HEAP32[$temp >> 2] | 1;
  while (1) {
    
    
    var $cmp = ($tmp_cnt & 32768 | 0) == 0;
    if (!$cmp) {
      __label__ = 3;
      break;
    }
    
    var $shl = $tmp_cnt << 1;
    $tmp_cnt = $shl;
    
    var $inc = $leading_zeros + 1;
    $leading_zeros = $inc;
    __label__ = 1;
    continue;
  }
  
  
  if (($leading_zeros | 0) < 8) {
    __label__ = 4;
  } else {
    __label__ = 5;
  }
  if (__label__ == 4) {
    
    
    
    
    
    HEAP32[$temp >> 2] = HEAPU32[$temp >> 2] >>> (15 - ($leading_zeros << 1) >>> 0);
    
    
    
    
    
    
    var $add4 = HEAP32[$bitstream_addr + 36 >> 2] + (($leading_zeros << 1) + 1);
    HEAP32[$bitstream_addr + 36 >> 2] = $add4;
    
    
    
    
    
    
    var $sub7 = HEAP32[$bitstream_addr + 28 >> 2] - (($leading_zeros << 1) + 1);
    HEAP32[$bitstream_addr + 28 >> 2] = $sub7;
    
    
    
    
    
    
    var $shl10 = HEAP32[$bitstream_addr + 16 >> 2] << ($leading_zeros << 1) + 1;
    HEAP32[$bitstream_addr + 16 >> 2] = $shl10;
  } else if (__label__ == 5) {
    
    
    
    
    var $call13 = _BitstreamReadBits($bitstream_addr, ($leading_zeros << 1) + 1, $temp);
  }
  
  
  
  HEAP32[$value_addr >> 2] = HEAPU32[$temp >> 2] >>> 1;
  
  
  
  if ((HEAP32[$temp >> 2] & 1 | 0) != 0) {
    __label__ = 7;
  } else {
    __label__ = 8;
  }
  if (__label__ == 7) {
    
    
    var $sub17 = 0 - HEAP32[$value_addr >> 2];
    
    HEAP32[$value_addr >> 2] = $sub17;
  }
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z9se_v32bitP15tagDecBitstreamPi($bitstream, $value) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  var $retval;
  var $bitstream_addr;
  var $value_addr;
  var $leadingZeros = __stackBase__;
  var $infobits = __stackBase__ + 4;
  var $codeNum;
  $bitstream_addr = $bitstream;
  $value_addr = $value;
  
  var $call = __Z19GetEGBitstring32bitP15tagDecBitstreamPiPj($bitstream_addr, $leadingZeros, $infobits);
  
  if (1 != ($call | 0)) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    $retval = 0;
  } else if (__label__ == 2) {
    
    
    
    
    
    $codeNum = (1 << HEAP32[$leadingZeros >> 2]) - 1 + HEAP32[$infobits >> 2];
    
    
    var $div = Math.floor(($codeNum + 1 >>> 0) / 2);
    
    HEAP32[$value_addr >> 2] = $div;
    
    
    
    if (($codeNum & 1 | 0) == 0) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    if (__label__ == 3) {
      
      
      var $sub4 = 0 - HEAP32[$value_addr >> 2];
      
      HEAP32[$value_addr >> 2] = $sub4;
    }
    $retval = 1;
  }
  var $9 = $retval;
  STACKTOP = __stackBase__;
  return $9;
  return null;
}
function __Z19GetEGBitstring32bitP15tagDecBitstreamPiPj($bitstream, $leadingZeros, $infobits) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  var $bitstream_addr;
  var $leadingZeros_addr;
  var $infobits_addr;
  var $bit_value = __stackBase__;
  var $info_temp = __stackBase__ + 4;
  $bitstream_addr = $bitstream;
  $leadingZeros_addr = $leadingZeros;
  $infobits_addr = $infobits;
  
  HEAP32[$leadingZeros_addr >> 2] = 0;
  
  var $call = _BitstreamRead1Bit($bitstream_addr, $bit_value);
  while (1) {
    
    
    var $lnot = (HEAP32[$bit_value >> 2] | 0) != 0 ^ 1;
    if (!$lnot) {
      __label__ = 3;
      break;
    }
    
    
    var $inc = HEAP32[$leadingZeros_addr >> 2] + 1;
    HEAP32[$leadingZeros_addr >> 2] = $inc;
    
    var $call1 = _BitstreamRead1Bit($bitstream_addr, $bit_value);
    __label__ = 1;
    continue;
  }
  
  
  
  if ((HEAP32[$leadingZeros_addr >> 2] | 0) > 0) {
    __label__ = 4;
  } else {
    __label__ = 5;
  }
  if (__label__ == 4) {
    
    
    var $10 = HEAP32[$leadingZeros_addr >> 2];
    var $call2 = _BitstreamReadBits($bitstream_addr, $10, $info_temp);
    var $11 = HEAP32[$info_temp >> 2];
    
    HEAP32[$infobits_addr >> 2] = $11;
  } else if (__label__ == 5) {
    
    HEAP32[$infobits_addr >> 2] = 0;
  }
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z4te_vP15tagDecBitstreamPjj($bitstream, $value, $range) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $bitstream_addr;
  var $value_addr;
  var $range_addr;
  $bitstream_addr = $bitstream;
  $value_addr = $value;
  $range_addr = $range;
  
  
  if ($range_addr >>> 0 > 1) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    var $call = __Z4ue_vP15tagDecBitstreamPj($bitstream_addr, $value_addr);
  } else if (__label__ == 2) {
    
    
    var $call1 = _BitstreamRead1Bit($bitstream_addr, $value_addr);
    
    
    var $sub = 1 - HEAP32[$value_addr >> 2];
    
    HEAP32[$value_addr >> 2] = $sub;
  }
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z9DecodeCBPP13tagMacroblockP15tagDecBitstream($currMB, $stream) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $retval;
  var $currMB_addr;
  var $stream_addr;
  var $codeNum = __stackBase__;
  var $coded_block_pattern;
  $currMB_addr = $currMB;
  $stream_addr = $stream;
  
  var $call = __Z4ue_vP15tagDecBitstreamPj($stream_addr, $codeNum);
  
  
  if (HEAPU32[$codeNum >> 2] >>> 0 > 47) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    $retval = 0;
  } else if (__label__ == 2) {
    
    
    
    
    if ((HEAP32[$currMB_addr + 164 >> 2] | 0) == 0) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    if (__label__ == 3) {
      
      
      
      
      
      $coded_block_pattern = HEAPU8[__ZL6MapCBP + HEAP32[$codeNum >> 2] * 2 >> 0] & 255;
    } else if (__label__ == 4) {
      
      
      
      
      
      $coded_block_pattern = HEAPU8[__ZL6MapCBP + HEAP32[$codeNum >> 2] * 2 + 1 >> 0] & 255;
    }
    
    
    
    HEAP32[$currMB_addr + 184 >> 2] = $coded_block_pattern;
    $retval = 1;
  }
  var $10 = $retval;
  STACKTOP = __stackBase__;
  return $10;
  return null;
}
function __Z25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_i($stream, $TrailingOnes, $TotalCoeff, $nC) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $stream_addr;
  var $TrailingOnes_addr;
  var $TotalCoeff_addr;
  var $nC_addr;
  var $code = __stackBase__;
  var $pcode;
  $stream_addr = $stream;
  $TrailingOnes_addr = $TrailingOnes;
  $TotalCoeff_addr = $TotalCoeff;
  $nC_addr = $nC;
  
  
  if (($nC_addr | 0) < 2) {
    __label__ = 1;
  } else {
    __label__ = 29;
  }
  if (__label__ == 1) {
    
    var $call = _BitstreamShowBits($stream_addr, 16, $code);
    
    
    if (HEAPU32[$code >> 2] >>> 0 >= 8192) {
      __label__ = 2;
    } else {
      __label__ = 3;
    }
    if (__label__ == 2) {
      
      
      
      
      
      
      $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail1 + ((HEAPU32[$code >> 2] >>> 13) + 65 + 2) * 3;
    } else if (__label__ == 3) {
      
      
      if (HEAPU32[$code >> 2] >>> 0 >= 2048) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      if (__label__ == 4) {
        
        
        
        
        
        
        $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail1 + ((HEAPU32[$code >> 2] >>> 9) + 50 + 2) * 3;
      } else if (__label__ == 5) {
        
        
        if (HEAPU32[$code >> 2] >>> 0 >= 1024) {
          __label__ = 6;
        } else {
          __label__ = 7;
        }
        if (__label__ == 6) {
          
          
          
          
          
          
          $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail1 + ((HEAPU32[$code >> 2] >>> 8) + 46 + 2) * 3;
        } else if (__label__ == 7) {
          
          
          if (HEAPU32[$code >> 2] >>> 0 >= 512) {
            __label__ = 8;
          } else {
            __label__ = 9;
          }
          if (__label__ == 8) {
            
            
            
            
            
            
            $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail1 + ((HEAPU32[$code >> 2] >>> 7) + 42 + 2) * 3;
          } else if (__label__ == 9) {
            
            
            if (HEAPU32[$code >> 2] >>> 0 >= 256) {
              __label__ = 10;
            } else {
              __label__ = 11;
            }
            if (__label__ == 10) {
              
              
              
              
              
              
              $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail1 + ((HEAPU32[$code >> 2] >>> 6) + 38 + 2) * 3;
            } else if (__label__ == 11) {
              
              
              if (HEAPU32[$code >> 2] >>> 0 >= 128) {
                __label__ = 12;
              } else {
                __label__ = 13;
              }
              if (__label__ == 12) {
                
                
                
                
                
                
                $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail1 + ((HEAPU32[$code >> 2] >>> 5) + 34 + 2) * 3;
              } else if (__label__ == 13) {
                
                
                if (HEAPU32[$code >> 2] >>> 0 >= 64) {
                  __label__ = 14;
                } else {
                  __label__ = 15;
                }
                if (__label__ == 14) {
                  
                  
                  
                  
                  
                  
                  $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail1 + ((HEAPU32[$code >> 2] >>> 3) + 22 + 2) * 3;
                } else if (__label__ == 15) {
                  
                  
                  if (HEAPU32[$code >> 2] >>> 0 >= 32) {
                    __label__ = 16;
                  } else {
                    __label__ = 17;
                  }
                  if (__label__ == 16) {
                    
                    
                    
                    
                    
                    
                    $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail1 + ((HEAPU32[$code >> 2] >>> 2) + 14 + 2) * 3;
                  } else if (__label__ == 17) {
                    
                    
                    if (HEAPU32[$code >> 2] >>> 0 >= 16) {
                      __label__ = 18;
                    } else {
                      __label__ = 19;
                    }
                    if (__label__ == 18) {
                      
                      
                      
                      
                      
                      
                      $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail1 + ((HEAPU32[$code >> 2] >>> 1) + 6 + 2) * 3;
                    } else if (__label__ == 19) {
                      
                      
                      
                      
                      
                      $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail1 + (HEAP32[$code >> 2] - 2 + 2) * 3;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    
    
    
    
    
    HEAP32[$TrailingOnes_addr >> 2] = HEAPU8[$pcode >> 0] & 255;
    
    
    
    
    
    HEAP32[$TotalCoeff_addr >> 2] = HEAPU8[$pcode + 1 >> 0] & 255;
    
    
    
    
    
    
    
    var $add85 = HEAP32[$stream_addr + 36 >> 2] + (HEAPU8[$pcode + 2 >> 0] & 255);
    HEAP32[$stream_addr + 36 >> 2] = $add85;
    
    
    
    
    
    
    
    var $sub88 = HEAP32[$stream_addr + 28 >> 2] - (HEAPU8[$pcode + 2 >> 0] & 255);
    HEAP32[$stream_addr + 28 >> 2] = $sub88;
    
    
    
    
    
    
    
    var $shl = HEAP32[$stream_addr + 16 >> 2] << (HEAPU8[$pcode + 2 >> 0] & 255);
    HEAP32[$stream_addr + 16 >> 2] = $shl;
  } else if (__label__ == 29) {
    
    
    if (($nC_addr | 0) < 4) {
      __label__ = 30;
    } else {
      __label__ = 52;
    }
    if (__label__ == 30) {
      
      var $call94 = _BitstreamShowBits($stream_addr, 14, $code);
      
      
      if (HEAPU32[$code >> 2] >>> 0 >= 4096) {
        __label__ = 31;
      } else {
        __label__ = 32;
      }
      if (__label__ == 31) {
        
        
        
        
        
        
        $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail2 + ((HEAPU32[$code >> 2] >>> 10) + 66 + 2) * 3;
      } else if (__label__ == 32) {
        
        
        if (HEAPU32[$code >> 2] >>> 0 >= 2048) {
          __label__ = 33;
        } else {
          __label__ = 34;
        }
        if (__label__ == 33) {
          
          
          
          
          
          
          $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail2 + ((HEAPU32[$code >> 2] >>> 8) + 54 + 2) * 3;
        } else if (__label__ == 34) {
          
          
          if (HEAPU32[$code >> 2] >>> 0 >= 512) {
            __label__ = 35;
          } else {
            __label__ = 36;
          }
          if (__label__ == 35) {
            
            
            
            
            
            
            $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail2 + ((HEAPU32[$code >> 2] >>> 7) + 46 + 2) * 3;
          } else if (__label__ == 36) {
            
            
            if (HEAPU32[$code >> 2] >>> 0 >= 128) {
              __label__ = 37;
            } else {
              __label__ = 38;
            }
            if (__label__ == 37) {
              
              
              
              
              
              
              $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail2 + ((HEAPU32[$code >> 2] >>> 5) + 34 + 2) * 3;
            } else if (__label__ == 38) {
              
              
              if (HEAPU32[$code >> 2] >>> 0 >= 64) {
                __label__ = 39;
              } else {
                __label__ = 40;
              }
              if (__label__ == 39) {
                
                
                
                
                
                
                $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail2 + ((HEAPU32[$code >> 2] >>> 3) + 22 + 2) * 3;
              } else if (__label__ == 40) {
                
                
                if (HEAPU32[$code >> 2] >>> 0 >= 32) {
                  __label__ = 41;
                } else {
                  __label__ = 42;
                }
                if (__label__ == 41) {
                  
                  
                  
                  
                  
                  
                  $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail2 + ((HEAPU32[$code >> 2] >>> 2) + 14 + 2) * 3;
                } else if (__label__ == 42) {
                  
                  
                  if (HEAPU32[$code >> 2] >>> 0 >= 16) {
                    __label__ = 43;
                  } else {
                    __label__ = 44;
                  }
                  if (__label__ == 43) {
                    
                    
                    
                    
                    
                    
                    $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail2 + ((HEAPU32[$code >> 2] >>> 1) + 6 + 2) * 3;
                  } else if (__label__ == 44) {
                    
                    
                    
                    
                    
                    $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail2 + (HEAP32[$code >> 2] - 2 + 2) * 3;
                  }
                }
              }
            }
          }
        }
      }
      
      
      
      
      
      HEAP32[$TrailingOnes_addr >> 2] = HEAPU8[$pcode >> 0] & 255;
      
      
      
      
      
      HEAP32[$TotalCoeff_addr >> 2] = HEAPU8[$pcode + 1 >> 0] & 255;
      
      
      
      
      
      
      
      var $add169 = HEAP32[$stream_addr + 36 >> 2] + (HEAPU8[$pcode + 2 >> 0] & 255);
      HEAP32[$stream_addr + 36 >> 2] = $add169;
      
      
      
      
      
      
      
      var $sub173 = HEAP32[$stream_addr + 28 >> 2] - (HEAPU8[$pcode + 2 >> 0] & 255);
      HEAP32[$stream_addr + 28 >> 2] = $sub173;
      
      
      
      
      
      
      
      var $shl177 = HEAP32[$stream_addr + 16 >> 2] << (HEAPU8[$pcode + 2 >> 0] & 255);
      HEAP32[$stream_addr + 16 >> 2] = $shl177;
    } else if (__label__ == 52) {
      
      
      if (($nC_addr | 0) < 8) {
        __label__ = 53;
      } else {
        __label__ = 72;
      }
      if (__label__ == 53) {
        
        var $call181 = _BitstreamShowBits($stream_addr, 10, $code);
        
        
        if (HEAPU32[$code >> 2] >>> 0 >= 512) {
          __label__ = 54;
        } else {
          __label__ = 55;
        }
        if (__label__ == 54) {
          
          
          
          
          
          
          $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail3 + ((HEAPU32[$code >> 2] >>> 6) + 47 + 1) * 3;
        } else if (__label__ == 55) {
          
          
          if (HEAPU32[$code >> 2] >>> 0 >= 256) {
            __label__ = 56;
          } else {
            __label__ = 57;
          }
          if (__label__ == 56) {
            
            
            
            
            
            
            $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail3 + ((HEAPU32[$code >> 2] >>> 5) + 39 + 1) * 3;
          } else if (__label__ == 57) {
            
            
            if (HEAPU32[$code >> 2] >>> 0 >= 128) {
              __label__ = 58;
            } else {
              __label__ = 59;
            }
            if (__label__ == 58) {
              
              
              
              
              
              
              $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail3 + ((HEAPU32[$code >> 2] >>> 4) + 31 + 1) * 3;
            } else if (__label__ == 59) {
              
              
              if (HEAPU32[$code >> 2] >>> 0 >= 64) {
                __label__ = 60;
              } else {
                __label__ = 61;
              }
              if (__label__ == 60) {
                
                
                
                
                
                
                $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail3 + ((HEAPU32[$code >> 2] >>> 3) + 23 + 1) * 3;
              } else if (__label__ == 61) {
                
                
                if (HEAPU32[$code >> 2] >>> 0 >= 32) {
                  __label__ = 62;
                } else {
                  __label__ = 63;
                }
                if (__label__ == 62) {
                  
                  
                  
                  
                  
                  
                  $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail3 + ((HEAPU32[$code >> 2] >>> 2) + 15 + 1) * 3;
                } else if (__label__ == 63) {
                  
                  
                  if (HEAPU32[$code >> 2] >>> 0 >= 16) {
                    __label__ = 64;
                  } else {
                    __label__ = 65;
                  }
                  if (__label__ == 64) {
                    
                    
                    
                    
                    
                    
                    $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail3 + ((HEAPU32[$code >> 2] >>> 1) + 7 + 1) * 3;
                  } else if (__label__ == 65) {
                    
                    
                    
                    
                    
                    $pcode = __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail3 + (HEAP32[$code >> 2] - 1 + 1) * 3;
                  }
                }
              }
            }
          }
        }
        
        
        
        
        
        HEAP32[$TrailingOnes_addr >> 2] = HEAPU8[$pcode >> 0] & 255;
        
        
        
        
        
        HEAP32[$TotalCoeff_addr >> 2] = HEAPU8[$pcode + 1 >> 0] & 255;
        
        
        
        
        
        
        
        var $add247 = HEAP32[$stream_addr + 36 >> 2] + (HEAPU8[$pcode + 2 >> 0] & 255);
        HEAP32[$stream_addr + 36 >> 2] = $add247;
        
        
        
        
        
        
        
        var $sub251 = HEAP32[$stream_addr + 28 >> 2] - (HEAPU8[$pcode + 2 >> 0] & 255);
        HEAP32[$stream_addr + 28 >> 2] = $sub251;
        
        
        
        
        
        
        
        var $shl255 = HEAP32[$stream_addr + 16 >> 2] << (HEAPU8[$pcode + 2 >> 0] & 255);
        HEAP32[$stream_addr + 16 >> 2] = $shl255;
      } else if (__label__ == 72) {
        
        var $call257 = _BitstreamReadBits($stream_addr, 6, $code);
        
        var $and = HEAP32[$code >> 2] & 3;
        
        HEAP32[$TrailingOnes_addr >> 2] = $and;
        
        
        
        
        HEAP32[$TotalCoeff_addr >> 2] = (HEAPU32[$code >> 2] >>> 2) + 1;
        
        
        
        if ((HEAP32[$TotalCoeff_addr >> 2] | 0) > 16) {
          __label__ = 73;
        } else {
          __label__ = 74;
        }
        if (__label__ == 73) {
          
          HEAP32[$TotalCoeff_addr >> 2] = 16;
        }
        
        
        if ((HEAP32[$code >> 2] | 0) == 3) {
          __label__ = 75;
        } else {
          __label__ = 76;
        }
        if (__label__ == 75) {
          
          HEAP32[$TrailingOnes_addr >> 2] = 0;
          
          
          var $dec = HEAP32[$TotalCoeff_addr >> 2] + -1;
          HEAP32[$TotalCoeff_addr >> 2] = $dec;
        }
      }
    }
  }
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z33ce_TotalCoeffTrailingOnesChromaDCP15tagDecBitstreamPiS1_($stream, $TrailingOnes, $TotalCoeff) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $stream_addr;
  var $TrailingOnes_addr;
  var $TotalCoeff_addr;
  var $status;
  var $code = __stackBase__;
  var $pcode;
  $stream_addr = $stream;
  $TrailingOnes_addr = $TrailingOnes;
  $TotalCoeff_addr = $TotalCoeff;
  
  var $call = _BitstreamShowBits($stream_addr, 8, $code);
  $status = $call;
  
  
  if (HEAPU32[$code >> 2] >>> 0 >= 32) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    
    
    
    $pcode = __ZZ33ce_TotalCoeffTrailingOnesChromaDCP15tagDecBitstreamPiS1_E13TotCofNTrail5 + ((HEAPU32[$code >> 2] >>> 5) + 13) * 3;
  } else if (__label__ == 2) {
    
    
    if (HEAPU32[$code >> 2] >>> 0 >= 8) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    if (__label__ == 3) {
      
      
      
      
      
      $pcode = __ZZ33ce_TotalCoeffTrailingOnesChromaDCP15tagDecBitstreamPiS1_E13TotCofNTrail5 + ((HEAPU32[$code >> 2] >>> 2) + 6) * 3;
    } else if (__label__ == 4) {
      
      
      
      $pcode = __ZZ33ce_TotalCoeffTrailingOnesChromaDCP15tagDecBitstreamPiS1_E13TotCofNTrail5 + HEAP32[$code >> 2] * 3;
    }
  }
  
  
  
  
  
  HEAP32[$TrailingOnes_addr >> 2] = HEAPU8[$pcode >> 0] & 255;
  
  
  
  
  
  HEAP32[$TotalCoeff_addr >> 2] = HEAPU8[$pcode + 1 >> 0] & 255;
  
  
  
  
  
  
  
  var $add17 = HEAP32[$stream_addr + 36 >> 2] + (HEAPU8[$pcode + 2 >> 0] & 255);
  HEAP32[$stream_addr + 36 >> 2] = $add17;
  
  
  
  
  
  
  
  var $sub = HEAP32[$stream_addr + 28 >> 2] - (HEAPU8[$pcode + 2 >> 0] & 255);
  HEAP32[$stream_addr + 28 >> 2] = $sub;
  
  
  
  
  
  
  
  var $shl = HEAP32[$stream_addr + 16 >> 2] << (HEAPU8[$pcode + 2 >> 0] & 255);
  HEAP32[$stream_addr + 16 >> 2] = $shl;
  var $24 = $status;
  STACKTOP = __stackBase__;
  return $24;
  return null;
}
function __Z14ce_LevelPrefixP15tagDecBitstreamPj($stream, $code) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $stream_addr;
  var $code_addr;
  var $temp = __stackBase__;
  var $leading_zeros;
  $stream_addr = $stream;
  $code_addr = $code;
  $leading_zeros = 0;
  
  var $call = _BitstreamShowBits($stream_addr, 16, $temp);
  
  var $or = HEAP32[$temp >> 2] | 1;
  HEAP32[$temp >> 2] = $or;
  while (1) {
    
    
    var $cmp = (HEAP32[$temp >> 2] & 32768 | 0) == 0;
    if (!$cmp) {
      __label__ = 3;
      break;
    }
    
    var $shl = HEAP32[$temp >> 2] << 1;
    HEAP32[$temp >> 2] = $shl;
    
    var $inc = $leading_zeros + 1;
    $leading_zeros = $inc;
    __label__ = 1;
    continue;
  }
  
  
  
  
  
  var $add1 = HEAP32[$stream_addr + 36 >> 2] + ($leading_zeros + 1);
  HEAP32[$stream_addr + 36 >> 2] = $add1;
  
  
  
  
  
  var $sub = HEAP32[$stream_addr + 28 >> 2] - ($leading_zeros + 1);
  HEAP32[$stream_addr + 28 >> 2] = $sub;
  
  
  
  
  
  var $shl4 = HEAP32[$stream_addr + 16 >> 2] << $leading_zeros + 1;
  HEAP32[$stream_addr + 16 >> 2] = $shl4;
  
  
  HEAP32[$code_addr >> 2] = $leading_zeros;
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z13ce_TotalZerosP15tagDecBitstreamPii($stream, $code, $TotalCoeff) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var __lastLabel__ = null;
  var $stream_addr;
  var $code_addr;
  var $TotalCoeff_addr;
  var $temp = __stackBase__;
  var $mask;
  var $indx;
  var $pcode;
  $stream_addr = $stream;
  $code_addr = $code;
  $TotalCoeff_addr = $TotalCoeff;
  
  
  if (($TotalCoeff_addr | 0) == 1) {
    __label__ = 1;
  } else {
    __label__ = 11;
  }
  if (__label__ == 1) {
    
    var $call = _BitstreamShowBits($stream_addr, 9, $temp);
    
    
    if (HEAPU32[$temp >> 2] >>> 0 >= 256) {
      __label__ = 2;
    } else {
      __label__ = 3;
    }
    if (__label__ == 2) {
      $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE8TotZero1 + 54;
    } else if (__label__ == 3) {
      
      
      if (HEAPU32[$temp >> 2] >>> 0 >= 64) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      if (__label__ == 4) {
        
        
        
        
        
        $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE8TotZero1 + ((HEAPU32[$temp >> 2] >>> 5) + 19) * 2;
      } else if (__label__ == 5) {
        
        
        if (HEAPU32[$temp >> 2] >>> 0 >= 8) {
          __label__ = 6;
        } else {
          __label__ = 7;
        }
        if (__label__ == 6) {
          
          
          
          
          
          $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE8TotZero1 + ((HEAPU32[$temp >> 2] >>> 2) + 5) * 2;
        } else if (__label__ == 7) {
          
          
          
          
          $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE8TotZero1 + (HEAP32[$temp >> 2] - 1) * 2;
        }
      }
    }
  } else if (__label__ == 11) {
    
    
    if (($TotalCoeff_addr | 0) == 2) {
      __label__ = 13;
    } else {
      __label__ = 12;
    }
    $if_then21$$lor_lhs_false$17 : do {
      if (__label__ == 12) {
        
        
        if (($TotalCoeff_addr | 0) == 3) {
          __label__ = 13;
          break $if_then21$$lor_lhs_false$17;
        }
        
        
        if (($TotalCoeff_addr | 0) == 4) {
          __label__ = 21;
        } else {
          __label__ = 25;
        }
        if (__label__ == 21) {
          
          var $call50 = _BitstreamShowBits($stream_addr, 5, $temp);
          
          
          if (HEAPU32[$temp >> 2] >>> 0 >= 12) {
            __label__ = 22;
          } else {
            __label__ = 23;
          }
          if (__label__ == 22) {
            
            
            
            
            
            $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE8TotZero4 + ((HEAPU32[$temp >> 2] >>> 2) + 9) * 2;
          } else if (__label__ == 23) {
            
            
            
            $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE8TotZero4 + HEAP32[$temp >> 2] * 2;
          }
        } else if (__label__ == 25) {
          
          
          if (($TotalCoeff_addr | 0) == 5) {
            __label__ = 26;
          } else {
            __label__ = 33;
          }
          if (__label__ == 26) {
            
            var $call64 = _BitstreamShowBits($stream_addr, 5, $temp);
            
            
            if (HEAPU32[$temp >> 2] >>> 0 >= 16) {
              __label__ = 27;
            } else {
              __label__ = 28;
            }
            if (__label__ == 27) {
              
              
              
              
              
              $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE8TotZero5 + ((HEAPU32[$temp >> 2] >>> 2) + 5) * 2;
            } else if (__label__ == 28) {
              
              
              if (HEAPU32[$temp >> 2] >>> 0 >= 2) {
                __label__ = 29;
              } else {
                __label__ = 30;
              }
              if (__label__ == 29) {
                
                
                
                
                
                $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE8TotZero5 + ((HEAPU32[$temp >> 2] >>> 1) + 1) * 2;
              } else if (__label__ == 30) {
                
                
                
                $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE8TotZero5 + HEAP32[$temp >> 2] * 2;
              }
            }
          } else if (__label__ == 33) {
            
            
            if (($TotalCoeff_addr | 0) >= 6) {
              __label__ = 34;
            } else {
              __label__ = 42;
            }
            $land_lhs_true$$if_else107$38 : do {
              if (__label__ == 34) {
                
                var $cmp85 = ($TotalCoeff_addr | 0) <= 10;
                if (!$cmp85) {
                  __label__ = 42;
                  break $land_lhs_true$$if_else107$38;
                }
                
                
                if (($TotalCoeff_addr | 0) == 10) {
                  __label__ = 36;
                } else {
                  __label__ = 37;
                }
                if (__label__ == 36) {
                  
                  var $call89 = _BitstreamShowBits($stream_addr, 5, $temp);
                } else if (__label__ == 37) {
                  
                  var $call91 = _BitstreamShowBits($stream_addr, 6, $temp);
                }
                
                
                if (HEAPU32[$temp >> 2] >>> 0 >= 8) {
                  __label__ = 39;
                } else {
                  __label__ = 40;
                }
                if (__label__ == 39) {
                  
                  
                  
                  
                  
                  
                  
                  
                  $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE12TotZero6to10 + ($TotalCoeff_addr - 6) * 30 + ((HEAPU32[$temp >> 2] >>> 3) + 7) * 2;
                } else if (__label__ == 40) {
                  
                  
                  
                  
                  
                  
                  $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE12TotZero6to10 + ($TotalCoeff_addr - 6) * 30 + HEAP32[$temp >> 2] * 2;
                }
                __label__ = 57;
                break $land_lhs_true$$if_else107$38;
              }
            } while (0);
            if (__label__ == 42) {
              
              
              if (($TotalCoeff_addr | 0) == 11) {
                __label__ = 43;
              } else {
                __label__ = 50;
              }
              if (__label__ == 43) {
                
                var $call110 = _BitstreamShowBits($stream_addr, 4, $temp);
                
                
                if (HEAPU32[$temp >> 2] >>> 0 >= 8) {
                  __label__ = 44;
                } else {
                  __label__ = 45;
                }
                if (__label__ == 44) {
                  $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE9TotZero11 + 12;
                } else if (__label__ == 45) {
                  
                  
                  if (HEAPU32[$temp >> 2] >>> 0 >= 4) {
                    __label__ = 46;
                  } else {
                    __label__ = 47;
                  }
                  if (__label__ == 46) {
                    
                    
                    
                    
                    
                    $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE9TotZero11 + ((HEAPU32[$temp >> 2] >>> 1) + 2) * 2;
                  } else if (__label__ == 47) {
                    
                    
                    
                    $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE9TotZero11 + HEAP32[$temp >> 2] * 2;
                  }
                }
              } else if (__label__ == 50) {
                
                
                
                var $call127 = _BitstreamShowBits($stream_addr, 16 - $TotalCoeff_addr, $temp);
                
                
                
                $mask = 1 << 15 - $TotalCoeff_addr;
                $indx = 0;
                while (1) {
                  
                  
                  
                  
                  if ((HEAP32[$temp >> 2] & $mask | 0) == 0) {
                    __lastLabel__ = 51;
                    __label__ = 52;
                  } else {
                    __lastLabel__ = 51;
                    __label__ = 53;
                  }
                  if (__label__ == 52) {
                    
                    
                    
                    var $cmp131 = ($indx | 0) < (16 - $TotalCoeff_addr | 0);
                    __lastLabel__ = 52;
                  }
                  var $54 = __lastLabel__ == 51 ? 0 : $cmp131;
                  if (!$54) {
                    __label__ = 55;
                    break;
                  }
                  
                  var $shr132 = $mask >>> 1;
                  $mask = $shr132;
                  
                  var $inc = $indx + 1;
                  $indx = $inc;
                  __label__ = 51;
                  continue;
                }
                
                
                
                
                
                
                $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE13TotZero12to15 + ($TotalCoeff_addr - 12) * 10 + $indx * 2;
              }
            }
          }
        }
        __label__ = 60;
        break $if_then21$$lor_lhs_false$17;
      }
    } while (0);
    if (__label__ == 13) {
      
      var $call22 = _BitstreamShowBits($stream_addr, 6, $temp);
      
      
      if (HEAPU32[$temp >> 2] >>> 0 >= 32) {
        __label__ = 14;
      } else {
        __label__ = 15;
      }
      if (__label__ == 14) {
        
        
        
        
        
        
        
        
        $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE10TotZero2n3 + ($TotalCoeff_addr - 2) * 36 + ((HEAPU32[$temp >> 2] >>> 3) + 10) * 2;
      } else if (__label__ == 15) {
        
        
        if (HEAPU32[$temp >> 2] >>> 0 >= 8) {
          __label__ = 16;
        } else {
          __label__ = 17;
        }
        if (__label__ == 16) {
          
          
          
          
          
          
          
          
          $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE10TotZero2n3 + ($TotalCoeff_addr - 2) * 36 + ((HEAPU32[$temp >> 2] >>> 2) + 6) * 2;
        } else if (__label__ == 17) {
          
          
          
          
          
          
          $pcode = __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE10TotZero2n3 + ($TotalCoeff_addr - 2) * 36 + HEAP32[$temp >> 2] * 2;
        }
      }
    }
  }
  
  
  
  
  
  HEAP32[$code_addr >> 2] = HEAPU8[$pcode >> 0] & 255;
  
  
  
  
  
  
  
  var $add145 = HEAP32[$stream_addr + 36 >> 2] + (HEAPU8[$pcode + 1 >> 0] & 255);
  HEAP32[$stream_addr + 36 >> 2] = $add145;
  
  
  
  
  
  
  
  var $sub148 = HEAP32[$stream_addr + 28 >> 2] - (HEAPU8[$pcode + 1 >> 0] & 255);
  HEAP32[$stream_addr + 28 >> 2] = $sub148;
  
  
  
  
  
  
  
  var $shl151 = HEAP32[$stream_addr + 16 >> 2] << (HEAPU8[$pcode + 1 >> 0] & 255);
  HEAP32[$stream_addr + 16 >> 2] = $shl151;
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z21ce_TotalZerosChromaDCP15tagDecBitstreamPii($stream, $code, $TotalCoeff) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  
  var $stream_addr;
  var $code_addr;
  var $TotalCoeff_addr;
  var $temp = __stackBase__;
  var $pcode;
  $stream_addr = $stream;
  $code_addr = $code;
  $TotalCoeff_addr = $TotalCoeff;
  
  var $call = _BitstreamShowBits($stream_addr, 3, $temp);
  
  
  
  
  
  
  $pcode = __ZZ21ce_TotalZerosChromaDCP15tagDecBitstreamPiiE16TotZeroChrom1to3 + ($TotalCoeff_addr - 1) * 16 + HEAP32[$temp >> 2] * 2;
  
  
  
  
  
  HEAP32[$code_addr >> 2] = HEAPU8[$pcode >> 0] & 255;
  
  
  
  
  
  
  
  var $add = HEAP32[$stream_addr + 36 >> 2] + (HEAPU8[$pcode + 1 >> 0] & 255);
  HEAP32[$stream_addr + 36 >> 2] = $add;
  
  
  
  
  
  
  
  var $sub7 = HEAP32[$stream_addr + 28 >> 2] - (HEAPU8[$pcode + 1 >> 0] & 255);
  HEAP32[$stream_addr + 28 >> 2] = $sub7;
  
  
  
  
  
  
  
  var $shl = HEAP32[$stream_addr + 16 >> 2] << (HEAPU8[$pcode + 1 >> 0] & 255);
  HEAP32[$stream_addr + 16 >> 2] = $shl;
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z12ce_RunBeforeP15tagDecBitstreamPii($stream, $code, $zerosLeft) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $stream_addr;
  var $code_addr;
  var $zerosLeft_addr;
  var $temp = __stackBase__;
  var $pcode;
  var $indx;
  $stream_addr = $stream;
  $code_addr = $code;
  $zerosLeft_addr = $zerosLeft;
  
  
  if (($zerosLeft_addr | 0) <= 6) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    
    
    
    
    var $3 = HEAP32[__ZZ12ce_RunBeforeP15tagDecBitstreamPiiE6codlen + ($zerosLeft_addr - 1) * 4 >> 2];
    var $call = _BitstreamShowBits($stream_addr, $3, $temp);
    
    
    
    
    
    
    $pcode = __ZZ12ce_RunBeforeP15tagDecBitstreamPiiE12RunBeforeTab + ($zerosLeft_addr - 1) * 16 + HEAP32[$temp >> 2] * 2;
    
    
    
    
    
    HEAP32[$code_addr >> 2] = HEAPU8[$pcode >> 0] & 255;
    
    
    
    
    
    
    
    var $add = HEAP32[$stream_addr + 36 >> 2] + (HEAPU8[$pcode + 1 >> 0] & 255);
    HEAP32[$stream_addr + 36 >> 2] = $add;
    
    
    
    
    
    
    
    var $sub10 = HEAP32[$stream_addr + 28 >> 2] - (HEAPU8[$pcode + 1 >> 0] & 255);
    HEAP32[$stream_addr + 28 >> 2] = $sub10;
    
    
    
    
    
    
    
    var $shl = HEAP32[$stream_addr + 16 >> 2] << (HEAPU8[$pcode + 1 >> 0] & 255);
    HEAP32[$stream_addr + 16 >> 2] = $shl;
  } else if (__label__ == 2) {
    
    var $call13 = _BitstreamReadBits($stream_addr, 3, $temp);
    
    
    if ((HEAP32[$temp >> 2] | 0) != 0) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    if (__label__ == 3) {
      
      var $sub15 = 7 - HEAP32[$temp >> 2];
      
      HEAP32[$code_addr >> 2] = $sub15;
    } else if (__label__ == 4) {
      
      var $call17 = _BitstreamShowBits($stream_addr, 9, $temp);
      
      var $shl18 = HEAP32[$temp >> 2] << 7;
      HEAP32[$temp >> 2] = $shl18;
      
      var $or = HEAP32[$temp >> 2] | 1;
      HEAP32[$temp >> 2] = $or;
      $indx = 0;
      while (1) {
        
        
        var $cmp19 = (HEAP32[$temp >> 2] & 32768 | 0) == 0;
        if (!$cmp19) {
          __label__ = 7;
          break;
        }
        
        var $shl20 = HEAP32[$temp >> 2] << 1;
        HEAP32[$temp >> 2] = $shl20;
        
        var $inc = $indx + 1;
        $indx = $inc;
        __label__ = 5;
        continue;
      }
      
      
      
      HEAP32[$code_addr >> 2] = 7 + $indx;
      
      
      
      
      
      var $add24 = HEAP32[$stream_addr + 36 >> 2] + ($indx + 1);
      HEAP32[$stream_addr + 36 >> 2] = $add24;
      
      
      
      
      
      var $sub27 = HEAP32[$stream_addr + 28 >> 2] - ($indx + 1);
      HEAP32[$stream_addr + 28 >> 2] = $sub27;
      
      
      
      
      
      var $shl30 = HEAP32[$stream_addr + 16 >> 2] << $indx + 1;
      HEAP32[$stream_addr + 16 >> 2] = $shl30;
    }
  }
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function __Z10EBSPtoRBSPPhPi($nal_unit, $size) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $nal_unit_addr;
  var $size_addr;
  var $i;
  var $j;
  var $count;
  $nal_unit_addr = $nal_unit;
  $size_addr = $size;
  $count = 0;
  $j = 0;
  $i = 0;
  $for_cond$2 : while (1) {
    
    
    
    var $cmp = ($i | 0) < (HEAP32[$size_addr >> 2] | 0);
    if (!$cmp) {
      __label__ = 10;
      break $for_cond$2;
    }
    
    
    if (($count | 0) == 2) {
      __label__ = 3;
    } else {
      __label__ = 5;
    }
    $land_lhs_true$$if_end$5 : do {
      if (__label__ == 3) {
        
        
        
        
        
        var $cmp2 = (HEAPU8[$nal_unit_addr + $i >> 0] & 255 | 0) == 3;
        if (!$cmp2) {
          __label__ = 5;
          break $land_lhs_true$$if_end$5;
        }
        
        var $inc = $i + 1;
        $i = $inc;
        $count = 0;
      }
    } while (0);
    
    
    
    var $10 = HEAP8[$nal_unit_addr + $i >> 0];
    
    
    
    HEAP8[$nal_unit_addr + $j >> 0] = $10;
    
    
    
    
    
    
    if ((HEAPU8[$nal_unit_addr + $i >> 0] & 255 | 0) == 0) {
      __label__ = 6;
    } else {
      __label__ = 7;
    }
    if (__label__ == 6) {
      
      var $inc9 = $count + 1;
      $count = $inc9;
    } else if (__label__ == 7) {
      $count = 0;
    }
    
    var $inc11 = $j + 1;
    $j = $inc11;
    
    var $inc12 = $i + 1;
    $i = $inc12;
    __label__ = 1;
    continue $for_cond$2;
  }
  
  
  HEAP32[$size_addr >> 2] = $j;
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function _PVAVCAnnexBGetNALUnit($bitstream, $nal_unit, $size) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var __lastLabel__ = null;
  var $retval;
  var $bitstream_addr;
  var $nal_unit_addr;
  var $size_addr;
  var $i;
  var $j;
  var $FoundStartCode;
  var $end;
  $bitstream_addr = $bitstream;
  $nal_unit_addr = $nal_unit;
  $size_addr = $size;
  $FoundStartCode = 0;
  $i = 0;
  $while_cond$2 : while (1) {
    
    
    
    
    
    
    if ((HEAPU8[$bitstream_addr + $i >> 0] & 255 | 0) == 0) {
      __lastLabel__ = 1;
      __label__ = 2;
    } else {
      __lastLabel__ = 1;
      __label__ = 3;
    }
    if (__label__ == 2) {
      
      
      
      var $cmp1 = ($i | 0) < (HEAP32[$size_addr >> 2] | 0);
      __lastLabel__ = 2;
    }
    var $6 = __lastLabel__ == 1 ? 0 : $cmp1;
    if (!$6) {
      __label__ = 5;
      break $while_cond$2;
    }
    
    var $inc = $i + 1;
    $i = $inc;
    __label__ = 1;
    continue $while_cond$2;
  }
  
  
  
  
  if (($i | 0) >= (HEAP32[$size_addr >> 2] | 0)) {
    __label__ = 6;
  } else {
    __label__ = 7;
  }
  if (__label__ == 6) {
    
    
    HEAP32[$nal_unit_addr >> 2] = $bitstream_addr;
    $retval = 0;
  } else if (__label__ == 7) {
    
    
    
    
    
    
    if ((HEAPU8[$bitstream_addr + $i >> 0] & 255 | 0) != 1) {
      __label__ = 8;
    } else {
      __label__ = 9;
    }
    if (__label__ == 8) {
      $i = -1;
    }
    
    var $inc8 = $i + 1;
    $i = $inc8;
    
    
    
    
    HEAP32[$nal_unit_addr >> 2] = $bitstream_addr + $i;
    
    $end = $i;
    $j = $i;
    $while_cond9$16 : while (1) {
      
      
      var $lnot = ($FoundStartCode | 0) != 0 ^ 1;
      if (!$lnot) {
        __label__ = 30;
        break $while_cond9$16;
      }
      $while_cond11$19 : while (1) {
        
        
        
        
        
        if (($j + 1 | 0) < (HEAP32[$size_addr >> 2] | 0)) {
          __lastLabel__ = 13;
          __label__ = 14;
        } else {
          __lastLabel__ = 13;
          __label__ = 17;
        }
        if (__label__ == 14) {
          
          
          
          
          
          
          if ((HEAPU8[$bitstream_addr + $j >> 0] & 255 | 0) != 0) {
            __lastLabel__ = 14;
            __label__ = 16;
          } else {
            __lastLabel__ = 14;
            __label__ = 15;
          }
          if (__label__ == 15) {
            
            
            
            
            
            
            var $cmp20 = (HEAPU8[$bitstream_addr + ($j + 1) >> 0] & 255 | 0) != 0;
            __lastLabel__ = 15;
          }
          var $31 = __lastLabel__ == 14 ? 1 : $cmp20;
          __lastLabel__ = 16;
        }
        var $32 = __lastLabel__ == 13 ? 0 : $31;
        if (!$32) {
          __label__ = 19;
          break $while_cond11$19;
        }
        
        var $inc23 = $j + 1;
        $j = $inc23;
        __label__ = 13;
        continue $while_cond11$19;
      }
      
      $end = $j;
      while (1) {
        
        
        
        
        
        if (($j + 2 | 0) < (HEAP32[$size_addr >> 2] | 0)) {
          __lastLabel__ = 20;
          __label__ = 21;
        } else {
          __lastLabel__ = 20;
          __label__ = 22;
        }
        if (__label__ == 21) {
          
          
          
          
          
          
          var $cmp32 = (HEAPU8[$bitstream_addr + ($j + 2) >> 0] & 255 | 0) == 0;
          __lastLabel__ = 21;
        }
        var $41 = __lastLabel__ == 20 ? 0 : $cmp32;
        if (!$41) {
          __label__ = 24;
          break;
        }
        
        var $inc35 = $j + 1;
        $j = $inc35;
        __label__ = 20;
        continue;
      }
      
      
      
      
      
      if (($j + 2 | 0) >= (HEAP32[$size_addr >> 2] | 0)) {
        __label__ = 25;
        break $while_cond9$16;
      }
      
      
      
      
      
      
      
      if ((HEAPU8[$bitstream_addr + ($j + 2) >> 0] & 255 | 0) == 1) {
        __label__ = 27;
      } else {
        __label__ = 28;
      }
      if (__label__ == 27) {
        $FoundStartCode = 1;
      } else if (__label__ == 28) {
        
        var $add47 = $j + 2;
        $j = $add47;
      }
      __label__ = 11;
      continue $while_cond9$16;
    }
    if (__label__ == 30) {
      
      
      
      
      HEAP32[$size_addr >> 2] = $end - $i;
      $retval = 1;
    } else if (__label__ == 25) {
      
      
      
      var $sub = HEAP32[$size_addr >> 2] - $i;
      HEAP32[$size_addr >> 2] = $sub;
      $retval = 4;
    }
  }
  var $56 = $retval;
  STACKTOP = __stackBase__;
  return $56;
  return null;
}
function _PVAVCDecGetNALType($bitstream, $size, $nal_type, $nal_ref_idc) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $bitstream_addr;
  var $size_addr;
  var $nal_type_addr;
  var $nal_ref_idc_addr;
  var $forbidden_zero_bit;
  $bitstream_addr = $bitstream;
  $size_addr = $size;
  $nal_type_addr = $nal_type;
  $nal_ref_idc_addr = $nal_ref_idc;
  
  
  if (($size_addr | 0) > 0) {
    __label__ = 1;
  } else {
    __label__ = 4;
  }
  if (__label__ == 1) {
    
    
    
    
    
    $forbidden_zero_bit = (HEAPU8[$bitstream_addr >> 0] & 255) >> 7;
    
    
    if (($forbidden_zero_bit | 0) != 0) {
      __label__ = 2;
    } else {
      __label__ = 3;
    }
    if (__label__ == 2) {
      $retval = 0;
    } else if (__label__ == 3) {
      
      
      
      
      
      
      
      HEAP32[$nal_ref_idc_addr >> 2] = (HEAPU8[$bitstream_addr >> 0] & 255 & 96) >> 5;
      
      
      
      
      
      
      HEAP32[$nal_type_addr >> 2] = HEAPU8[$bitstream_addr >> 0] & 255 & 31;
      $retval = 1;
    }
  } else if (__label__ == 4) {
    $retval = 0;
  }
  var $10 = $retval;
  STACKTOP = __stackBase__;
  return $10;
  return null;
}
function _PVAVCDecSeqParamSet($avcHandle, $nal_unit, $nal_size) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $avcHandle_addr;
  var $nal_unit_addr;
  var $nal_size_addr;
  var $status;
  var $decvid;
  var $video;
  var $bitstream;
  var $userData;
  var $first_seq;
  var $i;
  $avcHandle_addr = $avcHandle;
  $nal_unit_addr = $nal_unit;
  $nal_size_addr = $nal_size;
  
  
  
  $userData = HEAP32[$avcHandle_addr + 4 >> 2];
  $first_seq = 0;
  
  
  
  
  if ((HEAP32[$avcHandle_addr >> 2] | 0) == 0) {
    __label__ = 1;
  } else {
    __label__ = 8;
  }
  $if_then$$if_end26$2 : do {
    if (__label__ == 1) {
      $first_seq = 1;
      
      
      var $5 = HEAP32[$avcHandle_addr + 20 >> 2];
      
      var $call = FUNCTION_TABLE[$5]($userData, 1208, 0);
      var $7 = $call;
      
      
      HEAP32[$avcHandle_addr >> 2] = $7;
      
      
      
      
      if ((HEAP32[$avcHandle_addr >> 2] | 0) == 0) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      if (__label__ == 2) {
        $retval = -1;
        __label__ = 29;
        break $if_then$$if_end26$2;
      } else if (__label__ == 3) {
        
        
        
        
        $decvid = HEAP32[$avcHandle_addr >> 2];
        
        
        var $dest$, $stop$, $stop4$, $fast$, $value4$;
        $dest$ = $decvid;
        $stop$ = $dest$ + 1208;
        $value4$ = 0;
        if ($value4$ < 0) $value4$ += 256;
        $value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + $value4$ * 16777216;
        while ($dest$ % 4 !== 0 && $dest$ < $stop$) {
          HEAP8[$dest$++] = 0;
        }
        $dest$ >>= 2;
        $stop4$ = $stop$ >> 2;
        while ($dest$ < $stop4$) {
          HEAP32[$dest$++] = $value4$;
        }
        $dest$ <<= 2;
        while ($dest$ < $stop$) {
          HEAP8[$dest$++] = 0;
        }
        
        
        var $17 = HEAP32[$avcHandle_addr + 20 >> 2];
        
        var $call8 = FUNCTION_TABLE[$17]($userData, 2084, 0);
        var $19 = $call8;
        
        
        HEAP32[$decvid >> 2] = $19;
        
        
        
        
        if ((HEAP32[$decvid >> 2] | 0) == 0) {
          __label__ = 4;
        } else {
          __label__ = 5;
        }
        if (__label__ == 4) {
          $retval = -1;
          __label__ = 29;
          break $if_then$$if_end26$2;
        } else if (__label__ == 5) {
          
          
          
          $video = HEAP32[$decvid >> 2];
          
          
          var $dest$, $stop$, $stop4$, $fast$, $value4$;
          $dest$ = $video;
          $stop$ = $dest$ + 2084;
          $value4$ = 0;
          if ($value4$ < 0) $value4$ += 256;
          $value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + $value4$ * 16777216;
          while ($dest$ % 4 !== 0 && $dest$ < $stop$) {
            HEAP8[$dest$++] = 0;
          }
          $dest$ >>= 2;
          $stop4$ = $stop$ >> 2;
          while ($dest$ < $stop4$) {
            HEAP32[$dest$++] = $value4$;
          }
          $dest$ <<= 2;
          while ($dest$ < $stop$) {
            HEAP8[$dest$++] = 0;
          }
          
          
          HEAP32[$video + 876 >> 2] = 9999;
          
          
          var $29 = HEAP32[$avcHandle_addr + 20 >> 2];
          
          var $call15 = FUNCTION_TABLE[$29]($userData, 44, 1);
          var $31 = $call15;
          
          
          HEAP32[$decvid + 4 >> 2] = $31;
          
          
          
          
          if ((HEAP32[$decvid + 4 >> 2] | 0) == 0) {
            __label__ = 6;
          } else {
            __label__ = 7;
          }
          if (__label__ == 6) {
            $retval = -1;
            __label__ = 29;
            break $if_then$$if_end26$2;
          } else if (__label__ == 7) {
            
            
            var $36 = HEAP32[$avcHandle_addr + 4 >> 2];
            
            
            
            var $userData23 = HEAP32[$decvid + 4 >> 2] + 40;
            HEAP32[$userData23 >> 2] = $36;
            
            
            
            HEAP32[$decvid + 1196 >> 2] = $avcHandle_addr;
            
            
            var $42 = HEAP32[$avcHandle_addr + 32 >> 2];
            
            
            HEAP32[$decvid + 1204 >> 2] = $42;
            __label__ = 8;
            break $if_then$$if_end26$2;
          }
        }
      }
    }
  } while (0);
  $return$$if_end26$13 : do {
    if (__label__ == 8) {
      
      
      
      
      $decvid = HEAP32[$avcHandle_addr >> 2];
      
      
      
      $video = HEAP32[$decvid >> 2];
      
      
      
      $bitstream = HEAP32[$decvid + 4 >> 2];
      
      
      
      
      
      
      
      HEAP32[$video + 840 >> 2] = (HEAPU8[$nal_unit_addr >> 0] & 255) >> 7;
      
      
      
      
      if ((HEAP32[$video + 840 >> 2] | 0) != 0) {
        __label__ = 9;
      } else {
        __label__ = 10;
      }
      if (__label__ == 9) {
        $retval = 0;
      } else if (__label__ == 10) {
        
        
        
        
        
        
        
        
        HEAP32[$video + 844 >> 2] = (HEAPU8[$nal_unit_addr >> 0] & 255 & 96) >> 5;
        
        
        
        
        
        
        
        HEAP32[$video + 848 >> 2] = HEAPU8[$nal_unit_addr >> 0] & 255 & 31;
        
        
        
        
        if ((HEAP32[$video + 848 >> 2] | 0) != 7) {
          __label__ = 11;
        } else {
          __label__ = 12;
        }
        if (__label__ == 11) {
          $retval = 0;
        } else if (__label__ == 12) {
          
          
          
          
          
          var $call43 = _BitstreamInit($bitstream, $nal_unit_addr + 1, $nal_size_addr - 1);
          
          
          
          
          if (($first_seq & 1 & 1 | 0) == 1) {
            __label__ = 13;
          } else {
            __label__ = 26;
          }
          if (__label__ == 13) {
            
            
            HEAP32[$video + 868 >> 2] = 0;
            
            
            HEAP32[$video + 872 >> 2] = 0;
            $i = 0;
            $for_cond$23 : while (1) {
              
              var $cmp48 = ($i | 0) < 32;
              if (!$cmp48) {
                __label__ = 17;
                break $for_cond$23;
              }
              
              
              
              
              HEAP32[$decvid + 8 + $i * 4 >> 2] = 0;
              
              var $inc = $i + 1;
              $i = $inc;
              __label__ = 14;
              continue $for_cond$23;
            }
            $i = 0;
            while (1) {
              
              var $cmp51 = ($i | 0) < 256;
              if (!$cmp51) {
                __label__ = 21;
                break;
              }
              
              
              
              
              HEAP32[$decvid + 136 + $i * 4 >> 2] = 0;
              
              var $inc55 = $i + 1;
              $i = $inc55;
              __label__ = 18;
              continue;
            }
            
            
            HEAP32[$video + 1412 >> 2] = 0;
            
            
            HEAP32[$video + 1352 >> 2] = 0;
            
            
            HEAP32[$video + 896 >> 2] = 1;
            
            
            HEAP32[$video + 900 >> 2] = 1;
            
            
            HEAP32[$video + 884 >> 2] = 0;
            
            
            HEAP32[$video + 888 >> 2] = 0;
            
            
            HEAP32[$video + 904 >> 2] = 0;
            
            
            HEAP32[$video + 916 >> 2] = 0;
            
            
            var $87 = HEAP32[$avcHandle_addr + 20 >> 2];
            
            var $call58 = FUNCTION_TABLE[$87]($userData, 2164, 5);
            var $89 = $call58;
            
            
            HEAP32[$video + 880 >> 2] = $89;
            
            
            
            
            if ((HEAP32[$video + 880 >> 2] | 0) == 0) {
              __label__ = 22;
            } else {
              __label__ = 23;
            }
            if (__label__ == 22) {
              $retval = -1;
              __label__ = 29;
              break $return$$if_end26$13;
            } else if (__label__ == 23) {
              
              
              var $94 = HEAP32[$avcHandle_addr + 20 >> 2];
              
              var $call64 = FUNCTION_TABLE[$94]($userData, 84, 3);
              var $96 = $call64;
              
              
              HEAP32[$video + 864 >> 2] = $96;
              
              
              
              
              if ((HEAP32[$video + 864 >> 2] | 0) == 0) {
                __label__ = 24;
              } else {
                __label__ = 25;
              }
              if (__label__ == 24) {
                $retval = -1;
                __label__ = 29;
                break $return$$if_end26$13;
              } else if (__label__ == 25) {
                
                
                
                
                var $dest$, $stop$, $stop4$, $fast$, $value4$;
                $dest$ = HEAP32[$video + 864 >> 2];
                $stop$ = $dest$ + 84;
                $value4$ = 0;
                if ($value4$ < 0) $value4$ += 256;
                $value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + $value4$ * 16777216;
                while ($dest$ % 4 !== 0 && $dest$ < $stop$) {
                  HEAP8[$dest$++] = 0;
                }
                $dest$ >>= 2;
                $stop4$ = $stop$ >> 2;
                while ($dest$ < $stop4$) {
                  HEAP32[$dest$++] = $value4$;
                }
                $dest$ <<= 2;
                while ($dest$ < $stop$) {
                  HEAP8[$dest$++] = 0;
                }
              }
            }
          }
          
          
          var $call71 = __Z9DecodeSPSP12tagDecObjectP15tagDecBitstream($decvid, $bitstream);
          $status = $call71;
          
          
          if (($status | 0) != 1) {
            __label__ = 27;
          } else {
            __label__ = 28;
          }
          if (__label__ == 27) {
            
            $retval = $status;
          } else if (__label__ == 28) {
            $retval = 1;
          }
        }
      }
    }
  } while (0);
  var $107 = $retval;
  STACKTOP = __stackBase__;
  return $107;
  return null;
}
function _PVAVCDecGetSeqInfo($avcHandle, $seqInfo) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $avcHandle_addr;
  var $seqInfo_addr;
  var $decvid;
  var $video;
  var $PicWidthInMbs;
  var $PicHeightInMapUnits;
  var $FrameHeightInMbs;
  $avcHandle_addr = $avcHandle;
  $seqInfo_addr = $seqInfo;
  
  
  
  
  $decvid = HEAP32[$avcHandle_addr >> 2];
  
  
  if (($decvid | 0) == 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $if_then$$lor_lhs_false$2 : do {
    if (__label__ == 1) {
      
      
      
      
      
      if ((HEAP32[$decvid + 8 >> 2] | 0) == 0) {
        __label__ = 2;
        break $if_then$$lor_lhs_false$2;
      }
      
      
      
      $video = HEAP32[$decvid >> 2];
      
      
      
      
      
      
      
      $PicWidthInMbs = HEAP32[HEAP32[$decvid + 8 >> 2] + 1088 >> 2] + 1;
      
      
      
      
      
      
      
      $PicHeightInMapUnits = HEAP32[HEAP32[$decvid + 8 >> 2] + 1092 >> 2] + 1;
      
      
      
      
      
      
      
      
      
      $FrameHeightInMbs = (2 - HEAP32[HEAP32[$decvid + 8 >> 2] + 1096 >> 2]) * $PicHeightInMapUnits;
      
      
      
      
      HEAP32[$seqInfo_addr >> 2] = $PicWidthInMbs << 4;
      
      
      
      
      HEAP32[$seqInfo_addr + 4 >> 2] = $FrameHeightInMbs << 4;
      
      
      
      
      
      var $24 = HEAP32[HEAP32[$decvid + 8 >> 2] + 1096 >> 2];
      
      
      HEAP32[$seqInfo_addr + 8 >> 2] = $24;
      
      
      
      
      
      
      
      if ((HEAP32[HEAP32[$decvid + 8 >> 2] + 1108 >> 2] | 0) != 0) {
        __label__ = 4;
      } else {
        __label__ = 8;
      }
      if (__label__ == 4) {
        
        
        
        
        
        
        var $mul18 = 2 * HEAP32[HEAP32[$decvid + 8 >> 2] + 1112 >> 2];
        
        
        HEAP32[$seqInfo_addr + 12 >> 2] = $mul18;
        
        
        
        
        
        
        
        
        
        
        
        var $sub24 = HEAP32[$seqInfo_addr >> 2] - (2 * HEAP32[HEAP32[$decvid + 8 >> 2] + 1116 >> 2] + 1);
        
        
        HEAP32[$seqInfo_addr + 16 >> 2] = $sub24;
        
        
        
        
        if ((HEAP32[$seqInfo_addr + 8 >> 2] | 0) != 0) {
          __label__ = 5;
        } else {
          __label__ = 6;
        }
        if (__label__ == 5) {
          
          
          
          
          
          
          var $mul30 = 2 * HEAP32[HEAP32[$decvid + 8 >> 2] + 1120 >> 2];
          
          
          HEAP32[$seqInfo_addr + 20 >> 2] = $mul30;
          
          
          
          
          
          
          
          
          
          
          
          var $sub36 = HEAP32[$seqInfo_addr + 4 >> 2] - (2 * HEAP32[HEAP32[$decvid + 8 >> 2] + 1124 >> 2] + 1);
          
          
          HEAP32[$seqInfo_addr + 24 >> 2] = $sub36;
        } else if (__label__ == 6) {
          
          
          
          
          
          
          var $mul40 = 4 * HEAP32[HEAP32[$decvid + 8 >> 2] + 1120 >> 2];
          
          
          HEAP32[$seqInfo_addr + 20 >> 2] = $mul40;
          
          
          
          
          
          
          
          
          
          
          
          var $sub48 = HEAP32[$seqInfo_addr + 4 >> 2] - (4 * HEAP32[HEAP32[$decvid + 8 >> 2] + 1124 >> 2] + 1);
          
          
          HEAP32[$seqInfo_addr + 24 >> 2] = $sub48;
        }
      } else if (__label__ == 8) {
        
        
        
        var $sub53 = HEAP32[$seqInfo_addr + 4 >> 2] - 1;
        
        
        HEAP32[$seqInfo_addr + 24 >> 2] = $sub53;
        
        
        
        var $sub56 = HEAP32[$seqInfo_addr >> 2] - 1;
        
        
        HEAP32[$seqInfo_addr + 16 >> 2] = $sub56;
        
        
        HEAP32[$seqInfo_addr + 12 >> 2] = 0;
        
        
        HEAP32[$seqInfo_addr + 20 >> 2] = 0;
      }
      $retval = 1;
      __label__ = 10;
      break $if_then$$lor_lhs_false$2;
    }
  } while (0);
  if (__label__ == 2) {
    $retval = 0;
  }
  var $69 = $retval;
  STACKTOP = __stackBase__;
  return $69;
  return null;
}
function _PVAVCDecPicParamSet($avcHandle, $nal_unit, $nal_size) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $avcHandle_addr;
  var $nal_unit_addr;
  var $nal_size_addr;
  var $status;
  var $decvid;
  var $video;
  var $bitstream;
  $avcHandle_addr = $avcHandle;
  $nal_unit_addr = $nal_unit;
  $nal_size_addr = $nal_size;
  
  
  
  
  $decvid = HEAP32[$avcHandle_addr >> 2];
  
  
  if (($decvid | 0) == 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    $retval = 0;
  } else if (__label__ == 2) {
    
    
    
    $video = HEAP32[$decvid >> 2];
    
    
    
    $bitstream = HEAP32[$decvid + 4 >> 2];
    
    
    
    
    
    
    
    HEAP32[$video + 840 >> 2] = (HEAPU8[$nal_unit_addr >> 0] & 255) >> 7;
    
    
    
    
    
    
    
    
    HEAP32[$video + 844 >> 2] = (HEAPU8[$nal_unit_addr >> 0] & 255 & 96) >> 5;
    
    
    
    
    
    
    
    HEAP32[$video + 848 >> 2] = HEAPU8[$nal_unit_addr >> 0] & 255 & 31;
    
    
    
    
    if ((HEAP32[$video + 848 >> 2] | 0) != 8) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    if (__label__ == 3) {
      $retval = 0;
    } else if (__label__ == 4) {
      
      
      
      
      
      var $call = _BitstreamInit($bitstream, $nal_unit_addr + 1, $nal_size_addr - 1);
      
      
      
      var $call12 = __Z9DecodePPSP12tagDecObjectP12tagCommonObjP15tagDecBitstream($decvid, $video, $bitstream);
      $status = $call12;
      
      
      if (($status | 0) != 1) {
        __label__ = 5;
      } else {
        __label__ = 6;
      }
      if (__label__ == 5) {
        
        $retval = $status;
      } else if (__label__ == 6) {
        
        
        
        
        
        var $add = HEAP32[HEAP32[$video + 872 >> 2] + 116 >> 2] + 1;
        
        
        HEAP32[$video + 1272 >> 2] = $add;
        $retval = 1;
      }
    }
  }
  var $31 = $retval;
  STACKTOP = __stackBase__;
  return $31;
  return null;
}
function _PVAVCDecSEI($avcHandle, $nal_unit, $nal_size) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  
  var $avcHandle_addr;
  var $nal_unit_addr;
  var $nal_size_addr;
  $avcHandle_addr = $avcHandle;
  $nal_unit_addr = $nal_unit;
  $nal_size_addr = $nal_size;
  STACKTOP = __stackBase__;
  return 1;
  return null;
}
function _PVAVCDecodeSlice($avcHandle, $buffer, $buf_size) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $avcHandle_addr;
  var $buffer_addr;
  var $buf_size_addr;
  var $decvid;
  var $video;
  var $bitstream;
  var $status;
  var $temp;
  var $temp83;
  $avcHandle_addr = $avcHandle;
  $buffer_addr = $buffer;
  $buf_size_addr = $buf_size;
  
  
  
  
  $decvid = HEAP32[$avcHandle_addr >> 2];
  
  
  if (($decvid | 0) == 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $if_then$$if_end$2 : do {
    if (__label__ == 1) {
      $retval = 0;
    } else if (__label__ == 2) {
      
      
      
      $video = HEAP32[$decvid >> 2];
      
      
      
      $bitstream = HEAP32[$decvid + 4 >> 2];
      
      
      
      
      if ((HEAP32[$video + 1352 >> 2] | 0) != 0) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      if (__label__ == 3) {
        $retval = 2;
      } else if (__label__ == 4) {
        
        
        
        
        if ((HEAP32[$video + 900 >> 2] | 0) != 0) {
          __label__ = 5;
        } else {
          __label__ = 34;
        }
        if (__label__ == 5) {
          
          
          if (($buffer_addr | 0) == 0) {
            __label__ = 6;
          } else {
            __label__ = 7;
          }
          if (__label__ == 6) {
            $retval = 0;
            __label__ = 66;
            break $if_then$$if_end$2;
          } else if (__label__ == 7) {
            
            
            var $14 = HEAP32[$video + 848 >> 2];
            
            
            HEAP32[$video + 852 >> 2] = $14;
            
            
            
            
            
            
            
            HEAP32[$video + 840 >> 2] = (HEAPU8[$buffer_addr >> 0] & 255) >> 7;
            
            
            
            
            
            
            
            
            HEAP32[$video + 844 >> 2] = (HEAPU8[$buffer_addr >> 0] & 255 & 96) >> 5;
            
            
            
            
            
            
            
            HEAP32[$video + 848 >> 2] = HEAPU8[$buffer_addr >> 0] & 255 & 31;
            
            
            
            
            if ((HEAP32[$video + 848 >> 2] | 0) == 9) {
              __label__ = 8;
            } else {
              __label__ = 9;
            }
            if (__label__ == 8) {
              $retval = 1;
              __label__ = 66;
              break $if_then$$if_end$2;
            } else if (__label__ == 9) {
              
              
              
              
              if ((HEAP32[$video + 848 >> 2] | 0) != 1) {
                __label__ = 10;
              } else {
                __label__ = 12;
              }
              $land_lhs_true$$if_end25$16 : do {
                if (__label__ == 10) {
                  
                  
                  
                  var $cmp23 = (HEAP32[$video + 848 >> 2] | 0) != 5;
                  if (!$cmp23) {
                    __label__ = 12;
                    break $land_lhs_true$$if_end25$16;
                  }
                  $retval = 0;
                  __label__ = 66;
                  break $if_then$$if_end$2;
                }
              } while (0);
              
              
              
              
              if ((HEAP32[$video + 848 >> 2] | 0) >= 2) {
                __label__ = 13;
              } else {
                __label__ = 15;
              }
              $land_lhs_true28$$if_else$20 : do {
                if (__label__ == 13) {
                  
                  
                  
                  var $cmp30 = (HEAP32[$video + 848 >> 2] | 0) <= 4;
                  if (!$cmp30) {
                    __label__ = 15;
                    break $land_lhs_true28$$if_else$20;
                  }
                  $retval = 0;
                  __label__ = 66;
                  break $if_then$$if_end$2;
                }
              } while (0);
              
              
              HEAP32[$video + 856 >> 2] = 0;
              
              
              HEAP32[$video + 900 >> 2] = 0;
              
              
              
              
              
              var $call = _BitstreamInit($bitstream, $buffer_addr + 1, $buf_size_addr - 1);
              
              
              
              var $call34 = __Z17DecodeSliceHeaderP12tagDecObjectP12tagCommonObjP15tagDecBitstream($decvid, $video, $bitstream);
              $status = $call34;
              
              
              if (($status | 0) != 1) {
                __label__ = 17;
              } else {
                __label__ = 18;
              }
              if (__label__ == 17) {
                
                
                HEAP32[$video + 900 >> 2] = 1;
                
                $retval = $status;
                __label__ = 66;
                break $if_then$$if_end$2;
              } else if (__label__ == 18) {
                
                
                
                
                
                
                
                
                
                if ((HEAP32[HEAP32[$video + 880 >> 2] + 12 >> 2] | 0) != (HEAP32[$video + 1388 >> 2] | 0)) {
                  __label__ = 21;
                } else {
                  __label__ = 19;
                }
                $if_then44$$lor_lhs_false$28 : do {
                  if (__label__ == 19) {
                    
                    
                    
                    
                    
                    
                    
                    
                    var $cmp41 = HEAPU32[HEAP32[$video + 880 >> 2] >> 2] >>> 0 < HEAPU32[$video + 916 >> 2] >>> 0;
                    if (!$cmp41) {
                      __label__ = 24;
                      break $if_then44$$lor_lhs_false$28;
                    }
                    
                    
                    
                    
                    
                    
                    if ((HEAP32[HEAP32[$video + 868 >> 2] + 12 >> 2] | 0) == 1) {
                      __label__ = 21;
                      break $if_then44$$lor_lhs_false$28;
                    } else {
                      __label__ = 24;
                      break $if_then44$$lor_lhs_false$28;
                    }
                  }
                } while (0);
                if (__label__ == 21) {
                  
                  
                  HEAP32[$video + 896 >> 2] = 1;
                  
                  
                  
                  
                  if ((HEAP32[$video + 1316 >> 2] | 0) > 0) {
                    __label__ = 22;
                  } else {
                    __label__ = 23;
                  }
                  if (__label__ == 22) {
                    
                    
                    
                    
                    
                    
                    
                    var $sub48 = HEAP32[$video + 1308 >> 2] - HEAP32[$video + 1316 >> 2];
                    
                    
                    var $68 = HEAP32[$video + 1308 >> 2];
                    var $call50 = __Z12ConcealSliceP12tagDecObjectii($decvid, $sub48, $68);
                    
                    
                    HEAP32[$video + 1316 >> 2] = 0;
                    
                    
                    
                    $temp = HEAP32[$video + 848 >> 2];
                    
                    
                    var $73 = HEAP32[$video + 852 >> 2];
                    
                    
                    HEAP32[$video + 848 >> 2] = $73;
                    
                    
                    var $call55 = __Z17StorePictureInDPBP12tagAVCHandleP12tagCommonObj($avcHandle_addr, $video);
                    
                    
                    
                    HEAP32[$video + 848 >> 2] = $temp;
                    
                    
                    HEAP32[$video + 916 >> 2] = 0;
                    $retval = 2;
                    __label__ = 66;
                    break $if_then$$if_end$2;
                  } else if (__label__ == 23) {

                  }
                }
                
                
                
                
                if ((HEAP32[$video + 848 >> 2] | 0) == 5) {
                  __label__ = 25;
                } else {
                  __label__ = 26;
                }
                if (__label__ == 25) {
                  
                  
                  HEAP32[$video + 1388 >> 2] = 0;
                  
                  
                  HEAP32[$video + 1288 >> 2] = 0;
                }
                
                
                
                
                
                
                if ((HEAP32[HEAP32[$video + 868 >> 2] + 1084 >> 2] | 0) != 0) {
                  __label__ = 33;
                } else {
                  __label__ = 27;
                }
                if (__label__ == 27) {
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  if ((HEAP32[HEAP32[$video + 880 >> 2] + 12 >> 2] | 0) != (HEAP32[$video + 1288 >> 2] | 0)) {
                    __label__ = 28;
                  } else {
                    __label__ = 32;
                  }
                  $land_lhs_true72$$if_end103$42 : do {
                    if (__label__ == 28) {
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      var $cmp76 = (HEAP32[HEAP32[$video + 880 >> 2] + 12 >> 2] | 0) != ((HEAP32[$video + 1288 >> 2] + 1 >>> 0) % (HEAPU32[$video + 1240 >> 2] >>> 0) | 0);
                      if (!$cmp76) {
                        __label__ = 32;
                        break $land_lhs_true72$$if_end103$42;
                      }
                      
                      
                      HEAP32[$video + 1316 >> 2] = 0;
                      
                      
                      HEAP32[$video + 896 >> 2] = 1;
                      
                      
                      
                      var $inc = HEAP32[$video + 1388 >> 2] + 1;
                      HEAP32[$video + 1388 >> 2] = $inc;
                      
                      
                      
                      var $inc82 = HEAP32[$video + 1288 >> 2] + 1;
                      HEAP32[$video + 1288 >> 2] = $inc82;
                      
                      
                      
                      $temp83 = HEAP32[$video + 848 >> 2];
                      
                      
                      HEAP32[$video + 848 >> 2] = 1;
                      
                      
                      var $call86 = __Z13DPBInitBufferP12tagAVCHandleP12tagCommonObj($avcHandle_addr, $video);
                      $status = $call86;
                      
                      
                      if (($status | 0) != 1) {
                        __label__ = 30;
                      } else {
                        __label__ = 31;
                      }
                      if (__label__ == 30) {
                        
                        $retval = $status;
                        __label__ = 66;
                        break $if_then$$if_end$2;
                      } else if (__label__ == 31) {
                        
                        
                        
                        var $IsOutputted = HEAP32[$video + 888 >> 2] + 12;
                        HEAP32[$IsOutputted >> 2] = 1;
                        
                        
                        
                        var $IsReference = HEAP32[$video + 888 >> 2] + 4;
                        HEAP32[$IsReference >> 2] = 3;
                        
                        
                        
                        var $IsLongTerm = HEAP32[$video + 888 >> 2] + 8;
                        HEAP32[$IsLongTerm >> 2] = 0;
                        
                        var $call92 = __Z9DecodePOCP12tagCommonObj($video);
                        
                        
                        
                        
                        
                        
                        
                        var $rem95 = (HEAPU32[$video + 1288 >> 2] >>> 0) % (HEAPU32[$video + 1240 >> 2] >>> 0);
                        __Z10DPBInitPicP12tagCommonObji($video, $rem95);
                        
                        __Z11RefListInitP12tagCommonObj($video);
                        
                        
                        
                        var $127 = HEAP32[$video + 1308 >> 2];
                        var $call97 = __Z12ConcealSliceP12tagDecObjectii($decvid, 0, $127);
                        
                        
                        
                        var $IsOutputted99 = HEAP32[$video + 888 >> 2] + 12;
                        
                        var $or = HEAP32[$IsOutputted99 >> 2] | 2;
                        HEAP32[$IsOutputted99 >> 2] = $or;
                        
                        
                        HEAP32[$video + 916 >> 2] = 0;
                        
                        
                        var $call101 = __Z17StorePictureInDPBP12tagAVCHandleP12tagCommonObj($avcHandle_addr, $video);
                        
                        
                        
                        HEAP32[$video + 848 >> 2] = $temp83;
                        $retval = 2;
                        __label__ = 66;
                        break $if_then$$if_end$2;
                      }
                    }
                  } while (0);
                }
              }
            }
          }
        }
        
        
        
        
        if ((HEAP32[$video + 896 >> 2] | 0) == 1) {
          __label__ = 35;
        } else {
          __label__ = 38;
        }
        if (__label__ == 35) {
          
          
          var $call109 = __Z13DPBInitBufferP12tagAVCHandleP12tagCommonObj($avcHandle_addr, $video);
          $status = $call109;
          
          
          if (($status | 0) != 1) {
            __label__ = 36;
          } else {
            __label__ = 37;
          }
          if (__label__ == 36) {
            
            $retval = $status;
            __label__ = 66;
            break $if_then$$if_end$2;
          } else if (__label__ == 37) {

          }
        }
        
        
        HEAP32[$video + 900 >> 2] = 1;
        
        
        HEAP32[$decvid + 1192 >> 2] = 6;
        
        
        
        
        if ((HEAP32[$video + 896 >> 2] | 0) == 1) {
          __label__ = 39;
        } else {
          __label__ = 53;
        }
        if (__label__ == 39) {
          
          
          var $147 = HEAP32[$video + 1308 >> 2];
          
          
          HEAP32[$video + 1316 >> 2] = $147;
          
          
          
          
          if ((HEAP32[$video + 848 >> 2] | 0) != 5) {
            __label__ = 40;
          } else {
            __label__ = 48;
          }
          $land_lhs_true122$$if_end146$59 : do {
            if (__label__ == 40) {
              
              
              
              
              
              var $tobool125 = (HEAP32[HEAP32[$video + 868 >> 2] + 1084 >> 2] | 0) != 0;
              if (!$tobool125) {
                __label__ = 48;
                break $land_lhs_true122$$if_end146$59;
              }
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              if ((HEAP32[HEAP32[$video + 880 >> 2] + 12 >> 2] | 0) != ((HEAP32[$video + 1288 >> 2] + 1 >>> 0) % (HEAPU32[$video + 1240 >> 2] >>> 0) | 0)) {
                __label__ = 42;
              } else {
                __label__ = 47;
              }
              if (__label__ == 42) {
                
                
                var $call135 = __Z18fill_frame_num_gapP12tagAVCHandleP12tagCommonObj($avcHandle_addr, $video);
                $status = $call135;
                
                
                if (($status | 0) != 1) {
                  __label__ = 43;
                } else {
                  __label__ = 44;
                }
                if (__label__ == 43) {
                  
                  
                  HEAP32[$video + 1316 >> 2] = 0;
                  
                  $retval = $status;
                  __label__ = 66;
                  break $if_then$$if_end$2;
                } else if (__label__ == 44) {
                  
                  
                  var $call140 = __Z13DPBInitBufferP12tagAVCHandleP12tagCommonObj($avcHandle_addr, $video);
                  $status = $call140;
                  
                  
                  if (($status | 0) != 1) {
                    __label__ = 45;
                  } else {
                    __label__ = 46;
                  }
                  if (__label__ == 45) {
                    
                    
                    HEAP32[$video + 1316 >> 2] = 0;
                    
                    $retval = $status;
                    __label__ = 66;
                    break $if_then$$if_end$2;
                  } else if (__label__ == 46) {

                  }
                }
              }
            }
          } while (0);
          
          var $call147 = __Z9DecodePOCP12tagCommonObj($video);
          
          
          
          var $174 = HEAP32[$video + 1324 >> 2];
          __Z10DPBInitPicP12tagCommonObji($video, $174);
          
          
          
          var $isReference = HEAP32[$video + 884 >> 2] + 20;
          HEAP32[$isReference >> 2] = 1;
          
          
          
          
          if ((HEAP32[$video + 844 >> 2] | 0) == 0) {
            __label__ = 49;
          } else {
            __label__ = 50;
          }
          if (__label__ == 49) {
            
            
            
            var $isReference152 = HEAP32[$video + 884 >> 2] + 20;
            HEAP32[$isReference152 >> 2] = 0;
            
            
            
            var $IsOutputted154 = HEAP32[$video + 888 >> 2] + 12;
            
            var $or155 = HEAP32[$IsOutputted154 >> 2] | 2;
            HEAP32[$IsOutputted154 >> 2] = $or155;
          }
          
          var $call157 = __Z7FMOInitP12tagCommonObj($video);
          
          
          
          
          
          
          if ((HEAP32[HEAP32[$video + 884 >> 2] + 20 >> 2] | 0) != 0) {
            __label__ = 51;
          } else {
            __label__ = 52;
          }
          if (__label__ == 51) {
            
            
            
            
            var $190 = HEAP32[HEAP32[$video + 880 >> 2] + 12 >> 2];
            
            
            HEAP32[$video + 1288 >> 2] = $190;
          }
          
          
          
          
          var $194 = HEAP32[HEAP32[$video + 880 >> 2] + 12 >> 2];
          
          
          HEAP32[$video + 1388 >> 2] = $194;
        }
        
        
        HEAP32[$video + 896 >> 2] = 0;
        
        __Z11RefListInitP12tagCommonObj($video);
        
        var $call171 = __Z11ReOrderListP12tagCommonObj($video);
        $status = $call171;
        
        
        if (($status | 0) != 1) {
          __label__ = 54;
        } else {
          __label__ = 55;
        }
        if (__label__ == 54) {
          $retval = 0;
        } else if (__label__ == 55) {
          
          var $call175 = __Z11DecodeSliceP12tagDecObject($decvid);
          $status = $call175;
          
          
          
          var $inc176 = HEAP32[$video + 1280 >> 2] + 1;
          HEAP32[$video + 1280 >> 2] = $inc176;
          
          
          if (($status | 0) == 3) {
            __label__ = 56;
          } else {
            __label__ = 62;
          }
          if (__label__ == 56) {
            
            var $call179 = __Z14DeblockPictureP12tagCommonObj($video);
            
            
            var $call180 = __Z17StorePictureInDPBP12tagAVCHandleP12tagCommonObj($avcHandle_addr, $video);
            $status = $call180;
            
            
            if (($status | 0) != 1) {
              __label__ = 57;
            } else {
              __label__ = 58;
            }
            if (__label__ == 57) {
              $retval = 0;
            } else if (__label__ == 58) {
              
              
              
              
              if ((HEAP32[$video + 1352 >> 2] | 0) != 0) {
                __label__ = 59;
              } else {
                __label__ = 60;
              }
              if (__label__ == 59) {
                
                
                HEAP32[$video + 1288 >> 2] = 0;
                
                
                HEAP32[$video + 1388 >> 2] = 0;
                
                
                HEAP32[$video + 1368 >> 2] = 0;
                
                
                var $214 = HEAP32[$video + 1364 >> 2];
                
                
                HEAP32[$video + 1372 >> 2] = $214;
                
                
                HEAP32[$video + 1380 >> 2] = 0;
              } else if (__label__ == 60) {
                
                
                var $218 = HEAP32[$video + 1376 >> 2];
                
                
                HEAP32[$video + 1368 >> 2] = $218;
                
                
                
                
                var $222 = HEAP32[HEAP32[$video + 880 >> 2] + 28 >> 2];
                
                
                HEAP32[$video + 1372 >> 2] = $222;
                
                
                var $225 = HEAP32[$video + 1384 >> 2];
                
                
                HEAP32[$video + 1380 >> 2] = $225;
              }
              $retval = 3;
            }
          } else if (__label__ == 62) {
            
            
            if (($status | 0) != 1) {
              __label__ = 63;
            } else {
              __label__ = 64;
            }
            if (__label__ == 63) {
              $retval = 0;
            } else if (__label__ == 64) {
              $retval = 1;
            }
          }
        }
      }
    }
  } while (0);
  var $228 = $retval;
  STACKTOP = __stackBase__;
  return $228;
  return null;
}
function _PVAVCDecGetOutput($avcHandle, $indx, $release, $output) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $retval;
  var $avcHandle_addr;
  var $indx_addr;
  var $release_addr;
  var $output_addr;
  var $decvid;
  var $video;
  var $dpb;
  var $oldestFrame;
  var $i;
  var $first;
  var $count_frame;
  var $index;
  var $min_poc;
  var $MinIdx;
  var $MinFrameNumWrap;
  $avcHandle_addr = $avcHandle;
  $indx_addr = $indx;
  $release_addr = $release;
  $output_addr = $output;
  
  
  
  
  $decvid = HEAP32[$avcHandle_addr >> 2];
  $oldestFrame = 0;
  $first = 1;
  $count_frame = 0;
  $index = 0;
  $min_poc = 0;
  
  
  if (($decvid | 0) == 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {
    $retval = 0;
  } else if (__label__ == 2) {
    
    
    
    $video = HEAP32[$decvid >> 2];
    
    
    
    $dpb = HEAP32[$video + 864 >> 2];
    
    
    
    
    if ((HEAP32[$dpb + 80 >> 2] | 0) == 0) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    if (__label__ == 3) {
      $retval = 0;
    } else if (__label__ == 4) {
      
      
      
      
      if ((HEAP32[$video + 1352 >> 2] | 0) == 0) {
        __label__ = 5;
      } else {
        __label__ = 16;
      }
      if (__label__ == 5) {
        $i = 0;
        while (1) {
          
          
          
          
          var $cmp7 = ($i | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
          if (!$cmp7) {
            __label__ = 15;
            break;
          }
          
          
          
          
          
          
          
          
          
          if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 12 >> 2] & 1 | 0) == 0) {
            __label__ = 8;
          } else {
            __label__ = 13;
          }
          if (__label__ == 8) {
            
            var $inc = $count_frame + 1;
            $count_frame = $inc;
            
            
            if (($first | 0) != 0) {
              __label__ = 9;
            } else {
              __label__ = 10;
            }
            if (__label__ == 9) {
              
              
              
              
              
              
              
              $min_poc = HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 84 >> 2];
              $first = 0;
              
              
              
              
              
              $oldestFrame = HEAP32[$dpb + 12 + $i * 4 >> 2];
              
              $index = $i;
            }
            
            
            
            
            
            
            
            
            
            if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 84 >> 2] | 0) < ($min_poc | 0)) {
              __label__ = 11;
            } else {
              __label__ = 12;
            }
            if (__label__ == 11) {
              
              
              
              
              
              
              
              $min_poc = HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 84 >> 2];
              
              
              
              
              
              $oldestFrame = HEAP32[$dpb + 12 + $i * 4 >> 2];
              
              $index = $i;
            }
          }
          
          var $inc28 = $i + 1;
          $i = $inc28;
          __label__ = 6;
          continue;
        }
      } else if (__label__ == 16) {
        $i = 0;
        $for_cond29$25 : while (1) {
          
          
          
          
          var $cmp31 = ($i | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
          if (!$cmp31) {
            __label__ = 27;
            break $for_cond29$25;
          }
          
          
          
          
          
          
          
          
          
          if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 12 >> 2] & 1 | 0) == 0) {
            __label__ = 19;
          } else {
            __label__ = 25;
          }
          $land_lhs_true$$if_end62$28 : do {
            if (__label__ == 19) {
              
              
              
              
              
              
              
              
              var $cmp40 = (HEAP32[$dpb + 12 + $i * 4 >> 2] | 0) != (HEAP32[$video + 888 >> 2] | 0);
              if (!$cmp40) {
                __label__ = 25;
                break $land_lhs_true$$if_end62$28;
              }
              
              var $inc42 = $count_frame + 1;
              $count_frame = $inc42;
              
              
              if (($first | 0) != 0) {
                __label__ = 21;
              } else {
                __label__ = 22;
              }
              if (__label__ == 21) {
                
                
                
                
                
                
                
                $min_poc = HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 84 >> 2];
                $first = 0;
                
                
                
                
                
                $oldestFrame = HEAP32[$dpb + 12 + $i * 4 >> 2];
                
                $index = $i;
              }
              
              
              
              
              
              
              
              
              
              if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 84 >> 2] | 0) < ($min_poc | 0)) {
                __label__ = 23;
              } else {
                __label__ = 24;
              }
              if (__label__ == 23) {
                
                
                
                
                
                
                
                $min_poc = HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 84 >> 2];
                
                
                
                
                
                $oldestFrame = HEAP32[$dpb + 12 + $i * 4 >> 2];
                
                $index = $i;
              }
            }
          } while (0);
          
          var $inc64 = $i + 1;
          $i = $inc64;
          __label__ = 17;
          continue $for_cond29$25;
        }
        
        
        if (($count_frame | 0) < 2) {
          __label__ = 28;
        } else {
          __label__ = 30;
        }
        $land_lhs_true67$$if_else71$40 : do {
          if (__label__ == 28) {
            
            
            
            var $cmp68 = (HEAP32[$video + 848 >> 2] | 0) != 5;
            if (!$cmp68) {
              __label__ = 30;
              break $land_lhs_true67$$if_else71$40;
            }
            
            
            HEAP32[$video + 1352 >> 2] = 0;
            __label__ = 41;
            break $land_lhs_true67$$if_else71$40;
          }
        } while (0);
        if (__label__ == 30) {
          
          
          if (($count_frame | 0) < 1) {
            __label__ = 31;
          } else {
            __label__ = 40;
          }
          $land_lhs_true73$$if_end99$45 : do {
            if (__label__ == 31) {
              
              
              
              var $cmp75 = (HEAP32[$video + 848 >> 2] | 0) == 5;
              if (!$cmp75) {
                __label__ = 40;
                break $land_lhs_true73$$if_end99$45;
              }
              $i = 0;
              while (1) {
                
                
                
                
                var $cmp79 = ($i | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
                if (!$cmp79) {
                  __label__ = 39;
                  break;
                }
                
                
                
                
                
                
                
                
                
                if ((HEAP32[$dpb + 12 + $i * 4 >> 2] | 0) == (HEAP32[$video + 888 >> 2] | 0)) {
                  __label__ = 35;
                } else {
                  __label__ = 37;
                }
                if (__label__ == 35) {
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 12 >> 2] & 1 | 0) == 0) {
                    __label__ = 36;
                    break;
                  }
                }
                
                var $inc96 = $i + 1;
                $i = $inc96;
                __label__ = 33;
                continue;
              }
              if (__label__ == 36) {
                
                
                
                
                
                $oldestFrame = HEAP32[$dpb + 12 + $i * 4 >> 2];
                
                $index = $i;
              }
              
              
              HEAP32[$video + 1352 >> 2] = 0;
            }
          } while (0);
        }
      }
      
      
      if (($oldestFrame | 0) == 0) {
        __label__ = 43;
      } else {
        __label__ = 62;
      }
      if (__label__ == 43) {
        $i = 0;
        $for_cond104$63 : while (1) {
          
          
          
          
          var $cmp106 = ($i | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
          if (!$cmp106) {
            __label__ = 50;
            break $for_cond104$63;
          }
          
          
          
          
          
          
          
          
          if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 4 >> 2] | 0) == 0) {
            __label__ = 46;
          } else {
            __label__ = 48;
          }
          if (__label__ == 46) {
            
            
            
            
            
            
            
            
            if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 12 >> 2] | 0) == 3) {
              __label__ = 47;
              break $for_cond104$63;
            }
          }
          
          var $inc119 = $i + 1;
          $i = $inc119;
          __label__ = 44;
          continue $for_cond104$63;
        }
        if (__label__ == 47) {

        }
        
        
        
        
        
        if (($i | 0) < (HEAP32[$dpb + 80 >> 2] | 0)) {
          __label__ = 51;
        } else {
          __label__ = 52;
        }
        if (__label__ == 51) {
          $retval = 0;
        } else if (__label__ == 52) {
          $MinIdx = 0;
          $MinFrameNumWrap = 2147483647;
          $i = 0;
          $for_cond125$76 : while (1) {
            
            
            
            
            var $cmp127 = ($i | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
            if (!$cmp127) {
              __label__ = 61;
              break $for_cond125$76;
            }
            
            
            
            
            
            
            
            
            if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 4 >> 2] | 0) != 0) {
              __label__ = 55;
            } else {
              __label__ = 59;
            }
            $land_lhs_true133$$if_end146$79 : do {
              if (__label__ == 55) {
                
                
                
                
                
                
                
                
                if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 8 >> 2] | 0) != 0) {
                  __label__ = 59;
                  break $land_lhs_true133$$if_end146$79;
                }
                
                
                
                
                
                
                
                
                
                if ((HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 76 >> 2] | 0) < ($MinFrameNumWrap | 0)) {
                  __label__ = 57;
                } else {
                  __label__ = 58;
                }
                if (__label__ == 57) {
                  
                  
                  
                  
                  
                  
                  
                  $MinFrameNumWrap = HEAP32[HEAP32[$dpb + 12 + $i * 4 >> 2] + 76 >> 2];
                  
                  $MinIdx = $i;
                }
              }
            } while (0);
            
            var $inc148 = $i + 1;
            $i = $inc148;
            __label__ = 53;
            continue $for_cond125$76;
          }
          
          
          
          
          
          var $IsReference152 = HEAP32[$dpb + 12 + $MinIdx * 4 >> 2] + 4;
          HEAP32[$IsReference152 >> 2] = 0;
          
          
          
          
          
          var $IsLongTerm155 = HEAP32[$dpb + 12 + $MinIdx * 4 >> 2] + 8;
          HEAP32[$IsLongTerm155 >> 2] = 0;
          
          
          
          
          
          
          var $isReference = HEAP32[$dpb + 12 + $MinIdx * 4 >> 2] + 16 + 20;
          HEAP32[$isReference >> 2] = 0;
          
          
          
          
          
          
          var $isLongTerm = HEAP32[$dpb + 12 + $MinIdx * 4 >> 2] + 16 + 24;
          HEAP32[$isLongTerm >> 2] = 0;
          
          
          
          
          
          var $IsOutputted163 = HEAP32[$dpb + 12 + $MinIdx * 4 >> 2] + 12;
          
          var $or = HEAP32[$IsOutputted163 >> 2] | 2;
          HEAP32[$IsOutputted163 >> 2] = $or;
          $retval = 0;
        }
      } else if (__label__ == 62) {
        
        
        
        var $or166 = HEAP32[$oldestFrame + 12 >> 2] | 1;
        HEAP32[$oldestFrame + 12 >> 2] = $or166;
        
        
        
        
        if ((HEAP32[$oldestFrame + 12 >> 2] | 0) == 3) {
          __label__ = 63;
        } else {
          __label__ = 64;
        }
        if (__label__ == 63) {
          
          HEAP32[$release_addr >> 2] = 1;
        } else if (__label__ == 64) {
          
          HEAP32[$release_addr >> 2] = 0;
        }
        
        
        
        var $165 = HEAP32[$oldestFrame + 16 + 4 >> 2];
        
        
        
        HEAP32[$output_addr + 4 >> 2] = $165;
        
        
        
        var $168 = HEAP32[$oldestFrame + 16 + 8 >> 2];
        
        
        
        HEAP32[$output_addr + 4 + 4 >> 2] = $168;
        
        
        
        var $171 = HEAP32[$oldestFrame + 16 + 12 >> 2];
        
        
        
        HEAP32[$output_addr + 4 + 8 >> 2] = $171;
        
        
        
        var $174 = HEAP32[$oldestFrame + 16 + 44 >> 2];
        
        
        HEAP32[$output_addr + 20 >> 2] = $174;
        
        
        
        var $177 = HEAP32[$oldestFrame + 16 + 40 >> 2];
        
        
        HEAP32[$output_addr + 16 >> 2] = $177;
        
        
        var $180 = HEAP32[$oldestFrame + 84 >> 2];
        
        
        HEAP32[$output_addr + 44 >> 2] = $180;
        
        
        var $183 = HEAP32[$oldestFrame + 72 >> 2];
        
        
        HEAP32[$output_addr + 40 >> 2] = $183;
        
        
        
        var $187 = HEAP32[$oldestFrame >> 2];
        
        
        HEAP32[$output_addr >> 2] = $187;
        
        
        HEAP32[$indx_addr >> 2] = $index;
        $retval = 1;
      }
    }
  }
  var $191 = $retval;
  STACKTOP = __stackBase__;
  return $191;
  return null;
}
function _PVAVCDecReset($avcHandle) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $avcHandle_addr;
  var $decvid;
  var $video;
  var $dpb;
  var $i;
  $avcHandle_addr = $avcHandle;
  
  
  
  
  $decvid = HEAP32[$avcHandle_addr >> 2];
  
  
  if (($decvid | 0) == 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  if (__label__ == 1) {

  } else if (__label__ == 2) {
    
    
    
    $video = HEAP32[$decvid >> 2];
    
    
    
    $dpb = HEAP32[$video + 864 >> 2];
    $i = 0;
    while (1) {
      
      
      
      
      var $cmp1 = ($i | 0) < (HEAP32[$dpb + 80 >> 2] | 0);
      if (!$cmp1) {
        __label__ = 6;
        break;
      }
      
      
      
      
      
      var $IsLongTerm = HEAP32[$dpb + 12 + $i * 4 >> 2] + 8;
      HEAP32[$IsLongTerm >> 2] = 0;
      
      
      
      
      
      var $IsReference = HEAP32[$dpb + 12 + $i * 4 >> 2] + 4;
      HEAP32[$IsReference >> 2] = 0;
      
      
      
      
      
      var $IsOutputted = HEAP32[$dpb + 12 + $i * 4 >> 2] + 12;
      HEAP32[$IsOutputted >> 2] = 3;
      
      
      
      
      
      
      var $isReference = HEAP32[$dpb + 12 + $i * 4 >> 2] + 16 + 20;
      HEAP32[$isReference >> 2] = 0;
      
      
      
      
      
      
      var $isLongTerm = HEAP32[$dpb + 12 + $i * 4 >> 2] + 16 + 24;
      HEAP32[$isLongTerm >> 2] = 0;
      
      var $inc = $i + 1;
      $i = $inc;
      __label__ = 3;
      continue;
    }
    
    
    HEAP32[$video + 1352 >> 2] = 0;
    
    
    HEAP32[$video + 896 >> 2] = 1;
    
    
    HEAP32[$video + 900 >> 2] = 1;
    
    
    HEAP32[$video + 884 >> 2] = 0;
    
    
    HEAP32[$video + 888 >> 2] = 0;
    
    
    HEAP32[$video + 904 >> 2] = 0;
    
    
    HEAP32[$video + 1388 >> 2] = 0;
    
    
    HEAP32[$video + 1288 >> 2] = 0;
    
    
    HEAP32[$video + 1380 >> 2] = 0;
    
    
    HEAP32[$video + 1384 >> 2] = 0;
    
    
    HEAP32[$video + 916 >> 2] = 0;
    
    
    HEAP32[$video + 1316 >> 2] = 0;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
function _PVAVCCleanUpDecoder($avcHandle) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 0;
  var __label__;
  var $avcHandle_addr;
  var $decvid;
  var $video;
  var $userData;
  var $i;
  $avcHandle_addr = $avcHandle;
  
  
  
  
  $decvid = HEAP32[$avcHandle_addr >> 2];
  
  
  
  $userData = HEAP32[$avcHandle_addr + 4 >> 2];
  
  
  if (($decvid | 0) != 0) {
    __label__ = 1;
  } else {
    __label__ = 28;
  }
  if (__label__ == 1) {
    
    
    
    $video = HEAP32[$decvid >> 2];
    
    
    if (($video | 0) != 0) {
      __label__ = 2;
    } else {
      __label__ = 11;
    }
    if (__label__ == 2) {
      
      
      
      
      if ((HEAP32[$video + 1412 >> 2] | 0) != 0) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      if (__label__ == 3) {
        
        
        var $12 = HEAP32[$avcHandle_addr + 24 >> 2];
        
        
        
        
        var $16 = HEAP32[$video + 1412 >> 2];
        FUNCTION_TABLE[$12]($userData, $16);
      }
      
      
      
      
      if ((HEAP32[$video + 908 >> 2] | 0) != 0) {
        __label__ = 5;
      } else {
        __label__ = 6;
      }
      if (__label__ == 5) {
        
        
        var $20 = HEAP32[$avcHandle_addr + 24 >> 2];
        
        
        
        
        var $24 = HEAP32[$video + 908 >> 2];
        FUNCTION_TABLE[$20]($userData, $24);
      }
      
      
      
      
      if ((HEAP32[$video + 864 >> 2] | 0) != 0) {
        __label__ = 7;
      } else {
        __label__ = 8;
      }
      if (__label__ == 7) {
        
        
        var $call = __Z10CleanUpDPBP12tagAVCHandleP12tagCommonObj($avcHandle_addr, $video);
        
        
        var $30 = HEAP32[$avcHandle_addr + 24 >> 2];
        
        
        
        
        var $34 = HEAP32[$video + 864 >> 2];
        FUNCTION_TABLE[$30]($userData, $34);
      }
      
      
      
      
      if ((HEAP32[$video + 880 >> 2] | 0) != 0) {
        __label__ = 9;
      } else {
        __label__ = 10;
      }
      if (__label__ == 9) {
        
        
        var $38 = HEAP32[$avcHandle_addr + 24 >> 2];
        
        
        
        
        var $42 = HEAP32[$video + 880 >> 2];
        FUNCTION_TABLE[$38]($userData, $42);
      }
      
      
      var $44 = HEAP32[$avcHandle_addr + 24 >> 2];
      
      
      
      FUNCTION_TABLE[$44]($userData, $video);
    }
    $i = 0;
    $for_cond$19 : while (1) {
      
      var $cmp24 = ($i | 0) < 256;
      if (!$cmp24) {
        __label__ = 19;
        break $for_cond$19;
      }
      
      
      
      
      
      
      if ((HEAP32[$decvid + 136 + $i * 4 >> 2] | 0) != 0) {
        __label__ = 14;
      } else {
        __label__ = 17;
      }
      if (__label__ == 14) {
        
        
        
        
        
        
        
        
        if ((HEAP32[HEAP32[$decvid + 136 + $i * 4 >> 2] + 124 >> 2] | 0) != 0) {
          __label__ = 15;
        } else {
          __label__ = 16;
        }
        if (__label__ == 15) {
          
          
          var $57 = HEAP32[$avcHandle_addr + 24 >> 2];
          
          
          
          
          
          
          
          
          var $63 = HEAP32[HEAP32[$decvid + 136 + $i * 4 >> 2] + 124 >> 2];
          FUNCTION_TABLE[$57]($userData, $63);
        }
        
        
        var $65 = HEAP32[$avcHandle_addr + 24 >> 2];
        
        
        
        
        
        
        var $70 = HEAP32[$decvid + 136 + $i * 4 >> 2];
        FUNCTION_TABLE[$65]($userData, $70);
      }
      
      var $inc = $i + 1;
      $i = $inc;
      __label__ = 12;
      continue $for_cond$19;
    }
    $i = 0;
    while (1) {
      
      var $cmp41 = ($i | 0) < 32;
      if (!$cmp41) {
        __label__ = 25;
        break;
      }
      
      
      
      
      
      
      if ((HEAP32[$decvid + 8 + $i * 4 >> 2] | 0) != 0) {
        __label__ = 22;
      } else {
        __label__ = 23;
      }
      if (__label__ == 22) {
        
        
        var $77 = HEAP32[$avcHandle_addr + 24 >> 2];
        
        
        
        
        
        
        var $82 = HEAP32[$decvid + 8 + $i * 4 >> 2];
        FUNCTION_TABLE[$77]($userData, $82);
      }
      
      var $inc51 = $i + 1;
      $i = $inc51;
      __label__ = 20;
      continue;
    }
    
    
    
    
    if ((HEAP32[$decvid + 4 >> 2] | 0) != 0) {
      __label__ = 26;
    } else {
      __label__ = 27;
    }
    if (__label__ == 26) {
      
      
      var $87 = HEAP32[$avcHandle_addr + 24 >> 2];
      
      
      
      
      var $91 = HEAP32[$decvid + 4 >> 2];
      FUNCTION_TABLE[$87]($userData, $91);
    }
    
    
    var $93 = HEAP32[$avcHandle_addr + 24 >> 2];
    
    
    
    FUNCTION_TABLE[$93]($userData, $decvid);
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
Module.callMain = function callMain(args) {
  var argc = args.length + 1;
  function pad() {
    for (var i = 0; i < 4 - 1; i++) {
      argv.push(0);
    }
  }
  var argv = [ allocate(intArrayFromString("/bin/this.program"), "i8", ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc - 1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, "i32", ALLOC_STATIC);
  return _main(argc, argv, 0);
};
function run(args) {
  args = args || Module["arguments"];
  __ZL10mapLev2Idx = allocate([ 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 1, 2, 3, 255, 255, 255, 255, 255, 255, 4, 5, 6, 255, 255, 255, 255, 255, 255, 255, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 255, 255, 255, 255, 255, 255, 255, 13, 14, 255, 255, 255, 255, 255, 255, 255, 255, 0 ], "i8", ALLOC_STATIC);
  __ZL8MaxDPBX2 = allocate([ 297, 0, 0, 0, 675, 0, 0, 0, 1782, 0, 0, 0, 1782, 0, 0, 0, 1782, 0, 0, 0, 3564, 0, 0, 0, 6075, 0, 0, 0, 6075, 0, 0, 0, 13500, 0, 0, 0, 15360, 0, 0, 0, 24576, 0, 0, 0, 24576, 0, 0, 0, 24576, 0, 0, 0, 82620, 0, 0, 0, 138240, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZL10mapLev2Idx1 = allocate([ 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 1, 2, 3, 255, 255, 255, 255, 255, 255, 4, 5, 6, 255, 255, 255, 255, 255, 255, 255, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 255, 255, 255, 255, 255, 255, 255, 13, 14, 255, 255, 255, 255, 255, 255, 255, 255, 0 ], "i8", ALLOC_STATIC);
  __ZL13trailing_bits = allocate([ 0, 1, 2, 4, 8, 16, 32, 64, 128 ], "i8", ALLOC_STATIC);
  __ZL10mapLev2Idx2 = allocate([ 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 1, 2, 3, 255, 255, 255, 255, 255, 255, 4, 5, 6, 255, 255, 255, 255, 255, 255, 255, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 255, 255, 255, 255, 255, 255, 255, 13, 14, 255, 255, 255, 255, 255, 255, 255, 255, 0 ], "i8", ALLOC_STATIC);
  __ZL10mapQPi2QPc = allocate([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39 ], "i8", ALLOC_STATIC);
  __ZL10mapLev2Idx3 = allocate([ 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 1, 2, 3, 255, 255, 255, 255, 255, 255, 4, 5, 6, 255, 255, 255, 255, 255, 255, 255, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 255, 255, 255, 255, 255, 255, 255, 13, 14, 255, 255, 255, 255, 255, 255, 255, 255, 0 ], "i8", ALLOC_STATIC);
  __ZZ24GetMotionVectorPredictorP12tagCommonObjiE1C = allocate([ 22352 ], [ "i32", 0, 0, 0, 0 ], ALLOC_STATIC);
  __ZL10mapLev2Idx4 = allocate([ 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 1, 2, 3, 255, 255, 255, 255, 255, 255, 4, 5, 6, 255, 255, 255, 255, 255, 255, 255, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 255, 255, 255, 255, 255, 255, 255, 13, 14, 255, 255, 255, 255, 255, 255, 255, 255, 0 ], "i8", ALLOC_STATIC);
  __ZL15dequant_coefres = allocate([ 10, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 10, 0, 0, 0, 16, 0, 0, 0, 10, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 10, 0, 0, 0, 16, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 11, 0, 0, 0, 18, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 18, 0, 0, 0, 11, 0, 0, 0, 18, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 18, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 13, 0, 0, 0, 20, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 13, 0, 0, 0, 20, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 14, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 14, 0, 0, 0, 23, 0, 0, 0, 14, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 23, 0, 0, 0, 14, 0, 0, 0, 23, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 23, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 16, 0, 0, 0, 25, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 25, 0, 0, 0, 16, 0, 0, 0, 25, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 25, 0, 0, 0, 18, 0, 0, 0, 23, 0, 0, 0, 23, 0, 0, 0, 18, 0, 0, 0, 29, 0, 0, 0, 18, 0, 0, 0, 23, 0, 0, 0, 23, 0, 0, 0, 23, 0, 0, 0, 23, 0, 0, 0, 29, 0, 0, 0, 18, 0, 0, 0, 29, 0, 0, 0, 23, 0, 0, 0, 23, 0, 0, 0, 29, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZL10mapLev2Idx5 = allocate([ 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 1, 2, 3, 255, 255, 255, 255, 255, 255, 4, 5, 6, 255, 255, 255, 255, 255, 255, 255, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 255, 255, 255, 255, 255, 255, 255, 13, 14, 255, 255, 255, 255, 255, 255, 255, 255, 0 ], "i8", ALLOC_STATIC);
  __ZL11BlkTopRight = allocate([ 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZL10mapLev2Idx6 = allocate([ 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 1, 2, 3, 255, 255, 255, 255, 255, 255, 4, 5, 6, 255, 255, 255, 255, 255, 255, 255, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 255, 255, 255, 255, 255, 255, 255, 13, 14, 255, 255, 255, 255, 255, 255, 255, 255, 0 ], "i8", ALLOC_STATIC);
  __ZL13ChromaMC_SIMD = allocate([ 8, 0, 0, 0, 10, 0, 0, 0, 12, 0, 0, 0, 14, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 18, 0, 0, 0, 20, 0, 0, 0 ], [ "void (i8*, i32, i32, i32, i8*, i32, i32, i32)*", 0, 0, 0, "void (i8*, i32, i32, i32, i8*, i32, i32, i32)*", 0, 0, 0, "void (i8*, i32, i32, i32, i8*, i32, i32, i32)*", 0, 0, 0, "void (i8*, i32, i32, i32, i8*, i32, i32, i32)*", 0, 0, 0, "void (i8*, i32, i32, i32, i8*, i32, i32, i32)*", 0, 0, 0, "void (i8*, i32, i32, i32, i8*, i32, i32, i32)*", 0, 0, 0, "void (i8*, i32, i32, i32, i8*, i32, i32, i32)*", 0, 0, 0, "void (i8*, i32, i32, i32, i8*, i32, i32, i32)*", 0, 0, 0 ], ALLOC_STATIC);
  __ZL10mapLev2Idx7 = allocate([ 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 1, 2, 3, 255, 255, 255, 255, 255, 255, 4, 5, 6, 255, 255, 255, 255, 255, 255, 255, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 255, 255, 255, 255, 255, 255, 255, 13, 14, 255, 255, 255, 255, 255, 255, 255, 255, 0 ], "i8", ALLOC_STATIC);
  __ZL10mapQPi2QPc8 = allocate([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39 ], "i8", ALLOC_STATIC);
  __ZL13mbPart2raster = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ16InterpretMBModePP13tagMacroblockjE13map2PartWidth = allocate([ 16, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ16InterpretMBModePP13tagMacroblockjE14map2PartHeight = allocate([ 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ16InterpretMBModePP13tagMacroblockjE11map2NumPart = allocate([ 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ16InterpretMBModePP13tagMacroblockjE10map2mbMode = allocate([ 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ16InterpretMBModeBP13tagMacroblockjE13map2PartWidth = allocate([ 8, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ16InterpretMBModeBP13tagMacroblockjE14map2PartHeight = allocate([ 8, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ16InterpretMBModeBP13tagMacroblockjE10map2mbMode = allocate([ 4, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ16InterpretMBModeBP13tagMacroblockjE13map2PredMode1 = allocate([ 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, -1, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ16InterpretMBModeBP13tagMacroblockjE13map2PredMode2 = allocate([ -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, -1, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ16InterpretMBModeBP13tagMacroblockjE11map2NumPart = allocate([ -1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ19InterpretSubMBModePP13tagMacroblockPjE16map2subPartWidth = allocate([ 8, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ19InterpretSubMBModePP13tagMacroblockPjE17map2subPartHeight = allocate([ 8, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ19InterpretSubMBModePP13tagMacroblockPjE14map2numSubPart = allocate([ 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ19InterpretSubMBModeBP13tagMacroblockPjE13map2subMbMode = allocate([ 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ19InterpretSubMBModeBP13tagMacroblockPjE16map2subPartWidth = allocate([ 4, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ19InterpretSubMBModeBP13tagMacroblockPjE17map2subPartHeight = allocate([ 4, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ19InterpretSubMBModeBP13tagMacroblockPjE14map2numSubPart = allocate([ 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ19InterpretSubMBModeBP13tagMacroblockPjE12map2predMode = allocate([ 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZL10mapLev2Idx9 = allocate([ 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 1, 2, 3, 255, 255, 255, 255, 255, 255, 4, 5, 6, 255, 255, 255, 255, 255, 255, 255, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 255, 255, 255, 255, 255, 255, 255, 13, 14, 255, 255, 255, 255, 255, 255, 255, 255, 0 ], "i8", ALLOC_STATIC);
  __ZL13ZZ_SCAN_BLOCK = allocate([ 0, 1, 16, 32, 17, 2, 3, 18, 33, 48, 49, 34, 19, 35, 50, 51 ], "i8", ALLOC_STATIC);
  __ZL15dequant_coefres10 = allocate([ 10, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 10, 0, 0, 0, 16, 0, 0, 0, 10, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 10, 0, 0, 0, 16, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 11, 0, 0, 0, 18, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 18, 0, 0, 0, 11, 0, 0, 0, 18, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 18, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 13, 0, 0, 0, 20, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 13, 0, 0, 0, 20, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 14, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 14, 0, 0, 0, 23, 0, 0, 0, 14, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 23, 0, 0, 0, 14, 0, 0, 0, 23, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 23, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 16, 0, 0, 0, 25, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 25, 0, 0, 0, 16, 0, 0, 0, 25, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 25, 0, 0, 0, 18, 0, 0, 0, 23, 0, 0, 0, 23, 0, 0, 0, 18, 0, 0, 0, 29, 0, 0, 0, 18, 0, 0, 0, 23, 0, 0, 0, 23, 0, 0, 0, 23, 0, 0, 0, 23, 0, 0, 0, 29, 0, 0, 0, 18, 0, 0, 0, 29, 0, 0, 0, 23, 0, 0, 0, 23, 0, 0, 0, 29, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZL10mapLev2Idx15 = allocate([ 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 1, 2, 3, 255, 255, 255, 255, 255, 255, 4, 5, 6, 255, 255, 255, 255, 255, 255, 255, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 255, 255, 255, 255, 255, 255, 255, 13, 14, 255, 255, 255, 255, 255, 255, 255, 255, 0 ], "i8", ALLOC_STATIC);
  __ZL11QP_CLIP_TAB = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 40, 0, 0, 0, 41, 0, 0, 0, 42, 0, 0, 0, 43, 0, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 46, 0, 0, 0, 47, 0, 0, 0, 48, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZL11ALPHA_TABLE = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 15, 0, 0, 0, 17, 0, 0, 0, 20, 0, 0, 0, 22, 0, 0, 0, 25, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 45, 0, 0, 0, 50, 0, 0, 0, 56, 0, 0, 0, 63, 0, 0, 0, 71, 0, 0, 0, 80, 0, 0, 0, 90, 0, 0, 0, 101, 0, 0, 0, 113, 0, 0, 0, 127, 0, 0, 0, 144, 0, 0, 0, 162, 0, 0, 0, 182, 0, 0, 0, 203, 0, 0, 0, 226, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZL10BETA_TABLE = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZL8CLIP_TAB = allocatei32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZL14ININT_STRENGTH = allocate([ 67372036, 0, 0, 0, 50529027, 0, 0, 0, 50529027, 0, 0, 0, 50529027, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZL10mapLev2Idx16 = allocate([ 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 1, 2, 3, 255, 255, 255, 255, 255, 255, 4, 5, 6, 255, 255, 255, 255, 255, 255, 255, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 255, 255, 255, 255, 255, 255, 255, 13, 14, 255, 255, 255, 255, 255, 255, 255, 255, 0 ], "i8", ALLOC_STATIC);
  __ZL10mapLev2Idx17 = allocate([ 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 1, 2, 3, 255, 255, 255, 255, 255, 255, 4, 5, 6, 255, 255, 255, 255, 255, 255, 255, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 255, 255, 255, 255, 255, 255, 255, 13, 14, 255, 255, 255, 255, 255, 255, 255, 255, 0 ], "i8", ALLOC_STATIC);
  __ZL10mapLev2Idx18 = allocate([ 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 1, 2, 3, 255, 255, 255, 255, 255, 255, 4, 5, 6, 255, 255, 255, 255, 255, 255, 255, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 255, 255, 255, 255, 255, 255, 255, 13, 14, 255, 255, 255, 255, 255, 255, 255, 255, 0 ], "i8", ALLOC_STATIC);
  _screen = allocate(1, "%struct.SDL_Surface*", ALLOC_STATIC);
  _decoder = allocate(36, [ "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32 (i8*, i32, i32)*", 0, 0, 0, "i32 (i8*, i32, i8**)*", 0, 0, 0, "void (i8*, i32)*", 0, 0, 0, "i32 (i8*, i32, i32)*", 0, 0, 0, "void (i8*, i32)*", 0, 0, 0, "void (i32*, i32, i8*, i32, i32)*", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  _size = allocate(1, "i32", ALLOC_STATIC);
  _stream = allocate(1, "i8*", ALLOC_STATIC);
  _buffer = allocate(1, "i8*", ALLOC_STATIC);
  _nal_unit = allocate(1, "i8*", ALLOC_STATIC);
  _remaining = allocate(1, "i32", ALLOC_STATIC);
  _nal_size = allocate(1, "i32", ALLOC_STATIC);
  __str = allocate([ 114, 98, 0 ], "i8", ALLOC_STATIC);
  __str1 = allocate([ 85, 110, 97, 98, 108, 101, 32, 116, 111, 32, 111, 112, 101, 110, 32, 102, 105, 108, 101, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);
  __str2 = allocate([ 77, 101, 109, 111, 114, 121, 32, 101, 114, 114, 111, 114, 33, 10, 0 ], "i8", ALLOC_STATIC);
  __str3 = allocate([ 46, 46, 47, 77, 101, 100, 105, 97, 47, 109, 111, 122, 105, 108, 108, 97, 46, 50, 54, 52, 0 ], "i8", ALLOC_STATIC);
  __str4 = allocate([ 77, 105, 115, 115, 101, 100, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);
  __ZL10mapLev2Idx19 = allocate([ 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 1, 2, 3, 255, 255, 255, 255, 255, 255, 4, 5, 6, 255, 255, 255, 255, 255, 255, 255, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 255, 255, 255, 255, 255, 255, 255, 13, 14, 255, 255, 255, 255, 255, 255, 255, 255, 0 ], "i8", ALLOC_STATIC);
  __ZL6MapCBP = allocate([ 47, 0, 31, 16, 15, 1, 0, 2, 23, 4, 27, 8, 29, 32, 30, 3, 7, 5, 11, 10, 13, 12, 14, 15, 39, 47, 43, 7, 45, 11, 46, 13, 16, 14, 3, 6, 5, 9, 10, 31, 12, 35, 19, 37, 21, 42, 26, 44, 28, 33, 35, 34, 37, 36, 42, 40, 44, 39, 1, 43, 2, 45, 4, 46, 8, 17, 17, 18, 18, 20, 20, 24, 24, 19, 6, 21, 9, 26, 22, 28, 25, 23, 32, 27, 33, 29, 34, 30, 36, 22, 40, 25, 38, 38, 41, 41 ], "i8", ALLOC_STATIC);
  __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail1 = allocate([ 0, 0, 16, 0, 0, 16, 1, 13, 15, 1, 13, 15, 0, 16, 16, 2, 16, 16, 1, 16, 16, 0, 15, 16, 3, 16, 16, 2, 15, 16, 1, 15, 16, 0, 14, 16, 3, 15, 16, 2, 14, 16, 1, 14, 16, 0, 13, 16, 3, 14, 15, 2, 13, 15, 1, 12, 15, 0, 12, 15, 3, 13, 15, 2, 12, 15, 1, 11, 15, 0, 11, 15, 3, 12, 14, 2, 11, 14, 1, 10, 14, 0, 10, 14, 3, 11, 14, 2, 10, 14, 1, 9, 14, 0, 9, 14, 0, 8, 13, 2, 9, 13, 1, 8, 13, 0, 7, 13, 3, 10, 13, 2, 8, 13, 1, 7, 13, 0, 6, 13, 3, 9, 11, 2, 7, 11, 1, 6, 11, 0, 5, 11, 3, 8, 10, 2, 6, 10, 1, 5, 10, 0, 4, 10, 3, 7, 9, 2, 5, 9, 1, 4, 9, 0, 3, 9, 3, 6, 8, 2, 4, 8, 1, 3, 8, 0, 2, 8, 3, 5, 7, 2, 3, 7, 3, 4, 6, 3, 4, 6, 1, 2, 6, 1, 2, 6, 0, 1, 6, 0, 1, 6, 3, 3, 5, 3, 3, 5, 3, 3, 5, 3, 3, 5, 2, 2, 3, 1, 1, 2, 1, 1, 2, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1 ], "i8", ALLOC_STATIC);
  __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail2 = allocate([ 0, 0, 14, 0, 0, 14, 3, 15, 13, 3, 15, 13, 3, 16, 14, 2, 16, 14, 1, 16, 14, 0, 16, 14, 1, 15, 14, 0, 15, 14, 2, 15, 14, 1, 14, 14, 2, 14, 13, 2, 14, 13, 0, 14, 13, 0, 14, 13, 3, 14, 13, 2, 13, 13, 1, 13, 13, 0, 13, 13, 3, 13, 13, 2, 12, 13, 1, 12, 13, 0, 12, 13, 0, 11, 12, 2, 11, 12, 1, 11, 12, 0, 10, 12, 3, 12, 12, 2, 10, 12, 1, 10, 12, 0, 9, 12, 3, 11, 11, 2, 9, 11, 1, 9, 11, 0, 8, 11, 3, 10, 11, 2, 8, 11, 1, 8, 11, 0, 7, 11, 3, 9, 9, 2, 7, 9, 1, 7, 9, 0, 6, 9, 0, 5, 8, 0, 5, 8, 2, 6, 8, 2, 6, 8, 1, 6, 8, 1, 6, 8, 0, 4, 8, 0, 4, 8, 3, 8, 7, 2, 5, 7, 1, 5, 7, 0, 3, 7, 3, 7, 6, 3, 7, 6, 2, 4, 6, 2, 4, 6, 1, 4, 6, 1, 4, 6, 0, 2, 6, 0, 2, 6, 3, 6, 6, 2, 3, 6, 1, 3, 6, 0, 1, 6, 3, 5, 5, 3, 5, 5, 1, 2, 5, 1, 2, 5, 3, 4, 4, 3, 3, 4, 2, 2, 3, 2, 2, 3, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2 ], "i8", ALLOC_STATIC);
  __ZZ25ce_TotalCoeffTrailingOnesP15tagDecBitstreamPiS1_iE13TotCofNTrail3 = allocate([ 0, 0, 10, 0, 16, 10, 3, 16, 10, 2, 16, 10, 1, 16, 10, 0, 15, 10, 3, 15, 10, 2, 15, 10, 1, 15, 10, 0, 14, 10, 3, 14, 10, 2, 14, 10, 1, 14, 10, 0, 13, 10, 1, 13, 9, 1, 13, 9, 0, 12, 9, 2, 13, 9, 1, 12, 9, 0, 11, 9, 3, 13, 9, 2, 12, 9, 1, 11, 9, 0, 10, 9, 3, 12, 8, 2, 11, 8, 1, 10, 8, 0, 9, 8, 3, 11, 8, 2, 10, 8, 1, 9, 8, 0, 8, 8, 0, 7, 7, 0, 6, 7, 2, 9, 7, 0, 5, 7, 3, 10, 7, 2, 8, 7, 1, 8, 7, 0, 4, 7, 0, 3, 6, 2, 7, 6, 1, 7, 6, 0, 2, 6, 3, 9, 6, 2, 6, 6, 1, 6, 6, 0, 1, 6, 1, 5, 5, 2, 5, 5, 1, 4, 5, 2, 4, 5, 1, 3, 5, 3, 8, 5, 2, 3, 5, 1, 2, 5, 3, 7, 4, 3, 6, 4, 3, 5, 4, 3, 4, 4, 3, 3, 4, 2, 2, 4, 1, 1, 4, 0, 0, 4 ], "i8", ALLOC_STATIC);
  __ZZ33ce_TotalCoeffTrailingOnesChromaDCP15tagDecBitstreamPiS1_E13TotCofNTrail5 = allocate([ 3, 4, 7, 3, 4, 7, 2, 4, 8, 1, 4, 8, 2, 3, 7, 2, 3, 7, 1, 3, 7, 1, 3, 7, 0, 4, 6, 0, 3, 6, 0, 2, 6, 3, 3, 6, 1, 2, 6, 0, 1, 6, 2, 2, 3, 0, 0, 2, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], "i8", ALLOC_STATIC);
  __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE8TotZero1 = allocate([ 15, 9, 14, 9, 13, 9, 12, 8, 12, 8, 11, 8, 11, 8, 10, 7, 9, 7, 8, 6, 8, 6, 7, 6, 7, 6, 6, 5, 6, 5, 6, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 3, 4, 2, 3, 2, 3, 1, 3, 1, 3, 0, 1 ], "i8", ALLOC_STATIC);
  __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE10TotZero2n3 = allocate([ 14, 6, 13, 6, 12, 6, 11, 6, 10, 5, 10, 5, 9, 5, 9, 5, 8, 4, 7, 4, 6, 4, 5, 4, 4, 3, 4, 3, 3, 3, 2, 3, 1, 3, 0, 3, 13, 6, 11, 6, 12, 5, 12, 5, 10, 5, 10, 5, 9, 5, 9, 5, 8, 4, 5, 4, 4, 4, 0, 4, 7, 3, 7, 3, 6, 3, 3, 3, 2, 3, 1, 3 ], "i8", ALLOC_STATIC);
  __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE8TotZero4 = allocate([ 12, 5, 11, 5, 10, 5, 0, 5, 9, 4, 9, 4, 7, 4, 7, 4, 3, 4, 3, 4, 2, 4, 2, 4, 8, 3, 6, 3, 5, 3, 4, 3, 1, 3 ], "i8", ALLOC_STATIC);
  __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE8TotZero5 = allocate([ 11, 5, 9, 5, 10, 4, 8, 4, 2, 4, 1, 4, 0, 4, 7, 3, 7, 3, 6, 3, 5, 3, 4, 3, 3, 3 ], "i8", ALLOC_STATIC);
  __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE12TotZero6to10 = allocate([ 10, 6, 0, 6, 1, 5, 1, 5, 8, 4, 8, 4, 8, 4, 8, 4, 9, 3, 7, 3, 6, 3, 5, 3, 4, 3, 3, 3, 2, 3, 9, 6, 0, 6, 1, 5, 1, 5, 7, 4, 7, 4, 7, 4, 7, 4, 8, 3, 6, 3, 4, 3, 3, 3, 2, 3, 5, 2, 5, 2, 8, 6, 0, 6, 2, 5, 2, 5, 1, 4, 1, 4, 1, 4, 1, 4, 7, 3, 6, 3, 3, 3, 5, 2, 5, 2, 4, 2, 4, 2, 1, 6, 0, 6, 7, 5, 7, 5, 2, 4, 2, 4, 2, 4, 2, 4, 5, 3, 6, 2, 6, 2, 4, 2, 4, 2, 3, 2, 3, 2, 1, 5, 0, 5, 6, 4, 6, 4, 2, 3, 2, 3, 2, 3, 2, 3, 5, 2, 4, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0 ], "i8", ALLOC_STATIC);
  __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE9TotZero11 = allocate([ 0, 4, 1, 4, 2, 3, 2, 3, 3, 3, 5, 3, 4, 1 ], "i8", ALLOC_STATIC);
  __ZZ13ce_TotalZerosP15tagDecBitstreamPiiE13TotZero12to15 = allocate([ 3, 1, 2, 2, 4, 3, 1, 4, 0, 4, 2, 1, 3, 2, 1, 3, 0, 3, 0, 0, 2, 1, 1, 2, 0, 2, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0 ], "i8", ALLOC_STATIC);
  __ZZ21ce_TotalZerosChromaDCP15tagDecBitstreamPiiE16TotZeroChrom1to3 = allocate([ 3, 3, 2, 3, 1, 2, 1, 2, 0, 1, 0, 1, 0, 1, 0, 1, 2, 2, 2, 2, 1, 2, 1, 2, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1 ], "i8", ALLOC_STATIC);
  __ZZ12ce_RunBeforeP15tagDecBitstreamPiiE6codlen = allocate([ 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
  __ZZ12ce_RunBeforeP15tagDecBitstreamPiiE12RunBeforeTab = allocate([ 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 1, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 3, 3, 2, 2, 2, 2, 1, 2, 1, 2, 0, 2, 0, 2, 5, 3, 4, 3, 3, 3, 2, 3, 1, 2, 1, 2, 0, 2, 0, 2, 1, 3, 2, 3, 4, 3, 3, 3, 6, 3, 5, 3, 0, 2, 0, 2 ], "i8", ALLOC_STATIC);
  __ZL10mapLev2Idx42 = allocate([ 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 1, 2, 3, 255, 255, 255, 255, 255, 255, 4, 5, 6, 255, 255, 255, 255, 255, 255, 255, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 255, 255, 255, 255, 255, 255, 255, 13, 14, 255, 255, 255, 255, 255, 255, 255, 255, 0 ], "i8", ALLOC_STATIC);
  FS.init();
  __ATEXIT__.push({
    func: (function() {
      FS.quit();
    })
  });
  ___setErrNo(0);
  FUNCTION_TABLE = [ 0, 0, __Z9my_mallocPvii, 0, __Z7my_freePvj, 0, __Z20residual_block_cavlcP12tagDecObjectiiPiS1_S1_, 0, __Z17ChromaFullMC_SIMDPhiiiS_iii, 0, __Z23ChromaHorizontalMC_SIMDPhiiiS_iii, 0, __Z21ChromaVerticalMC_SIMDPhiiiS_iii, 0, __Z21ChromaDiagonalMC_SIMDPhiiiS_iii, 0, __Z24ChromaHorizontalMC2_SIMDPhiiiS_iii, 0, __Z22ChromaVerticalMC2_SIMDPhiiiS_iii, 0, __Z22ChromaDiagonalMC2_SIMDPhiiiS_iii, 0 ];
  Module["FUNCTION_TABLE"] = FUNCTION_TABLE;
  __globalConstructor__();
  var ret = null;
  if (Module["_main"]) {
    ret = Module.callMain(args);
    __shutdownRuntime__();
  }
  return ret;
}
Module["run"] = run;
Module["noInitialRun"] = true;
if (!Module["noInitialRun"]) {
  run();
}
Module["FS"] = FS;
FS["createDataFile"] = FS.createDataFile;
__Z11runMainLoopv = (function() {
  setInterval(__Z17mainLoopIterationv, 1e3 / 50);
});
var frameCounter = 0, totalFrameCounter = 0;
var frameTime = 0, totalFrameTime = 0;
_SDL_Flip = (function(surf) {
  frameCounter++;
  totalFrameCounter++;
  if (frameTime == 0) {
    totalFrameTime = frameTime = Date.now();
    return;
  }
  var now = Date.now();
  var diff = now - frameTime;
  if (diff > 500) {
    document.getElementById("fps").innerHTML = "FPS: <b>" + (frameCounter * 1e3 / diff).toFixed(2) + " (since start: " + (totalFrameCounter * 1e3 / (now - totalFrameTime)).toFixed(2) + " FPS, " + +((now - totalFrameTime) / 1e3).toFixed(2) + " seconds)</b>";
    frameTime = now;
    frameCounter = 0;
  }
});
