var arguments_ = [];
var ENVIRONMENT_IS_NODE = typeof process === "object";
var ENVIRONMENT_IS_WEB = typeof window === "object";
var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  print = (function(x) {
    process["stdout"].write(x + "\n");
  });
  printErr = (function(x) {
    process["stderr"].write(x + "\n");
  });
  var nodeFS = require("fs");
  read = (function(filename) {
    var ret = nodeFS["readFileSync"](filename).toString();
    if (!ret && filename[0] != "/") {
      filename = __dirname.split("/").slice(0, -1).join("/") + "/src/" + filename;
      ret = nodeFS["readFileSync"](filename).toString();
    }
    return ret;
  });
  arguments_ = process["argv"].slice(2);
} else if (ENVIRONMENT_IS_SHELL) {
  if (!this["read"]) {
    read = (function(f) {
      snarf(f);
    });
  }
  if (!this["arguments"]) {
    arguments_ = scriptArgs;
  } else {
    arguments_ = arguments;
  }
} else if (ENVIRONMENT_IS_WEB) {
  printErr = (function(x) {
    console.log(x);
  });
  read = (function(url) {
    var xhr = new XMLHttpRequest;
    xhr.open("GET", url, false);
    xhr.send(null);
    return xhr.responseText;
  });
  if (this["arguments"]) {
    arguments_ = arguments;
  }
} else if (ENVIRONMENT_IS_WORKER) {
  load = importScripts;
} else {
  throw "Unknown runtime environment. Where are we?";
}
function globalEval(x) {
  eval.call(null, x);
}
if (typeof load == "undefined" && typeof read != "undefined") {
  load = (function(f) {
    globalEval(read(f));
  });
}
if (typeof printErr === "undefined") {
  printErr = (function() {});
}
if (typeof print === "undefined") {
  print = printErr;
}
try {
  this["Module"] = Module;
} catch (e) {
  this["Module"] = Module = {};
}
if (!Module.arguments) {
  Module.arguments = arguments_;
}
var Runtime = {
  stackSave: (function() {
    return STACKTOP;
  }),
  stackRestore: (function(stackTop) {
    STACKTOP = stackTop;
  }),
  forceAlign: (function(target, quantum) {
    quantum = quantum || 4;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target / quantum) * quantum;
    } else {
      return "Math.ceil((" + target + ")/" + quantum + ")*" + quantum;
    }
  }),
  isNumberType: (function(type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  }),
  isPointerType: function isPointerType(type) {
    return type[type.length - 1] == "*";
  },
  isStructType: function isStructType(type) {
    if (isPointerType(type)) return false;
    if (/^\[\d+\ x\ (.*)\]/.test(type)) return true;
    if (/<?{ [^}]* }>?/.test(type)) return true;
    return type[0] == "%";
  },
  INT_TYPES: {
    "i1": 0,
    "i8": 0,
    "i16": 0,
    "i32": 0,
    "i64": 0
  },
  FLOAT_TYPES: {
    "float": 0,
    "double": 0
  },
  or64: (function(x, y) {
    var l = x | 0 | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  }),
  and64: (function(x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  }),
  xor64: (function(x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  }),
  getNativeTypeSize: (function(type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      "%i1": 1,
      "%i8": 1,
      "%i16": 2,
      "%i32": 4,
      "%i64": 8,
      "%float": 4,
      "%double": 8
    }["%" + type];
    if (!size && type[type.length - 1] == "*") {
      size = Runtime.QUANTUM_SIZE;
    }
    return size;
  }),
  getNativeFieldSize: (function(type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  }),
  dedup: function dedup(items, ident) {
    var seen = {};
    if (ident) {
      return items.filter((function(item) {
        if (seen[item[ident]]) return false;
        seen[item[ident]] = true;
        return true;
      }));
    } else {
      return items.filter((function(item) {
        if (seen[item]) return false;
        seen[item] = true;
        return true;
      }));
    }
  },
  set: function set() {
    var args = typeof arguments[0] === "object" ? arguments[0] : arguments;
    var ret = {};
    for (var i = 0; i < args.length; i++) {
      ret[args[i]] = 0;
    }
    return ret;
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map((function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field);
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw "Unclear type in struct: " + field + ", in " + type.name_ + " :: " + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize);
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr - prev);
      }
      prev = curr;
      return curr;
    }));
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = type.flatFactor != 1;
    return type.flatIndexes;
  },
  generateStructInfo: (function(struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === "undefined" ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (!struct) struct = (typeof Types === "undefined" ? Runtime : Types).structMetadata[typeName.replace(/.*\./, "")];
      if (!struct) return null;
      assert(type.fields.length === struct.length, "Number of named fields must match the type for " + typeName + ". Perhaps due to inheritance, which is not supported yet?");
      alignment = type.flatIndexes;
    } else {
      var type = {
        fields: struct.map((function(item) {
          return item[0];
        }))
      };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach((function(item, i) {
        if (typeof item === "string") {
          ret[item] = alignment[i] + offset;
        } else {
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      }));
    } else {
      struct.forEach((function(item, i) {
        ret[item[1]] = alignment[i];
      }));
    }
    return ret;
  }),
  stackAlloc: function stackAlloc(size) {
    var ret = STACKTOP;
    STACKTOP += size;
    STACKTOP = Math.ceil(STACKTOP / 4) * 4;
    return ret;
  },
  staticAlloc: function staticAlloc(size) {
    var ret = STATICTOP;
    STATICTOP += size;
    STATICTOP = Math.ceil(STATICTOP / 4) * 4;
    if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();
    return ret;
  },
  alignMemory: function alignMemory(size, quantum) {
    var ret = size = Math.ceil(size / (quantum ? quantum : 4)) * (quantum ? quantum : 4);
    return ret;
  },
  QUANTUM_SIZE: 4,
  __dummy__: 0
};
var CorrectionsMonitor = {
  MAX_ALLOWED: 0,
  corrections: 0,
  sigs: {},
  note: (function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort("\n\nToo many corrections!");
    }
  }),
  print: (function() {
    var items = [];
    for (var sig in this.sigs) {
      items.push({
        sig: sig,
        fails: this.sigs[sig][0],
        succeeds: this.sigs[sig][1],
        total: this.sigs[sig][0] + this.sigs[sig][1]
      });
    }
    items.sort((function(x, y) {
      return y.total - x.total;
    }));
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      print(item.sig + " : " + item.total + " hits, %" + Math.ceil(100 * item.fails / item.total) + " failures");
    }
  })
};
var __globalConstructor__ = function globalConstructor() {};
var __THREW__ = false;
var __ATEXIT__ = [];
var ABORT = false;
var undef = 0;
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempDoubleBuffer = new ArrayBuffer(8);
var tempDoubleI32 = new Int32Array(tempDoubleBuffer);
var tempDoubleF64 = new Float64Array(tempDoubleBuffer);
function abort(text) {
  print(text + ":\n" + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}
function assert(condition, text) {
  if (!condition) {
    abort("Assertion failed: " + text);
  }
}
function setValue(ptr, value, type, noSafe) {
  type = type || "i8";
  if (type[type.length - 1] === "*") type = "i32";
  switch (type) {
   case "i1":
    HEAP8[ptr] = value;
    break;
   case "i8":
    HEAP8[ptr] = value;
    break;
   case "i16":
    HEAP16[ptr >> 1] = value;
    break;
   case "i32":
    HEAP32[ptr >> 2] = value;
    break;
   case "i64":
    HEAP32[ptr >> 2] = value[0], HEAP32[ptr + 4 >> 2] = value[1];
    break;
   case "float":
    HEAPF32[ptr >> 2] = value;
    break;
   case "double":
    tempDoubleF64[0] = value, HEAP32[ptr >> 2] = tempDoubleI32[0], HEAP32[ptr + 4 >> 2] = tempDoubleI32[1];
    break;
   default:
    abort("invalid type for setValue: " + type);
  }
}
Module["setValue"] = setValue;
function getValue(ptr, type, noSafe) {
  type = type || "i8";
  if (type[type.length - 1] === "*") type = "i32";
  switch (type) {
   case "i1":
    return HEAP8[ptr];
   case "i8":
    return HEAP8[ptr];
   case "i16":
    return HEAP16[ptr >> 1];
   case "i32":
    return HEAP32[ptr >> 2];
   case "i64":
    return [ HEAPU32[ptr >> 2], HEAPU32[ptr + 4 >> 2] ];
   case "float":
    return HEAPF32[ptr >> 2];
   case "double":
    return tempDoubleI32[0] = HEAP32[ptr >> 2], tempDoubleI32[1] = HEAP32[ptr + 4 >> 2], tempDoubleF64[0];
   default:
    abort("invalid type for setValue: " + type);
  }
  return null;
}
Module["getValue"] = getValue;
var ALLOC_NORMAL = 0;
var ALLOC_STACK = 1;
var ALLOC_STATIC = 2;
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
function allocate(slab, types, allocator) {
  var zeroinit, size;
  if (typeof slab === "number") {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === "string" ? types : null;
  var ret = [ _malloc, Runtime.stackAlloc, Runtime.staticAlloc ][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  var i = 0, type;
  while (i < size) {
    var curr = zeroinit ? 0 : slab[i];
    if (typeof curr === "function") {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == "i64") type = "i32";
    setValue(ret + i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }
  return ret;
}
Module["allocate"] = allocate;
function Pointer_stringify(ptr) {
  var ret = "";
  var i = 0;
  var t;
  var nullByte = String.fromCharCode(0);
  while (1) {
    t = String.fromCharCode(HEAPU8[ptr + i]);
    if (t == nullByte) {
      break;
    } else {}
    ret += t;
    i += 1;
  }
  return ret;
}
Module["Pointer_stringify"] = Pointer_stringify;
function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module["Array_stringify"] = Array_stringify;
var FUNCTION_TABLE;
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return Math.ceil(x / PAGE_SIZE) * PAGE_SIZE;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32;
var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  while (TOTAL_MEMORY <= STATICTOP) {
    TOTAL_MEMORY = alignMemoryPage(TOTAL_MEMORY * 1.25);
  }
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAP8.set(oldHEAP8);
}
var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 52428800;
var FAST_MEMORY = Module["FAST_MEMORY"] || 12582912;
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1))["subarray"] && !!(new Int32Array(1))["set"], "Cannot fallback to non-typed array case: Code is too specialized");
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, "Typed arrays 2 must be run on a little-endian system");
var base = intArrayFromString("(null)");
STATICTOP = base.length;
for (var i = 0; i < base.length; i++) {
  HEAP8[i] = base[i];
}
Module["HEAP"] = HEAP;
Module["HEAP8"] = HEAP8;
Module["HEAP16"] = HEAP16;
Module["HEAP32"] = HEAP32;
Module["HEAPU8"] = HEAPU8;
Module["HEAPU16"] = HEAPU16;
Module["HEAPU32"] = HEAPU32;
Module["HEAPF32"] = HEAPF32;
STACK_ROOT = STACKTOP = alignMemoryPage(10);
var TOTAL_STACK = 1024 * 1024;
STACK_MAX = STACK_ROOT + TOTAL_STACK;
STATICTOP = alignMemoryPage(STACK_MAX);
function __shutdownRuntime__() {
  while (__ATEXIT__.length > 0) {
    var atexit = __ATEXIT__.pop();
    var func = atexit.func;
    if (typeof func === "number") {
      func = FUNCTION_TABLE[func];
    }
    func(atexit.arg === undefined ? null : atexit.arg);
  }
  CorrectionsMonitor.print();
}
function Array_copy(ptr, num) {
  return Array.prototype.slice.call(HEAP8.subarray(ptr, ptr + num));
  return HEAP.slice(ptr, ptr + num);
}
Module["Array_copy"] = Array_copy;
function String_len(ptr) {
  var i = 0;
  while (HEAP8[ptr + i]) i++;
  return i;
}
Module["String_len"] = String_len;
function String_copy(ptr, addZero) {
  var len = String_len(ptr);
  if (addZero) len++;
  var ret = Array_copy(ptr, len);
  if (addZero) ret[len - 1] = 0;
  return ret;
}
Module["String_copy"] = String_copy;
function intArrayFromString(stringy, dontAddNull) {
  var ret = [];
  var t;
  var i = 0;
  while (i < stringy.length) {
    var chr = stringy.charCodeAt(i);
    if (chr > 255) {
      chr &= 255;
    }
    ret.push(chr);
    i = i + 1;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module["intArrayFromString"] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 255) {
      chr &= 255;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join("");
}
Module["intArrayToString"] = intArrayToString;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
  if (value >= half && (bits <= 32 || value > half)) {
    value = -2 * half + value;
  }
  return value;
}
function _h264bsdProcessBlock($data, $qp, $skip, $coeffMap) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $tmp0;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $d1;
  var $d2;
  var $d3;
  var $row;
  var $col;
  var $qpDiv;
  var $ptr;
  $2 = $data;
  $3 = $qp;
  $4 = $skip;
  $5 = $coeffMap;
  $qpDiv = HEAPU8[_qpDiv6 + $3];
  $tmp1 = HEAP32[_levelScale + HEAPU8[_qpMod6 + $3] * 12 >> 2] << $qpDiv;
  $tmp2 = HEAP32[_levelScale + HEAPU8[_qpMod6 + $3] * 12 + 4 >> 2] << $qpDiv;
  $tmp3 = HEAP32[_levelScale + HEAPU8[_qpMod6 + $3] * 12 + 8 >> 2] << $qpDiv;
  if ($4 != 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $47$$39$2 : do {
    if (__label__ == 1) {
      var $44 = HEAP32[$2 >> 2] * $tmp1;
      HEAP32[$2 >> 2] = $44;
    }
  } while (0);
  if (($5 & 65436) != 0) {
    __label__ = 3;
  } else {
    __label__ = 17;
  }
  $51$$325$5 : do {
    if (__label__ == 3) {
      $d1 = HEAP32[$2 + 4 >> 2];
      $d2 = HEAP32[$2 + 56 >> 2];
      $d3 = HEAP32[$2 + 60 >> 2];
      HEAP32[$2 + 4 >> 2] = $d1 * $tmp2;
      HEAP32[$2 + 56 >> 2] = $d2 * $tmp2;
      HEAP32[$2 + 60 >> 2] = $d3 * $tmp3;
      $d1 = HEAP32[$2 + 8 >> 2];
      $d2 = HEAP32[$2 + 20 >> 2];
      $d3 = HEAP32[$2 + 16 >> 2];
      HEAP32[$2 + 16 >> 2] = $d1 * $tmp2;
      HEAP32[$2 + 8 >> 2] = $d2 * $tmp1;
      HEAP32[$2 + 20 >> 2] = $d3 * $tmp3;
      $d1 = HEAP32[$2 + 32 >> 2];
      $d2 = HEAP32[$2 + 12 >> 2];
      $d3 = HEAP32[$2 + 24 >> 2];
      $tmp0 = $d1 * $tmp2;
      HEAP32[$2 + 32 >> 2] = $d2 * $tmp1;
      HEAP32[$2 + 12 >> 2] = $d3 * $tmp2;
      $d1 = HEAP32[$2 + 28 >> 2];
      $d2 = HEAP32[$2 + 48 >> 2];
      $d3 = HEAP32[$2 + 36 >> 2];
      HEAP32[$2 + 24 >> 2] = $d1 * $tmp2;
      HEAP32[$2 + 28 >> 2] = $d2 * $tmp3;
      HEAP32[$2 + 48 >> 2] = $d3 * $tmp2;
      HEAP32[$2 + 36 >> 2] = $tmp0;
      $d1 = HEAP32[$2 + 40 >> 2];
      $d2 = HEAP32[$2 + 44 >> 2];
      $d3 = HEAP32[$2 + 52 >> 2];
      HEAP32[$2 + 52 >> 2] = $d1 * $tmp3;
      HEAP32[$2 + 40 >> 2] = $d2 * $tmp1;
      HEAP32[$2 + 44 >> 2] = $d3 * $tmp2;
      $row = 4;
      $ptr = $2;
      $174$7 : while (1) {
        var $175 = $row;
        var $176 = $175 - 1;
        $row = $176;
        if (!($175 != 0)) {
          __label__ = 7;
          break $174$7;
        }
        $tmp0 = HEAP32[$ptr >> 2] + HEAP32[$ptr + 8 >> 2];
        $tmp1 = HEAP32[$ptr >> 2] - HEAP32[$ptr + 8 >> 2];
        $tmp2 = (HEAP32[$ptr + 4 >> 2] >> 1) - HEAP32[$ptr + 12 >> 2];
        $tmp3 = HEAP32[$ptr + 4 >> 2] + (HEAP32[$ptr + 12 >> 2] >> 1);
        HEAP32[$ptr >> 2] = $tmp0 + $tmp3;
        HEAP32[$ptr + 4 >> 2] = $tmp1 + $tmp2;
        HEAP32[$ptr + 8 >> 2] = $tmp1 - $tmp2;
        HEAP32[$ptr + 12 >> 2] = $tmp0 - $tmp3;
        var $231 = $ptr + 16;
        $ptr = $231;
      }
      $col = 4;
      $233$12 : while (1) {
        var $234 = $col;
        var $235 = $234 - 1;
        $col = $235;
        if (!($234 != 0)) {
          __label__ = 16;
          break $233$12;
        }
        $tmp0 = HEAP32[$2 >> 2] + HEAP32[$2 + 32 >> 2];
        $tmp1 = HEAP32[$2 >> 2] - HEAP32[$2 + 32 >> 2];
        $tmp2 = (HEAP32[$2 + 16 >> 2] >> 1) - HEAP32[$2 + 48 >> 2];
        $tmp3 = HEAP32[$2 + 16 >> 2] + (HEAP32[$2 + 48 >> 2] >> 1);
        HEAP32[$2 >> 2] = $tmp3 + ($tmp0 + 32) >> 6;
        HEAP32[$2 + 16 >> 2] = $tmp2 + ($tmp1 + 32) >> 6;
        HEAP32[$2 + 32 >> 2] = $tmp1 - $tmp2 + 32 >> 6;
        HEAP32[$2 + 48 >> 2] = $tmp0 - $tmp3 + 32 >> 6;
        if (HEAP32[$2 >> 2] + 512 > 1023) {
          __label__ = 13;
          break $233$12;
        }
        if (HEAP32[$2 + 16 >> 2] + 512 > 1023) {
          __label__ = 13;
          break $233$12;
        }
        if (HEAP32[$2 + 32 >> 2] + 512 > 1023) {
          __label__ = 13;
          break $233$12;
        }
        if (HEAP32[$2 + 48 >> 2] + 512 > 1023) {
          __label__ = 13;
          break $233$12;
        }
        var $323 = $2 + 4;
        $2 = $323;
      }
      $324$$319$20 : do {
        if (__label__ == 16) {
          __label__ = 28;
          break $51$$325$5;
        } else if (__label__ == 13) {
          $1 = 1;
          __label__ = 29;
          break $51$$325$5;
        }
      } while (0);
    } else if (__label__ == 17) {
      if (($5 & 98) == 0) {
        __label__ = 18;
      } else {
        __label__ = 21;
      }
      $329$$373$24 : do {
        if (__label__ == 18) {
          $tmp0 = HEAP32[$2 >> 2] + 32 >> 6;
          if ($tmp0 + 512 > 1023) {
            __label__ = 19;
          } else {
            __label__ = 20;
          }
          $338$$339$26 : do {
            if (__label__ == 19) {
              $1 = 1;
              __label__ = 29;
              break $51$$325$5;
            } else if (__label__ == 20) {
              var $340 = $tmp0;
              HEAP32[$2 + 60 >> 2] = $340;
              HEAP32[$2 + 56 >> 2] = $340;
              HEAP32[$2 + 52 >> 2] = $340;
              HEAP32[$2 + 48 >> 2] = $340;
              HEAP32[$2 + 44 >> 2] = $340;
              HEAP32[$2 + 40 >> 2] = $340;
              HEAP32[$2 + 36 >> 2] = $340;
              HEAP32[$2 + 32 >> 2] = $340;
              HEAP32[$2 + 28 >> 2] = $340;
              HEAP32[$2 + 24 >> 2] = $340;
              HEAP32[$2 + 20 >> 2] = $340;
              HEAP32[$2 + 16 >> 2] = $340;
              HEAP32[$2 + 12 >> 2] = $340;
              HEAP32[$2 + 8 >> 2] = $340;
              HEAP32[$2 + 4 >> 2] = $340;
              HEAP32[$2 >> 2] = $340;
            }
          } while (0);
        } else if (__label__ == 21) {
          var $378 = HEAP32[$2 + 4 >> 2] * $tmp2;
          HEAP32[$2 + 4 >> 2] = $378;
          var $385 = HEAP32[$2 + 20 >> 2] * $tmp1;
          HEAP32[$2 + 8 >> 2] = $385;
          var $392 = HEAP32[$2 + 24 >> 2] * $tmp2;
          HEAP32[$2 + 12 >> 2] = $392;
          $tmp0 = HEAP32[$2 >> 2] + HEAP32[$2 + 8 >> 2];
          $tmp1 = HEAP32[$2 >> 2] - HEAP32[$2 + 8 >> 2];
          $tmp2 = (HEAP32[$2 + 4 >> 2] >> 1) - HEAP32[$2 + 12 >> 2];
          $tmp3 = HEAP32[$2 + 4 >> 2] + (HEAP32[$2 + 12 >> 2] >> 1);
          HEAP32[$2 >> 2] = $tmp3 + ($tmp0 + 32) >> 6;
          HEAP32[$2 + 4 >> 2] = $tmp2 + ($tmp1 + 32) >> 6;
          HEAP32[$2 + 8 >> 2] = $tmp1 - $tmp2 + 32 >> 6;
          HEAP32[$2 + 12 >> 2] = $tmp0 - $tmp3 + 32 >> 6;
          var $455 = HEAP32[$2 >> 2];
          HEAP32[$2 + 48 >> 2] = $455;
          HEAP32[$2 + 32 >> 2] = $455;
          HEAP32[$2 + 16 >> 2] = $455;
          var $464 = HEAP32[$2 + 4 >> 2];
          HEAP32[$2 + 52 >> 2] = $464;
          HEAP32[$2 + 36 >> 2] = $464;
          HEAP32[$2 + 20 >> 2] = $464;
          var $473 = HEAP32[$2 + 8 >> 2];
          HEAP32[$2 + 56 >> 2] = $473;
          HEAP32[$2 + 40 >> 2] = $473;
          HEAP32[$2 + 24 >> 2] = $473;
          var $482 = HEAP32[$2 + 12 >> 2];
          HEAP32[$2 + 60 >> 2] = $482;
          HEAP32[$2 + 44 >> 2] = $482;
          HEAP32[$2 + 28 >> 2] = $482;
          if (HEAP32[$2 >> 2] + 512 > 1023) {
            __label__ = 25;
          } else {
            __label__ = 22;
          }
          $512$$494$30 : do {
            if (__label__ == 22) {
              if (HEAP32[$2 + 4 >> 2] + 512 > 1023) {
                __label__ = 25;
                break $512$$494$30;
              }
              if (HEAP32[$2 + 8 >> 2] + 512 > 1023) {
                __label__ = 25;
                break $512$$494$30;
              }
              if (HEAP32[$2 + 12 >> 2] + 512 > 1023) {
                __label__ = 25;
                break $512$$494$30;
              }
              __label__ = 27;
              break $329$$373$24;
            }
          } while (0);
          $1 = 1;
          __label__ = 29;
          break $51$$325$5;
        }
      } while (0);
      __label__ = 28;
      break $51$$325$5;
    }
  } while (0);
  $516$$515$37 : do {
    if (__label__ == 28) {
      $1 = 0;
    }
  } while (0);
  var $517 = $1;
  return $517;
  return null;
}
_h264bsdProcessBlock["X"] = 1;
function _h264bsdCountLeadingZeros($value, $length) {
  var __label__;
  var $1;
  var $2;
  var $zeros;
  var $mask;
  $1 = $value;
  $2 = $length;
  $zeros = 0;
  $mask = 1 << $2 - 1;
  $6$27 : while (1) {
    if ($mask != 0) {
      __label__ = 2;
    } else {
      var $16 = 0;
      __label__ = 3;
    }
    $9$$15$29 : do {
      if (__label__ == 2) {
        var $16 = ($1 & $mask) != 0 ^ 1;
      }
    } while (0);
    var $16;
    if (!$16) {
      __label__ = 5;
      break $6$27;
    }
    var $19 = $zeros + 1;
    $zeros = $19;
    var $21 = $mask >>> 1;
    $mask = $21;
  }
  var $23 = $zeros;
  return $23;
  return null;
}
function _abs($a) {
  var __label__;
  var $1;
  $1 = $a;
  if ($1 < 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $4$$7$64 : do {
    if (__label__ == 1) {
      var $10 = -$1;
    } else if (__label__ == 2) {
      var $10 = $1;
    }
  } while (0);
  var $10;
  return $10;
  return null;
}
function _clip($x, $y, $z) {
  var __label__;
  var $1;
  var $2;
  var $3;
  $1 = $x;
  $2 = $y;
  $3 = $z;
  if ($3 < $1) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $7$$9$69 : do {
    if (__label__ == 1) {
      var $20 = $1;
    } else if (__label__ == 2) {
      if ($3 > $2) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $13$$15$72 : do {
        if (__label__ == 3) {
          var $18 = $2;
        } else if (__label__ == 4) {
          var $18 = $3;
        }
      } while (0);
      var $18;
      var $20 = $18;
    }
  } while (0);
  var $20;
  return $20;
  return null;
}
function _h264bsdProcessLumaDc($data, $qp) {
  var __label__;
  var $1;
  var $2;
  var $tmp0;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $row;
  var $col;
  var $qpMod;
  var $qpDiv;
  var $levScale;
  var $ptr;
  var $tmp;
  $1 = $data;
  $2 = $qp;
  $qpMod = HEAPU8[_qpMod6 + $2];
  $qpDiv = HEAPU8[_qpDiv6 + $2];
  $tmp0 = HEAP32[$1 + 8 >> 2];
  var $16 = HEAP32[$1 + 20 >> 2];
  HEAP32[$1 + 8 >> 2] = $16;
  var $21 = HEAP32[$1 + 16 >> 2];
  HEAP32[$1 + 20 >> 2] = $21;
  HEAP32[$1 + 16 >> 2] = $tmp0;
  $tmp0 = HEAP32[$1 + 32 >> 2];
  var $32 = HEAP32[$1 + 12 >> 2];
  HEAP32[$1 + 32 >> 2] = $32;
  var $37 = HEAP32[$1 + 24 >> 2];
  HEAP32[$1 + 12 >> 2] = $37;
  var $42 = HEAP32[$1 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = $42;
  var $47 = HEAP32[$1 + 48 >> 2];
  HEAP32[$1 + 28 >> 2] = $47;
  var $52 = HEAP32[$1 + 36 >> 2];
  HEAP32[$1 + 48 >> 2] = $52;
  HEAP32[$1 + 36 >> 2] = $tmp0;
  $tmp0 = HEAP32[$1 + 40 >> 2];
  var $63 = HEAP32[$1 + 44 >> 2];
  HEAP32[$1 + 40 >> 2] = $63;
  var $68 = HEAP32[$1 + 52 >> 2];
  HEAP32[$1 + 44 >> 2] = $68;
  HEAP32[$1 + 52 >> 2] = $tmp0;
  $row = 4;
  $ptr = $1;
  $75$2 : while (1) {
    var $76 = $row;
    var $77 = $76 - 1;
    $row = $77;
    if (!($76 != 0)) {
      __label__ = 4;
      break $75$2;
    }
    $tmp0 = HEAP32[$ptr >> 2] + HEAP32[$ptr + 8 >> 2];
    $tmp1 = HEAP32[$ptr >> 2] - HEAP32[$ptr + 8 >> 2];
    $tmp2 = HEAP32[$ptr + 4 >> 2] - HEAP32[$ptr + 12 >> 2];
    $tmp3 = HEAP32[$ptr + 4 >> 2] + HEAP32[$ptr + 12 >> 2];
    HEAP32[$ptr >> 2] = $tmp0 + $tmp3;
    HEAP32[$ptr + 4 >> 2] = $tmp1 + $tmp2;
    HEAP32[$ptr + 8 >> 2] = $tmp1 - $tmp2;
    HEAP32[$ptr + 12 >> 2] = $tmp0 - $tmp3;
    var $130 = $ptr + 16;
    $ptr = $130;
  }
  $levScale = HEAP32[_levelScale + $qpMod * 12 >> 2];
  if ($2 >= 12) {
    __label__ = 5;
  } else {
    __label__ = 10;
  }
  $138$$208$7 : do {
    if (__label__ == 5) {
      var $142 = $levScale << $qpDiv - 2;
      $levScale = $142;
      $col = 4;
      $143$9 : while (1) {
        var $144 = $col;
        var $145 = $144 - 1;
        $col = $145;
        if (!($144 != 0)) {
          __label__ = 9;
          break $143$9;
        }
        $tmp0 = HEAP32[$1 >> 2] + HEAP32[$1 + 32 >> 2];
        $tmp1 = HEAP32[$1 >> 2] - HEAP32[$1 + 32 >> 2];
        $tmp2 = HEAP32[$1 + 16 >> 2] - HEAP32[$1 + 48 >> 2];
        $tmp3 = HEAP32[$1 + 16 >> 2] + HEAP32[$1 + 48 >> 2];
        HEAP32[$1 >> 2] = ($tmp0 + $tmp3) * $levScale;
        HEAP32[$1 + 16 >> 2] = ($tmp1 + $tmp2) * $levScale;
        HEAP32[$1 + 32 >> 2] = ($tmp1 - $tmp2) * $levScale;
        HEAP32[$1 + 48 >> 2] = ($tmp0 - $tmp3) * $levScale;
        var $206 = $1 + 4;
        $1 = $206;
      }
    } else if (__label__ == 10) {
      var $212 = 1 - $qpDiv == 0 ? 1 : 2;
      $tmp = $212;
      $col = 4;
      $213$15 : while (1) {
        var $214 = $col;
        var $215 = $214 - 1;
        $col = $215;
        if (!($214 != 0)) {
          __label__ = 14;
          break $213$15;
        }
        $tmp0 = HEAP32[$1 >> 2] + HEAP32[$1 + 32 >> 2];
        $tmp1 = HEAP32[$1 >> 2] - HEAP32[$1 + 32 >> 2];
        $tmp2 = HEAP32[$1 + 16 >> 2] - HEAP32[$1 + 48 >> 2];
        $tmp3 = HEAP32[$1 + 16 >> 2] + HEAP32[$1 + 48 >> 2];
        HEAP32[$1 >> 2] = ($tmp0 + $tmp3) * $levScale + $tmp >> 2 - $qpDiv;
        HEAP32[$1 + 16 >> 2] = ($tmp1 + $tmp2) * $levScale + $tmp >> 2 - $qpDiv;
        HEAP32[$1 + 32 >> 2] = ($tmp1 - $tmp2) * $levScale + $tmp >> 2 - $qpDiv;
        HEAP32[$1 + 48 >> 2] = ($tmp0 - $tmp3) * $levScale + $tmp >> 2 - $qpDiv;
        var $296 = $1 + 4;
        $1 = $296;
      }
    }
  } while (0);
  return;
  return;
}
_h264bsdProcessLumaDc["X"] = 1;
function _h264bsdProcessChromaDc($data, $qp) {
  var __label__;
  var $1;
  var $2;
  var $tmp0;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $qpDiv;
  var $levScale;
  var $levShift;
  $1 = $data;
  $2 = $qp;
  $qpDiv = HEAPU8[_qpDiv6 + $2];
  $levScale = HEAP32[_levelScale + HEAPU8[_qpMod6 + $2] * 12 >> 2];
  if ($2 >= 6) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $16$$21$22 : do {
    if (__label__ == 1) {
      var $20 = $levScale << $qpDiv - 1;
      $levScale = $20;
      $levShift = 0;
    } else if (__label__ == 2) {
      $levShift = 1;
    }
  } while (0);
  $tmp0 = HEAP32[$1 >> 2] + HEAP32[$1 + 8 >> 2];
  $tmp1 = HEAP32[$1 >> 2] - HEAP32[$1 + 8 >> 2];
  $tmp2 = HEAP32[$1 + 4 >> 2] - HEAP32[$1 + 12 >> 2];
  $tmp3 = HEAP32[$1 + 4 >> 2] + HEAP32[$1 + 12 >> 2];
  HEAP32[$1 >> 2] = ($tmp0 + $tmp3) * $levScale >> $levShift;
  HEAP32[$1 + 4 >> 2] = ($tmp0 - $tmp3) * $levScale >> $levShift;
  HEAP32[$1 + 8 >> 2] = ($tmp1 + $tmp2) * $levScale >> $levShift;
  HEAP32[$1 + 12 >> 2] = ($tmp1 - $tmp2) * $levScale >> $levShift;
  $tmp0 = HEAP32[$1 + 16 >> 2] + HEAP32[$1 + 24 >> 2];
  $tmp1 = HEAP32[$1 + 16 >> 2] - HEAP32[$1 + 24 >> 2];
  $tmp2 = HEAP32[$1 + 20 >> 2] - HEAP32[$1 + 28 >> 2];
  $tmp3 = HEAP32[$1 + 20 >> 2] + HEAP32[$1 + 28 >> 2];
  HEAP32[$1 + 16 >> 2] = ($tmp0 + $tmp3) * $levScale >> $levShift;
  HEAP32[$1 + 20 >> 2] = ($tmp0 - $tmp3) * $levScale >> $levShift;
  HEAP32[$1 + 24 >> 2] = ($tmp1 + $tmp2) * $levScale >> $levShift;
  HEAP32[$1 + 28 >> 2] = ($tmp1 - $tmp2) * $levScale >> $levShift;
  return;
  return;
}
_h264bsdProcessChromaDc["X"] = 1;
function _h264bsdNextMbAddress($pSliceGroupMap, $picSizeInMbs, $currMbAddr) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $i;
  var $sliceGroup;
  var $tmp;
  $1 = $pSliceGroupMap;
  $2 = $picSizeInMbs;
  $3 = $currMbAddr;
  $sliceGroup = HEAP32[$1 + ($3 << 2) >> 2];
  $i = $3 + 1;
  $tmp = HEAP32[$1 + ($i << 2) >> 2];
  $14$52 : while (1) {
    if ($i < $2) {
      __label__ = 2;
    } else {
      var $23 = 0;
      __label__ = 3;
    }
    $18$$22$54 : do {
      if (__label__ == 2) {
        var $23 = $tmp != $sliceGroup;
      }
    } while (0);
    var $23;
    if (!$23) {
      __label__ = 5;
      break $14$52;
    }
    var $26 = $i + 1;
    $i = $26;
    $tmp = HEAP32[$1 + ($i << 2) >> 2];
  }
  if ($i == $2) {
    __label__ = 6;
  } else {
    __label__ = 7;
  }
  $35$$36$59 : do {
    if (__label__ == 6) {
      $i = 0;
    }
  } while (0);
  var $37 = $i;
  return $37;
  return null;
}
_h264bsdNextMbAddress["X"] = 1;
function _h264bsdSetCurrImageMbPointers($image, $mbNum) {
  var $1;
  var $2;
  var $width;
  var $height;
  var $picSize;
  var $row;
  var $col;
  var $tmp;
  $1 = $image;
  $2 = $mbNum;
  $width = HEAP32[$1 + 4 >> 2];
  $height = HEAP32[$1 + 8 >> 2];
  var $11 = Math.floor($2 / $width);
  $row = $11;
  $col = $2 % $width;
  $tmp = $row * $width;
  $picSize = $width * $height;
  var $29 = HEAP32[$1 >> 2] + ($col << 4) + ($tmp << 8);
  HEAP32[$1 + 12 >> 2] = $29;
  var $43 = HEAP32[$1 >> 2] + ($picSize << 8) + ($tmp << 6) + ($col << 3);
  HEAP32[$1 + 16 >> 2] = $43;
  var $51 = HEAP32[$1 + 16 >> 2] + ($picSize << 6);
  HEAP32[$1 + 20 >> 2] = $51;
  return;
  return;
}
_h264bsdSetCurrImageMbPointers["X"] = 1;
function _h264bsdRbspTrailingBits($pStrmData) {
  var __label__;
  var $1;
  var $2;
  var $stuffing;
  var $stuffingLength;
  $2 = $pStrmData;
  $stuffingLength = 8 - HEAP32[$2 + 8 >> 2];
  var $9 = _h264bsdGetBits($2, $stuffingLength);
  $stuffing = $9;
  if ($stuffing == -1) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $12$$13$35 : do {
    if (__label__ == 1) {
      $1 = 1;
    } else if (__label__ == 2) {
      if ($stuffing != HEAP32[_stuffingTable + ($stuffingLength - 1 << 2) >> 2]) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $20$$21$38 : do {
        if (__label__ == 3) {
          $1 = 1;
        } else if (__label__ == 4) {
          $1 = 0;
        }
      } while (0);
    }
  } while (0);
  var $23 = $1;
  return $23;
  return null;
}
function _h264bsdMoreRbspData($pStrmData) {
  var __label__;
  var $1;
  var $2;
  var $bits;
  $2 = $pStrmData;
  $bits = (HEAP32[$2 + 12 >> 2] << 3) - HEAP32[$2 + 16 >> 2];
  if ($bits == 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $13$$14$43 : do {
    if (__label__ == 1) {
      $1 = 0;
    } else if (__label__ == 2) {
      if ($bits > 8) {
        __label__ = 4;
      } else {
        __label__ = 3;
      }
      $27$$17$46 : do {
        if (__label__ == 3) {
          var $19 = _h264bsdShowBits32($2);
          if ($19 >>> 32 - $bits != 1 << $bits - 1) {
            __label__ = 4;
            break $27$$17$46;
          }
          $1 = 0;
          __label__ = 6;
          break $13$$14$43;
        }
      } while (0);
      $1 = 1;
    }
  } while (0);
  var $30 = $1;
  return $30;
  return null;
}
function _h264bsdExtractNalUnit($pByteStream, $len, $pStrmData, $readBytes) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $i;
  var $tmp;
  var $byteCount;
  var $initByteCount;
  var $zeroCount;
  var $byte;
  var $hasEmulation;
  var $invalidStream;
  var $readPtr;
  var $writePtr;
  $2 = $pByteStream;
  $3 = $len;
  $4 = $pStrmData;
  $5 = $readBytes;
  $hasEmulation = 0;
  $invalidStream = 0;
  if ($3 > 3) {
    __label__ = 1;
  } else {
    __label__ = 36;
  }
  $8$$128$2 : do {
    if (__label__ == 1) {
      if (!(HEAPU8[$2] == 0)) {
        __label__ = 36;
        break $8$$128$2;
      }
      if (!(HEAPU8[$2 + 1] == 0)) {
        __label__ = 36;
        break $8$$128$2;
      }
      if (!((HEAPU8[$2 + 2] & 254) == 0)) {
        __label__ = 36;
        break $8$$128$2;
      }
      $byteCount = 2;
      $zeroCount = 2;
      $readPtr = $2 + 2;
      $30$7 : while (1) {
        var $31 = $readPtr;
        var $32 = $31 + 1;
        $readPtr = $32;
        $byte = HEAP8[$31];
        var $35 = $byteCount + 1;
        $byteCount = $35;
        if ($byteCount == $3) {
          __label__ = 6;
          break $30$7;
        }
        if ($byte != 0) {
          __label__ = 9;
        } else {
          __label__ = 8;
        }
        $48$$45$10 : do {
          if (__label__ == 9) {
            if ($byte == 1) {
              __label__ = 10;
            } else {
              __label__ = 12;
            }
            $52$$56$12 : do {
              if (__label__ == 10) {
                if ($zeroCount >= 2) {
                  __label__ = 11;
                  break $30$7;
                }
              }
            } while (0);
            $zeroCount = 0;
          } else if (__label__ == 8) {
            var $47 = $zeroCount + 1;
            $zeroCount = $47;
          }
        } while (0);
      }
      $39$$55$18 : do {
        if (__label__ == 6) {
          HEAP32[$5 >> 2] = $3;
          $1 = 1;
          __label__ = 58;
          break $8$$128$2;
        } else if (__label__ == 11) {
          $initByteCount = $byteCount;
          $zeroCount = 0;
          $61$22 : while (1) {
            var $62 = $readPtr;
            var $63 = $62 + 1;
            $readPtr = $63;
            $byte = HEAP8[$62];
            var $66 = $byteCount + 1;
            $byteCount = $66;
            if ($byte != 0) {
              __label__ = 18;
            } else {
              __label__ = 17;
            }
            $72$$69$24 : do {
              if (__label__ == 17) {
                var $71 = $zeroCount + 1;
                $zeroCount = $71;
              }
            } while (0);
            if (($byte & 255 | 0) == 3) {
              __label__ = 19;
            } else {
              __label__ = 21;
            }
            $76$$80$27 : do {
              if (__label__ == 19) {
                if (!(($zeroCount | 0) == 2)) {
                  __label__ = 21;
                  break $76$$80$27;
                }
                $hasEmulation = 1;
              }
            } while (0);
            if (($byte & 255 | 0) == 1) {
              __label__ = 22;
            } else {
              __label__ = 27;
            }
            $84$$105$31 : do {
              if (__label__ == 22) {
                if ($zeroCount >>> 0 >= 2) {
                  __label__ = 23;
                  break $61$22;
                }
              }
            } while (0);
            if ($byte != 0) {
              __label__ = 28;
            } else {
              __label__ = 31;
            }
            $108$$113$34 : do {
              if (__label__ == 28) {
                if ($zeroCount >= 3) {
                  __label__ = 29;
                } else {
                  __label__ = 30;
                }
                $111$$112$36 : do {
                  if (__label__ == 29) {
                    $invalidStream = 1;
                  }
                } while (0);
                $zeroCount = 0;
              }
            } while (0);
            if ($byteCount == $3) {
              __label__ = 33;
              break $61$22;
            }
          }
          $87$$118$42 : do {
            if (__label__ == 23) {
              HEAP32[$4 + 12 >> 2] = $byteCount - $initByteCount - $zeroCount - 1;
              if ($zeroCount < 3) {
                __label__ = 24;
              } else {
                __label__ = 25;
              }
              $98$$100$44 : do {
                if (__label__ == 24) {
                  var $102 = $zeroCount;
                } else if (__label__ == 25) {
                  var $102 = 3;
                }
              } while (0);
              var $102;
              var $104 = $zeroCount - $102;
              $zeroCount = $104;
            } else if (__label__ == 33) {
              HEAP32[$4 + 12 >> 2] = $byteCount - $initByteCount - $zeroCount;
            }
          } while (0);
          __label__ = 37;
          break $8$$128$2;
        }
      } while (0);
    }
  } while (0);
  $230$$132$$128$50 : do {
    if (__label__ == 36) {
      $initByteCount = 0;
      $zeroCount = 0;
      HEAP32[$4 + 12 >> 2] = $3;
      $hasEmulation = 1;
      __label__ = 37;
      break $230$$132$$128$50;
    }
  } while (0);
  $230$$132$52 : do {
    if (__label__ == 37) {
      HEAP32[$4 >> 2] = $2 + $initByteCount;
      var $140 = HEAP32[$4 >> 2];
      HEAP32[$4 + 4 >> 2] = $140;
      HEAP32[$4 + 8 >> 2] = 0;
      HEAP32[$4 + 16 >> 2] = 0;
      var $153 = HEAP32[$4 + 12 >> 2] + $initByteCount + $zeroCount;
      HEAP32[$5 >> 2] = $153;
      if ($invalidStream != 0) {
        __label__ = 38;
      } else {
        __label__ = 39;
      }
      $157$$158$54 : do {
        if (__label__ == 38) {
          $1 = 1;
        } else if (__label__ == 39) {
          if ($hasEmulation != 0) {
            __label__ = 40;
          } else {
            __label__ = 57;
          }
          $161$$229$57 : do {
            if (__label__ == 40) {
              $tmp = HEAP32[$4 + 12 >> 2];
              $writePtr = HEAP32[$4 >> 2];
              $readPtr = HEAP32[$4 >> 2];
              $zeroCount = 0;
              $i = $tmp;
              $169$59 : while (1) {
                var $170 = $i;
                var $171 = $170 - 1;
                $i = $171;
                if (!($170 != 0)) {
                  __label__ = 56;
                  break $169$59;
                }
                if ($zeroCount == 2) {
                  __label__ = 43;
                } else {
                  __label__ = 48;
                }
                $176$$194$62 : do {
                  if (__label__ == 43) {
                    if (!(HEAPU8[$readPtr] == 3)) {
                      __label__ = 48;
                      break $176$$194$62;
                    }
                    if ($i == 0) {
                      __label__ = 46;
                      break $169$59;
                    }
                    if (HEAPU8[$readPtr + 1] > 3) {
                      __label__ = 46;
                      break $169$59;
                    }
                    var $193 = $readPtr + 1;
                    $readPtr = $193;
                    $zeroCount = 0;
                    __label__ = 55;
                    break $176$$194$62;
                  }
                } while (0);
                $218$$194$67 : do {
                  if (__label__ == 48) {
                    if ($zeroCount == 2) {
                      __label__ = 49;
                    } else {
                      __label__ = 51;
                    }
                    $197$$203$69 : do {
                      if (__label__ == 49) {
                        if (HEAPU8[$readPtr] <= 2) {
                          __label__ = 50;
                          break $169$59;
                        }
                      }
                    } while (0);
                    if (HEAPU8[$readPtr] == 0) {
                      __label__ = 52;
                    } else {
                      __label__ = 53;
                    }
                    $208$$211$72 : do {
                      if (__label__ == 52) {
                        var $210 = $zeroCount + 1;
                        $zeroCount = $210;
                      } else if (__label__ == 53) {
                        $zeroCount = 0;
                      }
                    } while (0);
                    var $213 = $readPtr;
                    var $214 = $213 + 1;
                    $readPtr = $214;
                    var $215 = HEAP8[$213];
                    var $216 = $writePtr;
                    var $217 = $216 + 1;
                    $writePtr = $217;
                    HEAP8[$216] = $215;
                  }
                } while (0);
              }
              $219$$190$$202$77 : do {
                if (__label__ == 56) {
                  var $228 = HEAP32[$4 + 12 >> 2] - ($readPtr - $writePtr);
                  HEAP32[$4 + 12 >> 2] = $228;
                } else if (__label__ == 46) {
                  $1 = 1;
                  __label__ = 58;
                  break $230$$132$52;
                } else if (__label__ == 50) {
                  $1 = 1;
                  __label__ = 58;
                  break $230$$132$52;
                }
              } while (0);
            }
          } while (0);
          $1 = 0;
        }
      } while (0);
    }
  } while (0);
  var $231 = $1;
  return $231;
  return null;
}
_h264bsdExtractNalUnit["X"] = 1;
function _GetDpbSize($picSizeInMbs, $levelIdc) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $tmp;
  var $maxPicSizeInMbs;
  $2 = $picSizeInMbs;
  $3 = $levelIdc;
  var $4 = $3;
  if ($4 == 10) {
    __label__ = 1;
  } else if ($4 == 11) {
    __label__ = 2;
  } else if ($4 == 12) {
    __label__ = 3;
  } else if ($4 == 13) {
    __label__ = 4;
  } else if ($4 == 20) {
    __label__ = 5;
  } else if ($4 == 21) {
    __label__ = 6;
  } else if ($4 == 22) {
    __label__ = 7;
  } else if ($4 == 30) {
    __label__ = 8;
  } else if ($4 == 31) {
    __label__ = 9;
  } else if ($4 == 32) {
    __label__ = 10;
  } else if ($4 == 40) {
    __label__ = 11;
  } else if ($4 == 41) {
    __label__ = 12;
  } else if ($4 == 42) {
    __label__ = 13;
  } else if ($4 == 50) {
    __label__ = 14;
  } else if ($4 == 51) {
    __label__ = 15;
  } else {
    __label__ = 16;
  }
  $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155 : do {
    if (__label__ == 16) {
      $1 = 2147483647;
      __label__ = 23;
      break $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155;
    } else if (__label__ == 1) {
      $tmp = 152064;
      $maxPicSizeInMbs = 99;
      __label__ = 17;
      break $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155;
    } else if (__label__ == 2) {
      $tmp = 345600;
      $maxPicSizeInMbs = 396;
      __label__ = 17;
      break $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155;
    } else if (__label__ == 3) {
      $tmp = 912384;
      $maxPicSizeInMbs = 396;
      __label__ = 17;
      break $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155;
    } else if (__label__ == 4) {
      $tmp = 912384;
      $maxPicSizeInMbs = 396;
      __label__ = 17;
      break $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155;
    } else if (__label__ == 5) {
      $tmp = 912384;
      $maxPicSizeInMbs = 396;
      __label__ = 17;
      break $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155;
    } else if (__label__ == 6) {
      $tmp = 1824768;
      $maxPicSizeInMbs = 792;
      __label__ = 17;
      break $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155;
    } else if (__label__ == 7) {
      $tmp = 3110400;
      $maxPicSizeInMbs = 1620;
      __label__ = 17;
      break $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155;
    } else if (__label__ == 8) {
      $tmp = 3110400;
      $maxPicSizeInMbs = 1620;
      __label__ = 17;
      break $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155;
    } else if (__label__ == 9) {
      $tmp = 6912e3;
      $maxPicSizeInMbs = 3600;
      __label__ = 17;
      break $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155;
    } else if (__label__ == 10) {
      $tmp = 7864320;
      $maxPicSizeInMbs = 5120;
      __label__ = 17;
      break $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155;
    } else if (__label__ == 11) {
      $tmp = 12582912;
      $maxPicSizeInMbs = 8192;
      __label__ = 17;
      break $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155;
    } else if (__label__ == 12) {
      $tmp = 12582912;
      $maxPicSizeInMbs = 8192;
      __label__ = 17;
      break $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155;
    } else if (__label__ == 13) {
      $tmp = 13369344;
      $maxPicSizeInMbs = 8704;
      __label__ = 17;
      break $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155;
    } else if (__label__ == 14) {
      $tmp = 42393600;
      $maxPicSizeInMbs = 22080;
      __label__ = 17;
      break $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155;
    } else if (__label__ == 15) {
      $tmp = 70778880;
      $maxPicSizeInMbs = 36864;
      __label__ = 17;
      break $20$$5$$6$$7$$8$$9$$10$$11$$12$$13$$14$$15$$16$$17$$18$$19$155;
    }
  } while (0);
  $38$$21$172 : do {
    if (__label__ == 17) {
      if ($2 > $maxPicSizeInMbs) {
        __label__ = 18;
      } else {
        __label__ = 19;
      }
      $25$$26$174 : do {
        if (__label__ == 18) {
          $1 = 2147483647;
        } else if (__label__ == 19) {
          var $30 = Math.floor($tmp / ($2 * 384));
          $tmp = $30;
          if ($tmp < 16) {
            __label__ = 20;
          } else {
            __label__ = 21;
          }
          $33$$35$177 : do {
            if (__label__ == 20) {
              var $37 = $tmp;
            } else if (__label__ == 21) {
              var $37 = 16;
            }
          } while (0);
          var $37;
          $1 = $37;
        }
      } while (0);
    }
  } while (0);
  var $39 = $1;
  return $39;
  return null;
}
_GetDpbSize["X"] = 1;
function _h264bsdDecodeSeqParamSet($pStrmData, $pSeqParamSet) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $tmp;
  var $i;
  var $value = __stackBase__;
  $2 = $pStrmData;
  $3 = $pSeqParamSet;
  _H264SwDecMemset($3, 0, 92);
  var $7 = _h264bsdGetBits($2, 8);
  $tmp = $7;
  if ($tmp == -1) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $10$$11$2 : do {
    if (__label__ == 1) {
      $1 = 1;
    } else if (__label__ == 2) {
      if ($tmp != 66) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $14$$15$5 : do {
        if (__label__ == 3) {}
      } while (0);
      HEAP32[$3 >> 2] = $tmp;
      var $20 = _h264bsdGetBits($2, 1);
      $tmp = $20;
      var $22 = _h264bsdGetBits($2, 1);
      $tmp = $22;
      var $24 = _h264bsdGetBits($2, 1);
      $tmp = $24;
      if ($tmp == -1) {
        __label__ = 5;
      } else {
        __label__ = 6;
      }
      $27$$28$8 : do {
        if (__label__ == 5) {
          $1 = 1;
        } else if (__label__ == 6) {
          var $30 = _h264bsdGetBits($2, 5);
          $tmp = $30;
          if ($tmp == -1) {
            __label__ = 7;
          } else {
            __label__ = 8;
          }
          $33$$34$11 : do {
            if (__label__ == 7) {
              $1 = 1;
            } else if (__label__ == 8) {
              var $36 = _h264bsdGetBits($2, 8);
              $tmp = $36;
              if ($tmp == -1) {
                __label__ = 9;
              } else {
                __label__ = 10;
              }
              $39$$40$14 : do {
                if (__label__ == 9) {
                  $1 = 1;
                } else if (__label__ == 10) {
                  HEAP32[$3 + 4 >> 2] = $tmp;
                  var $47 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 8);
                  $tmp = $47;
                  if ($tmp != 0) {
                    __label__ = 11;
                  } else {
                    __label__ = 12;
                  }
                  $50$$52$17 : do {
                    if (__label__ == 11) {
                      $1 = $tmp;
                    } else if (__label__ == 12) {
                      if (HEAPU32[$3 + 8 >> 2] >= 32) {
                        __label__ = 13;
                      } else {
                        __label__ = 14;
                      }
                      $57$$58$20 : do {
                        if (__label__ == 13) {
                          $1 = 1;
                        } else if (__label__ == 14) {
                          var $60 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                          $tmp = $60;
                          if ($tmp != 0) {
                            __label__ = 15;
                          } else {
                            __label__ = 16;
                          }
                          $63$$65$23 : do {
                            if (__label__ == 15) {
                              $1 = $tmp;
                            } else if (__label__ == 16) {
                              if (HEAPU32[$value >> 2] > 12) {
                                __label__ = 17;
                              } else {
                                __label__ = 18;
                              }
                              $68$$69$26 : do {
                                if (__label__ == 17) {
                                  $1 = 1;
                                } else if (__label__ == 18) {
                                  var $72 = 1 << HEAP32[$value >> 2] + 4;
                                  HEAP32[$3 + 12 >> 2] = $72;
                                  var $76 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                                  $tmp = $76;
                                  if ($tmp != 0) {
                                    __label__ = 19;
                                  } else {
                                    __label__ = 20;
                                  }
                                  $79$$81$29 : do {
                                    if (__label__ == 19) {
                                      $1 = $tmp;
                                    } else if (__label__ == 20) {
                                      if (HEAPU32[$value >> 2] > 2) {
                                        __label__ = 21;
                                      } else {
                                        __label__ = 22;
                                      }
                                      $84$$85$32 : do {
                                        if (__label__ == 21) {
                                          $1 = 1;
                                        } else if (__label__ == 22) {
                                          var $86 = HEAP32[$value >> 2];
                                          HEAP32[$3 + 16 >> 2] = $86;
                                          if (HEAP32[$3 + 16 >> 2] == 0) {
                                            __label__ = 23;
                                          } else {
                                            __label__ = 28;
                                          }
                                          $93$$110$35 : do {
                                            if (__label__ == 23) {
                                              var $95 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                                              $tmp = $95;
                                              if ($tmp != 0) {
                                                __label__ = 24;
                                              } else {
                                                __label__ = 25;
                                              }
                                              $98$$100$37 : do {
                                                if (__label__ == 24) {
                                                  $1 = $tmp;
                                                  __label__ = 104;
                                                  break $10$$11$2;
                                                } else if (__label__ == 25) {
                                                  if (HEAPU32[$value >> 2] > 12) {
                                                    __label__ = 26;
                                                  } else {
                                                    __label__ = 27;
                                                  }
                                                  $103$$104$40 : do {
                                                    if (__label__ == 26) {
                                                      $1 = 1;
                                                      __label__ = 104;
                                                      break $10$$11$2;
                                                    } else if (__label__ == 27) {
                                                      var $107 = 1 << HEAP32[$value >> 2] + 4;
                                                      HEAP32[$3 + 20 >> 2] = $107;
                                                    }
                                                  } while (0);
                                                }
                                              } while (0);
                                            } else if (__label__ == 28) {
                                              if (HEAP32[$3 + 16 >> 2] == 1) {
                                                __label__ = 29;
                                              } else {
                                                __label__ = 51;
                                              }
                                              $115$$206$44 : do {
                                                if (__label__ == 29) {
                                                  var $117 = _h264bsdGetBits($2, 1);
                                                  $tmp = $117;
                                                  if ($tmp == -1) {
                                                    __label__ = 30;
                                                  } else {
                                                    __label__ = 31;
                                                  }
                                                  $120$$121$46 : do {
                                                    if (__label__ == 30) {
                                                      $1 = 1;
                                                      __label__ = 104;
                                                      break $10$$11$2;
                                                    } else if (__label__ == 31) {
                                                      var $124 = $tmp == 1 ? 1 : 0;
                                                      HEAP32[$3 + 24 >> 2] = $124;
                                                      var $130 = _h264bsdDecodeExpGolombSigned($2, $3 + 28);
                                                      $tmp = $130;
                                                      if ($tmp != 0) {
                                                        __label__ = 32;
                                                      } else {
                                                        __label__ = 33;
                                                      }
                                                      $133$$135$49 : do {
                                                        if (__label__ == 32) {
                                                          $1 = $tmp;
                                                          __label__ = 104;
                                                          break $10$$11$2;
                                                        } else if (__label__ == 33) {
                                                          var $139 = _h264bsdDecodeExpGolombSigned($2, $3 + 32);
                                                          $tmp = $139;
                                                          if ($tmp != 0) {
                                                            __label__ = 34;
                                                          } else {
                                                            __label__ = 35;
                                                          }
                                                          $142$$144$52 : do {
                                                            if (__label__ == 34) {
                                                              $1 = $tmp;
                                                              __label__ = 104;
                                                              break $10$$11$2;
                                                            } else if (__label__ == 35) {
                                                              var $148 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 36);
                                                              $tmp = $148;
                                                              if ($tmp != 0) {
                                                                __label__ = 36;
                                                              } else {
                                                                __label__ = 37;
                                                              }
                                                              $151$$153$55 : do {
                                                                if (__label__ == 36) {
                                                                  $1 = $tmp;
                                                                  __label__ = 104;
                                                                  break $10$$11$2;
                                                                } else if (__label__ == 37) {
                                                                  if (HEAPU32[$3 + 36 >> 2] > 255) {
                                                                    __label__ = 38;
                                                                  } else {
                                                                    __label__ = 39;
                                                                  }
                                                                  $158$$159$58 : do {
                                                                    if (__label__ == 38) {
                                                                      $1 = 1;
                                                                      __label__ = 104;
                                                                      break $10$$11$2;
                                                                    } else if (__label__ == 39) {
                                                                      if (HEAP32[$3 + 36 >> 2] != 0) {
                                                                        __label__ = 40;
                                                                      } else {
                                                                        __label__ = 49;
                                                                      }
                                                                      $164$$202$61 : do {
                                                                        if (__label__ == 40) {
                                                                          var $168 = HEAP32[$3 + 36 >> 2] << 2;
                                                                          var $169 = _H264SwDecMalloc($168);
                                                                          var $170 = $169;
                                                                          HEAP32[$3 + 40 >> 2] = $170;
                                                                          if (HEAP32[$3 + 40 >> 2] == 0) {
                                                                            __label__ = 41;
                                                                          } else {
                                                                            __label__ = 42;
                                                                          }
                                                                          $177$$178$63 : do {
                                                                            if (__label__ == 41) {
                                                                              $1 = 65535;
                                                                              __label__ = 104;
                                                                              break $10$$11$2;
                                                                            } else if (__label__ == 42) {
                                                                              $i = 0;
                                                                              $179$66 : while (1) {
                                                                                if (!($i < HEAPU32[$3 + 36 >> 2])) {
                                                                                  __label__ = 48;
                                                                                  break $179$66;
                                                                                }
                                                                                var $191 = HEAP32[$3 + 40 >> 2] + ($i << 2);
                                                                                var $192 = _h264bsdDecodeExpGolombSigned($2, $191);
                                                                                $tmp = $192;
                                                                                if ($tmp != 0) {
                                                                                  __label__ = 45;
                                                                                  break $179$66;
                                                                                }
                                                                                var $200 = $i + 1;
                                                                                $i = $200;
                                                                              }
                                                                              $201$$195$71 : do {
                                                                                if (__label__ == 48) {} else if (__label__ == 45) {
                                                                                  $1 = $tmp;
                                                                                  __label__ = 104;
                                                                                  break $10$$11$2;
                                                                                }
                                                                              } while (0);
                                                                            }
                                                                          } while (0);
                                                                        } else if (__label__ == 49) {
                                                                          HEAP32[$3 + 40 >> 2] = 0;
                                                                        }
                                                                      } while (0);
                                                                    }
                                                                  } while (0);
                                                                }
                                                              } while (0);
                                                            }
                                                          } while (0);
                                                        }
                                                      } while (0);
                                                    }
                                                  } while (0);
                                                }
                                              } while (0);
                                            }
                                          } while (0);
                                          var $211 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 44);
                                          $tmp = $211;
                                          if ($tmp != 0) {
                                            __label__ = 53;
                                          } else {
                                            __label__ = 54;
                                          }
                                          $214$$216$78 : do {
                                            if (__label__ == 53) {
                                              $1 = $tmp;
                                            } else if (__label__ == 54) {
                                              if (HEAPU32[$3 + 44 >> 2] > 16) {
                                                __label__ = 55;
                                              } else {
                                                __label__ = 56;
                                              }
                                              $221$$222$81 : do {
                                                if (__label__ == 55) {
                                                  $1 = 1;
                                                } else if (__label__ == 56) {
                                                  var $224 = _h264bsdGetBits($2, 1);
                                                  $tmp = $224;
                                                  if ($tmp == -1) {
                                                    __label__ = 57;
                                                  } else {
                                                    __label__ = 58;
                                                  }
                                                  $227$$228$84 : do {
                                                    if (__label__ == 57) {
                                                      $1 = 1;
                                                    } else if (__label__ == 58) {
                                                      var $231 = $tmp == 1 ? 1 : 0;
                                                      HEAP32[$3 + 48 >> 2] = $231;
                                                      var $235 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                                                      $tmp = $235;
                                                      if ($tmp != 0) {
                                                        __label__ = 59;
                                                      } else {
                                                        __label__ = 60;
                                                      }
                                                      $238$$240$87 : do {
                                                        if (__label__ == 59) {
                                                          $1 = $tmp;
                                                        } else if (__label__ == 60) {
                                                          var $242 = HEAP32[$value >> 2] + 1;
                                                          HEAP32[$3 + 52 >> 2] = $242;
                                                          var $246 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                                                          $tmp = $246;
                                                          if ($tmp != 0) {
                                                            __label__ = 61;
                                                          } else {
                                                            __label__ = 62;
                                                          }
                                                          $249$$251$90 : do {
                                                            if (__label__ == 61) {
                                                              $1 = $tmp;
                                                            } else if (__label__ == 62) {
                                                              var $253 = HEAP32[$value >> 2] + 1;
                                                              HEAP32[$3 + 56 >> 2] = $253;
                                                              var $257 = _h264bsdGetBits($2, 1);
                                                              $tmp = $257;
                                                              if ($tmp == -1) {
                                                                __label__ = 63;
                                                              } else {
                                                                __label__ = 64;
                                                              }
                                                              $260$$261$93 : do {
                                                                if (__label__ == 63) {
                                                                  $1 = 1;
                                                                } else if (__label__ == 64) {
                                                                  if ($tmp != 0) {
                                                                    __label__ = 66;
                                                                  } else {
                                                                    __label__ = 65;
                                                                  }
                                                                  $265$$264$96 : do {
                                                                    if (__label__ == 66) {
                                                                      var $267 = _h264bsdGetBits($2, 1);
                                                                      $tmp = $267;
                                                                      if ($tmp == -1) {
                                                                        __label__ = 67;
                                                                      } else {
                                                                        __label__ = 68;
                                                                      }
                                                                      $270$$271$98 : do {
                                                                        if (__label__ == 67) {
                                                                          $1 = 1;
                                                                        } else if (__label__ == 68) {
                                                                          var $273 = _h264bsdGetBits($2, 1);
                                                                          $tmp = $273;
                                                                          if ($tmp == -1) {
                                                                            __label__ = 69;
                                                                          } else {
                                                                            __label__ = 70;
                                                                          }
                                                                          $276$$277$101 : do {
                                                                            if (__label__ == 69) {
                                                                              $1 = 1;
                                                                            } else if (__label__ == 70) {
                                                                              var $280 = $tmp == 1 ? 1 : 0;
                                                                              HEAP32[$3 + 60 >> 2] = $280;
                                                                              if (HEAP32[$3 + 60 >> 2] != 0) {
                                                                                __label__ = 71;
                                                                              } else {
                                                                                __label__ = 83;
                                                                              }
                                                                              $287$$353$104 : do {
                                                                                if (__label__ == 71) {
                                                                                  var $291 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 64);
                                                                                  $tmp = $291;
                                                                                  if ($tmp != 0) {
                                                                                    __label__ = 72;
                                                                                  } else {
                                                                                    __label__ = 73;
                                                                                  }
                                                                                  $294$$296$106 : do {
                                                                                    if (__label__ == 72) {
                                                                                      $1 = $tmp;
                                                                                      __label__ = 104;
                                                                                      break $10$$11$2;
                                                                                    } else if (__label__ == 73) {
                                                                                      var $300 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 68);
                                                                                      $tmp = $300;
                                                                                      if ($tmp != 0) {
                                                                                        __label__ = 74;
                                                                                      } else {
                                                                                        __label__ = 75;
                                                                                      }
                                                                                      $303$$305$109 : do {
                                                                                        if (__label__ == 74) {
                                                                                          $1 = $tmp;
                                                                                          __label__ = 104;
                                                                                          break $10$$11$2;
                                                                                        } else if (__label__ == 75) {
                                                                                          var $309 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 72);
                                                                                          $tmp = $309;
                                                                                          if ($tmp != 0) {
                                                                                            __label__ = 76;
                                                                                          } else {
                                                                                            __label__ = 77;
                                                                                          }
                                                                                          $312$$314$112 : do {
                                                                                            if (__label__ == 76) {
                                                                                              $1 = $tmp;
                                                                                              __label__ = 104;
                                                                                              break $10$$11$2;
                                                                                            } else if (__label__ == 77) {
                                                                                              var $318 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 76);
                                                                                              $tmp = $318;
                                                                                              if ($tmp != 0) {
                                                                                                __label__ = 78;
                                                                                              } else {
                                                                                                __label__ = 79;
                                                                                              }
                                                                                              $321$$323$115 : do {
                                                                                                if (__label__ == 78) {
                                                                                                  $1 = $tmp;
                                                                                                  __label__ = 104;
                                                                                                  break $10$$11$2;
                                                                                                } else if (__label__ == 79) {
                                                                                                  if (HEAP32[$3 + 64 >> 2] > (HEAP32[$3 + 52 >> 2] << 3) - (HEAP32[$3 + 68 >> 2] + 1)) {
                                                                                                    __label__ = 81;
                                                                                                  } else {
                                                                                                    __label__ = 80;
                                                                                                  }
                                                                                                  $351$$337$118 : do {
                                                                                                    if (__label__ == 80) {
                                                                                                      if (HEAP32[$3 + 72 >> 2] > (HEAP32[$3 + 56 >> 2] << 3) - (HEAP32[$3 + 76 >> 2] + 1)) {
                                                                                                        __label__ = 81;
                                                                                                        break $351$$337$118;
                                                                                                      }
                                                                                                      __label__ = 83;
                                                                                                      break $287$$353$104;
                                                                                                    }
                                                                                                  } while (0);
                                                                                                  $1 = 1;
                                                                                                  __label__ = 104;
                                                                                                  break $10$$11$2;
                                                                                                }
                                                                                              } while (0);
                                                                                            }
                                                                                          } while (0);
                                                                                        }
                                                                                      } while (0);
                                                                                    }
                                                                                  } while (0);
                                                                                }
                                                                              } while (0);
                                                                              $tmp = HEAP32[$3 + 52 >> 2] * HEAP32[$3 + 56 >> 2];
                                                                              var $364 = HEAP32[$3 + 4 >> 2];
                                                                              var $365 = _GetDpbSize($tmp, $364);
                                                                              HEAP32[$value >> 2] = $365;
                                                                              if (HEAP32[$value >> 2] == 2147483647) {
                                                                                __label__ = 85;
                                                                              } else {
                                                                                __label__ = 84;
                                                                              }
                                                                              $374$$368$123 : do {
                                                                                if (__label__ == 84) {
                                                                                  if (HEAPU32[$3 + 44 >> 2] > HEAPU32[$value >> 2]) {
                                                                                    __label__ = 85;
                                                                                    break $374$$368$123;
                                                                                  } else {
                                                                                    __label__ = 86;
                                                                                    break $374$$368$123;
                                                                                  }
                                                                                }
                                                                              } while (0);
                                                                              $374$$378$125 : do {
                                                                                if (__label__ == 85) {
                                                                                  var $377 = HEAP32[$3 + 44 >> 2];
                                                                                  HEAP32[$value >> 2] = $377;
                                                                                }
                                                                              } while (0);
                                                                              var $379 = HEAP32[$value >> 2];
                                                                              HEAP32[$3 + 88 >> 2] = $379;
                                                                              var $383 = _h264bsdGetBits($2, 1);
                                                                              $tmp = $383;
                                                                              if ($tmp == -1) {
                                                                                __label__ = 87;
                                                                              } else {
                                                                                __label__ = 88;
                                                                              }
                                                                              $386$$387$128 : do {
                                                                                if (__label__ == 87) {
                                                                                  $1 = 1;
                                                                                } else if (__label__ == 88) {
                                                                                  var $390 = $tmp == 1 ? 1 : 0;
                                                                                  HEAP32[$3 + 80 >> 2] = $390;
                                                                                  if (HEAP32[$3 + 80 >> 2] != 0) {
                                                                                    __label__ = 89;
                                                                                  } else {
                                                                                    __label__ = 103;
                                                                                  }
                                                                                  $397$$476$131 : do {
                                                                                    if (__label__ == 89) {
                                                                                      var $398 = _H264SwDecMalloc(952);
                                                                                      HEAP32[$3 + 84 >> 2] = $398;
                                                                                      if (HEAP32[$3 + 84 >> 2] == 0) {
                                                                                        __label__ = 90;
                                                                                      } else {
                                                                                        __label__ = 91;
                                                                                      }
                                                                                      $406$$407$133 : do {
                                                                                        if (__label__ == 90) {
                                                                                          $1 = 65535;
                                                                                          __label__ = 104;
                                                                                          break $10$$11$2;
                                                                                        } else if (__label__ == 91) {
                                                                                          var $411 = HEAP32[$3 + 84 >> 2];
                                                                                          var $412 = _h264bsdDecodeVuiParameters($2, $411);
                                                                                          $tmp = $412;
                                                                                          if ($tmp != 0) {
                                                                                            __label__ = 92;
                                                                                          } else {
                                                                                            __label__ = 93;
                                                                                          }
                                                                                          $415$$417$136 : do {
                                                                                            if (__label__ == 92) {
                                                                                              $1 = $tmp;
                                                                                              __label__ = 104;
                                                                                              break $10$$11$2;
                                                                                            } else if (__label__ == 93) {
                                                                                              if (HEAP32[HEAP32[$3 + 84 >> 2] + 920 >> 2] != 0) {
                                                                                                __label__ = 94;
                                                                                              } else {
                                                                                                __label__ = 102;
                                                                                              }
                                                                                              $424$$475$139 : do {
                                                                                                if (__label__ == 94) {
                                                                                                  if (HEAPU32[HEAP32[$3 + 84 >> 2] + 944 >> 2] > HEAPU32[HEAP32[$3 + 84 >> 2] + 948 >> 2]) {
                                                                                                    __label__ = 97;
                                                                                                  } else {
                                                                                                    __label__ = 95;
                                                                                                  }
                                                                                                  $456$$436$141 : do {
                                                                                                    if (__label__ == 95) {
                                                                                                      if (HEAPU32[HEAP32[$3 + 84 >> 2] + 948 >> 2] < HEAPU32[$3 + 44 >> 2]) {
                                                                                                        __label__ = 97;
                                                                                                        break $456$$436$141;
                                                                                                      }
                                                                                                      if (HEAPU32[HEAP32[$3 + 84 >> 2] + 948 >> 2] > HEAPU32[$3 + 88 >> 2]) {
                                                                                                        __label__ = 97;
                                                                                                        break $456$$436$141;
                                                                                                      }
                                                                                                      if (1 > HEAPU32[HEAP32[$3 + 84 >> 2] + 948 >> 2]) {
                                                                                                        __label__ = 99;
                                                                                                      } else {
                                                                                                        __label__ = 100;
                                                                                                      }
                                                                                                      $464$$465$145 : do {
                                                                                                        if (__label__ == 99) {
                                                                                                          var $472 = 1;
                                                                                                        } else if (__label__ == 100) {
                                                                                                          var $472 = HEAP32[HEAP32[$3 + 84 >> 2] + 948 >> 2];
                                                                                                        }
                                                                                                      } while (0);
                                                                                                      var $472;
                                                                                                      HEAP32[$3 + 88 >> 2] = $472;
                                                                                                      __label__ = 102;
                                                                                                      break $424$$475$139;
                                                                                                    }
                                                                                                  } while (0);
                                                                                                  $1 = 1;
                                                                                                  __label__ = 104;
                                                                                                  break $10$$11$2;
                                                                                                }
                                                                                              } while (0);
                                                                                            }
                                                                                          } while (0);
                                                                                        }
                                                                                      } while (0);
                                                                                    }
                                                                                  } while (0);
                                                                                  var $478 = _h264bsdRbspTrailingBits($2);
                                                                                  $tmp = $478;
                                                                                  $1 = 0;
                                                                                }
                                                                              } while (0);
                                                                            }
                                                                          } while (0);
                                                                        }
                                                                      } while (0);
                                                                    } else if (__label__ == 65) {
                                                                      $1 = 1;
                                                                    }
                                                                  } while (0);
                                                                }
                                                              } while (0);
                                                            }
                                                          } while (0);
                                                        }
                                                      } while (0);
                                                    }
                                                  } while (0);
                                                }
                                              } while (0);
                                            }
                                          } while (0);
                                        }
                                      } while (0);
                                    }
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $480 = $1;
  STACKTOP = __stackBase__;
  return $480;
  return null;
}
_h264bsdDecodeSeqParamSet["X"] = 1;
function _h264bsdCompareSeqParamSets($pSps1, $pSps2) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $i;
  $2 = $pSps1;
  $3 = $pSps2;
  if (HEAP32[$2 >> 2] == HEAP32[$3 >> 2]) {
    __label__ = 1;
  } else {
    __label__ = 37;
  }
  $11$$205$2 : do {
    if (__label__ == 1) {
      if (!(HEAP32[$2 + 4 >> 2] == HEAP32[$3 + 4 >> 2])) {
        __label__ = 37;
        break $11$$205$2;
      }
      if (!(HEAP32[$2 + 12 >> 2] == HEAP32[$3 + 12 >> 2])) {
        __label__ = 37;
        break $11$$205$2;
      }
      if (!(HEAP32[$2 + 16 >> 2] == HEAP32[$3 + 16 >> 2])) {
        __label__ = 37;
        break $11$$205$2;
      }
      if (!(HEAP32[$2 + 44 >> 2] == HEAP32[$3 + 44 >> 2])) {
        __label__ = 37;
        break $11$$205$2;
      }
      if (!(HEAP32[$2 + 48 >> 2] == HEAP32[$3 + 48 >> 2])) {
        __label__ = 37;
        break $11$$205$2;
      }
      if (!(HEAP32[$2 + 52 >> 2] == HEAP32[$3 + 52 >> 2])) {
        __label__ = 37;
        break $11$$205$2;
      }
      if (!(HEAP32[$2 + 56 >> 2] == HEAP32[$3 + 56 >> 2])) {
        __label__ = 37;
        break $11$$205$2;
      }
      if (!(HEAP32[$2 + 60 >> 2] == HEAP32[$3 + 60 >> 2])) {
        __label__ = 37;
        break $11$$205$2;
      }
      if (!(HEAP32[$2 + 80 >> 2] == HEAP32[$3 + 80 >> 2])) {
        __label__ = 37;
        break $11$$205$2;
      }
      if (HEAP32[$2 + 16 >> 2] == 0) {
        __label__ = 11;
      } else {
        __label__ = 14;
      }
      $88$$98$13 : do {
        if (__label__ == 11) {
          if (HEAP32[$2 + 20 >> 2] != HEAP32[$3 + 20 >> 2]) {
            __label__ = 12;
          } else {
            __label__ = 13;
          }
          $96$$97$15 : do {
            if (__label__ == 12) {
              $1 = 1;
              __label__ = 38;
              break $11$$205$2;
            } else if (__label__ == 13) {}
          } while (0);
        } else if (__label__ == 14) {
          if (HEAP32[$2 + 16 >> 2] == 1) {
            __label__ = 15;
          } else {
            __label__ = 28;
          }
          $103$$164$19 : do {
            if (__label__ == 15) {
              if (HEAP32[$2 + 24 >> 2] != HEAP32[$3 + 24 >> 2]) {
                __label__ = 19;
              } else {
                __label__ = 16;
              }
              $135$$111$21 : do {
                if (__label__ == 16) {
                  if (HEAP32[$2 + 28 >> 2] != HEAP32[$3 + 28 >> 2]) {
                    __label__ = 19;
                    break $135$$111$21;
                  }
                  if (HEAP32[$2 + 32 >> 2] != HEAP32[$3 + 32 >> 2]) {
                    __label__ = 19;
                    break $135$$111$21;
                  }
                  if (HEAP32[$2 + 36 >> 2] != HEAP32[$3 + 36 >> 2]) {
                    __label__ = 19;
                    break $135$$111$21;
                  }
                  $i = 0;
                  $137$26 : while (1) {
                    if (!($i < HEAPU32[$2 + 36 >> 2])) {
                      __label__ = 26;
                      break $137$26;
                    }
                    if (HEAP32[HEAP32[$2 + 40 >> 2] + ($i << 2) >> 2] != HEAP32[HEAP32[$3 + 40 >> 2] + ($i << 2) >> 2]) {
                      __label__ = 23;
                      break $137$26;
                    }
                    var $161 = $i + 1;
                    $i = $161;
                  }
                  $162$$157$31 : do {
                    if (__label__ == 26) {
                      __label__ = 28;
                      break $103$$164$19;
                    } else if (__label__ == 23) {
                      $1 = 1;
                      __label__ = 38;
                      break $11$$205$2;
                    }
                  } while (0);
                }
              } while (0);
              $1 = 1;
              __label__ = 38;
              break $11$$205$2;
            }
          } while (0);
        }
      } while (0);
      if (HEAP32[$2 + 60 >> 2] != 0) {
        __label__ = 30;
      } else {
        __label__ = 36;
      }
      $170$$204$38 : do {
        if (__label__ == 30) {
          if (HEAP32[$2 + 64 >> 2] != HEAP32[$3 + 64 >> 2]) {
            __label__ = 34;
          } else {
            __label__ = 31;
          }
          $202$$178$40 : do {
            if (__label__ == 31) {
              if (HEAP32[$2 + 68 >> 2] != HEAP32[$3 + 68 >> 2]) {
                __label__ = 34;
                break $202$$178$40;
              }
              if (HEAP32[$2 + 72 >> 2] != HEAP32[$3 + 72 >> 2]) {
                __label__ = 34;
                break $202$$178$40;
              }
              if (HEAP32[$2 + 76 >> 2] != HEAP32[$3 + 76 >> 2]) {
                __label__ = 34;
                break $202$$178$40;
              }
              __label__ = 36;
              break $170$$204$38;
            }
          } while (0);
          $1 = 1;
          __label__ = 38;
          break $11$$205$2;
        }
      } while (0);
      $1 = 0;
      __label__ = 38;
      break $11$$205$2;
    }
  } while (0);
  $206$$205$47 : do {
    if (__label__ == 37) {
      $1 = 1;
    }
  } while (0);
  var $207 = $1;
  return $207;
  return null;
}
_h264bsdCompareSeqParamSets["X"] = 1;
function _h264bsdDecodePicParamSet($pStrmData, $pPicParamSet) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $tmp;
  var $i;
  var $value = __stackBase__;
  var $itmp = __stackBase__ + 4;
  $2 = $pStrmData;
  $3 = $pPicParamSet;
  _H264SwDecMemset($3, 0, 72);
  var $9 = _h264bsdDecodeExpGolombUnsigned($2, $3);
  $tmp = $9;
  if ($tmp != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $12$$14$2 : do {
    if (__label__ == 1) {
      $1 = $tmp;
    } else if (__label__ == 2) {
      if (HEAPU32[$3 >> 2] >= 256) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $19$$20$5 : do {
        if (__label__ == 3) {
          $1 = 1;
        } else if (__label__ == 4) {
          var $24 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 4);
          $tmp = $24;
          if ($tmp != 0) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $27$$29$8 : do {
            if (__label__ == 5) {
              $1 = $tmp;
            } else if (__label__ == 6) {
              if (HEAPU32[$3 + 4 >> 2] >= 32) {
                __label__ = 7;
              } else {
                __label__ = 8;
              }
              $34$$35$11 : do {
                if (__label__ == 7) {
                  $1 = 1;
                } else if (__label__ == 8) {
                  var $37 = _h264bsdGetBits($2, 1);
                  $tmp = $37;
                  if ($tmp != 0) {
                    __label__ = 9;
                  } else {
                    __label__ = 10;
                  }
                  $40$$41$14 : do {
                    if (__label__ == 9) {
                      $1 = 1;
                    } else if (__label__ == 10) {
                      var $43 = _h264bsdGetBits($2, 1);
                      $tmp = $43;
                      if ($tmp == -1) {
                        __label__ = 11;
                      } else {
                        __label__ = 12;
                      }
                      $46$$47$17 : do {
                        if (__label__ == 11) {
                          $1 = 1;
                        } else if (__label__ == 12) {
                          var $50 = $tmp == 1 ? 1 : 0;
                          HEAP32[$3 + 8 >> 2] = $50;
                          var $54 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                          $tmp = $54;
                          if ($tmp != 0) {
                            __label__ = 13;
                          } else {
                            __label__ = 14;
                          }
                          $57$$59$20 : do {
                            if (__label__ == 13) {
                              $1 = $tmp;
                            } else if (__label__ == 14) {
                              var $61 = HEAP32[$value >> 2] + 1;
                              HEAP32[$3 + 12 >> 2] = $61;
                              if (HEAPU32[$3 + 12 >> 2] > 8) {
                                __label__ = 15;
                              } else {
                                __label__ = 16;
                              }
                              $68$$69$23 : do {
                                if (__label__ == 15) {
                                  $1 = 1;
                                } else if (__label__ == 16) {
                                  if (HEAPU32[$3 + 12 >> 2] > 1) {
                                    __label__ = 17;
                                  } else {
                                    __label__ = 68;
                                  }
                                  $74$$317$26 : do {
                                    if (__label__ == 17) {
                                      var $78 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 16);
                                      $tmp = $78;
                                      if ($tmp != 0) {
                                        __label__ = 18;
                                      } else {
                                        __label__ = 19;
                                      }
                                      $81$$83$28 : do {
                                        if (__label__ == 18) {
                                          $1 = $tmp;
                                          __label__ = 102;
                                          break $12$$14$2;
                                        } else if (__label__ == 19) {
                                          if (HEAPU32[$3 + 16 >> 2] > 6) {
                                            __label__ = 20;
                                          } else {
                                            __label__ = 21;
                                          }
                                          $88$$89$31 : do {
                                            if (__label__ == 20) {
                                              $1 = 1;
                                              __label__ = 102;
                                              break $12$$14$2;
                                            } else if (__label__ == 21) {
                                              if (HEAP32[$3 + 16 >> 2] == 0) {
                                                __label__ = 22;
                                              } else {
                                                __label__ = 31;
                                              }
                                              $94$$134$34 : do {
                                                if (__label__ == 22) {
                                                  var $98 = HEAP32[$3 + 12 >> 2] << 2;
                                                  var $99 = _H264SwDecMalloc($98);
                                                  var $100 = $99;
                                                  HEAP32[$3 + 20 >> 2] = $100;
                                                  if (HEAP32[$3 + 20 >> 2] == 0) {
                                                    __label__ = 23;
                                                  } else {
                                                    __label__ = 24;
                                                  }
                                                  $107$$108$36 : do {
                                                    if (__label__ == 23) {
                                                      $1 = 65535;
                                                      __label__ = 102;
                                                      break $12$$14$2;
                                                    } else if (__label__ == 24) {
                                                      $i = 0;
                                                      $109$39 : while (1) {
                                                        if (!($i < HEAPU32[$3 + 12 >> 2])) {
                                                          __label__ = 30;
                                                          break $109$39;
                                                        }
                                                        var $117 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                                                        $tmp = $117;
                                                        if ($tmp != 0) {
                                                          __label__ = 27;
                                                          break $109$39;
                                                        }
                                                        var $124 = HEAP32[$value >> 2] + 1;
                                                        var $129 = HEAP32[$3 + 20 >> 2] + ($i << 2);
                                                        HEAP32[$129 >> 2] = $124;
                                                        var $132 = $i + 1;
                                                        $i = $132;
                                                      }
                                                      $133$$120$44 : do {
                                                        if (__label__ == 30) {} else if (__label__ == 27) {
                                                          $1 = $tmp;
                                                          __label__ = 102;
                                                          break $12$$14$2;
                                                        }
                                                      } while (0);
                                                    }
                                                  } while (0);
                                                } else if (__label__ == 31) {
                                                  if (HEAP32[$3 + 16 >> 2] == 2) {
                                                    __label__ = 32;
                                                  } else {
                                                    __label__ = 44;
                                                  }
                                                  $139$$207$48 : do {
                                                    if (__label__ == 32) {
                                                      var $144 = HEAP32[$3 + 12 >> 2] - 1 << 2;
                                                      var $145 = _H264SwDecMalloc($144);
                                                      var $146 = $145;
                                                      HEAP32[$3 + 24 >> 2] = $146;
                                                      var $153 = HEAP32[$3 + 12 >> 2] - 1 << 2;
                                                      var $154 = _H264SwDecMalloc($153);
                                                      var $155 = $154;
                                                      HEAP32[$3 + 28 >> 2] = $155;
                                                      if (HEAP32[$3 + 24 >> 2] == 0) {
                                                        __label__ = 34;
                                                      } else {
                                                        __label__ = 33;
                                                      }
                                                      $167$$162$50 : do {
                                                        if (__label__ == 33) {
                                                          if (HEAP32[$3 + 28 >> 2] == 0) {
                                                            __label__ = 34;
                                                            break $167$$162$50;
                                                          }
                                                          $i = 0;
                                                          $169$53 : while (1) {
                                                            if (!($i < HEAP32[$3 + 12 >> 2] - 1)) {
                                                              __label__ = 43;
                                                              break $169$53;
                                                            }
                                                            var $178 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                                                            $tmp = $178;
                                                            if ($tmp != 0) {
                                                              __label__ = 38;
                                                              break $169$53;
                                                            }
                                                            var $184 = HEAP32[$value >> 2];
                                                            var $189 = HEAP32[$3 + 24 >> 2] + ($i << 2);
                                                            HEAP32[$189 >> 2] = $184;
                                                            var $191 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                                                            $tmp = $191;
                                                            if ($tmp != 0) {
                                                              __label__ = 40;
                                                              break $169$53;
                                                            }
                                                            var $197 = HEAP32[$value >> 2];
                                                            var $202 = HEAP32[$3 + 28 >> 2] + ($i << 2);
                                                            HEAP32[$202 >> 2] = $197;
                                                            var $205 = $i + 1;
                                                            $i = $205;
                                                          }
                                                          $206$$181$$194$59 : do {
                                                            if (__label__ == 43) {
                                                              __label__ = 66;
                                                              break $139$$207$48;
                                                            } else if (__label__ == 38) {
                                                              $1 = $tmp;
                                                              __label__ = 102;
                                                              break $12$$14$2;
                                                            } else if (__label__ == 40) {
                                                              $1 = $tmp;
                                                              __label__ = 102;
                                                              break $12$$14$2;
                                                            }
                                                          } while (0);
                                                        }
                                                      } while (0);
                                                      $1 = 65535;
                                                      __label__ = 102;
                                                      break $12$$14$2;
                                                    } else if (__label__ == 44) {
                                                      if (HEAP32[$3 + 16 >> 2] == 3) {
                                                        __label__ = 47;
                                                      } else {
                                                        __label__ = 45;
                                                      }
                                                      $222$$212$65 : do {
                                                        if (__label__ == 45) {
                                                          if (HEAP32[$3 + 16 >> 2] == 4) {
                                                            __label__ = 47;
                                                            break $222$$212$65;
                                                          }
                                                          if (HEAP32[$3 + 16 >> 2] == 5) {
                                                            __label__ = 47;
                                                            break $222$$212$65;
                                                          }
                                                          if (HEAP32[$3 + 16 >> 2] == 6) {
                                                            __label__ = 53;
                                                          } else {
                                                            __label__ = 64;
                                                          }
                                                          $250$$313$69 : do {
                                                            if (__label__ == 53) {
                                                              var $252 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                                                              $tmp = $252;
                                                              if ($tmp != 0) {
                                                                __label__ = 54;
                                                              } else {
                                                                __label__ = 55;
                                                              }
                                                              $255$$257$71 : do {
                                                                if (__label__ == 54) {
                                                                  $1 = $tmp;
                                                                  __label__ = 102;
                                                                  break $12$$14$2;
                                                                } else if (__label__ == 55) {
                                                                  var $259 = HEAP32[$value >> 2] + 1;
                                                                  HEAP32[$3 + 40 >> 2] = $259;
                                                                  var $265 = HEAP32[$3 + 40 >> 2] << 2;
                                                                  var $266 = _H264SwDecMalloc($265);
                                                                  var $267 = $266;
                                                                  HEAP32[$3 + 44 >> 2] = $267;
                                                                  if (HEAP32[$3 + 44 >> 2] == 0) {
                                                                    __label__ = 56;
                                                                  } else {
                                                                    __label__ = 57;
                                                                  }
                                                                  $274$$275$74 : do {
                                                                    if (__label__ == 56) {
                                                                      $1 = 65535;
                                                                      __label__ = 102;
                                                                      break $12$$14$2;
                                                                    } else if (__label__ == 57) {
                                                                      $tmp = HEAP32[_CeilLog2NumSliceGroups + (HEAP32[$3 + 12 >> 2] - 1 << 2) >> 2];
                                                                      $i = 0;
                                                                      $282$77 : while (1) {
                                                                        if (!($i < HEAPU32[$3 + 40 >> 2])) {
                                                                          __label__ = 63;
                                                                          break $282$77;
                                                                        }
                                                                        var $291 = _h264bsdGetBits($2, $tmp);
                                                                        var $296 = HEAP32[$3 + 44 >> 2] + ($i << 2);
                                                                        HEAP32[$296 >> 2] = $291;
                                                                        if (HEAPU32[HEAP32[$3 + 44 >> 2] + ($i << 2) >> 2] >= HEAPU32[$3 + 12 >> 2]) {
                                                                          __label__ = 60;
                                                                          break $282$77;
                                                                        }
                                                                        var $311 = $i + 1;
                                                                        $i = $311;
                                                                      }
                                                                      $312$$307$82 : do {
                                                                        if (__label__ == 63) {} else if (__label__ == 60) {
                                                                          $1 = 1;
                                                                          __label__ = 102;
                                                                          break $12$$14$2;
                                                                        }
                                                                      } while (0);
                                                                    }
                                                                  } while (0);
                                                                }
                                                              } while (0);
                                                            }
                                                          } while (0);
                                                          __label__ = 65;
                                                          break $222$$212$65;
                                                        }
                                                      } while (0);
                                                      $222$$314$86 : do {
                                                        if (__label__ == 47) {
                                                          var $224 = _h264bsdGetBits($2, 1);
                                                          $tmp = $224;
                                                          if ($tmp == -1) {
                                                            __label__ = 48;
                                                          } else {
                                                            __label__ = 49;
                                                          }
                                                          $227$$228$88 : do {
                                                            if (__label__ == 48) {
                                                              $1 = 1;
                                                              __label__ = 102;
                                                              break $12$$14$2;
                                                            } else if (__label__ == 49) {
                                                              var $231 = $tmp == 1 ? 1 : 0;
                                                              HEAP32[$3 + 32 >> 2] = $231;
                                                              var $235 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                                                              $tmp = $235;
                                                              if ($tmp != 0) {
                                                                __label__ = 50;
                                                              } else {
                                                                __label__ = 51;
                                                              }
                                                              $238$$240$91 : do {
                                                                if (__label__ == 50) {
                                                                  $1 = $tmp;
                                                                  __label__ = 102;
                                                                  break $12$$14$2;
                                                                } else if (__label__ == 51) {
                                                                  var $242 = HEAP32[$value >> 2] + 1;
                                                                  HEAP32[$3 + 36 >> 2] = $242;
                                                                }
                                                              } while (0);
                                                            }
                                                          } while (0);
                                                        }
                                                      } while (0);
                                                    }
                                                  } while (0);
                                                }
                                              } while (0);
                                            }
                                          } while (0);
                                        }
                                      } while (0);
                                    }
                                  } while (0);
                                  var $319 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                                  $tmp = $319;
                                  if ($tmp != 0) {
                                    __label__ = 69;
                                  } else {
                                    __label__ = 70;
                                  }
                                  $322$$324$98 : do {
                                    if (__label__ == 69) {
                                      $1 = $tmp;
                                    } else if (__label__ == 70) {
                                      if (HEAPU32[$value >> 2] > 31) {
                                        __label__ = 71;
                                      } else {
                                        __label__ = 72;
                                      }
                                      $327$$328$101 : do {
                                        if (__label__ == 71) {
                                          $1 = 1;
                                        } else if (__label__ == 72) {
                                          var $330 = HEAP32[$value >> 2] + 1;
                                          HEAP32[$3 + 48 >> 2] = $330;
                                          var $334 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                                          $tmp = $334;
                                          if ($tmp != 0) {
                                            __label__ = 73;
                                          } else {
                                            __label__ = 74;
                                          }
                                          $337$$339$104 : do {
                                            if (__label__ == 73) {
                                              $1 = $tmp;
                                            } else if (__label__ == 74) {
                                              if (HEAPU32[$value >> 2] > 31) {
                                                __label__ = 75;
                                              } else {
                                                __label__ = 76;
                                              }
                                              $342$$343$107 : do {
                                                if (__label__ == 75) {
                                                  $1 = 1;
                                                } else if (__label__ == 76) {
                                                  var $345 = _h264bsdGetBits($2, 1);
                                                  $tmp = $345;
                                                  if ($tmp != 0) {
                                                    __label__ = 77;
                                                  } else {
                                                    __label__ = 78;
                                                  }
                                                  $348$$349$110 : do {
                                                    if (__label__ == 77) {
                                                      $1 = 1;
                                                    } else if (__label__ == 78) {
                                                      var $351 = _h264bsdGetBits($2, 2);
                                                      $tmp = $351;
                                                      if ($tmp > 2) {
                                                        __label__ = 79;
                                                      } else {
                                                        __label__ = 80;
                                                      }
                                                      $354$$355$113 : do {
                                                        if (__label__ == 79) {
                                                          $1 = 1;
                                                        } else if (__label__ == 80) {
                                                          var $357 = _h264bsdDecodeExpGolombSigned($2, $itmp);
                                                          $tmp = $357;
                                                          if ($tmp != 0) {
                                                            __label__ = 81;
                                                          } else {
                                                            __label__ = 82;
                                                          }
                                                          $360$$362$116 : do {
                                                            if (__label__ == 81) {
                                                              $1 = $tmp;
                                                            } else if (__label__ == 82) {
                                                              if (HEAP32[$itmp >> 2] < -26) {
                                                                __label__ = 84;
                                                              } else {
                                                                __label__ = 83;
                                                              }
                                                              $368$$365$119 : do {
                                                                if (__label__ == 83) {
                                                                  if (HEAP32[$itmp >> 2] > 25) {
                                                                    __label__ = 84;
                                                                    break $368$$365$119;
                                                                  }
                                                                  var $371 = HEAP32[$itmp >> 2] + 26;
                                                                  HEAP32[$3 + 52 >> 2] = $371;
                                                                  var $375 = _h264bsdDecodeExpGolombSigned($2, $itmp);
                                                                  $tmp = $375;
                                                                  if ($tmp != 0) {
                                                                    __label__ = 86;
                                                                  } else {
                                                                    __label__ = 87;
                                                                  }
                                                                  $378$$380$122 : do {
                                                                    if (__label__ == 86) {
                                                                      $1 = $tmp;
                                                                      __label__ = 102;
                                                                      break $12$$14$2;
                                                                    } else if (__label__ == 87) {
                                                                      if (HEAP32[$itmp >> 2] < -26) {
                                                                        __label__ = 89;
                                                                      } else {
                                                                        __label__ = 88;
                                                                      }
                                                                      $386$$383$125 : do {
                                                                        if (__label__ == 88) {
                                                                          if (HEAP32[$itmp >> 2] > 25) {
                                                                            __label__ = 89;
                                                                            break $386$$383$125;
                                                                          }
                                                                          var $389 = _h264bsdDecodeExpGolombSigned($2, $itmp);
                                                                          $tmp = $389;
                                                                          if ($tmp != 0) {
                                                                            __label__ = 91;
                                                                          } else {
                                                                            __label__ = 92;
                                                                          }
                                                                          $392$$394$128 : do {
                                                                            if (__label__ == 91) {
                                                                              $1 = $tmp;
                                                                              __label__ = 102;
                                                                              break $12$$14$2;
                                                                            } else if (__label__ == 92) {
                                                                              if (HEAP32[$itmp >> 2] < -12) {
                                                                                __label__ = 94;
                                                                              } else {
                                                                                __label__ = 93;
                                                                              }
                                                                              $400$$397$131 : do {
                                                                                if (__label__ == 93) {
                                                                                  if (HEAP32[$itmp >> 2] > 12) {
                                                                                    __label__ = 94;
                                                                                    break $400$$397$131;
                                                                                  }
                                                                                  var $402 = HEAP32[$itmp >> 2];
                                                                                  HEAP32[$3 + 56 >> 2] = $402;
                                                                                  var $406 = _h264bsdGetBits($2, 1);
                                                                                  $tmp = $406;
                                                                                  if ($tmp == -1) {
                                                                                    __label__ = 96;
                                                                                  } else {
                                                                                    __label__ = 97;
                                                                                  }
                                                                                  $409$$410$134 : do {
                                                                                    if (__label__ == 96) {
                                                                                      $1 = 1;
                                                                                      __label__ = 102;
                                                                                      break $12$$14$2;
                                                                                    } else if (__label__ == 97) {
                                                                                      var $413 = $tmp == 1 ? 1 : 0;
                                                                                      HEAP32[$3 + 60 >> 2] = $413;
                                                                                      var $417 = _h264bsdGetBits($2, 1);
                                                                                      $tmp = $417;
                                                                                      if ($tmp == -1) {
                                                                                        __label__ = 98;
                                                                                      } else {
                                                                                        __label__ = 99;
                                                                                      }
                                                                                      $420$$421$137 : do {
                                                                                        if (__label__ == 98) {
                                                                                          $1 = 1;
                                                                                          __label__ = 102;
                                                                                          break $12$$14$2;
                                                                                        } else if (__label__ == 99) {
                                                                                          var $424 = $tmp == 1 ? 1 : 0;
                                                                                          HEAP32[$3 + 64 >> 2] = $424;
                                                                                          var $428 = _h264bsdGetBits($2, 1);
                                                                                          $tmp = $428;
                                                                                          if ($tmp == -1) {
                                                                                            __label__ = 100;
                                                                                          } else {
                                                                                            __label__ = 101;
                                                                                          }
                                                                                          $431$$432$140 : do {
                                                                                            if (__label__ == 100) {
                                                                                              $1 = 1;
                                                                                              __label__ = 102;
                                                                                              break $12$$14$2;
                                                                                            } else if (__label__ == 101) {
                                                                                              var $435 = $tmp == 1 ? 1 : 0;
                                                                                              HEAP32[$3 + 68 >> 2] = $435;
                                                                                              var $439 = _h264bsdRbspTrailingBits($2);
                                                                                              $tmp = $439;
                                                                                              $1 = 0;
                                                                                              __label__ = 102;
                                                                                              break $12$$14$2;
                                                                                            }
                                                                                          } while (0);
                                                                                        }
                                                                                      } while (0);
                                                                                    }
                                                                                  } while (0);
                                                                                }
                                                                              } while (0);
                                                                              $1 = 1;
                                                                              __label__ = 102;
                                                                              break $12$$14$2;
                                                                            }
                                                                          } while (0);
                                                                        }
                                                                      } while (0);
                                                                      $1 = 1;
                                                                      __label__ = 102;
                                                                      break $12$$14$2;
                                                                    }
                                                                  } while (0);
                                                                }
                                                              } while (0);
                                                              $1 = 1;
                                                            }
                                                          } while (0);
                                                        }
                                                      } while (0);
                                                    }
                                                  } while (0);
                                                }
                                              } while (0);
                                            }
                                          } while (0);
                                        }
                                      } while (0);
                                    }
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $441 = $1;
  STACKTOP = __stackBase__;
  return $441;
  return null;
}
_h264bsdDecodePicParamSet["X"] = 1;
function _h264bsdDecodeSliceHeader($pStrmData, $pSliceHeader, $pSeqParamSet, $pPicParamSet, $pNalUnit) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $tmp;
  var $i;
  var $value = __stackBase__;
  var $itmp = __stackBase__ + 4;
  var $picSizeInMbs;
  $2 = $pStrmData;
  $3 = $pSliceHeader;
  $4 = $pSeqParamSet;
  $5 = $pPicParamSet;
  $6 = $pNalUnit;
  _H264SwDecMemset($3, 0, 988);
  $picSizeInMbs = HEAP32[$4 + 52 >> 2] * HEAP32[$4 + 56 >> 2];
  var $17 = _h264bsdDecodeExpGolombUnsigned($2, $value);
  $tmp = $17;
  if ($tmp != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $20$$22$2 : do {
    if (__label__ == 1) {
      $1 = $tmp;
    } else if (__label__ == 2) {
      var $23 = HEAP32[$value >> 2];
      HEAP32[$3 >> 2] = $23;
      if (HEAPU32[$value >> 2] >= $picSizeInMbs) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $29$$30$5 : do {
        if (__label__ == 3) {
          $1 = 1;
        } else if (__label__ == 4) {
          var $32 = _h264bsdDecodeExpGolombUnsigned($2, $value);
          $tmp = $32;
          if ($tmp != 0) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $35$$37$8 : do {
            if (__label__ == 5) {
              $1 = $tmp;
            } else if (__label__ == 6) {
              var $38 = HEAP32[$value >> 2];
              HEAP32[$3 + 4 >> 2] = $38;
              if (HEAP32[$3 + 4 >> 2] == 2) {
                __label__ = 13;
              } else {
                __label__ = 7;
              }
              $71$$45$11 : do {
                if (__label__ == 7) {
                  if (HEAP32[$3 + 4 >> 2] == 7) {
                    __label__ = 13;
                    break $71$$45$11;
                  }
                  if (HEAP32[$3 + 4 >> 2] == 0) {
                    __label__ = 10;
                  } else {
                    __label__ = 9;
                  }
                  $60$$55$14 : do {
                    if (__label__ == 9) {
                      if (HEAP32[$3 + 4 >> 2] == 5) {
                        __label__ = 10;
                        break $60$$55$14;
                      } else {
                        __label__ = 12;
                        break $60$$55$14;
                      }
                    }
                  } while (0);
                  $60$$70$16 : do {
                    if (__label__ == 10) {
                      if (HEAP32[$6 >> 2] == 5) {
                        __label__ = 12;
                        break $60$$70$16;
                      }
                      if (HEAP32[$4 + 44 >> 2] != 0) {
                        __label__ = 13;
                        break $71$$45$11;
                      }
                    }
                  } while (0);
                  $1 = 1;
                  __label__ = 125;
                  break $20$$22$2;
                }
              } while (0);
              var $73 = _h264bsdDecodeExpGolombUnsigned($2, $value);
              $tmp = $73;
              if ($tmp != 0) {
                __label__ = 14;
              } else {
                __label__ = 15;
              }
              $76$$78$21 : do {
                if (__label__ == 14) {
                  $1 = $tmp;
                } else if (__label__ == 15) {
                  var $79 = HEAP32[$value >> 2];
                  HEAP32[$3 + 8 >> 2] = $79;
                  if (HEAP32[$3 + 8 >> 2] != HEAP32[$5 >> 2]) {
                    __label__ = 16;
                  } else {
                    __label__ = 17;
                  }
                  $89$$90$24 : do {
                    if (__label__ == 16) {
                      $1 = 1;
                    } else if (__label__ == 17) {
                      $i = 0;
                      $91$27 : while (1) {
                        if (!(HEAPU32[$4 + 12 >> 2] >>> $i != 0)) {
                          __label__ = 20;
                          break $91$27;
                        }
                        var $100 = $i + 1;
                        $i = $100;
                      }
                      var $103 = $i - 1;
                      $i = $103;
                      var $106 = _h264bsdGetBits($2, $i);
                      $tmp = $106;
                      if ($tmp == -1) {
                        __label__ = 21;
                      } else {
                        __label__ = 22;
                      }
                      $109$$110$31 : do {
                        if (__label__ == 21) {
                          $1 = 1;
                        } else if (__label__ == 22) {
                          if (HEAP32[$6 >> 2] == 5) {
                            __label__ = 23;
                          } else {
                            __label__ = 25;
                          }
                          $115$$119$34 : do {
                            if (__label__ == 23) {
                              if (!($tmp != 0)) {
                                __label__ = 25;
                                break $115$$119$34;
                              }
                              $1 = 1;
                              __label__ = 125;
                              break $20$$22$2;
                            }
                          } while (0);
                          HEAP32[$3 + 12 >> 2] = $tmp;
                          if (HEAP32[$6 >> 2] == 5) {
                            __label__ = 26;
                          } else {
                            __label__ = 31;
                          }
                          $127$$142$38 : do {
                            if (__label__ == 26) {
                              var $129 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                              $tmp = $129;
                              if ($tmp != 0) {
                                __label__ = 27;
                              } else {
                                __label__ = 28;
                              }
                              $132$$134$40 : do {
                                if (__label__ == 27) {
                                  $1 = $tmp;
                                  __label__ = 125;
                                  break $20$$22$2;
                                } else if (__label__ == 28) {
                                  var $135 = HEAP32[$value >> 2];
                                  HEAP32[$3 + 16 >> 2] = $135;
                                  if (HEAPU32[$value >> 2] > 65535) {
                                    __label__ = 29;
                                  } else {
                                    __label__ = 30;
                                  }
                                  $140$$141$43 : do {
                                    if (__label__ == 29) {
                                      $1 = 1;
                                      __label__ = 125;
                                      break $20$$22$2;
                                    } else if (__label__ == 30) {}
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                          if (HEAP32[$4 + 16 >> 2] == 0) {
                            __label__ = 32;
                          } else {
                            __label__ = 49;
                          }
                          $147$$229$47 : do {
                            if (__label__ == 32) {
                              $i = 0;
                              $148$49 : while (1) {
                                if (!(HEAPU32[$4 + 20 >> 2] >>> $i != 0)) {
                                  __label__ = 35;
                                  break $148$49;
                                }
                                var $157 = $i + 1;
                                $i = $157;
                              }
                              var $160 = $i - 1;
                              $i = $160;
                              var $163 = _h264bsdGetBits($2, $i);
                              $tmp = $163;
                              if ($tmp == -1) {
                                __label__ = 36;
                              } else {
                                __label__ = 37;
                              }
                              $166$$167$53 : do {
                                if (__label__ == 36) {
                                  $1 = 1;
                                  __label__ = 125;
                                  break $20$$22$2;
                                } else if (__label__ == 37) {
                                  HEAP32[$3 + 20 >> 2] = $tmp;
                                  if (HEAP32[$5 + 8 >> 2] != 0) {
                                    __label__ = 38;
                                  } else {
                                    __label__ = 41;
                                  }
                                  $175$$186$56 : do {
                                    if (__label__ == 38) {
                                      var $177 = _h264bsdDecodeExpGolombSigned($2, $itmp);
                                      $tmp = $177;
                                      if ($tmp != 0) {
                                        __label__ = 39;
                                      } else {
                                        __label__ = 40;
                                      }
                                      $180$$182$58 : do {
                                        if (__label__ == 39) {
                                          $1 = $tmp;
                                          __label__ = 125;
                                          break $20$$22$2;
                                        } else if (__label__ == 40) {
                                          var $183 = HEAP32[$itmp >> 2];
                                          HEAP32[$3 + 24 >> 2] = $183;
                                        }
                                      } while (0);
                                    }
                                  } while (0);
                                  if (HEAP32[$6 >> 2] == 5) {
                                    __label__ = 42;
                                  } else {
                                    __label__ = 48;
                                  }
                                  $191$$228$62 : do {
                                    if (__label__ == 42) {
                                      var $194 = HEAPU32[$3 + 20 >> 2];
                                      var $197 = HEAPU32[$4 + 20 >> 2];
                                      var $198 = Math.floor($197 / 2);
                                      if ($194 > $198) {
                                        __label__ = 47;
                                      } else {
                                        __label__ = 43;
                                      }
                                      $227$$200$64 : do {
                                        if (__label__ == 43) {
                                          if (HEAP32[$3 + 20 >> 2] < HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 24 >> 2]) {
                                            __label__ = 44;
                                          } else {
                                            __label__ = 45;
                                          }
                                          $212$$216$66 : do {
                                            if (__label__ == 44) {
                                              var $225 = HEAP32[$3 + 20 >> 2];
                                            } else if (__label__ == 45) {
                                              var $225 = HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 24 >> 2];
                                            }
                                          } while (0);
                                          var $225;
                                          if (!($225 != 0)) {
                                            __label__ = 48;
                                            break $191$$228$62;
                                          }
                                        }
                                      } while (0);
                                      $1 = 1;
                                      __label__ = 125;
                                      break $20$$22$2;
                                    }
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                          if (HEAP32[$4 + 16 >> 2] == 1) {
                            __label__ = 50;
                          } else {
                            __label__ = 64;
                          }
                          $234$$315$73 : do {
                            if (__label__ == 50) {
                              if (HEAP32[$4 + 24 >> 2] != 0) {
                                __label__ = 64;
                                break $234$$315$73;
                              }
                              var $241 = _h264bsdDecodeExpGolombSigned($2, $itmp);
                              $tmp = $241;
                              if ($tmp != 0) {
                                __label__ = 52;
                              } else {
                                __label__ = 53;
                              }
                              $244$$246$76 : do {
                                if (__label__ == 52) {
                                  $1 = $tmp;
                                  __label__ = 125;
                                  break $20$$22$2;
                                } else if (__label__ == 53) {
                                  var $247 = HEAP32[$itmp >> 2];
                                  HEAP32[$3 + 28 >> 2] = $247;
                                  if (HEAP32[$5 + 8 >> 2] != 0) {
                                    __label__ = 54;
                                  } else {
                                    __label__ = 57;
                                  }
                                  $255$$267$79 : do {
                                    if (__label__ == 54) {
                                      var $257 = _h264bsdDecodeExpGolombSigned($2, $itmp);
                                      $tmp = $257;
                                      if ($tmp != 0) {
                                        __label__ = 55;
                                      } else {
                                        __label__ = 56;
                                      }
                                      $260$$262$81 : do {
                                        if (__label__ == 55) {
                                          $1 = $tmp;
                                          __label__ = 125;
                                          break $20$$22$2;
                                        } else if (__label__ == 56) {
                                          var $263 = HEAP32[$itmp >> 2];
                                          HEAP32[$3 + 32 >> 2] = $263;
                                        }
                                      } while (0);
                                    }
                                  } while (0);
                                  if (HEAP32[$6 >> 2] == 5) {
                                    __label__ = 58;
                                  } else {
                                    __label__ = 63;
                                  }
                                  $272$$314$85 : do {
                                    if (__label__ == 58) {
                                      if (HEAP32[$3 + 28 >> 2] < HEAP32[$3 + 28 >> 2] + HEAP32[$4 + 32 >> 2] + HEAP32[$3 + 32 >> 2]) {
                                        __label__ = 59;
                                      } else {
                                        __label__ = 60;
                                      }
                                      $291$$296$87 : do {
                                        if (__label__ == 59) {
                                          var $311 = HEAP32[$3 + 28 >> 2];
                                        } else if (__label__ == 60) {
                                          var $311 = HEAP32[$3 + 28 >> 2] + HEAP32[$4 + 32 >> 2] + HEAP32[$3 + 32 >> 2];
                                        }
                                      } while (0);
                                      var $311;
                                      if (!($311 != 0)) {
                                        __label__ = 63;
                                        break $272$$314$85;
                                      }
                                      $1 = 1;
                                      __label__ = 125;
                                      break $20$$22$2;
                                    }
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                          if (HEAP32[$5 + 68 >> 2] != 0) {
                            __label__ = 65;
                          } else {
                            __label__ = 70;
                          }
                          $320$$335$94 : do {
                            if (__label__ == 65) {
                              var $322 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                              $tmp = $322;
                              if ($tmp != 0) {
                                __label__ = 66;
                              } else {
                                __label__ = 67;
                              }
                              $325$$327$96 : do {
                                if (__label__ == 66) {
                                  $1 = $tmp;
                                  __label__ = 125;
                                  break $20$$22$2;
                                } else if (__label__ == 67) {
                                  var $328 = HEAP32[$value >> 2];
                                  HEAP32[$3 + 36 >> 2] = $328;
                                  if (HEAPU32[$value >> 2] > 127) {
                                    __label__ = 68;
                                  } else {
                                    __label__ = 69;
                                  }
                                  $333$$334$99 : do {
                                    if (__label__ == 68) {
                                      $1 = 1;
                                      __label__ = 125;
                                      break $20$$22$2;
                                    } else if (__label__ == 69) {}
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                          if (HEAP32[$3 + 4 >> 2] == 0) {
                            __label__ = 72;
                          } else {
                            __label__ = 71;
                          }
                          $345$$340$103 : do {
                            if (__label__ == 71) {
                              if (HEAP32[$3 + 4 >> 2] == 5) {
                                __label__ = 72;
                                break $345$$340$103;
                              } else {
                                __label__ = 84;
                                break $345$$340$103;
                              }
                            }
                          } while (0);
                          $345$$388$105 : do {
                            if (__label__ == 72) {
                              var $347 = _h264bsdGetBits($2, 1);
                              $tmp = $347;
                              if ($tmp == -1) {
                                __label__ = 73;
                              } else {
                                __label__ = 74;
                              }
                              $350$$351$107 : do {
                                if (__label__ == 73) {
                                  $1 = 1;
                                  __label__ = 125;
                                  break $20$$22$2;
                                } else if (__label__ == 74) {
                                  HEAP32[$3 + 40 >> 2] = $tmp;
                                  if (HEAP32[$3 + 40 >> 2] != 0) {
                                    __label__ = 75;
                                  } else {
                                    __label__ = 80;
                                  }
                                  $359$$375$110 : do {
                                    if (__label__ == 75) {
                                      var $361 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                                      $tmp = $361;
                                      if ($tmp != 0) {
                                        __label__ = 76;
                                      } else {
                                        __label__ = 77;
                                      }
                                      $364$$366$112 : do {
                                        if (__label__ == 76) {
                                          $1 = $tmp;
                                          __label__ = 125;
                                          break $20$$22$2;
                                        } else if (__label__ == 77) {
                                          if (HEAPU32[$value >> 2] > 15) {
                                            __label__ = 78;
                                          } else {
                                            __label__ = 79;
                                          }
                                          $369$$370$115 : do {
                                            if (__label__ == 78) {
                                              $1 = 1;
                                              __label__ = 125;
                                              break $20$$22$2;
                                            } else if (__label__ == 79) {
                                              var $372 = HEAP32[$value >> 2] + 1;
                                              HEAP32[$3 + 44 >> 2] = $372;
                                            }
                                          } while (0);
                                        }
                                      } while (0);
                                    } else if (__label__ == 80) {
                                      if (HEAPU32[$5 + 48 >> 2] > 16) {
                                        __label__ = 81;
                                      } else {
                                        __label__ = 82;
                                      }
                                      $380$$381$119 : do {
                                        if (__label__ == 81) {
                                          $1 = 1;
                                          __label__ = 125;
                                          break $20$$22$2;
                                        } else if (__label__ == 82) {
                                          var $384 = HEAP32[$5 + 48 >> 2];
                                          HEAP32[$3 + 44 >> 2] = $384;
                                        }
                                      } while (0);
                                    }
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                          if (HEAP32[$3 + 4 >> 2] == 0) {
                            __label__ = 86;
                          } else {
                            __label__ = 85;
                          }
                          $398$$393$124 : do {
                            if (__label__ == 85) {
                              if (HEAP32[$3 + 4 >> 2] == 5) {
                                __label__ = 86;
                                break $398$$393$124;
                              } else {
                                __label__ = 89;
                                break $398$$393$124;
                              }
                            }
                          } while (0);
                          $398$$414$126 : do {
                            if (__label__ == 86) {
                              var $404 = HEAP32[$3 + 44 >> 2];
                              var $407 = HEAP32[$4 + 12 >> 2];
                              var $408 = _RefPicListReordering($2, $3 + 68, $404, $407);
                              $tmp = $408;
                              if ($tmp != 0) {
                                __label__ = 87;
                              } else {
                                __label__ = 88;
                              }
                              $411$$413$128 : do {
                                if (__label__ == 87) {
                                  $1 = $tmp;
                                  __label__ = 125;
                                  break $20$$22$2;
                                } else if (__label__ == 88) {}
                              } while (0);
                            }
                          } while (0);
                          if (HEAP32[$6 + 4 >> 2] != 0) {
                            __label__ = 90;
                          } else {
                            __label__ = 93;
                          }
                          $419$$435$132 : do {
                            if (__label__ == 90) {
                              var $425 = HEAP32[$6 >> 2];
                              var $428 = HEAP32[$4 + 44 >> 2];
                              var $429 = _DecRefPicMarking($2, $3 + 276, $425, $428);
                              $tmp = $429;
                              if ($tmp != 0) {
                                __label__ = 91;
                              } else {
                                __label__ = 92;
                              }
                              $432$$434$134 : do {
                                if (__label__ == 91) {
                                  $1 = $tmp;
                                  __label__ = 125;
                                  break $20$$22$2;
                                } else if (__label__ == 92) {}
                              } while (0);
                            }
                          } while (0);
                          var $437 = _h264bsdDecodeExpGolombSigned($2, $itmp);
                          $tmp = $437;
                          if ($tmp != 0) {
                            __label__ = 94;
                          } else {
                            __label__ = 95;
                          }
                          $440$$442$138 : do {
                            if (__label__ == 94) {
                              $1 = $tmp;
                            } else if (__label__ == 95) {
                              var $443 = HEAP32[$itmp >> 2];
                              HEAP32[$3 + 48 >> 2] = $443;
                              var $450 = HEAP32[$itmp >> 2] + HEAP32[$5 + 52 >> 2];
                              HEAP32[$itmp >> 2] = $450;
                              if (HEAP32[$itmp >> 2] < 0) {
                                __label__ = 97;
                              } else {
                                __label__ = 96;
                              }
                              $456$$453$141 : do {
                                if (__label__ == 96) {
                                  if (HEAP32[$itmp >> 2] > 51) {
                                    __label__ = 97;
                                    break $456$$453$141;
                                  }
                                  if (HEAP32[$5 + 60 >> 2] != 0) {
                                    __label__ = 99;
                                  } else {
                                    __label__ = 116;
                                  }
                                  $462$$521$144 : do {
                                    if (__label__ == 99) {
                                      var $464 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                                      $tmp = $464;
                                      if ($tmp != 0) {
                                        __label__ = 100;
                                      } else {
                                        __label__ = 101;
                                      }
                                      $467$$469$146 : do {
                                        if (__label__ == 100) {
                                          $1 = $tmp;
                                          __label__ = 125;
                                          break $20$$22$2;
                                        } else if (__label__ == 101) {
                                          var $470 = HEAP32[$value >> 2];
                                          HEAP32[$3 + 52 >> 2] = $470;
                                          if (HEAPU32[$3 + 52 >> 2] > 2) {
                                            __label__ = 102;
                                          } else {
                                            __label__ = 103;
                                          }
                                          $477$$478$149 : do {
                                            if (__label__ == 102) {
                                              $1 = 1;
                                              __label__ = 125;
                                              break $20$$22$2;
                                            } else if (__label__ == 103) {
                                              if (HEAP32[$3 + 52 >> 2] != 1) {
                                                __label__ = 104;
                                              } else {
                                                __label__ = 115;
                                              }
                                              $483$$520$152 : do {
                                                if (__label__ == 104) {
                                                  var $485 = _h264bsdDecodeExpGolombSigned($2, $itmp);
                                                  $tmp = $485;
                                                  if ($tmp != 0) {
                                                    __label__ = 105;
                                                  } else {
                                                    __label__ = 106;
                                                  }
                                                  $488$$490$154 : do {
                                                    if (__label__ == 105) {
                                                      $1 = $tmp;
                                                      __label__ = 125;
                                                      break $20$$22$2;
                                                    } else if (__label__ == 106) {
                                                      if (HEAP32[$itmp >> 2] < -6) {
                                                        __label__ = 108;
                                                      } else {
                                                        __label__ = 107;
                                                      }
                                                      $496$$493$157 : do {
                                                        if (__label__ == 107) {
                                                          if (HEAP32[$itmp >> 2] > 6) {
                                                            __label__ = 108;
                                                            break $496$$493$157;
                                                          }
                                                          var $499 = HEAP32[$itmp >> 2] << 1;
                                                          HEAP32[$3 + 56 >> 2] = $499;
                                                          var $503 = _h264bsdDecodeExpGolombSigned($2, $itmp);
                                                          $tmp = $503;
                                                          if ($tmp != 0) {
                                                            __label__ = 110;
                                                          } else {
                                                            __label__ = 111;
                                                          }
                                                          $506$$508$160 : do {
                                                            if (__label__ == 110) {
                                                              $1 = $tmp;
                                                              __label__ = 125;
                                                              break $20$$22$2;
                                                            } else if (__label__ == 111) {
                                                              if (HEAP32[$itmp >> 2] < -6) {
                                                                __label__ = 113;
                                                              } else {
                                                                __label__ = 112;
                                                              }
                                                              $514$$511$163 : do {
                                                                if (__label__ == 112) {
                                                                  if (HEAP32[$itmp >> 2] > 6) {
                                                                    __label__ = 113;
                                                                    break $514$$511$163;
                                                                  }
                                                                  var $517 = HEAP32[$itmp >> 2] << 1;
                                                                  HEAP32[$3 + 60 >> 2] = $517;
                                                                  __label__ = 115;
                                                                  break $483$$520$152;
                                                                }
                                                              } while (0);
                                                              $1 = 1;
                                                              __label__ = 125;
                                                              break $20$$22$2;
                                                            }
                                                          } while (0);
                                                        }
                                                      } while (0);
                                                      $1 = 1;
                                                      __label__ = 125;
                                                      break $20$$22$2;
                                                    }
                                                  } while (0);
                                                }
                                              } while (0);
                                            }
                                          } while (0);
                                        }
                                      } while (0);
                                    }
                                  } while (0);
                                  if (HEAPU32[$5 + 12 >> 2] > 1) {
                                    __label__ = 117;
                                  } else {
                                    __label__ = 124;
                                  }
                                  $526$$569$170 : do {
                                    if (__label__ == 117) {
                                      if (!(HEAPU32[$5 + 16 >> 2] >= 3)) {
                                        __label__ = 124;
                                        break $526$$569$170;
                                      }
                                      if (!(HEAPU32[$5 + 16 >> 2] <= 5)) {
                                        __label__ = 124;
                                        break $526$$569$170;
                                      }
                                      var $540 = HEAP32[$5 + 36 >> 2];
                                      var $541 = _NumSliceGroupChangeCycleBits($picSizeInMbs, $540);
                                      $tmp = $541;
                                      var $544 = _h264bsdGetBits($2, $tmp);
                                      HEAP32[$value >> 2] = $544;
                                      if (HEAP32[$value >> 2] == -1) {
                                        __label__ = 120;
                                      } else {
                                        __label__ = 121;
                                      }
                                      $547$$548$174 : do {
                                        if (__label__ == 120) {
                                          $1 = 1;
                                          __label__ = 125;
                                          break $20$$22$2;
                                        } else if (__label__ == 121) {
                                          var $549 = HEAP32[$value >> 2];
                                          HEAP32[$3 + 64 >> 2] = $549;
                                          var $557 = $picSizeInMbs + HEAP32[$5 + 36 >> 2] - 1;
                                          var $560 = HEAPU32[$5 + 36 >> 2];
                                          var $561 = Math.floor($557 / $560);
                                          $tmp = $561;
                                          if (HEAPU32[$3 + 64 >> 2] > $tmp) {
                                            __label__ = 122;
                                          } else {
                                            __label__ = 123;
                                          }
                                          $567$$568$177 : do {
                                            if (__label__ == 122) {
                                              $1 = 1;
                                              __label__ = 125;
                                              break $20$$22$2;
                                            } else if (__label__ == 123) {}
                                          } while (0);
                                        }
                                      } while (0);
                                    }
                                  } while (0);
                                  $1 = 0;
                                  __label__ = 125;
                                  break $20$$22$2;
                                }
                              } while (0);
                              $1 = 1;
                            }
                          } while (0);
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $571 = $1;
  STACKTOP = __stackBase__;
  return $571;
  return null;
}
_h264bsdDecodeSliceHeader["X"] = 1;
function _NumSliceGroupChangeCycleBits($picSizeInMbs, $sliceGroupChangeRate) {
  var __label__;
  var $1;
  var $2;
  var $tmp;
  var $numBits;
  var $mask;
  $1 = $picSizeInMbs;
  $2 = $sliceGroupChangeRate;
  if ($1 % $2 != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $7$$12$121 : do {
    if (__label__ == 1) {
      var $10 = Math.floor($1 / $2);
      $tmp = $10 + 2;
    } else if (__label__ == 2) {
      var $15 = Math.floor($1 / $2);
      $tmp = $15 + 1;
    }
  } while (0);
  $numBits = 0;
  $mask = -1;
  $18$125 : while (1) {
    var $22 = $numBits + 1;
    $numBits = $22;
    if (!(($tmp & $mask << $22) != 0)) {
      __label__ = 6;
      break $18$125;
    }
  }
  var $29 = $numBits - 1;
  $numBits = $29;
  if (($tmp & (1 << $numBits) - 1) != 0) {
    __label__ = 7;
  } else {
    __label__ = 8;
  }
  $36$$39$129 : do {
    if (__label__ == 7) {
      var $38 = $numBits + 1;
      $numBits = $38;
    }
  } while (0);
  var $40 = $numBits;
  return $40;
  return null;
}
_NumSliceGroupChangeCycleBits["X"] = 1;
function _RefPicListReordering($pStrmData, $pRefPicListReordering, $numRefIdxActive, $maxPicNum) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $tmp;
  var $value = __stackBase__;
  var $i;
  var $command = __stackBase__ + 4;
  $2 = $pStrmData;
  $3 = $pRefPicListReordering;
  $4 = $numRefIdxActive;
  $5 = $maxPicNum;
  var $7 = _h264bsdGetBits($2, 1);
  $tmp = $7;
  if ($tmp == -1) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $10$$11$2 : do {
    if (__label__ == 1) {
      $1 = 1;
    } else if (__label__ == 2) {
      HEAP32[$3 >> 2] = $tmp;
      if (HEAP32[$3 >> 2] != 0) {
        __label__ = 3;
      } else {
        __label__ = 27;
      }
      $19$$97$5 : do {
        if (__label__ == 3) {
          $i = 0;
          $20$7 : while (1) {
            if ($i > $4) {
              __label__ = 5;
              break $20$7;
            }
            var $27 = _h264bsdDecodeExpGolombUnsigned($2, $command);
            $tmp = $27;
            if ($tmp != 0) {
              __label__ = 7;
              break $20$7;
            }
            if (HEAPU32[$command >> 2] > 3) {
              __label__ = 9;
              break $20$7;
            }
            var $37 = HEAP32[$command >> 2];
            HEAP32[$3 + 4 + $i * 12 >> 2] = $37;
            if (HEAP32[$command >> 2] == 0) {
              __label__ = 12;
            } else {
              __label__ = 11;
            }
            $48$$45$12 : do {
              if (__label__ == 11) {
                if (HEAP32[$command >> 2] == 1) {
                  __label__ = 12;
                  break $48$$45$12;
                }
                if (HEAP32[$command >> 2] == 2) {
                  __label__ = 18;
                } else {
                  __label__ = 21;
                }
                $71$$85$15 : do {
                  if (__label__ == 18) {
                    var $73 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                    $tmp = $73;
                    if ($tmp != 0) {
                      __label__ = 19;
                      break $20$7;
                    }
                    var $79 = HEAP32[$value >> 2];
                    HEAP32[$3 + 4 + $i * 12 + 8 >> 2] = $79;
                  }
                } while (0);
                __label__ = 22;
                break $48$$45$12;
              }
            } while (0);
            $48$$86$19 : do {
              if (__label__ == 12) {
                var $50 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                $tmp = $50;
                if ($tmp != 0) {
                  __label__ = 13;
                  break $20$7;
                }
                if (HEAPU32[$value >> 2] >= $5) {
                  __label__ = 15;
                  break $20$7;
                }
                var $62 = HEAP32[$value >> 2] + 1;
                HEAP32[$3 + 4 + $i * 12 + 4 >> 2] = $62;
              }
            } while (0);
            var $88 = $i + 1;
            $i = $88;
            if (!(HEAP32[$command >> 2] != 3)) {
              __label__ = 24;
              break $20$7;
            }
          }
          $24$$30$$35$$53$$59$$92$$76$25 : do {
            if (__label__ == 5) {
              $1 = 1;
              __label__ = 28;
              break $10$$11$2;
            } else if (__label__ == 7) {
              $1 = $tmp;
              __label__ = 28;
              break $10$$11$2;
            } else if (__label__ == 9) {
              $1 = 1;
              __label__ = 28;
              break $10$$11$2;
            } else if (__label__ == 13) {
              $1 = $tmp;
              __label__ = 28;
              break $10$$11$2;
            } else if (__label__ == 15) {
              $1 = 1;
              __label__ = 28;
              break $10$$11$2;
            } else if (__label__ == 24) {
              if ($i == 1) {
                __label__ = 25;
              } else {
                __label__ = 26;
              }
              $95$$96$32 : do {
                if (__label__ == 25) {
                  $1 = 1;
                  __label__ = 28;
                  break $10$$11$2;
                } else if (__label__ == 26) {}
              } while (0);
            } else if (__label__ == 19) {
              $1 = $tmp;
              __label__ = 28;
              break $10$$11$2;
            }
          } while (0);
        }
      } while (0);
      $1 = 0;
    }
  } while (0);
  var $99 = $1;
  STACKTOP = __stackBase__;
  return $99;
  return null;
}
_RefPicListReordering["X"] = 1;
function _DecRefPicMarking($pStrmData, $pDecRefPicMarking, $nalUnitType, $numRefFrames) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $tmp;
  var $value = __stackBase__;
  var $i;
  var $operation = __stackBase__ + 4;
  var $num4;
  var $num5;
  var $num6;
  var $num1to3;
  $2 = $pStrmData;
  $3 = $pDecRefPicMarking;
  $4 = $nalUnitType;
  $5 = $numRefFrames;
  $num4 = 0;
  $num5 = 0;
  $num6 = 0;
  $num1to3 = 0;
  if ($4 == 5) {
    __label__ = 1;
  } else {
    __label__ = 9;
  }
  $8$$36$39 : do {
    if (__label__ == 1) {
      var $10 = _h264bsdGetBits($2, 1);
      $tmp = $10;
      if ($tmp == -1) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      $13$$14$41 : do {
        if (__label__ == 2) {
          $1 = 1;
          __label__ = 60;
          break $8$$36$39;
        } else if (__label__ == 3) {
          HEAP32[$3 >> 2] = $tmp;
          var $19 = _h264bsdGetBits($2, 1);
          $tmp = $19;
          if ($tmp == -1) {
            __label__ = 4;
          } else {
            __label__ = 5;
          }
          $22$$23$44 : do {
            if (__label__ == 4) {
              $1 = 1;
              __label__ = 60;
              break $8$$36$39;
            } else if (__label__ == 5) {
              HEAP32[$3 + 4 >> 2] = $tmp;
              if ($5 != 0) {
                __label__ = 8;
              } else {
                __label__ = 6;
              }
              $35$$29$47 : do {
                if (__label__ == 6) {
                  if (!(HEAP32[$3 + 4 >> 2] != 0)) {
                    __label__ = 8;
                    break $35$$29$47;
                  }
                  $1 = 1;
                  __label__ = 60;
                  break $8$$36$39;
                }
              } while (0);
              __label__ = 59;
              break $8$$36$39;
            }
          } while (0);
        }
      } while (0);
    } else if (__label__ == 9) {
      var $38 = _h264bsdGetBits($2, 1);
      $tmp = $38;
      if ($tmp == -1) {
        __label__ = 10;
      } else {
        __label__ = 11;
      }
      $41$$42$52 : do {
        if (__label__ == 10) {
          $1 = 1;
          __label__ = 60;
          break $8$$36$39;
        } else if (__label__ == 11) {
          HEAP32[$3 + 8 >> 2] = $tmp;
          if (HEAP32[$3 + 8 >> 2] != 0) {
            __label__ = 12;
          } else {
            __label__ = 58;
          }
          $50$$212$55 : do {
            if (__label__ == 12) {
              $i = 0;
              $51$57 : while (1) {
                if ($i > ($5 << 1) + 2) {
                  __label__ = 14;
                  break $51$57;
                }
                var $60 = _h264bsdDecodeExpGolombUnsigned($2, $operation);
                $tmp = $60;
                if ($tmp != 0) {
                  __label__ = 16;
                  break $51$57;
                }
                if (HEAPU32[$operation >> 2] > 6) {
                  __label__ = 18;
                  break $51$57;
                }
                var $70 = HEAP32[$operation >> 2];
                HEAP32[$3 + 12 + $i * 20 >> 2] = $70;
                if (HEAP32[$operation >> 2] == 1) {
                  __label__ = 21;
                } else {
                  __label__ = 20;
                }
                $81$$78$62 : do {
                  if (__label__ == 20) {
                    if (HEAP32[$operation >> 2] == 3) {
                      __label__ = 21;
                      break $81$$78$62;
                    } else {
                      __label__ = 24;
                      break $81$$78$62;
                    }
                  }
                } while (0);
                $81$$96$64 : do {
                  if (__label__ == 21) {
                    var $83 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                    $tmp = $83;
                    if ($tmp != 0) {
                      __label__ = 22;
                      break $51$57;
                    }
                    var $90 = HEAP32[$value >> 2] + 1;
                    HEAP32[$3 + 12 + $i * 20 + 4 >> 2] = $90;
                  }
                } while (0);
                if (HEAP32[$operation >> 2] == 2) {
                  __label__ = 25;
                } else {
                  __label__ = 28;
                }
                $99$$113$68 : do {
                  if (__label__ == 25) {
                    var $101 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                    $tmp = $101;
                    if ($tmp != 0) {
                      __label__ = 26;
                      break $51$57;
                    }
                    var $107 = HEAP32[$value >> 2];
                    HEAP32[$3 + 12 + $i * 20 + 8 >> 2] = $107;
                  }
                } while (0);
                if (HEAP32[$operation >> 2] == 3) {
                  __label__ = 30;
                } else {
                  __label__ = 29;
                }
                $119$$116$72 : do {
                  if (__label__ == 29) {
                    if (HEAP32[$operation >> 2] == 6) {
                      __label__ = 30;
                      break $119$$116$72;
                    } else {
                      __label__ = 33;
                      break $119$$116$72;
                    }
                  }
                } while (0);
                $119$$133$74 : do {
                  if (__label__ == 30) {
                    var $121 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                    $tmp = $121;
                    if ($tmp != 0) {
                      __label__ = 31;
                      break $51$57;
                    }
                    var $127 = HEAP32[$value >> 2];
                    HEAP32[$3 + 12 + $i * 20 + 12 >> 2] = $127;
                  }
                } while (0);
                if (HEAP32[$operation >> 2] == 4) {
                  __label__ = 34;
                } else {
                  __label__ = 42;
                }
                $136$$168$78 : do {
                  if (__label__ == 34) {
                    var $138 = _h264bsdDecodeExpGolombUnsigned($2, $value);
                    $tmp = $138;
                    if ($tmp != 0) {
                      __label__ = 35;
                      break $51$57;
                    }
                    if (HEAPU32[$value >> 2] > $5) {
                      __label__ = 37;
                      break $51$57;
                    }
                    if (HEAP32[$value >> 2] == 0) {
                      __label__ = 39;
                    } else {
                      __label__ = 40;
                    }
                    $151$$157$82 : do {
                      if (__label__ == 39) {
                        HEAP32[$3 + 12 + $i * 20 + 16 >> 2] = 65535;
                      } else if (__label__ == 40) {
                        var $159 = HEAP32[$value >> 2] - 1;
                        HEAP32[$3 + 12 + $i * 20 + 16 >> 2] = $159;
                      }
                    } while (0);
                    var $167 = $num4 + 1;
                    $num4 = $167;
                  }
                } while (0);
                if (HEAP32[$operation >> 2] == 5) {
                  __label__ = 43;
                } else {
                  __label__ = 44;
                }
                $171$$174$87 : do {
                  if (__label__ == 43) {
                    var $173 = $num5 + 1;
                    $num5 = $173;
                  }
                } while (0);
                if (HEAP32[$operation >> 2] != 0) {
                  __label__ = 45;
                } else {
                  __label__ = 47;
                }
                $177$$183$90 : do {
                  if (__label__ == 45) {
                    if (!(HEAPU32[$operation >> 2] <= 3)) {
                      __label__ = 47;
                      break $177$$183$90;
                    }
                    var $182 = $num1to3 + 1;
                    $num1to3 = $182;
                  }
                } while (0);
                if (HEAP32[$operation >> 2] == 6) {
                  __label__ = 48;
                } else {
                  __label__ = 49;
                }
                $186$$189$94 : do {
                  if (__label__ == 48) {
                    var $188 = $num6 + 1;
                    $num6 = $188;
                  }
                } while (0);
                var $191 = $i + 1;
                $i = $191;
                if (!(HEAP32[$operation >> 2] != 0)) {
                  __label__ = 51;
                  break $51$57;
                }
              }
              $57$$63$$68$$86$$104$$124$$141$$147$$195$98 : do {
                if (__label__ == 14) {
                  $1 = 1;
                  __label__ = 60;
                  break $8$$36$39;
                } else if (__label__ == 16) {
                  $1 = $tmp;
                  __label__ = 60;
                  break $8$$36$39;
                } else if (__label__ == 18) {
                  $1 = 1;
                  __label__ = 60;
                  break $8$$36$39;
                } else if (__label__ == 22) {
                  $1 = $tmp;
                  __label__ = 60;
                  break $8$$36$39;
                } else if (__label__ == 26) {
                  $1 = $tmp;
                  __label__ = 60;
                  break $8$$36$39;
                } else if (__label__ == 31) {
                  $1 = $tmp;
                  __label__ = 60;
                  break $8$$36$39;
                } else if (__label__ == 35) {
                  $1 = $tmp;
                  __label__ = 60;
                  break $8$$36$39;
                } else if (__label__ == 37) {
                  $1 = 1;
                  __label__ = 60;
                  break $8$$36$39;
                } else if (__label__ == 51) {
                  if ($num4 > 1) {
                    __label__ = 56;
                  } else {
                    __label__ = 52;
                  }
                  $210$$198$108 : do {
                    if (__label__ == 52) {
                      if ($num5 > 1) {
                        __label__ = 56;
                        break $210$$198$108;
                      }
                      if ($num6 > 1) {
                        __label__ = 56;
                        break $210$$198$108;
                      }
                      if ($num1to3 != 0) {
                        __label__ = 55;
                      } else {
                        __label__ = 57;
                      }
                      $207$$211$112 : do {
                        if (__label__ == 55) {
                          if ($num5 != 0) {
                            __label__ = 56;
                            break $210$$198$108;
                          }
                        }
                      } while (0);
                      __label__ = 58;
                      break $50$$212$55;
                    }
                  } while (0);
                  $1 = 1;
                  __label__ = 60;
                  break $8$$36$39;
                }
              } while (0);
            }
          } while (0);
          __label__ = 59;
          break $8$$36$39;
        }
      } while (0);
    }
  } while (0);
  $214$$213$117 : do {
    if (__label__ == 59) {
      $1 = 0;
    }
  } while (0);
  var $215 = $1;
  STACKTOP = __stackBase__;
  return $215;
  return null;
}
_DecRefPicMarking["X"] = 1;
function _h264bsdCheckPpsId($pStrmData, $picParamSetId) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $tmp;
  var $value = __stackBase__;
  var $tmpStrmData = __stackBase__ + 4;
  $2 = $pStrmData;
  $3 = $picParamSetId;
  var $6 = $tmpStrmData;
  var src, dest, stop, stop4;
  src = $2;
  dest = $6;
  stop = src + 20;
  if (dest % 4 == src % 4 && 20 > 8) {
    while (src % 4 !== 0 && src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    src >>= 2;
    dest >>= 2;
    stop4 = stop >> 2;
    while (src < stop4) {
      HEAP32[dest++] = HEAP32[src++];
    }
    src <<= 2;
    dest <<= 2;
  }
  while (src < stop) {
    HEAP8[dest++] = HEAP8[src++];
  }
  var $8 = $tmpStrmData;
  var $9 = _h264bsdDecodeExpGolombUnsigned($8, $value);
  $tmp = $9;
  if ($tmp != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $12$$14$133 : do {
    if (__label__ == 1) {
      $1 = $tmp;
    } else if (__label__ == 2) {
      var $15 = $tmpStrmData;
      var $16 = _h264bsdDecodeExpGolombUnsigned($15, $value);
      $tmp = $16;
      if ($tmp != 0) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $19$$21$136 : do {
        if (__label__ == 3) {
          $1 = $tmp;
        } else if (__label__ == 4) {
          var $22 = $tmpStrmData;
          var $23 = _h264bsdDecodeExpGolombUnsigned($22, $value);
          $tmp = $23;
          if ($tmp != 0) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $26$$28$139 : do {
            if (__label__ == 5) {
              $1 = $tmp;
            } else if (__label__ == 6) {
              if (HEAPU32[$value >> 2] >= 256) {
                __label__ = 7;
              } else {
                __label__ = 8;
              }
              $31$$32$142 : do {
                if (__label__ == 7) {
                  $1 = 1;
                } else if (__label__ == 8) {
                  var $33 = HEAP32[$value >> 2];
                  HEAP32[$3 >> 2] = $33;
                  $1 = 0;
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $36 = $1;
  STACKTOP = __stackBase__;
  return $36;
  return null;
}
_h264bsdCheckPpsId["X"] = 1;
function _h264bsdCheckFrameNum($pStrmData, $maxFrameNum, $frameNum) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $tmp;
  var $value = __stackBase__;
  var $i;
  var $tmpStrmData = __stackBase__ + 4;
  $2 = $pStrmData;
  $3 = $maxFrameNum;
  $4 = $frameNum;
  var $7 = $tmpStrmData;
  var src, dest, stop, stop4;
  src = $2;
  dest = $7;
  stop = src + 20;
  if (dest % 4 == src % 4 && 20 > 8) {
    while (src % 4 !== 0 && src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    src >>= 2;
    dest >>= 2;
    stop4 = stop >> 2;
    while (src < stop4) {
      HEAP32[dest++] = HEAP32[src++];
    }
    src <<= 2;
    dest <<= 2;
  }
  while (src < stop) {
    HEAP8[dest++] = HEAP8[src++];
  }
  var $9 = $tmpStrmData;
  var $10 = _h264bsdDecodeExpGolombUnsigned($9, $value);
  $tmp = $10;
  if ($tmp != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $13$$15$147 : do {
    if (__label__ == 1) {
      $1 = $tmp;
    } else if (__label__ == 2) {
      var $16 = $tmpStrmData;
      var $17 = _h264bsdDecodeExpGolombUnsigned($16, $value);
      $tmp = $17;
      if ($tmp != 0) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $20$$22$150 : do {
        if (__label__ == 3) {
          $1 = $tmp;
        } else if (__label__ == 4) {
          var $23 = $tmpStrmData;
          var $24 = _h264bsdDecodeExpGolombUnsigned($23, $value);
          $tmp = $24;
          if ($tmp != 0) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $27$$29$153 : do {
            if (__label__ == 5) {
              $1 = $tmp;
            } else if (__label__ == 6) {
              $i = 0;
              $30$156 : while (1) {
                if (!($3 >>> $i != 0)) {
                  __label__ = 9;
                  break $30$156;
                }
                var $37 = $i + 1;
                $i = $37;
              }
              var $40 = $i - 1;
              $i = $40;
              var $41 = $tmpStrmData;
              var $43 = _h264bsdGetBits($41, $i);
              $tmp = $43;
              if ($tmp == -1) {
                __label__ = 10;
              } else {
                __label__ = 11;
              }
              $46$$47$160 : do {
                if (__label__ == 10) {
                  $1 = 1;
                } else if (__label__ == 11) {
                  HEAP32[$4 >> 2] = $tmp;
                  $1 = 0;
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $51 = $1;
  STACKTOP = __stackBase__;
  return $51;
  return null;
}
_h264bsdCheckFrameNum["X"] = 1;
function _h264bsdCheckIdrPicId($pStrmData, $maxFrameNum, $nalUnitType, $idrPicId) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $tmp;
  var $value = __stackBase__;
  var $i;
  var $tmpStrmData = __stackBase__ + 4;
  $2 = $pStrmData;
  $3 = $maxFrameNum;
  $4 = $nalUnitType;
  $5 = $idrPicId;
  if ($4 != 5) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $8$$9$165 : do {
    if (__label__ == 1) {
      $1 = 1;
    } else if (__label__ == 2) {
      var $12 = $tmpStrmData;
      var src, dest, stop, stop4;
      src = $2;
      dest = $12;
      stop = src + 20;
      if (dest % 4 == src % 4 && 20 > 8) {
        while (src % 4 !== 0 && src < stop) {
          HEAP8[dest++] = HEAP8[src++];
        }
        src >>= 2;
        dest >>= 2;
        stop4 = stop >> 2;
        while (src < stop4) {
          HEAP32[dest++] = HEAP32[src++];
        }
        src <<= 2;
        dest <<= 2;
      }
      while (src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
      var $14 = $tmpStrmData;
      var $15 = _h264bsdDecodeExpGolombUnsigned($14, $value);
      $tmp = $15;
      if ($tmp != 0) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $18$$20$168 : do {
        if (__label__ == 3) {
          $1 = $tmp;
        } else if (__label__ == 4) {
          var $21 = $tmpStrmData;
          var $22 = _h264bsdDecodeExpGolombUnsigned($21, $value);
          $tmp = $22;
          if ($tmp != 0) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $25$$27$171 : do {
            if (__label__ == 5) {
              $1 = $tmp;
            } else if (__label__ == 6) {
              var $28 = $tmpStrmData;
              var $29 = _h264bsdDecodeExpGolombUnsigned($28, $value);
              $tmp = $29;
              if ($tmp != 0) {
                __label__ = 7;
              } else {
                __label__ = 8;
              }
              $32$$34$174 : do {
                if (__label__ == 7) {
                  $1 = $tmp;
                } else if (__label__ == 8) {
                  $i = 0;
                  $35$177 : while (1) {
                    if (!($3 >>> $i != 0)) {
                      __label__ = 11;
                      break $35$177;
                    }
                    var $42 = $i + 1;
                    $i = $42;
                  }
                  var $45 = $i - 1;
                  $i = $45;
                  var $46 = $tmpStrmData;
                  var $48 = _h264bsdGetBits($46, $i);
                  $tmp = $48;
                  if ($tmp == -1) {
                    __label__ = 12;
                  } else {
                    __label__ = 13;
                  }
                  $51$$52$181 : do {
                    if (__label__ == 12) {
                      $1 = 1;
                    } else if (__label__ == 13) {
                      var $53 = $tmpStrmData;
                      var $55 = _h264bsdDecodeExpGolombUnsigned($53, $5);
                      $tmp = $55;
                      if ($tmp != 0) {
                        __label__ = 14;
                      } else {
                        __label__ = 15;
                      }
                      $58$$60$184 : do {
                        if (__label__ == 14) {
                          $1 = $tmp;
                        } else if (__label__ == 15) {
                          $1 = 0;
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $62 = $1;
  STACKTOP = __stackBase__;
  return $62;
  return null;
}
_h264bsdCheckIdrPicId["X"] = 1;
function _h264bsdCheckPicOrderCntLsb($pStrmData, $pSeqParamSet, $nalUnitType, $picOrderCntLsb) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $tmp;
  var $value = __stackBase__;
  var $i;
  var $tmpStrmData = __stackBase__ + 4;
  $2 = $pStrmData;
  $3 = $pSeqParamSet;
  $4 = $nalUnitType;
  $5 = $picOrderCntLsb;
  var $8 = $tmpStrmData;
  var src, dest, stop, stop4;
  src = $2;
  dest = $8;
  stop = src + 20;
  if (dest % 4 == src % 4 && 20 > 8) {
    while (src % 4 !== 0 && src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    src >>= 2;
    dest >>= 2;
    stop4 = stop >> 2;
    while (src < stop4) {
      HEAP32[dest++] = HEAP32[src++];
    }
    src <<= 2;
    dest <<= 2;
  }
  while (src < stop) {
    HEAP8[dest++] = HEAP8[src++];
  }
  var $10 = $tmpStrmData;
  var $11 = _h264bsdDecodeExpGolombUnsigned($10, $value);
  $tmp = $11;
  if ($tmp != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $14$$16$2 : do {
    if (__label__ == 1) {
      $1 = $tmp;
    } else if (__label__ == 2) {
      var $17 = $tmpStrmData;
      var $18 = _h264bsdDecodeExpGolombUnsigned($17, $value);
      $tmp = $18;
      if ($tmp != 0) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $21$$23$5 : do {
        if (__label__ == 3) {
          $1 = $tmp;
        } else if (__label__ == 4) {
          var $24 = $tmpStrmData;
          var $25 = _h264bsdDecodeExpGolombUnsigned($24, $value);
          $tmp = $25;
          if ($tmp != 0) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $28$$30$8 : do {
            if (__label__ == 5) {
              $1 = $tmp;
            } else if (__label__ == 6) {
              $i = 0;
              $31$11 : while (1) {
                if (!(HEAPU32[$3 + 12 >> 2] >>> $i != 0)) {
                  __label__ = 9;
                  break $31$11;
                }
                var $40 = $i + 1;
                $i = $40;
              }
              var $43 = $i - 1;
              $i = $43;
              var $44 = $tmpStrmData;
              var $46 = _h264bsdGetBits($44, $i);
              $tmp = $46;
              if ($tmp == -1) {
                __label__ = 10;
              } else {
                __label__ = 11;
              }
              $49$$50$15 : do {
                if (__label__ == 10) {
                  $1 = 1;
                } else if (__label__ == 11) {
                  if ($4 == 5) {
                    __label__ = 12;
                  } else {
                    __label__ = 15;
                  }
                  $53$$61$18 : do {
                    if (__label__ == 12) {
                      var $54 = $tmpStrmData;
                      var $55 = _h264bsdDecodeExpGolombUnsigned($54, $value);
                      $tmp = $55;
                      if ($tmp != 0) {
                        __label__ = 13;
                      } else {
                        __label__ = 14;
                      }
                      $58$$60$20 : do {
                        if (__label__ == 13) {
                          $1 = $tmp;
                          __label__ = 21;
                          break $14$$16$2;
                        } else if (__label__ == 14) {}
                      } while (0);
                    }
                  } while (0);
                  $i = 0;
                  $62$24 : while (1) {
                    if (!(HEAPU32[$3 + 20 >> 2] >>> $i != 0)) {
                      __label__ = 18;
                      break $62$24;
                    }
                    var $71 = $i + 1;
                    $i = $71;
                  }
                  var $74 = $i - 1;
                  $i = $74;
                  var $75 = $tmpStrmData;
                  var $77 = _h264bsdGetBits($75, $i);
                  $tmp = $77;
                  if ($tmp == -1) {
                    __label__ = 19;
                  } else {
                    __label__ = 20;
                  }
                  $80$$81$28 : do {
                    if (__label__ == 19) {
                      $1 = 1;
                    } else if (__label__ == 20) {
                      HEAP32[$5 >> 2] = $tmp;
                      $1 = 0;
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $85 = $1;
  STACKTOP = __stackBase__;
  return $85;
  return null;
}
_h264bsdCheckPicOrderCntLsb["X"] = 1;
function _h264bsdCheckDeltaPicOrderCntBottom($pStrmData, $pSeqParamSet, $nalUnitType, $deltaPicOrderCntBottom) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $tmp;
  var $value = __stackBase__;
  var $i;
  var $tmpStrmData = __stackBase__ + 4;
  $2 = $pStrmData;
  $3 = $pSeqParamSet;
  $4 = $nalUnitType;
  $5 = $deltaPicOrderCntBottom;
  var $8 = $tmpStrmData;
  var src, dest, stop, stop4;
  src = $2;
  dest = $8;
  stop = src + 20;
  if (dest % 4 == src % 4 && 20 > 8) {
    while (src % 4 !== 0 && src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    src >>= 2;
    dest >>= 2;
    stop4 = stop >> 2;
    while (src < stop4) {
      HEAP32[dest++] = HEAP32[src++];
    }
    src <<= 2;
    dest <<= 2;
  }
  while (src < stop) {
    HEAP8[dest++] = HEAP8[src++];
  }
  var $10 = $tmpStrmData;
  var $11 = _h264bsdDecodeExpGolombUnsigned($10, $value);
  $tmp = $11;
  if ($tmp != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $14$$16$33 : do {
    if (__label__ == 1) {
      $1 = $tmp;
    } else if (__label__ == 2) {
      var $17 = $tmpStrmData;
      var $18 = _h264bsdDecodeExpGolombUnsigned($17, $value);
      $tmp = $18;
      if ($tmp != 0) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $21$$23$36 : do {
        if (__label__ == 3) {
          $1 = $tmp;
        } else if (__label__ == 4) {
          var $24 = $tmpStrmData;
          var $25 = _h264bsdDecodeExpGolombUnsigned($24, $value);
          $tmp = $25;
          if ($tmp != 0) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $28$$30$39 : do {
            if (__label__ == 5) {
              $1 = $tmp;
            } else if (__label__ == 6) {
              $i = 0;
              $31$42 : while (1) {
                if (!(HEAPU32[$3 + 12 >> 2] >>> $i != 0)) {
                  __label__ = 9;
                  break $31$42;
                }
                var $40 = $i + 1;
                $i = $40;
              }
              var $43 = $i - 1;
              $i = $43;
              var $44 = $tmpStrmData;
              var $46 = _h264bsdGetBits($44, $i);
              $tmp = $46;
              if ($tmp == -1) {
                __label__ = 10;
              } else {
                __label__ = 11;
              }
              $49$$50$46 : do {
                if (__label__ == 10) {
                  $1 = 1;
                } else if (__label__ == 11) {
                  if ($4 == 5) {
                    __label__ = 12;
                  } else {
                    __label__ = 15;
                  }
                  $53$$61$49 : do {
                    if (__label__ == 12) {
                      var $54 = $tmpStrmData;
                      var $55 = _h264bsdDecodeExpGolombUnsigned($54, $value);
                      $tmp = $55;
                      if ($tmp != 0) {
                        __label__ = 13;
                      } else {
                        __label__ = 14;
                      }
                      $58$$60$51 : do {
                        if (__label__ == 13) {
                          $1 = $tmp;
                          __label__ = 23;
                          break $14$$16$33;
                        } else if (__label__ == 14) {}
                      } while (0);
                    }
                  } while (0);
                  $i = 0;
                  $62$55 : while (1) {
                    if (!(HEAPU32[$3 + 20 >> 2] >>> $i != 0)) {
                      __label__ = 18;
                      break $62$55;
                    }
                    var $71 = $i + 1;
                    $i = $71;
                  }
                  var $74 = $i - 1;
                  $i = $74;
                  var $75 = $tmpStrmData;
                  var $77 = _h264bsdGetBits($75, $i);
                  $tmp = $77;
                  if ($tmp == -1) {
                    __label__ = 19;
                  } else {
                    __label__ = 20;
                  }
                  $80$$81$59 : do {
                    if (__label__ == 19) {
                      $1 = 1;
                    } else if (__label__ == 20) {
                      var $82 = $tmpStrmData;
                      var $84 = _h264bsdDecodeExpGolombSigned($82, $5);
                      $tmp = $84;
                      if ($tmp != 0) {
                        __label__ = 21;
                      } else {
                        __label__ = 22;
                      }
                      $87$$89$62 : do {
                        if (__label__ == 21) {
                          $1 = $tmp;
                        } else if (__label__ == 22) {
                          $1 = 0;
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $91 = $1;
  STACKTOP = __stackBase__;
  return $91;
  return null;
}
_h264bsdCheckDeltaPicOrderCntBottom["X"] = 1;
function _h264bsdCheckDeltaPicOrderCnt($pStrmData, $pSeqParamSet, $nalUnitType, $picOrderPresentFlag, $deltaPicOrderCnt) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $tmp;
  var $value = __stackBase__;
  var $i;
  var $tmpStrmData = __stackBase__ + 4;
  $2 = $pStrmData;
  $3 = $pSeqParamSet;
  $4 = $nalUnitType;
  $5 = $picOrderPresentFlag;
  $6 = $deltaPicOrderCnt;
  var $9 = $tmpStrmData;
  var src, dest, stop, stop4;
  src = $2;
  dest = $9;
  stop = src + 20;
  if (dest % 4 == src % 4 && 20 > 8) {
    while (src % 4 !== 0 && src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    src >>= 2;
    dest >>= 2;
    stop4 = stop >> 2;
    while (src < stop4) {
      HEAP32[dest++] = HEAP32[src++];
    }
    src <<= 2;
    dest <<= 2;
  }
  while (src < stop) {
    HEAP8[dest++] = HEAP8[src++];
  }
  var $11 = $tmpStrmData;
  var $12 = _h264bsdDecodeExpGolombUnsigned($11, $value);
  $tmp = $12;
  if ($tmp != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $15$$17$67 : do {
    if (__label__ == 1) {
      $1 = $tmp;
    } else if (__label__ == 2) {
      var $18 = $tmpStrmData;
      var $19 = _h264bsdDecodeExpGolombUnsigned($18, $value);
      $tmp = $19;
      if ($tmp != 0) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $22$$24$70 : do {
        if (__label__ == 3) {
          $1 = $tmp;
        } else if (__label__ == 4) {
          var $25 = $tmpStrmData;
          var $26 = _h264bsdDecodeExpGolombUnsigned($25, $value);
          $tmp = $26;
          if ($tmp != 0) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $29$$31$73 : do {
            if (__label__ == 5) {
              $1 = $tmp;
            } else if (__label__ == 6) {
              $i = 0;
              $32$76 : while (1) {
                if (!(HEAPU32[$3 + 12 >> 2] >>> $i != 0)) {
                  __label__ = 9;
                  break $32$76;
                }
                var $41 = $i + 1;
                $i = $41;
              }
              var $44 = $i - 1;
              $i = $44;
              var $45 = $tmpStrmData;
              var $47 = _h264bsdGetBits($45, $i);
              $tmp = $47;
              if ($tmp == -1) {
                __label__ = 10;
              } else {
                __label__ = 11;
              }
              $50$$51$80 : do {
                if (__label__ == 10) {
                  $1 = 1;
                } else if (__label__ == 11) {
                  if ($4 == 5) {
                    __label__ = 12;
                  } else {
                    __label__ = 15;
                  }
                  $54$$62$83 : do {
                    if (__label__ == 12) {
                      var $55 = $tmpStrmData;
                      var $56 = _h264bsdDecodeExpGolombUnsigned($55, $value);
                      $tmp = $56;
                      if ($tmp != 0) {
                        __label__ = 13;
                      } else {
                        __label__ = 14;
                      }
                      $59$$61$85 : do {
                        if (__label__ == 13) {
                          $1 = $tmp;
                          __label__ = 22;
                          break $15$$17$67;
                        } else if (__label__ == 14) {}
                      } while (0);
                    }
                  } while (0);
                  var $63 = $tmpStrmData;
                  var $66 = _h264bsdDecodeExpGolombSigned($63, $6);
                  $tmp = $66;
                  if ($tmp != 0) {
                    __label__ = 16;
                  } else {
                    __label__ = 17;
                  }
                  $69$$71$89 : do {
                    if (__label__ == 16) {
                      $1 = $tmp;
                    } else if (__label__ == 17) {
                      if ($5 != 0) {
                        __label__ = 18;
                      } else {
                        __label__ = 21;
                      }
                      $74$$84$92 : do {
                        if (__label__ == 18) {
                          var $75 = $tmpStrmData;
                          var $78 = _h264bsdDecodeExpGolombSigned($75, $6 + 4);
                          $tmp = $78;
                          if ($tmp != 0) {
                            __label__ = 19;
                          } else {
                            __label__ = 20;
                          }
                          $81$$83$94 : do {
                            if (__label__ == 19) {
                              $1 = $tmp;
                              __label__ = 22;
                              break $15$$17$67;
                            } else if (__label__ == 20) {}
                          } while (0);
                        }
                      } while (0);
                      $1 = 0;
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $86 = $1;
  STACKTOP = __stackBase__;
  return $86;
  return null;
}
_h264bsdCheckDeltaPicOrderCnt["X"] = 1;
function _h264bsdCheckRedundantPicCnt($pStrmData, $pSeqParamSet, $pPicParamSet, $nalUnitType, $redundantPicCnt) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 28;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $tmp;
  var $value = __stackBase__;
  var $i;
  var $ivalue = __stackBase__ + 4;
  var $tmpStrmData = __stackBase__ + 8;
  $2 = $pStrmData;
  $3 = $pSeqParamSet;
  $4 = $pPicParamSet;
  $5 = $nalUnitType;
  $6 = $redundantPicCnt;
  var $9 = $tmpStrmData;
  var src, dest, stop, stop4;
  src = $2;
  dest = $9;
  stop = src + 20;
  if (dest % 4 == src % 4 && 20 > 8) {
    while (src % 4 !== 0 && src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    src >>= 2;
    dest >>= 2;
    stop4 = stop >> 2;
    while (src < stop4) {
      HEAP32[dest++] = HEAP32[src++];
    }
    src <<= 2;
    dest <<= 2;
  }
  while (src < stop) {
    HEAP8[dest++] = HEAP8[src++];
  }
  var $11 = $tmpStrmData;
  var $12 = _h264bsdDecodeExpGolombUnsigned($11, $value);
  $tmp = $12;
  if ($tmp != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $15$$17$100 : do {
    if (__label__ == 1) {
      $1 = $tmp;
    } else if (__label__ == 2) {
      var $18 = $tmpStrmData;
      var $19 = _h264bsdDecodeExpGolombUnsigned($18, $value);
      $tmp = $19;
      if ($tmp != 0) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $22$$24$103 : do {
        if (__label__ == 3) {
          $1 = $tmp;
        } else if (__label__ == 4) {
          var $25 = $tmpStrmData;
          var $26 = _h264bsdDecodeExpGolombUnsigned($25, $value);
          $tmp = $26;
          if ($tmp != 0) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $29$$31$106 : do {
            if (__label__ == 5) {
              $1 = $tmp;
            } else if (__label__ == 6) {
              $i = 0;
              $32$109 : while (1) {
                if (!(HEAPU32[$3 + 12 >> 2] >>> $i != 0)) {
                  __label__ = 9;
                  break $32$109;
                }
                var $41 = $i + 1;
                $i = $41;
              }
              var $44 = $i - 1;
              $i = $44;
              var $45 = $tmpStrmData;
              var $47 = _h264bsdGetBits($45, $i);
              $tmp = $47;
              if ($tmp == -1) {
                __label__ = 10;
              } else {
                __label__ = 11;
              }
              $50$$51$113 : do {
                if (__label__ == 10) {
                  $1 = 1;
                } else if (__label__ == 11) {
                  if ($5 == 5) {
                    __label__ = 12;
                  } else {
                    __label__ = 15;
                  }
                  $54$$62$116 : do {
                    if (__label__ == 12) {
                      var $55 = $tmpStrmData;
                      var $56 = _h264bsdDecodeExpGolombUnsigned($55, $value);
                      $tmp = $56;
                      if ($tmp != 0) {
                        __label__ = 13;
                      } else {
                        __label__ = 14;
                      }
                      $59$$61$118 : do {
                        if (__label__ == 13) {
                          $1 = $tmp;
                          __label__ = 38;
                          break $15$$17$100;
                        } else if (__label__ == 14) {}
                      } while (0);
                    }
                  } while (0);
                  if (HEAP32[$3 + 16 >> 2] == 0) {
                    __label__ = 16;
                  } else {
                    __label__ = 26;
                  }
                  $67$$101$122 : do {
                    if (__label__ == 16) {
                      $i = 0;
                      $68$124 : while (1) {
                        if (!(HEAPU32[$3 + 20 >> 2] >>> $i != 0)) {
                          __label__ = 19;
                          break $68$124;
                        }
                        var $77 = $i + 1;
                        $i = $77;
                      }
                      var $80 = $i - 1;
                      $i = $80;
                      var $81 = $tmpStrmData;
                      var $83 = _h264bsdGetBits($81, $i);
                      $tmp = $83;
                      if ($tmp == -1) {
                        __label__ = 20;
                      } else {
                        __label__ = 21;
                      }
                      $86$$87$128 : do {
                        if (__label__ == 20) {
                          $1 = 1;
                          __label__ = 38;
                          break $15$$17$100;
                        } else if (__label__ == 21) {
                          if (HEAP32[$4 + 8 >> 2] != 0) {
                            __label__ = 22;
                          } else {
                            __label__ = 25;
                          }
                          $92$$100$131 : do {
                            if (__label__ == 22) {
                              var $93 = $tmpStrmData;
                              var $94 = _h264bsdDecodeExpGolombSigned($93, $ivalue);
                              $tmp = $94;
                              if ($tmp != 0) {
                                __label__ = 23;
                              } else {
                                __label__ = 24;
                              }
                              $97$$99$133 : do {
                                if (__label__ == 23) {
                                  $1 = $tmp;
                                  __label__ = 38;
                                  break $15$$17$100;
                                } else if (__label__ == 24) {}
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                    }
                  } while (0);
                  if (HEAP32[$3 + 16 >> 2] == 1) {
                    __label__ = 27;
                  } else {
                    __label__ = 35;
                  }
                  $106$$132$138 : do {
                    if (__label__ == 27) {
                      if (HEAP32[$3 + 24 >> 2] != 0) {
                        __label__ = 35;
                        break $106$$132$138;
                      }
                      var $112 = $tmpStrmData;
                      var $113 = _h264bsdDecodeExpGolombSigned($112, $ivalue);
                      $tmp = $113;
                      if ($tmp != 0) {
                        __label__ = 29;
                      } else {
                        __label__ = 30;
                      }
                      $116$$118$141 : do {
                        if (__label__ == 29) {
                          $1 = $tmp;
                          __label__ = 38;
                          break $15$$17$100;
                        } else if (__label__ == 30) {
                          if (HEAP32[$4 + 8 >> 2] != 0) {
                            __label__ = 31;
                          } else {
                            __label__ = 34;
                          }
                          $123$$131$144 : do {
                            if (__label__ == 31) {
                              var $124 = $tmpStrmData;
                              var $125 = _h264bsdDecodeExpGolombSigned($124, $ivalue);
                              $tmp = $125;
                              if ($tmp != 0) {
                                __label__ = 32;
                              } else {
                                __label__ = 33;
                              }
                              $128$$130$146 : do {
                                if (__label__ == 32) {
                                  $1 = $tmp;
                                  __label__ = 38;
                                  break $15$$17$100;
                                } else if (__label__ == 33) {}
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                    }
                  } while (0);
                  var $133 = $tmpStrmData;
                  var $135 = _h264bsdDecodeExpGolombUnsigned($133, $6);
                  $tmp = $135;
                  if ($tmp != 0) {
                    __label__ = 36;
                  } else {
                    __label__ = 37;
                  }
                  $138$$140$151 : do {
                    if (__label__ == 36) {
                      $1 = $tmp;
                    } else if (__label__ == 37) {
                      $1 = 0;
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $142 = $1;
  STACKTOP = __stackBase__;
  return $142;
  return null;
}
_h264bsdCheckRedundantPicCnt["X"] = 1;
function _SetMbParams($pMb, $pSlice, $sliceId, $chromaQpIndexOffset) {
  var $1;
  var $2;
  var $3;
  var $4;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  $1 = $pMb;
  $2 = $pSlice;
  $3 = $sliceId;
  $4 = $chromaQpIndexOffset;
  $tmp1 = HEAP32[$2 + 52 >> 2];
  $tmp2 = HEAP32[$2 + 56 >> 2];
  $tmp3 = HEAP32[$2 + 60 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  HEAP32[$1 + 8 >> 2] = $tmp1;
  HEAP32[$1 + 12 >> 2] = $tmp2;
  HEAP32[$1 + 16 >> 2] = $tmp3;
  HEAP32[$1 + 24 >> 2] = $4;
  return;
  return;
}
function _h264bsdCheckPriorPicsFlag($noOutputOfPriorPicsFlag, $pStrmData, $pSeqParamSet, $pPicParamSet, $nalUnitType) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 28;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $tmp;
  var $value = __stackBase__;
  var $i;
  var $ivalue = __stackBase__ + 4;
  var $tmpStrmData = __stackBase__ + 8;
  $2 = $noOutputOfPriorPicsFlag;
  $3 = $pStrmData;
  $4 = $pSeqParamSet;
  $5 = $pPicParamSet;
  $6 = $nalUnitType;
  var $9 = $tmpStrmData;
  var src, dest, stop, stop4;
  src = $3;
  dest = $9;
  stop = src + 20;
  if (dest % 4 == src % 4 && 20 > 8) {
    while (src % 4 !== 0 && src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    src >>= 2;
    dest >>= 2;
    stop4 = stop >> 2;
    while (src < stop4) {
      HEAP32[dest++] = HEAP32[src++];
    }
    src <<= 2;
    dest <<= 2;
  }
  while (src < stop) {
    HEAP8[dest++] = HEAP8[src++];
  }
  var $11 = $tmpStrmData;
  var $12 = _h264bsdDecodeExpGolombUnsigned($11, $value);
  $tmp = $12;
  if ($tmp != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $15$$17$2 : do {
    if (__label__ == 1) {
      $1 = $tmp;
    } else if (__label__ == 2) {
      var $18 = $tmpStrmData;
      var $19 = _h264bsdDecodeExpGolombUnsigned($18, $value);
      $tmp = $19;
      if ($tmp != 0) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $22$$24$5 : do {
        if (__label__ == 3) {
          $1 = $tmp;
        } else if (__label__ == 4) {
          var $25 = $tmpStrmData;
          var $26 = _h264bsdDecodeExpGolombUnsigned($25, $value);
          $tmp = $26;
          if ($tmp != 0) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $29$$31$8 : do {
            if (__label__ == 5) {
              $1 = $tmp;
            } else if (__label__ == 6) {
              $i = 0;
              $32$11 : while (1) {
                if (!(HEAPU32[$4 + 12 >> 2] >>> $i != 0)) {
                  __label__ = 9;
                  break $32$11;
                }
                var $41 = $i + 1;
                $i = $41;
              }
              var $44 = $i - 1;
              $i = $44;
              var $45 = $tmpStrmData;
              var $47 = _h264bsdGetBits($45, $i);
              $tmp = $47;
              if ($tmp == -1) {
                __label__ = 10;
              } else {
                __label__ = 11;
              }
              $50$$51$15 : do {
                if (__label__ == 10) {
                  $1 = 1;
                } else if (__label__ == 11) {
                  var $52 = $tmpStrmData;
                  var $53 = _h264bsdDecodeExpGolombUnsigned($52, $value);
                  $tmp = $53;
                  if ($tmp != 0) {
                    __label__ = 12;
                  } else {
                    __label__ = 13;
                  }
                  $56$$58$18 : do {
                    if (__label__ == 12) {
                      $1 = $tmp;
                    } else if (__label__ == 13) {
                      if (HEAP32[$4 + 16 >> 2] == 0) {
                        __label__ = 14;
                      } else {
                        __label__ = 24;
                      }
                      $63$$97$21 : do {
                        if (__label__ == 14) {
                          $i = 0;
                          $64$23 : while (1) {
                            if (!(HEAPU32[$4 + 20 >> 2] >>> $i != 0)) {
                              __label__ = 17;
                              break $64$23;
                            }
                            var $73 = $i + 1;
                            $i = $73;
                          }
                          var $76 = $i - 1;
                          $i = $76;
                          var $77 = $tmpStrmData;
                          var $79 = _h264bsdGetBits($77, $i);
                          $tmp = $79;
                          if ($tmp == -1) {
                            __label__ = 18;
                          } else {
                            __label__ = 19;
                          }
                          $82$$83$27 : do {
                            if (__label__ == 18) {
                              $1 = 1;
                              __label__ = 40;
                              break $15$$17$2;
                            } else if (__label__ == 19) {
                              if (HEAP32[$5 + 8 >> 2] != 0) {
                                __label__ = 20;
                              } else {
                                __label__ = 23;
                              }
                              $88$$96$30 : do {
                                if (__label__ == 20) {
                                  var $89 = $tmpStrmData;
                                  var $90 = _h264bsdDecodeExpGolombSigned($89, $ivalue);
                                  $tmp = $90;
                                  if ($tmp != 0) {
                                    __label__ = 21;
                                  } else {
                                    __label__ = 22;
                                  }
                                  $93$$95$32 : do {
                                    if (__label__ == 21) {
                                      $1 = $tmp;
                                      __label__ = 40;
                                      break $15$$17$2;
                                    } else if (__label__ == 22) {}
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                      if (HEAP32[$4 + 16 >> 2] == 1) {
                        __label__ = 25;
                      } else {
                        __label__ = 33;
                      }
                      $102$$128$37 : do {
                        if (__label__ == 25) {
                          if (HEAP32[$4 + 24 >> 2] != 0) {
                            __label__ = 33;
                            break $102$$128$37;
                          }
                          var $108 = $tmpStrmData;
                          var $109 = _h264bsdDecodeExpGolombSigned($108, $ivalue);
                          $tmp = $109;
                          if ($tmp != 0) {
                            __label__ = 27;
                          } else {
                            __label__ = 28;
                          }
                          $112$$114$40 : do {
                            if (__label__ == 27) {
                              $1 = $tmp;
                              __label__ = 40;
                              break $15$$17$2;
                            } else if (__label__ == 28) {
                              if (HEAP32[$5 + 8 >> 2] != 0) {
                                __label__ = 29;
                              } else {
                                __label__ = 32;
                              }
                              $119$$127$43 : do {
                                if (__label__ == 29) {
                                  var $120 = $tmpStrmData;
                                  var $121 = _h264bsdDecodeExpGolombSigned($120, $ivalue);
                                  $tmp = $121;
                                  if ($tmp != 0) {
                                    __label__ = 30;
                                  } else {
                                    __label__ = 31;
                                  }
                                  $124$$126$45 : do {
                                    if (__label__ == 30) {
                                      $1 = $tmp;
                                      __label__ = 40;
                                      break $15$$17$2;
                                    } else if (__label__ == 31) {}
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                      if (HEAP32[$5 + 68 >> 2] != 0) {
                        __label__ = 34;
                      } else {
                        __label__ = 37;
                      }
                      $133$$141$50 : do {
                        if (__label__ == 34) {
                          var $134 = $tmpStrmData;
                          var $135 = _h264bsdDecodeExpGolombUnsigned($134, $value);
                          $tmp = $135;
                          if ($tmp != 0) {
                            __label__ = 35;
                          } else {
                            __label__ = 36;
                          }
                          $138$$140$52 : do {
                            if (__label__ == 35) {
                              $1 = $tmp;
                              __label__ = 40;
                              break $15$$17$2;
                            } else if (__label__ == 36) {}
                          } while (0);
                        }
                      } while (0);
                      var $142 = $tmpStrmData;
                      var $143 = _h264bsdGetBits($142, 1);
                      HEAP32[$2 >> 2] = $143;
                      if (HEAP32[$2 >> 2] == -1) {
                        __label__ = 38;
                      } else {
                        __label__ = 39;
                      }
                      $148$$149$56 : do {
                        if (__label__ == 38) {
                          $1 = 1;
                        } else if (__label__ == 39) {
                          $1 = 0;
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $151 = $1;
  STACKTOP = __stackBase__;
  return $151;
  return null;
}
_h264bsdCheckPriorPicsFlag["X"] = 1;
function _h264bsdDecodeSliceData($pStrmData, $pStorage, $currImage, $pSliceHeader) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 440;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $mbData = __stackBase__;
  var $data;
  var $tmp;
  var $skipRun = __stackBase__ + 432;
  var $prevSkipped;
  var $currMbAddr;
  var $moreMbs;
  var $mbCount;
  var $qpY = __stackBase__ + 436;
  var $mbLayer;
  $2 = $pStrmData;
  $3 = $pStorage;
  $4 = $currImage;
  $5 = $pSliceHeader;
  var $6 = $mbData;
  var $10 = 16 - $mbData & 15;
  var $11 = Math.floor($10);
  $data = $6 + $11;
  $mbLayer = HEAP32[$3 + 3376 >> 2];
  $currMbAddr = HEAP32[$5 >> 2];
  HEAP32[$skipRun >> 2] = 0;
  $prevSkipped = 0;
  var $24 = HEAP32[$3 + 1192 >> 2] + 1;
  HEAP32[$3 + 1192 >> 2] = $24;
  HEAP32[$3 + 1200 >> 2] = 0;
  $mbCount = 0;
  var $37 = HEAP32[HEAP32[$3 + 12 >> 2] + 52 >> 2] + HEAP32[$5 + 48 >> 2];
  HEAP32[$qpY >> 2] = $37;
  $38$61 : while (1) {
    if (HEAP32[$5 + 36 >> 2] != 0) {
      __label__ = 4;
    } else {
      __label__ = 2;
    }
    $53$$43$63 : do {
      if (__label__ == 2) {
        if (HEAP32[HEAP32[$3 + 1212 >> 2] + $currMbAddr * 216 + 196 >> 2] != 0) {
          __label__ = 3;
          break $38$61;
        }
      }
    } while (0);
    var $58 = HEAP32[$3 + 1212 >> 2] + $currMbAddr * 216;
    var $64 = HEAP32[$3 + 1192 >> 2];
    var $69 = HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2];
    _SetMbParams($58, $5, $64, $69);
    if (HEAP32[$5 + 4 >> 2] == 2) {
      __label__ = 15;
    } else {
      __label__ = 5;
    }
    $109$$74$66 : do {
      if (__label__ == 5) {
        if (HEAP32[$5 + 4 >> 2] == 7) {
          __label__ = 15;
          break $109$$74$66;
        }
        if ($prevSkipped != 0) {
          __label__ = 14;
        } else {
          __label__ = 7;
        }
        $108$$82$69 : do {
          if (__label__ == 7) {
            var $84 = _h264bsdDecodeExpGolombUnsigned($2, $skipRun);
            $tmp = $84;
            if ($tmp != 0) {
              __label__ = 8;
              break $38$61;
            }
            if (HEAPU32[$skipRun >> 2] > HEAP32[$3 + 1176 >> 2] - $currMbAddr) {
              __label__ = 10;
              break $38$61;
            }
            if (HEAP32[$skipRun >> 2] != 0) {
              __label__ = 12;
            } else {
              __label__ = 13;
            }
            $101$$107$73 : do {
              if (__label__ == 12) {
                $prevSkipped = 1;
                _H264SwDecMemset($mbLayer + 12, 0, 164);
                HEAP32[$mbLayer >> 2] = 0;
              }
            } while (0);
          }
        } while (0);
      }
    } while (0);
    if (HEAP32[$skipRun >> 2] != 0) {
      __label__ = 16;
    } else {
      __label__ = 17;
    }
    $112$$115$78 : do {
      if (__label__ == 16) {
        var $114 = HEAP32[$skipRun >> 2] - 1;
        HEAP32[$skipRun >> 2] = $114;
      } else if (__label__ == 17) {
        $prevSkipped = 0;
        var $122 = HEAP32[$3 + 1212 >> 2] + $currMbAddr * 216;
        var $125 = HEAP32[$5 + 4 >> 2];
        var $128 = HEAP32[$5 + 44 >> 2];
        var $129 = _h264bsdDecodeMacroblockLayer($2, $mbLayer, $122, $125, $128);
        $tmp = $129;
        if ($tmp != 0) {
          __label__ = 18;
          break $38$61;
        }
      }
    } while (0);
    var $140 = HEAP32[$3 + 1212 >> 2] + $currMbAddr * 216;
    var $151 = HEAP32[HEAP32[$3 + 12 >> 2] + 64 >> 2];
    var $153 = _h264bsdDecodeMacroblock($140, $mbLayer, $4, $3 + 1220, $qpY, $currMbAddr, $151, $data);
    $tmp = $153;
    if ($tmp != 0) {
      __label__ = 21;
      break $38$61;
    }
    if (HEAP32[HEAP32[$3 + 1212 >> 2] + $currMbAddr * 216 + 196 >> 2] == 1) {
      __label__ = 23;
    } else {
      __label__ = 24;
    }
    $167$$170$84 : do {
      if (__label__ == 23) {
        var $169 = $mbCount + 1;
        $mbCount = $169;
      }
    } while (0);
    var $172 = _h264bsdMoreRbspData($2);
    if ($172 != 0) {
      var $178 = 1;
      __label__ = 26;
    } else {
      __label__ = 25;
    }
    $177$$174$87 : do {
      if (__label__ == 25) {
        var $178 = HEAP32[$skipRun >> 2] != 0;
      }
    } while (0);
    var $178;
    var $179 = $178 ? 1 : 0;
    $moreMbs = $179;
    if (HEAP32[$5 + 4 >> 2] == 2) {
      __label__ = 28;
    } else {
      __label__ = 27;
    }
    $189$$184$90 : do {
      if (__label__ == 27) {
        if (HEAP32[$5 + 4 >> 2] == 7) {
          __label__ = 28;
          break $189$$184$90;
        } else {
          __label__ = 29;
          break $189$$184$90;
        }
      }
    } while (0);
    $189$$195$92 : do {
      if (__label__ == 28) {
        HEAP32[$3 + 1200 >> 2] = $currMbAddr;
      }
    } while (0);
    var $198 = HEAP32[$3 + 1172 >> 2];
    var $201 = HEAP32[$3 + 1176 >> 2];
    var $203 = _h264bsdNextMbAddress($198, $201, $currMbAddr);
    $currMbAddr = $203;
    if ($moreMbs != 0) {
      __label__ = 30;
    } else {
      __label__ = 32;
    }
    $206$$210$95 : do {
      if (__label__ == 30) {
        if (!($currMbAddr != 0)) {
          __label__ = 31;
          break $38$61;
        }
      }
    } while (0);
    if (!($moreMbs != 0)) {
      __label__ = 34;
      break $38$61;
    }
  }
  $52$$87$$97$$132$$156$$209$$214$99 : do {
    if (__label__ == 3) {
      $1 = 1;
    } else if (__label__ == 8) {
      $1 = $tmp;
    } else if (__label__ == 10) {
      $1 = 1;
    } else if (__label__ == 18) {
      $1 = $tmp;
    } else if (__label__ == 21) {
      $1 = $tmp;
    } else if (__label__ == 31) {
      $1 = 1;
    } else if (__label__ == 34) {
      if (HEAP32[$3 + 1196 >> 2] + $mbCount > HEAPU32[$3 + 1176 >> 2]) {
        __label__ = 35;
      } else {
        __label__ = 36;
      }
      $226$$227$107 : do {
        if (__label__ == 35) {
          $1 = 1;
        } else if (__label__ == 36) {
          var $234 = HEAP32[$3 + 1196 >> 2] + $mbCount;
          HEAP32[$3 + 1196 >> 2] = $234;
          $1 = 0;
        }
      } while (0);
    }
  } while (0);
  var $236 = $1;
  STACKTOP = __stackBase__;
  return $236;
  return null;
}
_h264bsdDecodeSliceData["X"] = 1;
function _h264bsdMarkSliceCorrupted($pStorage, $firstMbInSlice) {
  var __label__;
  var $1;
  var $2;
  var $tmp;
  var $i;
  var $sliceId;
  var $currMbAddr;
  $1 = $pStorage;
  $2 = $firstMbInSlice;
  $currMbAddr = $2;
  $sliceId = HEAP32[$1 + 1192 >> 2];
  if (HEAP32[$1 + 1200 >> 2] != 0) {
    __label__ = 1;
  } else {
    __label__ = 12;
  }
  $15$$63$113 : do {
    if (__label__ == 1) {
      $i = HEAP32[$1 + 1200 >> 2] - 1;
      $tmp = 0;
      $22$115 : while (1) {
        if (!($i > $currMbAddr)) {
          __label__ = 11;
          break $22$115;
        }
        if (HEAP32[HEAP32[$1 + 1212 >> 2] + $i * 216 + 4 >> 2] == $sliceId) {
          __label__ = 4;
        } else {
          __label__ = 10;
        }
        $36$$58$118 : do {
          if (__label__ == 4) {
            var $38 = $tmp + 1;
            $tmp = $38;
            var $39 = $tmp;
            if (HEAPU32[HEAP32[$1 + 16 >> 2] + 52 >> 2] > 10) {
              __label__ = 5;
            } else {
              __label__ = 6;
            }
            $46$$52$120 : do {
              if (__label__ == 5) {
                var $54 = HEAP32[HEAP32[$1 + 16 >> 2] + 52 >> 2];
              } else if (__label__ == 6) {
                var $54 = 10;
              }
            } while (0);
            var $54;
            if ($39 >= $54) {
              __label__ = 8;
              break $22$115;
            }
          }
        } while (0);
        var $60 = $i - 1;
        $i = $60;
      }
      $61$$56$126 : do {
        if (__label__ == 8) {}
      } while (0);
      $currMbAddr = $i;
    }
  } while (0);
  $64$130 : while (1) {
    if (!(HEAP32[HEAP32[$1 + 1212 >> 2] + $currMbAddr * 216 + 4 >> 2] == $sliceId)) {
      __label__ = 16;
      break $64$130;
    }
    if (!(HEAP32[HEAP32[$1 + 1212 >> 2] + $currMbAddr * 216 + 196 >> 2] != 0)) {
      __label__ = 16;
      break $64$130;
    }
    var $89 = HEAP32[$1 + 1212 >> 2] + $currMbAddr * 216 + 196;
    var $91 = HEAP32[$89 >> 2] - 1;
    HEAP32[$89 >> 2] = $91;
    var $96 = HEAP32[$1 + 1172 >> 2];
    var $99 = HEAP32[$1 + 1176 >> 2];
    var $101 = _h264bsdNextMbAddress($96, $99, $currMbAddr);
    $currMbAddr = $101;
    if (!($currMbAddr != 0)) {
      __label__ = 19;
      break $64$130;
    }
  }
  $92$$105$136 : do {
    if (__label__ == 16) {}
  } while (0);
  return;
  return;
}
_h264bsdMarkSliceCorrupted["X"] = 1;
function _h264bsdNumMbPart($mbType) {
  var __label__;
  var $1;
  var $2;
  $2 = $mbType;
  var $3 = $2;
  if ($3 == 1) {
    __label__ = 1;
  } else if ($3 == 0) {
    __label__ = 1;
  } else if ($3 == 2) {
    __label__ = 2;
  } else if ($3 == 3) {
    __label__ = 2;
  } else {
    __label__ = 3;
  }
  $6$$4$$5$75 : do {
    if (__label__ == 3) {
      $1 = 4;
    } else if (__label__ == 1) {
      $1 = 1;
    } else if (__label__ == 2) {
      $1 = 2;
    }
  } while (0);
  var $8 = $1;
  return $8;
  return null;
}
function _h264bsdMbPartPredMode($mbType) {
  var __label__;
  var $1;
  var $2;
  $2 = $mbType;
  if ($2 <= 5) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $5$$6$67 : do {
    if (__label__ == 1) {
      $1 = 2;
    } else if (__label__ == 2) {
      if ($2 == 6) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $9$$10$70 : do {
        if (__label__ == 3) {
          $1 = 0;
        } else if (__label__ == 4) {
          $1 = 1;
        }
      } while (0);
    }
  } while (0);
  var $12 = $1;
  return $12;
  return null;
}
function _CbpIntra16x16($mbType) {
  var __label__;
  var $1;
  var $cbp;
  var $tmp;
  $1 = $mbType;
  if ($1 >= 19) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $4$$5$171 : do {
    if (__label__ == 1) {
      $cbp = 15;
    } else if (__label__ == 2) {
      $cbp = 0;
    }
  } while (0);
  $tmp = $1 - 7 >>> 2;
  if ($tmp > 2) {
    __label__ = 4;
  } else {
    __label__ = 5;
  }
  $12$$15$175 : do {
    if (__label__ == 4) {
      var $14 = $tmp - 3;
      $tmp = $14;
    }
  } while (0);
  var $19 = $cbp + ($tmp << 4);
  $cbp = $19;
  var $20 = $cbp;
  return $20;
  return null;
}
function _h264bsdDecodeMacroblockLayer($pStrmData, $pMbLayer, $pMb, $sliceType, $numRefIdxActive) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $tmp;
  var $i;
  var $value = __stackBase__;
  var $itmp = __stackBase__ + 4;
  var $partMode;
  var $level;
  $2 = $pStrmData;
  $3 = $pMbLayer;
  $4 = $pMb;
  $5 = $sliceType;
  $6 = $numRefIdxActive;
  _H264SwDecMemset($3, 0, 2088);
  var $10 = _h264bsdDecodeExpGolombUnsigned($2, $value);
  $tmp = $10;
  if ($5 == 2) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $16$$13$2 : do {
    if (__label__ == 1) {
      if ($5 == 7) {
        __label__ = 2;
        break $16$$13$2;
      }
      if (HEAP32[$value >> 2] + 1 > 31) {
        __label__ = 8;
      } else {
        __label__ = 7;
      }
      $36$$33$5 : do {
        if (__label__ == 7) {
          if ($tmp != 0) {
            __label__ = 8;
            break $36$$33$5;
          }
          var $39 = HEAP32[$value >> 2] + 1;
          HEAP32[$3 >> 2] = $39;
          __label__ = 10;
          break $16$$13$2;
        }
      } while (0);
      $1 = 1;
      __label__ = 45;
      break $16$$13$2;
    }
  } while (0);
  $16$$201$$42$9 : do {
    if (__label__ == 2) {
      if (HEAP32[$value >> 2] + 6 > 31) {
        __label__ = 4;
      } else {
        __label__ = 3;
      }
      $23$$20$11 : do {
        if (__label__ == 3) {
          if ($tmp != 0) {
            __label__ = 4;
            break $23$$20$11;
          }
          var $26 = HEAP32[$value >> 2] + 6;
          HEAP32[$3 >> 2] = $26;
          __label__ = 10;
          break $16$$201$$42$9;
        }
      } while (0);
      $1 = 1;
      __label__ = 45;
      break $16$$201$$42$9;
    }
  } while (0);
  $201$$42$15 : do {
    if (__label__ == 10) {
      if (HEAP32[$3 >> 2] == 31) {
        __label__ = 11;
      } else {
        __label__ = 23;
      }
      $47$$83$17 : do {
        if (__label__ == 11) {
          $48$19 : while (1) {
            var $50 = _h264bsdIsByteAligned($2);
            if (!($50 != 0 ^ 1)) {
              __label__ = 16;
              break $48$19;
            }
            var $55 = _h264bsdGetBits($2, 1);
            $tmp = $55;
            if ($tmp != 0) {
              __label__ = 14;
              break $48$19;
            }
          }
          $60$$58$23 : do {
            if (__label__ == 16) {
              $level = $3 + 328;
              $i = 0;
              $66$25 : while (1) {
                if (!($i < 384)) {
                  __label__ = 22;
                  break $66$25;
                }
                var $71 = _h264bsdGetBits($2, 8);
                HEAP32[$value >> 2] = $71;
                if (HEAP32[$value >> 2] == -1) {
                  __label__ = 19;
                  break $66$25;
                }
                var $76 = HEAP32[$value >> 2];
                var $77 = $level;
                var $78 = $77 + 4;
                $level = $78;
                HEAP32[$77 >> 2] = $76;
                var $81 = $i + 1;
                $i = $81;
              }
              $82$$74$30 : do {
                if (__label__ == 22) {} else if (__label__ == 19) {
                  $1 = 1;
                  __label__ = 45;
                  break $201$$42$15;
                }
              } while (0);
            } else if (__label__ == 14) {
              $1 = 1;
              __label__ = 45;
              break $201$$42$15;
            }
          } while (0);
        } else if (__label__ == 23) {
          var $86 = HEAP32[$3 >> 2];
          var $87 = _h264bsdMbPartPredMode($86);
          $partMode = $87;
          if ($partMode == 2) {
            __label__ = 24;
          } else {
            __label__ = 26;
          }
          $90$$105$35 : do {
            if (__label__ == 24) {
              var $93 = HEAP32[$3 >> 2];
              var $94 = _h264bsdNumMbPart($93);
              if (!($94 == 4)) {
                __label__ = 26;
                break $90$$105$35;
              }
              var $102 = HEAP32[$3 >> 2];
              var $104 = _DecodeSubMbPred($2, $3 + 176, $102, $6);
              $tmp = $104;
              __label__ = 27;
              break $90$$105$35;
            }
          } while (0);
          $114$$105$38 : do {
            if (__label__ == 26) {
              var $111 = HEAP32[$3 >> 2];
              var $113 = _DecodeMbPred($2, $3 + 12, $111, $6);
              $tmp = $113;
            }
          } while (0);
          if ($tmp != 0) {
            __label__ = 28;
          } else {
            __label__ = 29;
          }
          $117$$119$41 : do {
            if (__label__ == 28) {
              $1 = $tmp;
              __label__ = 45;
              break $201$$42$15;
            } else if (__label__ == 29) {
              if ($partMode != 1) {
                __label__ = 30;
              } else {
                __label__ = 33;
              }
              $122$$136$44 : do {
                if (__label__ == 30) {
                  var $127 = _h264bsdDecodeExpGolombMapped($2, $value, $partMode == 0);
                  $tmp = $127;
                  if ($tmp != 0) {
                    __label__ = 31;
                  } else {
                    __label__ = 32;
                  }
                  $130$$132$46 : do {
                    if (__label__ == 31) {
                      $1 = $tmp;
                      __label__ = 45;
                      break $201$$42$15;
                    } else if (__label__ == 32) {
                      var $133 = HEAP32[$value >> 2];
                      HEAP32[$3 + 4 >> 2] = $133;
                    }
                  } while (0);
                } else if (__label__ == 33) {
                  var $139 = HEAP32[$3 >> 2];
                  var $140 = _CbpIntra16x16($139);
                  HEAP32[$3 + 4 >> 2] = $140;
                }
              } while (0);
              if (HEAP32[$3 + 4 >> 2] != 0) {
                __label__ = 36;
              } else {
                __label__ = 35;
              }
              $151$$148$51 : do {
                if (__label__ == 35) {
                  if ($partMode == 1) {
                    __label__ = 36;
                    break $151$$148$51;
                  } else {
                    __label__ = 43;
                    break $151$$148$51;
                  }
                }
              } while (0);
              $151$$199$53 : do {
                if (__label__ == 36) {
                  var $153 = _h264bsdDecodeExpGolombSigned($2, $itmp);
                  $tmp = $153;
                  if ($tmp != 0) {
                    __label__ = 39;
                  } else {
                    __label__ = 37;
                  }
                  $162$$156$55 : do {
                    if (__label__ == 37) {
                      if (HEAP32[$itmp >> 2] < -26) {
                        __label__ = 39;
                        break $162$$156$55;
                      }
                      if (HEAP32[$itmp >> 2] > 25) {
                        __label__ = 39;
                        break $162$$156$55;
                      }
                      var $164 = HEAP32[$itmp >> 2];
                      HEAP32[$3 + 8 >> 2] = $164;
                      var $173 = HEAP32[$3 >> 2];
                      var $176 = HEAP32[$3 + 4 >> 2];
                      var $177 = _DecodeResidual($2, $3 + 272, $4, $173, $176);
                      $tmp = $177;
                      var $191 = (HEAP32[$2 + 4 >> 2] - HEAP32[$2 >> 2] << 3) + HEAP32[$2 + 8 >> 2];
                      HEAP32[$2 + 16 >> 2] = $191;
                      if ($tmp != 0) {
                        __label__ = 41;
                      } else {
                        __label__ = 42;
                      }
                      $196$$198$59 : do {
                        if (__label__ == 41) {
                          $1 = $tmp;
                          __label__ = 45;
                          break $201$$42$15;
                        } else if (__label__ == 42) {
                          __label__ = 43;
                          break $151$$199$53;
                        }
                      } while (0);
                    }
                  } while (0);
                  $1 = 1;
                  __label__ = 45;
                  break $201$$42$15;
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
      $1 = 0;
    }
  } while (0);
  var $202 = $1;
  STACKTOP = __stackBase__;
  return $202;
  return null;
}
_h264bsdDecodeMacroblockLayer["X"] = 1;
function _DecodeSubMbPred($pStrmData, $pSubMbPred, $mbType, $numRefIdxActive) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $tmp;
  var $i;
  var $j;
  var $value = __stackBase__;
  var $itmp = __stackBase__ + 4;
  $2 = $pStrmData;
  $3 = $pSubMbPred;
  $4 = $mbType;
  $5 = $numRefIdxActive;
  $i = 0;
  $6$81 : while (1) {
    if (!($i < 4)) {
      __label__ = 7;
      break $6$81;
    }
    var $11 = _h264bsdDecodeExpGolombUnsigned($2, $value);
    $tmp = $11;
    if ($tmp != 0) {
      __label__ = 4;
      break $6$81;
    }
    if (HEAPU32[$value >> 2] > 3) {
      __label__ = 4;
      break $6$81;
    }
    var $19 = HEAP32[$value >> 2];
    HEAP32[$3 + ($i << 2) >> 2] = $19;
    var $26 = $i + 1;
    $i = $26;
  }
  $27$$17$87 : do {
    if (__label__ == 7) {
      if ($5 > 1) {
        __label__ = 8;
      } else {
        __label__ = 17;
      }
      $30$$60$89 : do {
        if (__label__ == 8) {
          if (!($4 != 5)) {
            __label__ = 17;
            break $30$$60$89;
          }
          $i = 0;
          $34$92 : while (1) {
            if (!($i < 4)) {
              __label__ = 16;
              break $34$92;
            }
            var $42 = _h264bsdDecodeExpGolombTruncated($2, $value, $5 > 2);
            $tmp = $42;
            if ($tmp != 0) {
              __label__ = 13;
              break $34$92;
            }
            if (HEAPU32[$value >> 2] >= $5) {
              __label__ = 13;
              break $34$92;
            }
            var $51 = HEAP32[$value >> 2];
            HEAP32[$3 + 16 + ($i << 2) >> 2] = $51;
            var $58 = $i + 1;
            $i = $58;
          }
          $59$$49$98 : do {
            if (__label__ == 16) {} else if (__label__ == 13) {
              $1 = 1;
              __label__ = 30;
              break $27$$17$87;
            }
          } while (0);
        }
      } while (0);
      $i = 0;
      $61$102 : while (1) {
        if (!($i < 4)) {
          __label__ = 29;
          break $61$102;
        }
        $j = 0;
        var $69 = HEAP32[$3 + ($i << 2) >> 2];
        var $70 = _h264bsdNumSubMbPart($69);
        HEAP32[$value >> 2] = $70;
        $71$105 : while (1) {
          var $72 = HEAP32[$value >> 2];
          var $73 = $72 - 1;
          HEAP32[$value >> 2] = $73;
          if (!($72 != 0)) {
            __label__ = 27;
            break $71$105;
          }
          var $77 = _h264bsdDecodeExpGolombSigned($2, $itmp);
          $tmp = $77;
          if ($tmp != 0) {
            __label__ = 22;
            break $61$102;
          }
          HEAP16[$3 + 32 + ($i << 4) + ($j << 2) >> 1] = HEAP32[$itmp >> 2] & 65535;
          var $93 = _h264bsdDecodeExpGolombSigned($2, $itmp);
          $tmp = $93;
          if ($tmp != 0) {
            __label__ = 24;
            break $61$102;
          }
          HEAP16[$3 + 32 + ($i << 4) + ($j << 2) + 2 >> 1] = HEAP32[$itmp >> 2] & 65535;
          var $110 = $j + 1;
          $j = $110;
        }
        var $114 = $i + 1;
        $i = $114;
      }
      $115$$80$$96$113 : do {
        if (__label__ == 29) {
          $1 = 0;
        } else if (__label__ == 22) {
          $1 = $tmp;
        } else if (__label__ == 24) {
          $1 = $tmp;
        }
      } while (0);
    } else if (__label__ == 4) {
      $1 = 1;
    }
  } while (0);
  var $117 = $1;
  STACKTOP = __stackBase__;
  return $117;
  return null;
}
_DecodeSubMbPred["X"] = 1;
function _DecodeMbPred($pStrmData, $pMbPred, $mbType, $numRefIdxActive) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $tmp;
  var $i;
  var $j;
  var $value = __stackBase__;
  var $itmp = __stackBase__ + 4;
  $2 = $pStrmData;
  $3 = $pMbPred;
  $4 = $mbType;
  $5 = $numRefIdxActive;
  var $7 = _h264bsdMbPartPredMode($4);
  if ($7 == 2) {
    __label__ = 1;
  } else if ($7 == 0) {
    __label__ = 19;
  } else if ($7 == 1) {
    __label__ = 32;
  } else {
    __label__ = 36;
  }
  $150$$8$$81$$137$120 : do {
    if (__label__ == 1) {
      if ($5 > 1) {
        __label__ = 2;
      } else {
        __label__ = 10;
      }
      $11$$41$122 : do {
        if (__label__ == 2) {
          var $13 = _h264bsdNumMbPart($4);
          $i = $13;
          $j = 0;
          $14$124 : while (1) {
            var $15 = $i;
            var $16 = $15 - 1;
            $i = $16;
            if (!($15 != 0)) {
              __label__ = 9;
              break $14$124;
            }
            var $23 = _h264bsdDecodeExpGolombTruncated($2, $value, $5 > 2);
            $tmp = $23;
            if ($tmp != 0) {
              __label__ = 6;
              break $14$124;
            }
            if (HEAPU32[$value >> 2] >= $5) {
              __label__ = 6;
              break $14$124;
            }
            var $32 = HEAP32[$value >> 2];
            HEAP32[$3 + 132 + ($j << 2) >> 2] = $32;
            var $39 = $j + 1;
            $j = $39;
          }
          $40$$30$130 : do {
            if (__label__ == 9) {} else if (__label__ == 6) {
              $1 = 1;
              __label__ = 37;
              break $150$$8$$81$$137$120;
            }
          } while (0);
        }
      } while (0);
      var $43 = _h264bsdNumMbPart($4);
      $i = $43;
      $j = 0;
      $44$134 : while (1) {
        var $45 = $i;
        var $46 = $45 - 1;
        $i = $46;
        if (!($45 != 0)) {
          __label__ = 18;
          break $44$134;
        }
        var $50 = _h264bsdDecodeExpGolombSigned($2, $itmp);
        $tmp = $50;
        if ($tmp != 0) {
          __label__ = 13;
          break $44$134;
        }
        HEAP16[$3 + 148 + ($j << 2) >> 1] = HEAP32[$itmp >> 2] & 65535;
        var $64 = _h264bsdDecodeExpGolombSigned($2, $itmp);
        $tmp = $64;
        if ($tmp != 0) {
          __label__ = 15;
          break $44$134;
        }
        HEAP16[$3 + 148 + ($j << 2) + 2 >> 1] = HEAP32[$itmp >> 2] & 65535;
        var $79 = $j + 1;
        $j = $79;
      }
      $80$$53$$67$140 : do {
        if (__label__ == 18) {
          __label__ = 36;
          break $150$$8$$81$$137$120;
        } else if (__label__ == 13) {
          $1 = $tmp;
          __label__ = 37;
          break $150$$8$$81$$137$120;
        } else if (__label__ == 15) {
          $1 = $tmp;
          __label__ = 37;
          break $150$$8$$81$$137$120;
        }
      } while (0);
    } else if (__label__ == 19) {
      HEAP32[$itmp >> 2] = 0;
      $i = 0;
      $82$145 : while (1) {
        if (!(HEAP32[$itmp >> 2] < 2)) {
          __label__ = 31;
          break $82$145;
        }
        var $87 = _h264bsdShowBits32($2);
        HEAP32[$value >> 2] = $87;
        $tmp = 0;
        $j = 8;
        $88$148 : while (1) {
          var $89 = $j;
          var $90 = $89 - 1;
          $j = $90;
          if (!($89 != 0)) {
            __label__ = 27;
            break $88$148;
          }
          var $96 = (HEAP32[$value >> 2] & -2147483648) != 0 ? 1 : 0;
          HEAP32[$3 + ($i << 2) >> 2] = $96;
          var $102 = HEAP32[$value >> 2] << 1;
          HEAP32[$value >> 2] = $102;
          if (HEAP32[$3 + ($i << 2) >> 2] != 0) {
            __label__ = 25;
          } else {
            __label__ = 24;
          }
          $120$$109$151 : do {
            if (__label__ == 24) {
              HEAP32[$3 + 64 + ($i << 2) >> 2] = HEAPU32[$value >> 2] >>> 29;
              var $117 = HEAP32[$value >> 2] << 3;
              HEAP32[$value >> 2] = $117;
              var $119 = $tmp + 1;
              $tmp = $119;
            }
          } while (0);
          var $123 = $i + 1;
          $i = $123;
        }
        var $129 = _h264bsdFlushBits($2, $tmp * 3 + 8);
        if ($129 == -1) {
          __label__ = 28;
          break $82$145;
        }
        var $135 = HEAP32[$itmp >> 2] + 1;
        HEAP32[$itmp >> 2] = $135;
      }
      $136$$131$158 : do {
        if (__label__ == 31) {
          __label__ = 32;
          break $150$$8$$81$$137$120;
        } else if (__label__ == 28) {
          $1 = 1;
          __label__ = 37;
          break $150$$8$$81$$137$120;
        }
      } while (0);
    }
  } while (0);
  $150$$151$$137$161 : do {
    if (__label__ == 32) {
      var $139 = _h264bsdDecodeExpGolombUnsigned($2, $value);
      $tmp = $139;
      if ($tmp != 0) {
        __label__ = 34;
      } else {
        __label__ = 33;
      }
      $145$$142$163 : do {
        if (__label__ == 33) {
          if (HEAPU32[$value >> 2] > 3) {
            __label__ = 34;
            break $145$$142$163;
          }
          var $147 = HEAP32[$value >> 2];
          HEAP32[$3 + 128 >> 2] = $147;
          __label__ = 36;
          break $150$$151$$137$161;
        }
      } while (0);
      $1 = 1;
      __label__ = 37;
      break $150$$151$$137$161;
    }
  } while (0);
  $150$$151$167 : do {
    if (__label__ == 36) {
      $1 = 0;
    }
  } while (0);
  var $152 = $1;
  STACKTOP = __stackBase__;
  return $152;
  return null;
}
_DecodeMbPred["X"] = 1;
function _h264bsdNumSubMbPart($subMbType) {
  var __label__;
  var $1;
  var $2;
  $2 = $subMbType;
  if ($2 == 0) {
    __label__ = 1;
  } else if ($2 == 1) {
    __label__ = 2;
  } else if ($2 == 2) {
    __label__ = 2;
  } else {
    __label__ = 3;
  }
  $6$$4$$5$52 : do {
    if (__label__ == 3) {
      $1 = 4;
    } else if (__label__ == 1) {
      $1 = 1;
    } else if (__label__ == 2) {
      $1 = 2;
    }
  } while (0);
  var $8 = $1;
  return $8;
  return null;
}
function _h264bsdPredModeIntra16x16($mbType) {
  var $1;
  var $tmp;
  $1 = $mbType;
  $tmp = $1 - 7;
  var $5 = $tmp & 3;
  return $5;
  return null;
}
function _DecodeResidual($pStrmData, $pResidual, $pMb, $mbType, $codedBlockPattern) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $i;
  var $j;
  var $tmp;
  var $nc;
  var $blockCoded;
  var $blockIndex;
  var $is16x16;
  var $level;
  $2 = $pStrmData;
  $3 = $pResidual;
  $4 = $pMb;
  $5 = $mbType;
  $6 = $codedBlockPattern;
  $level = $3 + 56;
  var $11 = _h264bsdMbPartPredMode($5);
  if ($11 == 1) {
    __label__ = 1;
  } else {
    __label__ = 4;
  }
  $13$$38$2 : do {
    if (__label__ == 1) {
      var $18 = _DetermineNc($4, 0, $3);
      $nc = $18;
      var $24 = _h264bsdDecodeResidualBlockCavlc($2, $level + 1536, $nc, 16);
      $tmp = $24;
      if (($tmp & 15) != 0) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      $28$$30$4 : do {
        if (__label__ == 2) {
          $1 = $tmp;
          __label__ = 35;
          break $13$$38$2;
        } else if (__label__ == 3) {
          HEAP16[$3 + 48 >> 1] = $tmp >>> 4 & 255 & 65535;
          $is16x16 = 1;
          __label__ = 5;
          break $13$$38$2;
        }
      } while (0);
    } else if (__label__ == 4) {
      $is16x16 = 0;
      __label__ = 5;
      break $13$$38$2;
    }
  } while (0);
  $210$$39$8 : do {
    if (__label__ == 5) {
      $i = 4;
      $blockIndex = 0;
      $40$10 : while (1) {
        var $41 = $i;
        var $42 = $41 - 1;
        $i = $42;
        if (!($41 != 0)) {
          __label__ = 20;
          break $40$10;
        }
        $blockCoded = $6 & 1;
        var $48 = $6 >>> 1;
        $6 = $48;
        if ($blockCoded != 0) {
          __label__ = 8;
        } else {
          __label__ = 18;
        }
        $51$$113$13 : do {
          if (__label__ == 8) {
            $j = 4;
            $52$15 : while (1) {
              var $53 = $j;
              var $54 = $53 - 1;
              $j = $54;
              if (!($53 != 0)) {
                __label__ = 17;
                break $52$15;
              }
              var $62 = _DetermineNc($4, $blockIndex, $3);
              $nc = $62;
              if ($is16x16 != 0) {
                __label__ = 11;
              } else {
                __label__ = 12;
              }
              $65$$80$18 : do {
                if (__label__ == 11) {
                  var $73 = _h264bsdDecodeResidualBlockCavlc($2, $level + ($blockIndex << 6) + 4, $nc, 15);
                  $tmp = $73;
                  HEAP32[$3 + 1720 + ($blockIndex << 2) >> 2] = $tmp >>> 15;
                } else if (__label__ == 12) {
                  var $87 = _h264bsdDecodeResidualBlockCavlc($2, $level + ($blockIndex << 6), $nc, 16);
                  $tmp = $87;
                  HEAP32[$3 + 1720 + ($blockIndex << 2) >> 2] = $tmp >>> 16;
                }
              } while (0);
              if (($tmp & 15) != 0) {
                __label__ = 14;
                break $40$10;
              }
              HEAP16[$3 + ($blockIndex << 1) >> 1] = $tmp >>> 4 & 255 & 65535;
              var $111 = $blockIndex + 1;
              $blockIndex = $111;
            }
          } else if (__label__ == 18) {
            var $115 = $blockIndex + 4;
            $blockIndex = $115;
          }
        } while (0);
      }
      $117$$98$27 : do {
        if (__label__ == 20) {
          $blockCoded = $6 & 3;
          if ($blockCoded != 0) {
            __label__ = 21;
          } else {
            __label__ = 26;
          }
          $122$$160$29 : do {
            if (__label__ == 21) {
              var $127 = _h264bsdDecodeResidualBlockCavlc($2, $level + 1600, -1, 4);
              $tmp = $127;
              if (($tmp & 15) != 0) {
                __label__ = 22;
              } else {
                __label__ = 23;
              }
              $131$$133$31 : do {
                if (__label__ == 22) {
                  $1 = $tmp;
                  __label__ = 35;
                  break $210$$39$8;
                } else if (__label__ == 23) {
                  HEAP16[$3 + 50 >> 1] = $tmp >>> 4 & 255 & 65535;
                  var $146 = _h264bsdDecodeResidualBlockCavlc($2, $level + 1616, -1, 4);
                  $tmp = $146;
                  if (($tmp & 15) != 0) {
                    __label__ = 24;
                  } else {
                    __label__ = 25;
                  }
                  $150$$152$34 : do {
                    if (__label__ == 24) {
                      $1 = $tmp;
                      __label__ = 35;
                      break $210$$39$8;
                    } else if (__label__ == 25) {
                      HEAP16[$3 + 52 >> 1] = $tmp >>> 4 & 255 & 65535;
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
          $blockCoded = $6 & 2;
          if ($blockCoded != 0) {
            __label__ = 27;
          } else {
            __label__ = 34;
          }
          $165$$209$38 : do {
            if (__label__ == 27) {
              $i = 8;
              $166$40 : while (1) {
                var $167 = $i;
                var $168 = $167 - 1;
                $i = $168;
                if (!($167 != 0)) {
                  __label__ = 33;
                  break $166$40;
                }
                var $176 = _DetermineNc($4, $blockIndex, $3);
                $nc = $176;
                var $184 = _h264bsdDecodeResidualBlockCavlc($2, $level + ($blockIndex << 6) + 4, $nc, 15);
                $tmp = $184;
                if (($tmp & 15) != 0) {
                  __label__ = 30;
                  break $166$40;
                }
                HEAP16[$3 + ($blockIndex << 1) >> 1] = $tmp >>> 4 & 255 & 65535;
                HEAP32[$3 + 1720 + ($blockIndex << 2) >> 2] = $tmp >>> 15;
                var $207 = $blockIndex + 1;
                $blockIndex = $207;
              }
              $208$$188$45 : do {
                if (__label__ == 33) {} else if (__label__ == 30) {
                  $1 = $tmp;
                  __label__ = 35;
                  break $210$$39$8;
                }
              } while (0);
            }
          } while (0);
          $1 = 0;
        } else if (__label__ == 14) {
          $1 = $tmp;
        }
      } while (0);
    }
  } while (0);
  var $211 = $1;
  return $211;
  return null;
}
_DecodeResidual["X"] = 1;
function _h264bsdDecodeMacroblock($pMb, $pMbLayer, $currImage, $dpb, $qpY, $mbNum, $constrainedIntraPredFlag, $data) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  var $9;
  var $i;
  var $tmp;
  var $mbType;
  var $pData;
  var $tot;
  var $lev;
  $2 = $pMb;
  $3 = $pMbLayer;
  $4 = $currImage;
  $5 = $dpb;
  $6 = $qpY;
  $7 = $mbNum;
  $8 = $constrainedIntraPredFlag;
  $9 = $data;
  $mbType = HEAP32[$3 >> 2];
  HEAP32[$2 >> 2] = $mbType;
  var $19 = HEAP32[$2 + 196 >> 2] + 1;
  HEAP32[$2 + 196 >> 2] = $19;
  _h264bsdSetCurrImageMbPointers($4, $7);
  if ($mbType == 31) {
    __label__ = 1;
  } else {
    __label__ = 13;
  }
  $24$$72$59 : do {
    if (__label__ == 1) {
      $pData = $9;
      $tot = $2 + 28;
      $lev = $3 + 328;
      HEAP32[$2 + 20 >> 2] = 0;
      if (HEAPU32[$2 + 196 >> 2] > 1) {
        __label__ = 2;
      } else {
        __label__ = 6;
      }
      $40$$49$61 : do {
        if (__label__ == 2) {
          $i = 24;
          $41$63 : while (1) {
            var $42 = $i;
            var $43 = $42 - 1;
            $i = $43;
            if (!($42 != 0)) {
              __label__ = 5;
              break $41$63;
            }
            var $46 = $tot;
            var $47 = $46 + 2;
            $tot = $47;
            HEAP16[$46 >> 1] = 16;
          }
          $1 = 0;
        } else if (__label__ == 6) {
          $i = 24;
          $50$68 : while (1) {
            var $51 = $i;
            var $52 = $51 - 1;
            $i = $52;
            if (!($51 != 0)) {
              __label__ = 12;
              break $50$68;
            }
            var $55 = $tot;
            var $56 = $55 + 2;
            $tot = $56;
            HEAP16[$55 >> 1] = 16;
            $tmp = 16;
            $57$71 : while (1) {
              var $58 = $tmp;
              var $59 = $58 - 1;
              $tmp = $59;
              if (!($58 != 0)) {
                __label__ = 11;
                break $57$71;
              }
              var $62 = $lev;
              var $63 = $62 + 4;
              $lev = $63;
              var $65 = HEAP32[$62 >> 2] & 255;
              var $66 = $pData;
              var $67 = $66 + 1;
              $pData = $67;
              HEAP8[$66] = $65;
            }
          }
          _h264bsdWriteMacroblock($4, $9);
          $1 = 0;
        }
      } while (0);
    } else if (__label__ == 13) {
      if ($mbType != 0) {
        __label__ = 14;
      } else {
        __label__ = 24;
      }
      $75$$134$77 : do {
        if (__label__ == 14) {
          _H264SwDecMemcpy($2 + 28, $3 + 272, 54);
          if (HEAP32[$3 + 8 >> 2] != 0) {
            __label__ = 15;
          } else {
            __label__ = 21;
          }
          $89$$114$79 : do {
            if (__label__ == 15) {
              var $95 = HEAP32[$6 >> 2] + HEAP32[$3 + 8 >> 2];
              HEAP32[$6 >> 2] = $95;
              if (HEAP32[$6 >> 2] < 0) {
                __label__ = 16;
              } else {
                __label__ = 17;
              }
              $100$$104$81 : do {
                if (__label__ == 16) {
                  var $103 = HEAP32[$6 >> 2] + 52;
                  HEAP32[$6 >> 2] = $103;
                } else if (__label__ == 17) {
                  if (HEAP32[$6 >> 2] >= 52) {
                    __label__ = 18;
                  } else {
                    __label__ = 19;
                  }
                  $108$$112$84 : do {
                    if (__label__ == 18) {
                      var $111 = HEAP32[$6 >> 2] - 52;
                      HEAP32[$6 >> 2] = $111;
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
          var $116 = HEAP32[$6 >> 2];
          HEAP32[$2 + 20 >> 2] = $116;
          var $128 = _ProcessResidual($2, $3 + 328, $3 + 1992);
          $tmp = $128;
          if ($tmp != 0) {
            __label__ = 22;
          } else {
            __label__ = 23;
          }
          $131$$133$89 : do {
            if (__label__ == 22) {
              $1 = $tmp;
              __label__ = 34;
              break $24$$72$59;
            } else if (__label__ == 23) {}
          } while (0);
        } else if (__label__ == 24) {
          _H264SwDecMemset($2 + 28, 0, 54);
          var $140 = HEAP32[$6 >> 2];
          HEAP32[$2 + 20 >> 2] = $140;
        }
      } while (0);
      var $145 = _h264bsdMbPartPredMode($mbType);
      if ($145 != 2) {
        __label__ = 26;
      } else {
        __label__ = 29;
      }
      $147$$160$94 : do {
        if (__label__ == 26) {
          var $154 = _h264bsdIntraPrediction($2, $3, $4, $7, $8, $9);
          $tmp = $154;
          if ($tmp != 0) {
            __label__ = 27;
          } else {
            __label__ = 28;
          }
          $157$$159$96 : do {
            if (__label__ == 27) {
              $1 = $tmp;
              __label__ = 34;
              break $24$$72$59;
            } else if (__label__ == 28) {}
          } while (0);
        } else if (__label__ == 29) {
          var $167 = _h264bsdInterPrediction($2, $3, $5, $7, $4, $9);
          $tmp = $167;
          if ($tmp != 0) {
            __label__ = 30;
          } else {
            __label__ = 31;
          }
          $170$$172$100 : do {
            if (__label__ == 30) {
              $1 = $tmp;
              __label__ = 34;
              break $24$$72$59;
            } else if (__label__ == 31) {}
          } while (0);
        }
      } while (0);
      $1 = 0;
    }
  } while (0);
  var $176 = $1;
  return $176;
  return null;
}
_h264bsdDecodeMacroblock["X"] = 1;
function _h264bsdSubMbPartMode($subMbType) {
  var $1;
  $1 = $subMbType;
  var $2 = $1;
  return $2;
  return null;
}
function _h264bsdShowBits32($pStrmData) {
  var __label__;
  var $1;
  var $2;
  var $bits;
  var $shift;
  var $out;
  var $pStrm;
  var $bitPosInWord;
  var $byte;
  var $tmp;
  $2 = $pStrmData;
  $pStrm = HEAP32[$2 + 4 >> 2];
  $bits = (HEAP32[$2 + 12 >> 2] << 3) - HEAP32[$2 + 16 >> 2];
  if ($bits >= 32) {
    __label__ = 1;
  } else {
    __label__ = 4;
  }
  $16$$61$94 : do {
    if (__label__ == 1) {
      $bitPosInWord = HEAP32[$2 + 8 >> 2];
      $out = HEAPU8[$pStrm] << 24 | HEAPU8[$pStrm + 1] << 16 | HEAPU8[$pStrm + 2] << 8 | HEAPU8[$pStrm + 3];
      if ($bitPosInWord != 0) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      $44$$59$96 : do {
        if (__label__ == 2) {
          $byte = HEAPU8[$pStrm + 4];
          $tmp = 8 - $bitPosInWord;
          var $53 = $out << $bitPosInWord;
          $out = $53;
          var $58 = $out | $byte >>> $tmp;
          $out = $58;
        }
      } while (0);
      $1 = $out;
    } else if (__label__ == 4) {
      if ($bits > 0) {
        __label__ = 5;
      } else {
        __label__ = 9;
      }
      $64$$99$100 : do {
        if (__label__ == 5) {
          $shift = HEAP32[$2 + 8 >> 2] + 24;
          var $69 = $pStrm;
          var $70 = $69 + 1;
          $pStrm = $70;
          $out = HEAPU8[$69] << $shift;
          var $80 = $bits - (8 - HEAP32[$2 + 8 >> 2]);
          $bits = $80;
          $81$102 : while (1) {
            if (!($bits > 0)) {
              __label__ = 8;
              break $81$102;
            }
            var $86 = $shift - 8;
            $shift = $86;
            var $87 = $pStrm;
            var $88 = $87 + 1;
            $pStrm = $88;
            var $94 = $out | HEAPU8[$87] << $shift;
            $out = $94;
            var $96 = $bits - 8;
            $bits = $96;
          }
          $1 = $out;
        } else if (__label__ == 9) {
          $1 = 0;
        }
      } while (0);
    }
  } while (0);
  var $101 = $1;
  return $101;
  return null;
}
_h264bsdShowBits32["X"] = 1;
function _h264bsdFlushBits($pStrmData, $numBits) {
  var __label__;
  var $1;
  var $2;
  var $3;
  $2 = $pStrmData;
  $3 = $numBits;
  var $8 = HEAP32[$2 + 16 >> 2] + $3;
  HEAP32[$2 + 16 >> 2] = $8;
  var $12 = HEAP32[$2 + 16 >> 2] & 7;
  HEAP32[$2 + 8 >> 2] = $12;
  if (HEAPU32[$2 + 16 >> 2] <= HEAP32[$2 + 12 >> 2] << 3) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $23$$34$109 : do {
    if (__label__ == 1) {
      var $31 = HEAP32[$2 >> 2] + (HEAPU32[$2 + 16 >> 2] >>> 3);
      HEAP32[$2 + 4 >> 2] = $31;
      $1 = 0;
    } else if (__label__ == 2) {
      $1 = -1;
    }
  } while (0);
  var $36 = $1;
  return $36;
  return null;
}
function _h264bsdIsByteAligned($pStrmData) {
  var __label__;
  var $1;
  var $2;
  $2 = $pStrmData;
  if (HEAP32[$2 + 8 >> 2] != 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $8$$7$114 : do {
    if (__label__ == 2) {
      $1 = 0;
    } else if (__label__ == 1) {
      $1 = 1;
    }
  } while (0);
  var $10 = $1;
  return $10;
  return null;
}
function _ProcessResidual($pMb, $residualLevel, $coeffMap) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $i;
  var $chromaQp;
  var $blockData;
  var $blockDc;
  var $totalCoeff;
  var $chromaDc;
  var $dcCoeffIdx;
  $2 = $pMb;
  $3 = $residualLevel;
  $4 = $coeffMap;
  $blockDc = $3 + 1536;
  $blockData = $3;
  $totalCoeff = $2 + 28;
  var $13 = HEAP32[$2 >> 2];
  var $14 = _h264bsdMbPartPredMode($13);
  if ($14 == 1) {
    __label__ = 1;
  } else {
    __label__ = 14;
  }
  $16$$74$2 : do {
    if (__label__ == 1) {
      if (HEAP16[$totalCoeff + 48 >> 1] != 0) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      $21$$27$4 : do {
        if (__label__ == 2) {
          var $26 = HEAP32[$2 + 20 >> 2];
          _h264bsdProcessLumaDc($blockDc, $26);
        }
      } while (0);
      $dcCoeffIdx = _dcCoeffIndex;
      $i = 16;
      $28$7 : while (1) {
        var $29 = $i;
        var $30 = $29 - 1;
        $i = $30;
        if (!($29 != 0)) {
          __label__ = 13;
          break $28$7;
        }
        var $33 = $dcCoeffIdx;
        var $34 = $33 + 4;
        $dcCoeffIdx = $34;
        var $38 = HEAP32[$blockDc + (HEAP32[$33 >> 2] << 2) >> 2];
        HEAP32[$blockData >> 2] = $38;
        if (HEAP32[$blockData >> 2] != 0) {
          __label__ = 7;
        } else {
          __label__ = 6;
        }
        $50$$45$10 : do {
          if (__label__ == 6) {
            if (HEAP16[$totalCoeff >> 1] != 0) {
              __label__ = 7;
              break $50$$45$10;
            }
            HEAP32[$blockData >> 2] = 16777215;
            __label__ = 11;
            break $50$$45$10;
          }
        } while (0);
        $50$$65$13 : do {
          if (__label__ == 7) {
            var $55 = HEAP32[$2 + 20 >> 2];
            var $57 = HEAP32[$4 >> 2];
            var $58 = _h264bsdProcessBlock($blockData, $55, 1, $57);
            if ($58 != 0) {
              __label__ = 8;
              break $28$7;
            }
          }
        } while (0);
        var $68 = $blockData + 64;
        $blockData = $68;
        var $70 = $totalCoeff + 2;
        $totalCoeff = $70;
        var $72 = $4 + 4;
        $4 = $72;
      }
      $73$$60$18 : do {
        if (__label__ == 13) {
          __label__ = 24;
          break $16$$74$2;
        } else if (__label__ == 8) {
          $1 = 1;
          __label__ = 38;
          break $16$$74$2;
        }
      } while (0);
    } else if (__label__ == 14) {
      $i = 16;
      $75$22 : while (1) {
        var $76 = $i;
        var $77 = $76 - 1;
        $i = $77;
        if (!($76 != 0)) {
          __label__ = 23;
          break $75$22;
        }
        if (HEAP16[$totalCoeff >> 1] != 0) {
          __label__ = 17;
        } else {
          __label__ = 20;
        }
        $83$$95$25 : do {
          if (__label__ == 17) {
            var $88 = HEAP32[$2 + 20 >> 2];
            var $90 = HEAP32[$4 >> 2];
            var $91 = _h264bsdProcessBlock($blockData, $88, 0, $90);
            if ($91 != 0) {
              __label__ = 18;
              break $75$22;
            }
          } else if (__label__ == 20) {
            HEAP32[$blockData >> 2] = 16777215;
          }
        } while (0);
        var $101 = $blockData + 64;
        $blockData = $101;
        var $103 = $totalCoeff + 2;
        $totalCoeff = $103;
        var $105 = $4 + 4;
        $4 = $105;
      }
      $106$$93$31 : do {
        if (__label__ == 23) {
          __label__ = 24;
          break $16$$74$2;
        } else if (__label__ == 18) {
          $1 = 1;
          __label__ = 38;
          break $16$$74$2;
        }
      } while (0);
    }
  } while (0);
  $181$$107$34 : do {
    if (__label__ == 24) {
      var $114 = HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 24 >> 2];
      var $115 = _clip(0, 51, $114);
      $chromaQp = HEAP32[_h264bsdQpC + ($115 << 2) >> 2];
      if (HEAP16[$2 + 78 >> 1] != 0) {
        __label__ = 26;
      } else {
        __label__ = 25;
      }
      $131$$124$36 : do {
        if (__label__ == 25) {
          if (HEAP16[$2 + 80 >> 1] != 0) {
            __label__ = 26;
            break $131$$124$36;
          } else {
            __label__ = 27;
            break $131$$124$36;
          }
        }
      } while (0);
      $131$$136$38 : do {
        if (__label__ == 26) {
          _h264bsdProcessChromaDc($3 + 1600, $chromaQp);
        }
      } while (0);
      $chromaDc = $3 + 1600;
      $i = 8;
      $140$41 : while (1) {
        var $141 = $i;
        var $142 = $141 - 1;
        $i = $142;
        if (!($141 != 0)) {
          __label__ = 37;
          break $140$41;
        }
        var $145 = $chromaDc;
        var $146 = $145 + 4;
        $chromaDc = $146;
        var $147 = HEAP32[$145 >> 2];
        HEAP32[$blockData >> 2] = $147;
        if (HEAP32[$blockData >> 2] != 0) {
          __label__ = 31;
        } else {
          __label__ = 30;
        }
        $159$$154$44 : do {
          if (__label__ == 30) {
            if (HEAP16[$totalCoeff >> 1] != 0) {
              __label__ = 31;
              break $159$$154$44;
            }
            HEAP32[$blockData >> 2] = 16777215;
            __label__ = 35;
            break $159$$154$44;
          }
        } while (0);
        $159$$172$47 : do {
          if (__label__ == 31) {
            var $164 = HEAP32[$4 >> 2];
            var $165 = _h264bsdProcessBlock($blockData, $chromaQp, 1, $164);
            if ($165 != 0) {
              __label__ = 32;
              break $140$41;
            }
          }
        } while (0);
        var $175 = $blockData + 64;
        $blockData = $175;
        var $177 = $totalCoeff + 2;
        $totalCoeff = $177;
        var $179 = $4 + 4;
        $4 = $179;
      }
      $180$$167$52 : do {
        if (__label__ == 37) {
          $1 = 0;
        } else if (__label__ == 32) {
          $1 = 1;
        }
      } while (0);
    }
  } while (0);
  var $182 = $1;
  return $182;
  return null;
}
_ProcessResidual["X"] = 1;
function _DetermineNc($pMb, $blockIndex, $pTotalCoeff) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $tmp;
  var $n;
  var $neighbourA;
  var $neighbourB;
  var $neighbourAindex;
  var $neighbourBindex;
  $1 = $pMb;
  $2 = $blockIndex;
  $3 = $pTotalCoeff;
  var $5 = _h264bsdNeighbour4x4BlockA($2);
  $neighbourA = $5;
  var $7 = _h264bsdNeighbour4x4BlockB($2);
  $neighbourB = $7;
  $neighbourAindex = HEAP8[$neighbourA + 4];
  $neighbourBindex = HEAP8[$neighbourB + 4];
  if (HEAP32[$neighbourA >> 2] == 4) {
    __label__ = 1;
  } else {
    __label__ = 3;
  }
  $18$$39$58 : do {
    if (__label__ == 1) {
      if (!(HEAP32[$neighbourB >> 2] == 4)) {
        __label__ = 3;
        break $18$$39$58;
      }
      $n = HEAP16[$3 + ($neighbourAindex << 1) >> 1] + HEAP16[$3 + ($neighbourBindex << 1) >> 1] + 1 >> 1;
      __label__ = 21;
      break $18$$39$58;
    }
  } while (0);
  $160$$39$61 : do {
    if (__label__ == 3) {
      if (HEAP32[$neighbourA >> 2] == 4) {
        __label__ = 4;
      } else {
        __label__ = 7;
      }
      $44$$72$63 : do {
        if (__label__ == 4) {
          $n = HEAP16[$3 + ($neighbourAindex << 1) >> 1];
          var $54 = HEAP32[$1 + 204 >> 2];
          var $55 = _h264bsdIsNeighbourAvailable($1, $54);
          if ($55 != 0) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $57$$71$65 : do {
            if (__label__ == 5) {
              var $70 = $n + HEAP16[HEAP32[$1 + 204 >> 2] + 28 + ($neighbourBindex << 1) >> 1] + 1 >> 1;
              $n = $70;
            }
          } while (0);
        } else if (__label__ == 7) {
          if (HEAP32[$neighbourB >> 2] == 4) {
            __label__ = 8;
          } else {
            __label__ = 11;
          }
          $77$$105$69 : do {
            if (__label__ == 8) {
              $n = HEAP16[$3 + ($neighbourBindex << 1) >> 1];
              var $87 = HEAP32[$1 + 200 >> 2];
              var $88 = _h264bsdIsNeighbourAvailable($1, $87);
              if ($88 != 0) {
                __label__ = 9;
              } else {
                __label__ = 10;
              }
              $90$$104$71 : do {
                if (__label__ == 9) {
                  var $103 = $n + HEAP16[HEAP32[$1 + 200 >> 2] + 28 + ($neighbourAindex << 1) >> 1] + 1 >> 1;
                  $n = $103;
                }
              } while (0);
            } else if (__label__ == 11) {
              $tmp = 0;
              $n = 0;
              var $109 = HEAP32[$1 + 200 >> 2];
              var $110 = _h264bsdIsNeighbourAvailable($1, $109);
              if ($110 != 0) {
                __label__ = 12;
              } else {
                __label__ = 13;
              }
              $112$$122$75 : do {
                if (__label__ == 12) {
                  $n = HEAP16[HEAP32[$1 + 200 >> 2] + 28 + ($neighbourAindex << 1) >> 1];
                  $tmp = 1;
                }
              } while (0);
              var $126 = HEAP32[$1 + 204 >> 2];
              var $127 = _h264bsdIsNeighbourAvailable($1, $126);
              if ($127 != 0) {
                __label__ = 14;
              } else {
                __label__ = 18;
              }
              $129$$157$78 : do {
                if (__label__ == 14) {
                  if ($tmp != 0) {
                    __label__ = 15;
                  } else {
                    __label__ = 16;
                  }
                  $132$$146$80 : do {
                    if (__label__ == 15) {
                      var $145 = $n + HEAP16[HEAP32[$1 + 204 >> 2] + 28 + ($neighbourBindex << 1) >> 1] + 1 >> 1;
                      $n = $145;
                    } else if (__label__ == 16) {
                      $n = HEAP16[HEAP32[$1 + 204 >> 2] + 28 + ($neighbourBindex << 1) >> 1];
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $161 = $n;
  return $161;
  return null;
}
_DetermineNc["X"] = 1;
function _h264bsdGetBits($pStrmData, $numBits) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $out;
  $2 = $pStrmData;
  $3 = $numBits;
  var $5 = _h264bsdShowBits32($2);
  $out = $5 >>> 32 - $3;
  var $11 = _h264bsdFlushBits($2, $3);
  if ($11 == 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $13$$15$89 : do {
    if (__label__ == 1) {
      $1 = $out;
    } else if (__label__ == 2) {
      $1 = -1;
    }
  } while (0);
  var $17 = $1;
  return $17;
  return null;
}
function _h264bsdDecodeExpGolombUnsigned($pStrmData, $codeNum) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $bits;
  var $numZeros;
  $2 = $pStrmData;
  $3 = $codeNum;
  var $5 = _h264bsdShowBits32($2);
  $bits = $5;
  if ($bits >>> 0 >= 2147483648) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $8$$12$2 : do {
    if (__label__ == 1) {
      var $10 = _h264bsdFlushBits($2, 1);
      HEAP32[$3 >> 2] = 0;
      $1 = 0;
    } else if (__label__ == 2) {
      if ($bits >= 1073741824) {
        __label__ = 3;
      } else {
        __label__ = 6;
      }
      $15$$26$5 : do {
        if (__label__ == 3) {
          var $17 = _h264bsdFlushBits($2, 3);
          if ($17 == -1) {
            __label__ = 4;
          } else {
            __label__ = 5;
          }
          $19$$20$7 : do {
            if (__label__ == 4) {
              $1 = 1;
            } else if (__label__ == 5) {
              HEAP32[$3 >> 2] = ($bits >>> 29 & 1) + 1;
              $1 = 0;
            }
          } while (0);
        } else if (__label__ == 6) {
          if ($bits >= 536870912) {
            __label__ = 7;
          } else {
            __label__ = 10;
          }
          $29$$40$11 : do {
            if (__label__ == 7) {
              var $31 = _h264bsdFlushBits($2, 5);
              if ($31 == -1) {
                __label__ = 8;
              } else {
                __label__ = 9;
              }
              $33$$34$13 : do {
                if (__label__ == 8) {
                  $1 = 1;
                } else if (__label__ == 9) {
                  HEAP32[$3 >> 2] = ($bits >>> 27 & 3) + 3;
                  $1 = 0;
                }
              } while (0);
            } else if (__label__ == 10) {
              if ($bits >= 268435456) {
                __label__ = 11;
              } else {
                __label__ = 14;
              }
              $43$$54$17 : do {
                if (__label__ == 11) {
                  var $45 = _h264bsdFlushBits($2, 7);
                  if ($45 == -1) {
                    __label__ = 12;
                  } else {
                    __label__ = 13;
                  }
                  $47$$48$19 : do {
                    if (__label__ == 12) {
                      $1 = 1;
                    } else if (__label__ == 13) {
                      HEAP32[$3 >> 2] = ($bits >>> 25 & 7) + 7;
                      $1 = 0;
                    }
                  } while (0);
                } else if (__label__ == 14) {
                  var $56 = _h264bsdCountLeadingZeros($bits, 28);
                  $numZeros = $56 + 4;
                  if ($numZeros == 32) {
                    __label__ = 15;
                  } else {
                    __label__ = 25;
                  }
                  $60$$88$23 : do {
                    if (__label__ == 15) {
                      HEAP32[$3 >> 2] = 0;
                      var $63 = _h264bsdFlushBits($2, 32);
                      var $65 = _h264bsdGetBits($2, 1);
                      $bits = $65;
                      if ($bits == 1) {
                        __label__ = 16;
                      } else {
                        __label__ = 24;
                      }
                      $68$$87$25 : do {
                        if (__label__ == 16) {
                          var $70 = _h264bsdShowBits32($2);
                          $bits = $70;
                          var $72 = _h264bsdFlushBits($2, 32);
                          if ($72 == -1) {
                            __label__ = 17;
                          } else {
                            __label__ = 18;
                          }
                          $74$$75$27 : do {
                            if (__label__ == 17) {
                              $1 = 1;
                              __label__ = 33;
                              break $8$$12$2;
                            } else if (__label__ == 18) {
                              if ($bits == 0) {
                                __label__ = 19;
                              } else {
                                __label__ = 20;
                              }
                              $78$$80$30 : do {
                                if (__label__ == 19) {
                                  HEAP32[$3 >> 2] = -1;
                                  $1 = 0;
                                  __label__ = 33;
                                  break $8$$12$2;
                                } else if (__label__ == 20) {
                                  if ($bits == 1) {
                                    __label__ = 21;
                                  } else {
                                    __label__ = 22;
                                  }
                                  $83$$85$33 : do {
                                    if (__label__ == 21) {
                                      HEAP32[$3 >> 2] = -1;
                                      $1 = 1;
                                      __label__ = 33;
                                      break $8$$12$2;
                                    } else if (__label__ == 22) {}
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                      $1 = 1;
                    } else if (__label__ == 25) {
                      var $92 = _h264bsdFlushBits($2, $numZeros + 1);
                      var $96 = _h264bsdGetBits($2, $numZeros);
                      $bits = $96;
                      if ($bits == -1) {
                        __label__ = 27;
                      } else {
                        __label__ = 28;
                      }
                      $99$$100$40 : do {
                        if (__label__ == 27) {
                          $1 = 1;
                        } else if (__label__ == 28) {
                          HEAP32[$3 >> 2] = (1 << $numZeros) - 1 + $bits;
                          $1 = 0;
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $112 = $1;
  return $112;
  return null;
}
_h264bsdDecodeExpGolombUnsigned["X"] = 1;
function _h264bsdDecodeExpGolombSigned($pStrmData, $value) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $status;
  var $codeNum = __stackBase__;
  $2 = $pStrmData;
  $3 = $value;
  HEAP32[$codeNum >> 2] = 0;
  var $5 = _h264bsdDecodeExpGolombUnsigned($2, $codeNum);
  $status = $5;
  if (HEAP32[$codeNum >> 2] == -1) {
    __label__ = 1;
  } else {
    __label__ = 4;
  }
  $8$$14$49 : do {
    if (__label__ == 1) {
      if ($status == 0) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      $11$$12$51 : do {
        if (__label__ == 2) {
          $1 = 1;
        } else if (__label__ == 3) {
          HEAP32[$3 >> 2] = -2147483648;
          $1 = 0;
        }
      } while (0);
    } else if (__label__ == 4) {
      if ($status == 0) {
        __label__ = 5;
      } else {
        __label__ = 9;
      }
      $17$$33$55 : do {
        if (__label__ == 5) {
          if ((HEAP32[$codeNum >> 2] & 1) != 0) {
            __label__ = 6;
          } else {
            __label__ = 7;
          }
          $21$$25$57 : do {
            if (__label__ == 6) {
              var $31 = HEAP32[$codeNum >> 2] + 1 >>> 1;
            } else if (__label__ == 7) {
              var $31 = -(HEAP32[$codeNum >> 2] + 1 >>> 1);
            }
          } while (0);
          var $31;
          HEAP32[$3 >> 2] = $31;
          $1 = 0;
        } else if (__label__ == 9) {
          $1 = 1;
        }
      } while (0);
    }
  } while (0);
  var $36 = $1;
  STACKTOP = __stackBase__;
  return $36;
  return null;
}
function _h264bsdDecodeExpGolombMapped($pStrmData, $value, $isIntra) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $status;
  var $codeNum = __stackBase__;
  $2 = $pStrmData;
  $3 = $value;
  $4 = $isIntra;
  var $6 = _h264bsdDecodeExpGolombUnsigned($2, $codeNum);
  $status = $6;
  if ($status != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $9$$10$65 : do {
    if (__label__ == 1) {
      $1 = 1;
    } else if (__label__ == 2) {
      if (HEAPU32[$codeNum >> 2] > 47) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $13$$14$68 : do {
        if (__label__ == 3) {
          $1 = 1;
        } else if (__label__ == 4) {
          if ($4 != 0) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $17$$23$71 : do {
            if (__label__ == 5) {
              var $21 = HEAPU8[_codedBlockPatternIntra4x4 + HEAP32[$codeNum >> 2]];
              HEAP32[$3 >> 2] = $21;
            } else if (__label__ == 6) {
              var $27 = HEAPU8[_codedBlockPatternInter + HEAP32[$codeNum >> 2]];
              HEAP32[$3 >> 2] = $27;
            }
          } while (0);
          $1 = 0;
        }
      } while (0);
    }
  } while (0);
  var $31 = $1;
  STACKTOP = __stackBase__;
  return $31;
  return null;
}
function _h264bsdDecodeExpGolombTruncated($pStrmData, $value, $greaterThanOne) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  $2 = $pStrmData;
  $3 = $value;
  $4 = $greaterThanOne;
  if ($4 != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $7$$11$77 : do {
    if (__label__ == 1) {
      var $10 = _h264bsdDecodeExpGolombUnsigned($2, $3);
      $1 = $10;
    } else if (__label__ == 2) {
      var $13 = _h264bsdGetBits($2, 1);
      HEAP32[$3 >> 2] = $13;
      if (HEAP32[$3 >> 2] == -1) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $18$$19$80 : do {
        if (__label__ == 3) {
          $1 = 1;
        } else if (__label__ == 4) {
          var $22 = HEAP32[$3 >> 2] ^ 1;
          HEAP32[$3 >> 2] = $22;
          $1 = 0;
        }
      } while (0);
    }
  } while (0);
  var $25 = $1;
  return $25;
  return null;
}
function _DecodeCoeffToken($bits, $nc) {
  var __label__;
  var $1;
  var $2;
  var $value;
  $1 = $bits;
  $2 = $nc;
  if ($2 >>> 0 < 2) {
    __label__ = 1;
  } else {
    __label__ = 14;
  }
  $5$$46$135 : do {
    if (__label__ == 1) {
      if ($1 >= 32768) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      $8$$9$137 : do {
        if (__label__ == 2) {
          $value = 1;
        } else if (__label__ == 3) {
          if ($1 >= 3072) {
            __label__ = 4;
          } else {
            __label__ = 5;
          }
          $12$$18$140 : do {
            if (__label__ == 4) {
              $value = HEAPU16[_coeffToken0_0 + ($1 >>> 10 << 1) >> 1];
            } else if (__label__ == 5) {
              if ($1 >= 256) {
                __label__ = 6;
              } else {
                __label__ = 7;
              }
              $21$$27$143 : do {
                if (__label__ == 6) {
                  $value = HEAPU16[_coeffToken0_1 + ($1 >>> 6 << 1) >> 1];
                } else if (__label__ == 7) {
                  if ($1 >= 32) {
                    __label__ = 8;
                  } else {
                    __label__ = 9;
                  }
                  $30$$37$146 : do {
                    if (__label__ == 8) {
                      $value = HEAPU16[_coeffToken0_2 + (($1 >>> 2) - 8 << 1) >> 1];
                    } else if (__label__ == 9) {
                      $value = HEAPU16[_coeffToken0_3 + ($1 << 1) >> 1];
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    } else if (__label__ == 14) {
      if ($2 >>> 0 < 4) {
        __label__ = 15;
      } else {
        __label__ = 25;
      }
      $49$$84$154 : do {
        if (__label__ == 15) {
          if ($1 >= 32768) {
            __label__ = 16;
          } else {
            __label__ = 17;
          }
          $52$$57$156 : do {
            if (__label__ == 16) {
              var $56 = ($1 & 16384) != 0 ? 2 : 2082;
              $value = $56;
            } else if (__label__ == 17) {
              if ($1 >= 4096) {
                __label__ = 18;
              } else {
                __label__ = 19;
              }
              $60$$66$159 : do {
                if (__label__ == 18) {
                  $value = HEAPU16[_coeffToken2_0 + ($1 >>> 10 << 1) >> 1];
                } else if (__label__ == 19) {
                  if ($1 >= 512) {
                    __label__ = 20;
                  } else {
                    __label__ = 21;
                  }
                  $69$$75$162 : do {
                    if (__label__ == 20) {
                      $value = HEAPU16[_coeffToken2_1 + ($1 >>> 7 << 1) >> 1];
                    } else if (__label__ == 21) {
                      $value = HEAPU16[_coeffToken2_2 + ($1 >>> 2 << 1) >> 1];
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        } else if (__label__ == 25) {
          if ($2 >>> 0 < 8) {
            __label__ = 26;
          } else {
            __label__ = 29;
          }
          $87$$102$169 : do {
            if (__label__ == 26) {
              $value = HEAPU16[_coeffToken4_0 + ($1 >>> 10 << 1) >> 1];
              if ($value != 0) {
                __label__ = 28;
              } else {
                __label__ = 27;
              }
              $101$$95$171 : do {
                if (__label__ == 27) {
                  $value = HEAPU16[_coeffToken4_1 + ($1 >>> 6 << 1) >> 1];
                }
              } while (0);
            } else if (__label__ == 29) {
              if ($2 >>> 0 <= 16) {
                __label__ = 30;
              } else {
                __label__ = 31;
              }
              $105$$111$175 : do {
                if (__label__ == 30) {
                  $value = HEAPU16[_coeffToken8 + ($1 >>> 10 << 1) >> 1];
                } else if (__label__ == 31) {
                  $value = HEAPU16[_coeffTokenMinus1_0 + ($1 >>> 13 << 1) >> 1];
                  if ($value != 0) {
                    __label__ = 33;
                  } else {
                    __label__ = 32;
                  }
                  $125$$119$178 : do {
                    if (__label__ == 32) {
                      $value = HEAPU16[_coeffTokenMinus1_1 + ($1 >>> 8 << 1) >> 1];
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $130 = $value;
  return $130;
  return null;
}
_DecodeCoeffToken["X"] = 1;
function _h264bsdDecodeResidualBlockCavlc($pStrmData, $coeffLevel, $nc, $maxNumCoeff) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 128;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $i;
  var $tmp;
  var $totalCoeff;
  var $trailingOnes;
  var $suffixLength;
  var $levelPrefix;
  var $levelSuffix;
  var $zerosLeft;
  var $bit;
  var $level = __stackBase__;
  var $run = __stackBase__ + 64;
  var $bufferValue;
  var $bufferBits;
  $2 = $pStrmData;
  $3 = $coeffLevel;
  $4 = $nc;
  $5 = $maxNumCoeff;
  $bufferBits = 32;
  var $7 = _h264bsdShowBits32($2);
  $bufferValue = $7;
  if ($bufferBits < 16) {
    __label__ = 1;
  } else {
    __label__ = 4;
  }
  $10$$20$2 : do {
    if (__label__ == 1) {
      var $14 = _h264bsdFlushBits($2, 32 - $bufferBits);
      if ($14 == -1) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      $16$$17$4 : do {
        if (__label__ == 2) {
          $1 = 1;
          __label__ = 95;
          break $10$$20$2;
        } else if (__label__ == 3) {
          var $19 = _h264bsdShowBits32($2);
          $bufferValue = $19;
          $bufferBits = 32;
          __label__ = 4;
          break $10$$20$2;
        }
      } while (0);
    }
  } while (0);
  $401$$20$7 : do {
    if (__label__ == 4) {
      $bit = $bufferValue >>> 16;
      var $25 = _DecodeCoeffToken($bit, $4);
      $tmp = $25;
      if ($tmp != 0) {
        __label__ = 6;
      } else {
        __label__ = 5;
      }
      $29$$28$9 : do {
        if (__label__ == 6) {
          var $33 = $bufferValue << ($tmp & 31);
          $bufferValue = $33;
          var $37 = $bufferBits - ($tmp & 31);
          $bufferBits = $37;
          $totalCoeff = $tmp >>> 11 & 31;
          if ($totalCoeff > $5) {
            __label__ = 7;
          } else {
            __label__ = 8;
          }
          $44$$45$11 : do {
            if (__label__ == 7) {
              $1 = 1;
            } else if (__label__ == 8) {
              $trailingOnes = $tmp >>> 5 & 63;
              if ($totalCoeff != 0) {
                __label__ = 9;
              } else {
                __label__ = 91;
              }
              $51$$387$14 : do {
                if (__label__ == 9) {
                  $i = 0;
                  if ($trailingOnes != 0) {
                    __label__ = 10;
                  } else {
                    __label__ = 22;
                  }
                  $54$$102$16 : do {
                    if (__label__ == 10) {
                      if ($bufferBits < $trailingOnes) {
                        __label__ = 11;
                      } else {
                        __label__ = 14;
                      }
                      $58$$68$18 : do {
                        if (__label__ == 11) {
                          var $62 = _h264bsdFlushBits($2, 32 - $bufferBits);
                          if ($62 == -1) {
                            __label__ = 12;
                          } else {
                            __label__ = 13;
                          }
                          $64$$65$20 : do {
                            if (__label__ == 12) {
                              $1 = 1;
                              __label__ = 95;
                              break $401$$20$7;
                            } else if (__label__ == 13) {
                              var $67 = _h264bsdShowBits32($2);
                              $bufferValue = $67;
                              $bufferBits = 32;
                            }
                          } while (0);
                        }
                      } while (0);
                      $bit = $bufferValue >>> 32 - $trailingOnes;
                      var $75 = $bufferValue << $trailingOnes;
                      $bufferValue = $75;
                      var $78 = $bufferBits - $trailingOnes;
                      $bufferBits = $78;
                      $tmp = 1 << $trailingOnes - 1;
                      $82$24 : while (1) {
                        if (!($tmp != 0)) {
                          __label__ = 21;
                          break $82$24;
                        }
                        if (($bit & $tmp) != 0) {
                          __label__ = 17;
                        } else {
                          __label__ = 18;
                        }
                        $90$$91$27 : do {
                          if (__label__ == 17) {
                            var $93 = -1;
                          } else if (__label__ == 18) {
                            var $93 = 1;
                          }
                        } while (0);
                        var $93;
                        HEAP32[$level + ($i << 2) >> 2] = $93;
                        var $97 = $tmp >>> 1;
                        $tmp = $97;
                        var $100 = $i + 1;
                        $i = $100;
                      }
                    }
                  } while (0);
                  if ($totalCoeff > 10) {
                    __label__ = 23;
                  } else {
                    __label__ = 25;
                  }
                  $105$$109$34 : do {
                    if (__label__ == 23) {
                      if (!($trailingOnes < 3)) {
                        __label__ = 25;
                        break $105$$109$34;
                      }
                      $suffixLength = 1;
                      __label__ = 26;
                      break $105$$109$34;
                    }
                  } while (0);
                  $110$$109$37 : do {
                    if (__label__ == 25) {
                      $suffixLength = 0;
                    }
                  } while (0);
                  $111$40 : while (1) {
                    if (!($i < $totalCoeff)) {
                      __label__ = 65;
                      break $111$40;
                    }
                    if ($bufferBits < 16) {
                      __label__ = 29;
                    } else {
                      __label__ = 32;
                    }
                    $118$$128$43 : do {
                      if (__label__ == 29) {
                        var $122 = _h264bsdFlushBits($2, 32 - $bufferBits);
                        if ($122 == -1) {
                          __label__ = 30;
                          break $111$40;
                        }
                        var $127 = _h264bsdShowBits32($2);
                        $bufferValue = $127;
                        $bufferBits = 32;
                      }
                    } while (0);
                    $bit = $bufferValue >>> 16;
                    var $132 = _DecodeLevelPrefix($bit);
                    $levelPrefix = $132;
                    if ($levelPrefix == -2) {
                      __label__ = 33;
                      break $111$40;
                    }
                    var $140 = $bufferValue << $levelPrefix + 1;
                    $bufferValue = $140;
                    var $144 = $bufferBits - ($levelPrefix + 1);
                    $bufferBits = $144;
                    if ($levelPrefix < 14) {
                      __label__ = 35;
                    } else {
                      __label__ = 36;
                    }
                    $147$$149$48 : do {
                      if (__label__ == 35) {
                        $tmp = $suffixLength;
                      } else if (__label__ == 36) {
                        if ($levelPrefix == 14) {
                          __label__ = 37;
                        } else {
                          __label__ = 41;
                        }
                        $152$$160$51 : do {
                          if (__label__ == 37) {
                            if ($suffixLength != 0) {
                              __label__ = 38;
                            } else {
                              __label__ = 39;
                            }
                            $155$$157$53 : do {
                              if (__label__ == 38) {
                                var $159 = $suffixLength;
                              } else if (__label__ == 39) {
                                var $159 = 4;
                              }
                            } while (0);
                            var $159;
                            $tmp = $159;
                          } else if (__label__ == 41) {
                            if ($suffixLength != 0) {
                              __label__ = 43;
                            } else {
                              __label__ = 42;
                            }
                            $164$$163$58 : do {
                              if (__label__ == 42) {
                                $suffixLength = 1;
                              }
                            } while (0);
                            $tmp = 12;
                          }
                        } while (0);
                      }
                    } while (0);
                    if ($suffixLength != 0) {
                      __label__ = 46;
                    } else {
                      __label__ = 47;
                    }
                    $169$$173$63 : do {
                      if (__label__ == 46) {
                        var $172 = $levelPrefix << $suffixLength;
                        $levelPrefix = $172;
                      }
                    } while (0);
                    if ($tmp != 0) {
                      __label__ = 48;
                    } else {
                      __label__ = 53;
                    }
                    $176$$204$66 : do {
                      if (__label__ == 48) {
                        if ($bufferBits < $tmp) {
                          __label__ = 49;
                        } else {
                          __label__ = 52;
                        }
                        $180$$190$68 : do {
                          if (__label__ == 49) {
                            var $184 = _h264bsdFlushBits($2, 32 - $bufferBits);
                            if ($184 == -1) {
                              __label__ = 50;
                              break $111$40;
                            }
                            var $189 = _h264bsdShowBits32($2);
                            $bufferValue = $189;
                            $bufferBits = 32;
                          }
                        } while (0);
                        $levelSuffix = $bufferValue >>> 32 - $tmp;
                        var $197 = $bufferValue << $tmp;
                        $bufferValue = $197;
                        var $200 = $bufferBits - $tmp;
                        $bufferBits = $200;
                        var $203 = $levelPrefix + $levelSuffix;
                        $levelPrefix = $203;
                      }
                    } while (0);
                    $tmp = $levelPrefix;
                    if ($i == $trailingOnes) {
                      __label__ = 54;
                    } else {
                      __label__ = 56;
                    }
                    $209$$215$73 : do {
                      if (__label__ == 54) {
                        if (!($trailingOnes < 3)) {
                          __label__ = 56;
                          break $209$$215$73;
                        }
                        var $214 = $tmp + 2;
                        $tmp = $214;
                      }
                    } while (0);
                    HEAP32[$level + ($i << 2) >> 2] = $tmp + 2 >>> 1;
                    if ($suffixLength == 0) {
                      __label__ = 57;
                    } else {
                      __label__ = 58;
                    }
                    $223$$224$77 : do {
                      if (__label__ == 57) {
                        $suffixLength = 1;
                      }
                    } while (0);
                    if (HEAP32[$level + ($i << 2) >> 2] > 3 << $suffixLength - 1) {
                      __label__ = 59;
                    } else {
                      __label__ = 61;
                    }
                    $232$$238$80 : do {
                      if (__label__ == 59) {
                        if (!($suffixLength < 6)) {
                          __label__ = 61;
                          break $232$$238$80;
                        }
                        var $237 = $suffixLength + 1;
                        $suffixLength = $237;
                      }
                    } while (0);
                    if (($tmp & 1) != 0) {
                      __label__ = 62;
                    } else {
                      __label__ = 63;
                    }
                    $242$$249$84 : do {
                      if (__label__ == 62) {
                        var $246 = -HEAP32[$level + ($i << 2) >> 2];
                        HEAP32[$level + ($i << 2) >> 2] = $246;
                      }
                    } while (0);
                    var $252 = $i + 1;
                    $i = $252;
                  }
                  $253$$124$$135$$186$88 : do {
                    if (__label__ == 65) {
                      if ($totalCoeff < $5) {
                        __label__ = 66;
                      } else {
                        __label__ = 73;
                      }
                      $257$$294$90 : do {
                        if (__label__ == 66) {
                          if ($bufferBits < 9) {
                            __label__ = 67;
                          } else {
                            __label__ = 70;
                          }
                          $260$$270$92 : do {
                            if (__label__ == 67) {
                              var $264 = _h264bsdFlushBits($2, 32 - $bufferBits);
                              if ($264 == -1) {
                                __label__ = 68;
                              } else {
                                __label__ = 69;
                              }
                              $266$$267$94 : do {
                                if (__label__ == 68) {
                                  $1 = 1;
                                  __label__ = 95;
                                  break $401$$20$7;
                                } else if (__label__ == 69) {
                                  var $269 = _h264bsdShowBits32($2);
                                  $bufferValue = $269;
                                  $bufferBits = 32;
                                }
                              } while (0);
                            }
                          } while (0);
                          $bit = $bufferValue >>> 23;
                          var $278 = _DecodeTotalZeros($bit, $totalCoeff, $5 == 4);
                          $zerosLeft = $278;
                          if ($zerosLeft != 0) {
                            __label__ = 72;
                          } else {
                            __label__ = 71;
                          }
                          $282$$281$98 : do {
                            if (__label__ == 72) {
                              var $286 = $bufferValue << ($zerosLeft & 15);
                              $bufferValue = $286;
                              var $290 = $bufferBits - ($zerosLeft & 15);
                              $bufferBits = $290;
                              var $293 = $zerosLeft >>> 4 & 15;
                              $zerosLeft = $293;
                            } else if (__label__ == 71) {
                              $1 = 1;
                              __label__ = 95;
                              break $401$$20$7;
                            }
                          } while (0);
                        } else if (__label__ == 73) {
                          $zerosLeft = 0;
                        }
                      } while (0);
                      $i = 0;
                      $296$103 : while (1) {
                        if (!($i < $totalCoeff - 1)) {
                          __label__ = 87;
                          break $296$103;
                        }
                        if ($zerosLeft > 0) {
                          __label__ = 77;
                        } else {
                          __label__ = 84;
                        }
                        $304$$346$106 : do {
                          if (__label__ == 77) {
                            if ($bufferBits < 11) {
                              __label__ = 78;
                            } else {
                              __label__ = 81;
                            }
                            $307$$317$108 : do {
                              if (__label__ == 78) {
                                var $311 = _h264bsdFlushBits($2, 32 - $bufferBits);
                                if ($311 == -1) {
                                  __label__ = 79;
                                  break $296$103;
                                }
                                var $316 = _h264bsdShowBits32($2);
                                $bufferValue = $316;
                                $bufferBits = 32;
                              }
                            } while (0);
                            $bit = $bufferValue >>> 21;
                            var $322 = _DecodeRunBefore($bit, $zerosLeft);
                            $tmp = $322;
                            if (!($tmp != 0)) {
                              __label__ = 82;
                              break $296$103;
                            }
                            var $330 = $bufferValue << ($tmp & 15);
                            $bufferValue = $330;
                            var $334 = $bufferBits - ($tmp & 15);
                            $bufferBits = $334;
                            HEAP32[$run + ($i << 2) >> 2] = $tmp >>> 4 & 15;
                            var $342 = HEAP32[$run + ($i << 2) >> 2];
                            var $343 = $342 + 1;
                            HEAP32[$run + ($i << 2) >> 2] = $343;
                            var $345 = $zerosLeft - $342;
                            $zerosLeft = $345;
                          } else if (__label__ == 84) {
                            HEAP32[$run + ($i << 2) >> 2] = 1;
                          }
                        } while (0);
                        var $352 = $i + 1;
                        $i = $352;
                      }
                      $353$$313$$325$116 : do {
                        if (__label__ == 87) {
                          $tmp = $zerosLeft;
                          var $358 = HEAP32[$level + ($totalCoeff - 1 << 2) >> 2];
                          HEAP32[$3 + ($tmp << 2) >> 2] = $358;
                          $levelSuffix = 1 << $tmp;
                          $i = $totalCoeff - 1;
                          $366$118 : while (1) {
                            var $367 = $i;
                            var $368 = $367 - 1;
                            $i = $368;
                            if (!($367 != 0)) {
                              __label__ = 90;
                              break $366$118;
                            }
                            var $375 = $tmp + HEAP32[$run + ($i << 2) >> 2];
                            $tmp = $375;
                            var $379 = $levelSuffix | 1 << $tmp;
                            $levelSuffix = $379;
                            var $382 = HEAP32[$level + ($i << 2) >> 2];
                            HEAP32[$3 + ($tmp << 2) >> 2] = $382;
                          }
                        } else if (__label__ == 79) {
                          $1 = 1;
                          __label__ = 95;
                          break $401$$20$7;
                        } else if (__label__ == 82) {
                          $1 = 1;
                          __label__ = 95;
                          break $401$$20$7;
                        }
                      } while (0);
                    } else if (__label__ == 30) {
                      $1 = 1;
                      __label__ = 95;
                      break $401$$20$7;
                    } else if (__label__ == 33) {
                      $1 = 1;
                      __label__ = 95;
                      break $401$$20$7;
                    } else if (__label__ == 50) {
                      $1 = 1;
                      __label__ = 95;
                      break $401$$20$7;
                    }
                  } while (0);
                } else if (__label__ == 91) {
                  $levelSuffix = 0;
                }
              } while (0);
              var $392 = _h264bsdFlushBits($2, 32 - $bufferBits);
              if ($392 != 0) {
                __label__ = 93;
              } else {
                __label__ = 94;
              }
              $394$$395$129 : do {
                if (__label__ == 93) {
                  $1 = 1;
                } else if (__label__ == 94) {
                  $1 = $totalCoeff << 4 | $levelSuffix << 16;
                }
              } while (0);
            }
          } while (0);
        } else if (__label__ == 5) {
          $1 = 1;
        }
      } while (0);
    }
  } while (0);
  var $402 = $1;
  STACKTOP = __stackBase__;
  return $402;
  return null;
}
_h264bsdDecodeResidualBlockCavlc["X"] = 1;
function _DecodeLevelPrefix($bits) {
  var __label__;
  var $1;
  var $2;
  var $numZeros;
  $2 = $bits;
  if ($2 >= 32768) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $5$$6$2 : do {
    if (__label__ == 1) {
      $numZeros = 0;
      __label__ = 48;
      break $5$$6$2;
    } else if (__label__ == 2) {
      if ($2 >= 16384) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $9$$10$5 : do {
        if (__label__ == 3) {
          $numZeros = 1;
        } else if (__label__ == 4) {
          if ($2 >= 8192) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $13$$14$8 : do {
            if (__label__ == 5) {
              $numZeros = 2;
            } else if (__label__ == 6) {
              if ($2 >= 4096) {
                __label__ = 7;
              } else {
                __label__ = 8;
              }
              $17$$18$11 : do {
                if (__label__ == 7) {
                  $numZeros = 3;
                } else if (__label__ == 8) {
                  if ($2 >= 2048) {
                    __label__ = 9;
                  } else {
                    __label__ = 10;
                  }
                  $21$$22$14 : do {
                    if (__label__ == 9) {
                      $numZeros = 4;
                    } else if (__label__ == 10) {
                      if ($2 >= 1024) {
                        __label__ = 11;
                      } else {
                        __label__ = 12;
                      }
                      $25$$26$17 : do {
                        if (__label__ == 11) {
                          $numZeros = 5;
                        } else if (__label__ == 12) {
                          if ($2 >= 512) {
                            __label__ = 13;
                          } else {
                            __label__ = 14;
                          }
                          $29$$30$20 : do {
                            if (__label__ == 13) {
                              $numZeros = 6;
                            } else if (__label__ == 14) {
                              if ($2 >= 256) {
                                __label__ = 15;
                              } else {
                                __label__ = 16;
                              }
                              $33$$34$23 : do {
                                if (__label__ == 15) {
                                  $numZeros = 7;
                                } else if (__label__ == 16) {
                                  if ($2 >= 128) {
                                    __label__ = 17;
                                  } else {
                                    __label__ = 18;
                                  }
                                  $37$$38$26 : do {
                                    if (__label__ == 17) {
                                      $numZeros = 8;
                                    } else if (__label__ == 18) {
                                      if ($2 >= 64) {
                                        __label__ = 19;
                                      } else {
                                        __label__ = 20;
                                      }
                                      $41$$42$29 : do {
                                        if (__label__ == 19) {
                                          $numZeros = 9;
                                        } else if (__label__ == 20) {
                                          if ($2 >= 32) {
                                            __label__ = 21;
                                          } else {
                                            __label__ = 22;
                                          }
                                          $45$$46$32 : do {
                                            if (__label__ == 21) {
                                              $numZeros = 10;
                                            } else if (__label__ == 22) {
                                              if ($2 >= 16) {
                                                __label__ = 23;
                                              } else {
                                                __label__ = 24;
                                              }
                                              $49$$50$35 : do {
                                                if (__label__ == 23) {
                                                  $numZeros = 11;
                                                } else if (__label__ == 24) {
                                                  if ($2 >= 8) {
                                                    __label__ = 25;
                                                  } else {
                                                    __label__ = 26;
                                                  }
                                                  $53$$54$38 : do {
                                                    if (__label__ == 25) {
                                                      $numZeros = 12;
                                                    } else if (__label__ == 26) {
                                                      if ($2 >= 4) {
                                                        __label__ = 27;
                                                      } else {
                                                        __label__ = 28;
                                                      }
                                                      $57$$58$41 : do {
                                                        if (__label__ == 27) {
                                                          $numZeros = 13;
                                                        } else if (__label__ == 28) {
                                                          if ($2 >= 2) {
                                                            __label__ = 29;
                                                          } else {
                                                            __label__ = 30;
                                                          }
                                                          $61$$62$44 : do {
                                                            if (__label__ == 29) {
                                                              $numZeros = 14;
                                                            } else if (__label__ == 30) {
                                                              if ($2 >= 1) {
                                                                __label__ = 31;
                                                              } else {
                                                                __label__ = 32;
                                                              }
                                                              $65$$66$47 : do {
                                                                if (__label__ == 31) {
                                                                  $numZeros = 15;
                                                                } else if (__label__ == 32) {
                                                                  $1 = -2;
                                                                  __label__ = 49;
                                                                  break $5$$6$2;
                                                                }
                                                              } while (0);
                                                            }
                                                          } while (0);
                                                        }
                                                      } while (0);
                                                    }
                                                  } while (0);
                                                }
                                              } while (0);
                                            }
                                          } while (0);
                                        }
                                      } while (0);
                                    }
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
      __label__ = 48;
      break $5$$6$2;
    }
  } while (0);
  $82$$84$65 : do {
    if (__label__ == 48) {
      $1 = $numZeros;
    }
  } while (0);
  var $85 = $1;
  return $85;
  return null;
}
_DecodeLevelPrefix["X"] = 1;
function _DecodeTotalZeros($bits, $totalCoeff, $isChromaDC) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $value;
  $1 = $bits;
  $2 = $totalCoeff;
  $3 = $isChromaDC;
  $value = 0;
  if ($3 != 0) {
    __label__ = 20;
  } else {
    __label__ = 1;
  }
  $106$$6$69 : do {
    if (__label__ == 20) {
      var $108 = $1 >>> 6;
      $1 = $108;
      if ($1 > 3) {
        __label__ = 21;
      } else {
        __label__ = 22;
      }
      $111$$112$71 : do {
        if (__label__ == 21) {
          $value = 1;
        } else if (__label__ == 22) {
          if ($2 == 3) {
            __label__ = 23;
          } else {
            __label__ = 24;
          }
          $115$$116$74 : do {
            if (__label__ == 23) {
              $value = 17;
            } else if (__label__ == 24) {
              if ($1 > 1) {
                __label__ = 25;
              } else {
                __label__ = 26;
              }
              $119$$120$77 : do {
                if (__label__ == 25) {
                  $value = 18;
                } else if (__label__ == 26) {
                  if ($2 == 2) {
                    __label__ = 27;
                  } else {
                    __label__ = 28;
                  }
                  $123$$124$80 : do {
                    if (__label__ == 27) {
                      $value = 34;
                    } else if (__label__ == 28) {
                      if ($1 != 0) {
                        __label__ = 29;
                      } else {
                        __label__ = 30;
                      }
                      $127$$128$83 : do {
                        if (__label__ == 29) {
                          $value = 35;
                        } else if (__label__ == 30) {
                          $value = 51;
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    } else if (__label__ == 1) {
      var $7 = $2;
      if ($7 == 1) {
        __label__ = 2;
      } else if ($7 == 2) {
        __label__ = 5;
      } else if ($7 == 3) {
        __label__ = 6;
      } else if ($7 == 4) {
        __label__ = 7;
      } else if ($7 == 5) {
        __label__ = 8;
      } else if ($7 == 6) {
        __label__ = 9;
      } else if ($7 == 7) {
        __label__ = 10;
      } else if ($7 == 8) {
        __label__ = 11;
      } else if ($7 == 9) {
        __label__ = 12;
      } else if ($7 == 10) {
        __label__ = 13;
      } else if ($7 == 11) {
        __label__ = 14;
      } else if ($7 == 12) {
        __label__ = 15;
      } else if ($7 == 13) {
        __label__ = 16;
      } else if ($7 == 14) {
        __label__ = 17;
      } else {
        __label__ = 18;
      }
      $100$$8$$22$$28$$34$$40$$46$$52$$58$$64$$70$$76$$82$$88$$94$92 : do {
        if (__label__ == 18) {
          var $104 = $1 >>> 8 != 0 ? 17 : 1;
          $value = $104;
        } else if (__label__ == 2) {
          $value = HEAPU8[_totalZeros_1_0 + ($1 >>> 4)];
          if ($value != 0) {
            __label__ = 4;
          } else {
            __label__ = 3;
          }
          $21$$16$95 : do {
            if (__label__ == 3) {
              $value = HEAPU8[_totalZeros_1_1 + $1];
            }
          } while (0);
        } else if (__label__ == 5) {
          $value = HEAPU8[_totalZeros_2 + ($1 >>> 3)];
        } else if (__label__ == 6) {
          $value = HEAPU8[_totalZeros_3 + ($1 >>> 3)];
        } else if (__label__ == 7) {
          $value = HEAPU8[_totalZeros_4 + ($1 >>> 4)];
        } else if (__label__ == 8) {
          $value = HEAPU8[_totalZeros_5 + ($1 >>> 4)];
        } else if (__label__ == 9) {
          $value = HEAPU8[_totalZeros_6 + ($1 >>> 3)];
        } else if (__label__ == 10) {
          $value = HEAPU8[_totalZeros_7 + ($1 >>> 3)];
        } else if (__label__ == 11) {
          $value = HEAPU8[_totalZeros_8 + ($1 >>> 3)];
        } else if (__label__ == 12) {
          $value = HEAPU8[_totalZeros_9 + ($1 >>> 3)];
        } else if (__label__ == 13) {
          $value = HEAPU8[_totalZeros_10 + ($1 >>> 4)];
        } else if (__label__ == 14) {
          $value = HEAPU8[_totalZeros_11 + ($1 >>> 5)];
        } else if (__label__ == 15) {
          $value = HEAPU8[_totalZeros_12 + ($1 >>> 5)];
        } else if (__label__ == 16) {
          $value = HEAPU8[_totalZeros_13 + ($1 >>> 6)];
        } else if (__label__ == 17) {
          $value = HEAPU8[_totalZeros_14 + ($1 >>> 7)];
        }
      } while (0);
    }
  } while (0);
  var $135 = $value;
  return $135;
  return null;
}
_DecodeTotalZeros["X"] = 1;
function _DecodeRunBefore($bits, $zerosLeft) {
  var __label__;
  var $1;
  var $2;
  var $value;
  $1 = $bits;
  $2 = $zerosLeft;
  $value = 0;
  var $3 = $2;
  if ($3 == 1) {
    __label__ = 1;
  } else if ($3 == 2) {
    __label__ = 2;
  } else if ($3 == 3) {
    __label__ = 3;
  } else if ($3 == 4) {
    __label__ = 4;
  } else if ($3 == 5) {
    __label__ = 5;
  } else if ($3 == 6) {
    __label__ = 6;
  } else {
    __label__ = 7;
  }
  $40$$4$$10$$16$$22$$28$$34$114 : do {
    if (__label__ == 7) {
      if ($1 >= 256) {
        __label__ = 8;
      } else {
        __label__ = 9;
      }
      $43$$49$116 : do {
        if (__label__ == 8) {
          $value = (7 - ($1 >>> 8) << 4) + 3;
        } else if (__label__ == 9) {
          if ($1 >= 128) {
            __label__ = 10;
          } else {
            __label__ = 11;
          }
          $52$$53$119 : do {
            if (__label__ == 10) {
              $value = 116;
            } else if (__label__ == 11) {
              if ($1 >= 64) {
                __label__ = 12;
              } else {
                __label__ = 13;
              }
              $56$$57$122 : do {
                if (__label__ == 12) {
                  $value = 133;
                } else if (__label__ == 13) {
                  if ($1 >= 32) {
                    __label__ = 14;
                  } else {
                    __label__ = 15;
                  }
                  $60$$61$125 : do {
                    if (__label__ == 14) {
                      $value = 150;
                    } else if (__label__ == 15) {
                      if ($1 >= 16) {
                        __label__ = 16;
                      } else {
                        __label__ = 17;
                      }
                      $64$$65$128 : do {
                        if (__label__ == 16) {
                          $value = 167;
                        } else if (__label__ == 17) {
                          if ($1 >= 8) {
                            __label__ = 18;
                          } else {
                            __label__ = 19;
                          }
                          $68$$69$131 : do {
                            if (__label__ == 18) {
                              $value = 184;
                            } else if (__label__ == 19) {
                              if ($1 >= 4) {
                                __label__ = 20;
                              } else {
                                __label__ = 21;
                              }
                              $72$$73$134 : do {
                                if (__label__ == 20) {
                                  $value = 201;
                                } else if (__label__ == 21) {
                                  if ($1 >= 2) {
                                    __label__ = 22;
                                  } else {
                                    __label__ = 23;
                                  }
                                  $76$$77$137 : do {
                                    if (__label__ == 22) {
                                      $value = 218;
                                    } else if (__label__ == 23) {
                                      if ($1 != 0) {
                                        __label__ = 24;
                                      } else {
                                        __label__ = 25;
                                      }
                                      $80$$81$140 : do {
                                        if (__label__ == 24) {
                                          $value = 235;
                                        }
                                      } while (0);
                                    }
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
      if (($value >>> 4 & 15) > $2) {
        __label__ = 34;
      } else {
        __label__ = 35;
      }
      $95$$96$151 : do {
        if (__label__ == 34) {
          $value = 0;
        }
      } while (0);
    } else if (__label__ == 1) {
      $value = HEAPU8[_runBefore_1 + ($1 >>> 10)];
    } else if (__label__ == 2) {
      $value = HEAPU8[_runBefore_2 + ($1 >>> 9)];
    } else if (__label__ == 3) {
      $value = HEAPU8[_runBefore_3 + ($1 >>> 9)];
    } else if (__label__ == 4) {
      $value = HEAPU8[_runBefore_4 + ($1 >>> 8)];
    } else if (__label__ == 5) {
      $value = HEAPU8[_runBefore_5 + ($1 >>> 8)];
    } else if (__label__ == 6) {
      $value = HEAPU8[_runBefore_6 + ($1 >>> 8)];
    }
  } while (0);
  var $98 = $value;
  return $98;
  return null;
}
_DecodeRunBefore["X"] = 1;
function _h264bsdInitMbNeighbours($pMbStorage, $picWidth, $picSizeInMbs) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $i;
  var $row;
  var $col;
  $1 = $pMbStorage;
  $2 = $picWidth;
  $3 = $picSizeInMbs;
  $col = 0;
  $row = 0;
  $i = 0;
  $4$189 : while (1) {
    if (!($i < $3)) {
      __label__ = 20;
      break $4$189;
    }
    if ($col != 0) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    $11$$20$192 : do {
      if (__label__ == 3) {
        HEAP32[$1 + $i * 216 + 200 >> 2] = $1 + $i * 216 - 216;
      } else if (__label__ == 4) {
        HEAP32[$1 + $i * 216 + 200 >> 2] = 0;
      }
    } while (0);
    if ($row != 0) {
      __label__ = 6;
    } else {
      __label__ = 7;
    }
    $28$$39$196 : do {
      if (__label__ == 6) {
        HEAP32[$1 + $i * 216 + 204 >> 2] = $1 + $i * 216 + -$2 * 216;
      } else if (__label__ == 7) {
        HEAP32[$1 + $i * 216 + 204 >> 2] = 0;
      }
    } while (0);
    if ($row != 0) {
      __label__ = 9;
    } else {
      __label__ = 11;
    }
    $47$$64$200 : do {
      if (__label__ == 9) {
        if (!($col < $2 - 1)) {
          __label__ = 11;
          break $47$$64$200;
        }
        HEAP32[$1 + $i * 216 + 208 >> 2] = $1 + $i * 216 + -($2 - 1) * 216;
        __label__ = 12;
        break $47$$64$200;
      }
    } while (0);
    $69$$64$203 : do {
      if (__label__ == 11) {
        HEAP32[$1 + $i * 216 + 208 >> 2] = 0;
      }
    } while (0);
    if ($row != 0) {
      __label__ = 13;
    } else {
      __label__ = 15;
    }
    $72$$87$206 : do {
      if (__label__ == 13) {
        if (!($col != 0)) {
          __label__ = 15;
          break $72$$87$206;
        }
        HEAP32[$1 + $i * 216 + 212 >> 2] = $1 + $i * 216 + -($2 + 1) * 216;
        __label__ = 16;
        break $72$$87$206;
      }
    } while (0);
    $92$$87$209 : do {
      if (__label__ == 15) {
        HEAP32[$1 + $i * 216 + 212 >> 2] = 0;
      }
    } while (0);
    var $94 = $col + 1;
    $col = $94;
    if ($col == $2) {
      __label__ = 17;
    } else {
      __label__ = 18;
    }
    $98$$101$212 : do {
      if (__label__ == 17) {
        $col = 0;
        var $100 = $row + 1;
        $row = $100;
      }
    } while (0);
    var $104 = $i + 1;
    $i = $104;
  }
  return;
  return;
}
_h264bsdInitMbNeighbours["X"] = 1;
function _h264bsdDecodeNalUnit($pStrmData, $pNalUnit) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $tmp;
  $2 = $pStrmData;
  $3 = $pNalUnit;
  var $5 = _h264bsdGetBits($2, 1);
  $tmp = $5;
  if ($tmp == -1) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $8$$9$162 : do {
    if (__label__ == 1) {
      $1 = 1;
    } else if (__label__ == 2) {
      var $11 = _h264bsdGetBits($2, 2);
      $tmp = $11;
      HEAP32[$3 + 4 >> 2] = $tmp;
      var $16 = _h264bsdGetBits($2, 5);
      $tmp = $16;
      HEAP32[$3 >> 2] = $tmp;
      if ($tmp == 2) {
        __label__ = 5;
      } else {
        __label__ = 3;
      }
      $28$$22$165 : do {
        if (__label__ == 3) {
          if ($tmp == 3) {
            __label__ = 5;
            break $28$$22$165;
          }
          if ($tmp == 4) {
            __label__ = 5;
            break $28$$22$165;
          }
          if ($tmp == 7) {
            __label__ = 9;
          } else {
            __label__ = 7;
          }
          $38$$32$169 : do {
            if (__label__ == 7) {
              if ($tmp == 8) {
                __label__ = 9;
                break $38$$32$169;
              }
              if ($tmp == 5) {
                __label__ = 9;
                break $38$$32$169;
              } else {
                __label__ = 11;
                break $38$$32$169;
              }
            }
          } while (0);
          $38$$44$172 : do {
            if (__label__ == 9) {
              if (!(HEAP32[$3 + 4 >> 2] == 0)) {
                __label__ = 11;
                break $38$$44$172;
              }
              $1 = 1;
              __label__ = 20;
              break $8$$9$162;
            }
          } while (0);
          if ($tmp == 6) {
            __label__ = 16;
          } else {
            __label__ = 12;
          }
          $59$$47$176 : do {
            if (__label__ == 12) {
              if ($tmp == 9) {
                __label__ = 16;
                break $59$$47$176;
              }
              if ($tmp == 10) {
                __label__ = 16;
                break $59$$47$176;
              }
              if ($tmp == 11) {
                __label__ = 16;
                break $59$$47$176;
              }
              if ($tmp == 12) {
                __label__ = 16;
                break $59$$47$176;
              } else {
                __label__ = 18;
                break $59$$47$176;
              }
            }
          } while (0);
          $59$$65$181 : do {
            if (__label__ == 16) {
              if (!(HEAP32[$3 + 4 >> 2] != 0)) {
                __label__ = 18;
                break $59$$65$181;
              }
              $1 = 1;
              __label__ = 20;
              break $8$$9$162;
            }
          } while (0);
          $1 = 0;
          __label__ = 20;
          break $8$$9$162;
        }
      } while (0);
      $1 = 1;
    }
  } while (0);
  var $68 = $1;
  return $68;
  return null;
}
_h264bsdDecodeNalUnit["X"] = 1;
function _h264bsdGetNeighbourMb($pMb, $neighbour) {
  var __label__;
  var $1;
  var $2;
  var $3;
  $2 = $pMb;
  $3 = $neighbour;
  if ($3 == 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $6$$10$2 : do {
    if (__label__ == 1) {
      $1 = HEAP32[$2 + 200 >> 2];
    } else if (__label__ == 2) {
      if ($3 == 1) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $13$$17$5 : do {
        if (__label__ == 3) {
          $1 = HEAP32[$2 + 204 >> 2];
        } else if (__label__ == 4) {
          if ($3 == 2) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $20$$24$8 : do {
            if (__label__ == 5) {
              $1 = HEAP32[$2 + 208 >> 2];
            } else if (__label__ == 6) {
              if ($3 == 3) {
                __label__ = 7;
              } else {
                __label__ = 8;
              }
              $27$$31$11 : do {
                if (__label__ == 7) {
                  $1 = HEAP32[$2 + 212 >> 2];
                } else if (__label__ == 8) {
                  if ($3 == 4) {
                    __label__ = 9;
                  } else {
                    __label__ = 10;
                  }
                  $34$$36$14 : do {
                    if (__label__ == 9) {
                      $1 = $2;
                    } else if (__label__ == 10) {
                      $1 = 0;
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $38 = $1;
  return $38;
  return null;
}
function _h264bsdNeighbour4x4BlockA($blockIndex) {
  var $1;
  $1 = $blockIndex;
  var $3 = _N_A_4x4B + ($1 << 3);
  return $3;
  return null;
}
function _h264bsdNeighbour4x4BlockB($blockIndex) {
  var $1;
  $1 = $blockIndex;
  var $3 = _N_B_4x4B + ($1 << 3);
  return $3;
  return null;
}
function _h264bsdNeighbour4x4BlockC($blockIndex) {
  var $1;
  $1 = $blockIndex;
  var $3 = _N_C_4x4B + ($1 << 3);
  return $3;
  return null;
}
function _h264bsdNeighbour4x4BlockD($blockIndex) {
  var $1;
  $1 = $blockIndex;
  var $3 = _N_D_4x4B + ($1 << 3);
  return $3;
  return null;
}
function _h264bsdIsNeighbourAvailable($pMb, $pNeighbour) {
  var __label__;
  var $1;
  var $2;
  var $3;
  $2 = $pMb;
  $3 = $pNeighbour;
  if ($3 == 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $14$$6$23 : do {
    if (__label__ == 1) {
      if (HEAP32[$2 + 4 >> 2] != HEAP32[$3 + 4 >> 2]) {
        __label__ = 2;
        break $14$$6$23;
      }
      $1 = 1;
      __label__ = 4;
      break $14$$6$23;
    }
  } while (0);
  $14$$16$26 : do {
    if (__label__ == 2) {
      $1 = 0;
    }
  } while (0);
  var $17 = $1;
  return $17;
  return null;
}
function _h264bsdInitStorage($pStorage) {
  var $1;
  $1 = $pStorage;
  _H264SwDecMemset($1, 0, 3388);
  HEAP32[$1 + 8 >> 2] = 32;
  HEAP32[$1 + 4 >> 2] = 256;
  HEAP32[$1 + 1332 >> 2] = 1;
  return;
  return;
}
function _h264bsdStoreSeqParamSet($pStorage, $pSeqParamSet) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $id;
  $2 = $pStorage;
  $3 = $pSeqParamSet;
  $id = HEAP32[$3 + 8 >> 2];
  if (HEAP32[$2 + 20 + ($id << 2) >> 2] == 0) {
    __label__ = 1;
  } else {
    __label__ = 4;
  }
  $13$$28$31 : do {
    if (__label__ == 1) {
      var $14 = _H264SwDecMalloc(92);
      HEAP32[$2 + 20 + ($id << 2) >> 2] = $14;
      if (HEAP32[$2 + 20 + ($id << 2) >> 2] == 0) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      $26$$27$33 : do {
        if (__label__ == 2) {
          $1 = 65535;
          __label__ = 12;
          break $13$$28$31;
        } else if (__label__ == 3) {
          __label__ = 11;
          break $13$$28$31;
        }
      } while (0);
    } else if (__label__ == 4) {
      if ($id == HEAP32[$2 + 8 >> 2]) {
        __label__ = 5;
      } else {
        __label__ = 9;
      }
      $34$$92$37 : do {
        if (__label__ == 5) {
          var $38 = HEAP32[$2 + 16 >> 2];
          var $39 = _h264bsdCompareSeqParamSets($3, $38);
          if ($39 != 0) {
            __label__ = 6;
          } else {
            __label__ = 7;
          }
          $41$$78$39 : do {
            if (__label__ == 6) {
              var $49 = HEAP32[HEAP32[$2 + 20 + ($id << 2) >> 2] + 40 >> 2];
              _H264SwDecFree($49);
              var $55 = HEAP32[$2 + 20 + ($id << 2) >> 2] + 40;
              HEAP32[$55 >> 2] = 0;
              var $63 = HEAP32[HEAP32[$2 + 20 + ($id << 2) >> 2] + 84 >> 2];
              _H264SwDecFree($63);
              var $69 = HEAP32[$2 + 20 + ($id << 2) >> 2] + 84;
              HEAP32[$69 >> 2] = 0;
              HEAP32[$2 + 8 >> 2] = 33;
              HEAP32[$2 + 4 >> 2] = 257;
              HEAP32[$2 + 16 >> 2] = 0;
              HEAP32[$2 + 12 >> 2] = 0;
            } else if (__label__ == 7) {
              var $82 = HEAP32[$3 + 40 >> 2];
              _H264SwDecFree($82);
              HEAP32[$3 + 40 >> 2] = 0;
              var $88 = HEAP32[$3 + 84 >> 2];
              _H264SwDecFree($88);
              HEAP32[$3 + 84 >> 2] = 0;
              $1 = 0;
              __label__ = 12;
              break $13$$28$31;
            }
          } while (0);
        } else if (__label__ == 9) {
          var $100 = HEAP32[HEAP32[$2 + 20 + ($id << 2) >> 2] + 40 >> 2];
          _H264SwDecFree($100);
          var $106 = HEAP32[$2 + 20 + ($id << 2) >> 2] + 40;
          HEAP32[$106 >> 2] = 0;
          var $114 = HEAP32[HEAP32[$2 + 20 + ($id << 2) >> 2] + 84 >> 2];
          _H264SwDecFree($114);
          var $120 = HEAP32[$2 + 20 + ($id << 2) >> 2] + 84;
          HEAP32[$120 >> 2] = 0;
        }
      } while (0);
      __label__ = 11;
      break $13$$28$31;
    }
  } while (0);
  $131$$122$45 : do {
    if (__label__ == 11) {
      var $129 = HEAP32[$2 + 20 + ($id << 2) >> 2];
      var src, dest, stop, stop4;
      src = $3;
      dest = $129;
      stop = src + 92;
      if (dest % 4 == src % 4 && 92 > 8) {
        while (src % 4 !== 0 && src < stop) {
          HEAP8[dest++] = HEAP8[src++];
        }
        src >>= 2;
        dest >>= 2;
        stop4 = stop >> 2;
        while (src < stop4) {
          HEAP32[dest++] = HEAP32[src++];
        }
        src <<= 2;
        dest <<= 2;
      }
      while (src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
      $1 = 0;
    }
  } while (0);
  var $132 = $1;
  return $132;
  return null;
}
_h264bsdStoreSeqParamSet["X"] = 1;
function _h264bsdStorePicParamSet($pStorage, $pPicParamSet) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $id;
  $2 = $pStorage;
  $3 = $pPicParamSet;
  $id = HEAP32[$3 >> 2];
  if (HEAP32[$2 + 148 + ($id << 2) >> 2] == 0) {
    __label__ = 1;
  } else {
    __label__ = 4;
  }
  $13$$28$49 : do {
    if (__label__ == 1) {
      var $14 = _H264SwDecMalloc(72);
      HEAP32[$2 + 148 + ($id << 2) >> 2] = $14;
      if (HEAP32[$2 + 148 + ($id << 2) >> 2] == 0) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      $26$$27$51 : do {
        if (__label__ == 2) {
          $1 = 65535;
          __label__ = 11;
          break $13$$28$49;
        } else if (__label__ == 3) {
          __label__ = 10;
          break $13$$28$49;
        }
      } while (0);
    } else if (__label__ == 4) {
      if ($id == HEAP32[$2 + 4 >> 2]) {
        __label__ = 5;
      } else {
        __label__ = 8;
      }
      $34$$102$55 : do {
        if (__label__ == 5) {
          if (HEAP32[$3 + 4 >> 2] != HEAP32[$2 + 8 >> 2]) {
            __label__ = 6;
          } else {
            __label__ = 7;
          }
          $42$$45$57 : do {
            if (__label__ == 6) {
              HEAP32[$2 + 4 >> 2] = 257;
            }
          } while (0);
          var $53 = HEAP32[HEAP32[$2 + 148 + ($id << 2) >> 2] + 20 >> 2];
          _H264SwDecFree($53);
          var $59 = HEAP32[$2 + 148 + ($id << 2) >> 2] + 20;
          HEAP32[$59 >> 2] = 0;
          var $67 = HEAP32[HEAP32[$2 + 148 + ($id << 2) >> 2] + 24 >> 2];
          _H264SwDecFree($67);
          var $73 = HEAP32[$2 + 148 + ($id << 2) >> 2] + 24;
          HEAP32[$73 >> 2] = 0;
          var $81 = HEAP32[HEAP32[$2 + 148 + ($id << 2) >> 2] + 28 >> 2];
          _H264SwDecFree($81);
          var $87 = HEAP32[$2 + 148 + ($id << 2) >> 2] + 28;
          HEAP32[$87 >> 2] = 0;
          var $95 = HEAP32[HEAP32[$2 + 148 + ($id << 2) >> 2] + 44 >> 2];
          _H264SwDecFree($95);
          var $101 = HEAP32[$2 + 148 + ($id << 2) >> 2] + 44;
          HEAP32[$101 >> 2] = 0;
        } else if (__label__ == 8) {
          var $110 = HEAP32[HEAP32[$2 + 148 + ($id << 2) >> 2] + 20 >> 2];
          _H264SwDecFree($110);
          var $116 = HEAP32[$2 + 148 + ($id << 2) >> 2] + 20;
          HEAP32[$116 >> 2] = 0;
          var $124 = HEAP32[HEAP32[$2 + 148 + ($id << 2) >> 2] + 24 >> 2];
          _H264SwDecFree($124);
          var $130 = HEAP32[$2 + 148 + ($id << 2) >> 2] + 24;
          HEAP32[$130 >> 2] = 0;
          var $138 = HEAP32[HEAP32[$2 + 148 + ($id << 2) >> 2] + 28 >> 2];
          _H264SwDecFree($138);
          var $144 = HEAP32[$2 + 148 + ($id << 2) >> 2] + 28;
          HEAP32[$144 >> 2] = 0;
          var $152 = HEAP32[HEAP32[$2 + 148 + ($id << 2) >> 2] + 44 >> 2];
          _H264SwDecFree($152);
          var $158 = HEAP32[$2 + 148 + ($id << 2) >> 2] + 44;
          HEAP32[$158 >> 2] = 0;
        }
      } while (0);
      __label__ = 10;
      break $13$$28$49;
    }
  } while (0);
  $169$$160$62 : do {
    if (__label__ == 10) {
      var $167 = HEAP32[$2 + 148 + ($id << 2) >> 2];
      var src, dest, stop, stop4;
      src = $3;
      dest = $167;
      stop = src + 72;
      if (dest % 4 == src % 4 && 72 > 8) {
        while (src % 4 !== 0 && src < stop) {
          HEAP8[dest++] = HEAP8[src++];
        }
        src >>= 2;
        dest >>= 2;
        stop4 = stop >> 2;
        while (src < stop4) {
          HEAP32[dest++] = HEAP32[src++];
        }
        src <<= 2;
        dest <<= 2;
      }
      while (src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
      $1 = 0;
    }
  } while (0);
  var $170 = $1;
  return $170;
  return null;
}
_h264bsdStorePicParamSet["X"] = 1;
function _CheckPps($pps, $sps) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $i;
  var $picSize;
  $2 = $pps;
  $3 = $sps;
  $picSize = HEAP32[$3 + 52 >> 2] * HEAP32[$3 + 56 >> 2];
  if (HEAPU32[$2 + 12 >> 2] > 1) {
    __label__ = 1;
  } else {
    __label__ = 32;
  }
  $15$$141$48 : do {
    if (__label__ == 1) {
      if (HEAP32[$2 + 16 >> 2] == 0) {
        __label__ = 2;
      } else {
        __label__ = 9;
      }
      $20$$42$50 : do {
        if (__label__ == 2) {
          $i = 0;
          $21$52 : while (1) {
            if (!($i < HEAPU32[$2 + 12 >> 2])) {
              __label__ = 8;
              break $21$52;
            }
            if (HEAPU32[HEAP32[$2 + 20 >> 2] + ($i << 2) >> 2] > $picSize) {
              __label__ = 5;
              break $21$52;
            }
            var $40 = $i + 1;
            $i = $40;
          }
          $41$$36$57 : do {
            if (__label__ == 8) {} else if (__label__ == 5) {
              $1 = 1;
              __label__ = 33;
              break $15$$141$48;
            }
          } while (0);
        } else if (__label__ == 9) {
          if (HEAP32[$2 + 16 >> 2] == 2) {
            __label__ = 10;
          } else {
            __label__ = 20;
          }
          $47$$107$61 : do {
            if (__label__ == 10) {
              $i = 0;
              $48$63 : while (1) {
                if (!($i < HEAP32[$2 + 12 >> 2] - 1)) {
                  __label__ = 19;
                  break $48$63;
                }
                if (HEAPU32[HEAP32[$2 + 24 >> 2] + ($i << 2) >> 2] > HEAPU32[HEAP32[$2 + 28 >> 2] + ($i << 2) >> 2]) {
                  __label__ = 14;
                  break $48$63;
                }
                if (HEAPU32[HEAP32[$2 + 28 >> 2] + ($i << 2) >> 2] >= $picSize) {
                  __label__ = 14;
                  break $48$63;
                }
                if (HEAPU32[HEAP32[$2 + 24 >> 2] + ($i << 2) >> 2] % HEAPU32[$3 + 52 >> 2] > HEAPU32[HEAP32[$2 + 28 >> 2] + ($i << 2) >> 2] % HEAPU32[$3 + 52 >> 2]) {
                  __label__ = 16;
                  break $48$63;
                }
                var $105 = $i + 1;
                $i = $105;
              }
              $106$$78$$101$70 : do {
                if (__label__ == 19) {} else if (__label__ == 14) {
                  $1 = 1;
                  __label__ = 33;
                  break $15$$141$48;
                } else if (__label__ == 16) {
                  $1 = 1;
                  __label__ = 33;
                  break $15$$141$48;
                }
              } while (0);
            } else if (__label__ == 20) {
              if (HEAPU32[$2 + 16 >> 2] > 2) {
                __label__ = 21;
              } else {
                __label__ = 25;
              }
              $112$$125$75 : do {
                if (__label__ == 21) {
                  if (!(HEAPU32[$2 + 16 >> 2] < 6)) {
                    __label__ = 25;
                    break $112$$125$75;
                  }
                  if (HEAPU32[$2 + 36 >> 2] > $picSize) {
                    __label__ = 23;
                  } else {
                    __label__ = 24;
                  }
                  $123$$124$78 : do {
                    if (__label__ == 23) {
                      $1 = 1;
                      __label__ = 33;
                      break $15$$141$48;
                    } else if (__label__ == 24) {
                      __label__ = 29;
                      break $112$$125$75;
                    }
                  } while (0);
                }
              } while (0);
              $138$$125$81 : do {
                if (__label__ == 25) {
                  if (HEAP32[$2 + 16 >> 2] == 6) {
                    __label__ = 26;
                  } else {
                    __label__ = 28;
                  }
                  $130$$137$83 : do {
                    if (__label__ == 26) {
                      if (!(HEAPU32[$2 + 40 >> 2] < $picSize)) {
                        __label__ = 28;
                        break $130$$137$83;
                      }
                      $1 = 1;
                      __label__ = 33;
                      break $15$$141$48;
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
      __label__ = 32;
      break $15$$141$48;
    }
  } while (0);
  $142$$141$90 : do {
    if (__label__ == 32) {
      $1 = 0;
    }
  } while (0);
  var $143 = $1;
  return $143;
  return null;
}
_CheckPps["X"] = 1;
function _h264bsdResetStorage($pStorage) {
  var __label__;
  var $1;
  var $i;
  $1 = $pStorage;
  HEAP32[$1 + 1196 >> 2] = 0;
  HEAP32[$1 + 1192 >> 2] = 0;
  $i = 0;
  $10$94 : while (1) {
    if (!($i < HEAPU32[$1 + 1176 >> 2])) {
      __label__ = 4;
      break $10$94;
    }
    var $22 = HEAP32[$1 + 1212 >> 2] + $i * 216 + 4;
    HEAP32[$22 >> 2] = 0;
    var $28 = HEAP32[$1 + 1212 >> 2] + $i * 216 + 196;
    HEAP32[$28 >> 2] = 0;
    var $31 = $i + 1;
    $i = $31;
  }
  return;
  return;
}
function _h264bsdIsStartOfPicture($pStorage) {
  var __label__;
  var $1;
  var $2;
  $2 = $pStorage;
  if (HEAP32[$2 + 1188 >> 2] == 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $7$$8$100 : do {
    if (__label__ == 1) {
      $1 = 1;
    } else if (__label__ == 2) {
      $1 = 0;
    }
  } while (0);
  var $10 = $1;
  return $10;
  return null;
}
function _h264bsdIsEndOfPicture($pStorage) {
  var __label__;
  var $1;
  var $2;
  var $i;
  var $tmp;
  $2 = $pStorage;
  if (HEAP32[$2 + 1404 >> 2] != 0) {
    __label__ = 4;
  } else {
    __label__ = 1;
  }
  $21$$9$105 : do {
    if (__label__ == 4) {
      $i = 0;
      $tmp = 0;
      $22$107 : while (1) {
        if (!($i < HEAPU32[$2 + 1176 >> 2])) {
          __label__ = 8;
          break $22$107;
        }
        var $37 = HEAP32[HEAP32[$2 + 1212 >> 2] + $i * 216 + 196 >> 2] != 0 ? 1 : 0;
        var $39 = $tmp + $37;
        $tmp = $39;
        var $42 = $i + 1;
        $i = $42;
      }
      if ($tmp == HEAP32[$2 + 1176 >> 2]) {
        __label__ = 9;
      } else {
        __label__ = 10;
      }
      $49$$50$112 : do {
        if (__label__ == 9) {
          $1 = 1;
          __label__ = 12;
          break $21$$9$105;
        } else if (__label__ == 10) {
          __label__ = 11;
          break $21$$9$105;
        }
      } while (0);
    } else if (__label__ == 1) {
      if (HEAP32[$2 + 1196 >> 2] == HEAP32[$2 + 1176 >> 2]) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      $19$$20$116 : do {
        if (__label__ == 2) {
          $1 = 1;
          __label__ = 12;
          break $21$$9$105;
        } else if (__label__ == 3) {
          __label__ = 11;
          break $21$$9$105;
        }
      } while (0);
    }
  } while (0);
  $52$$51$119 : do {
    if (__label__ == 11) {
      $1 = 0;
    }
  } while (0);
  var $53 = $1;
  return $53;
  return null;
}
_h264bsdIsEndOfPicture["X"] = 1;
function _h264bsdComputeSliceGroupMap($pStorage, $sliceGroupChangeCycle) {
  var $1;
  var $2;
  $1 = $pStorage;
  $2 = $sliceGroupChangeCycle;
  var $5 = HEAP32[$1 + 1172 >> 2];
  var $8 = HEAP32[$1 + 12 >> 2];
  var $14 = HEAP32[HEAP32[$1 + 16 >> 2] + 52 >> 2];
  var $19 = HEAP32[HEAP32[$1 + 16 >> 2] + 56 >> 2];
  _h264bsdDecodeSliceGroupMap($5, $8, $2, $14, $19);
  return;
  return;
}
function _h264bsdActivateParamSets($pStorage, $ppsId, $isIdr) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $tmp;
  var $flag;
  $2 = $pStorage;
  $3 = $ppsId;
  $4 = $isIdr;
  if (HEAP32[$2 + 148 + ($3 << 2) >> 2] == 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $24$$11$2 : do {
    if (__label__ == 1) {
      if (HEAP32[$2 + 20 + (HEAP32[HEAP32[$2 + 148 + ($3 << 2) >> 2] + 4 >> 2] << 2) >> 2] == 0) {
        __label__ = 2;
        break $24$$11$2;
      }
      var $30 = HEAP32[$2 + 148 + ($3 << 2) >> 2];
      var $41 = HEAP32[$2 + 20 + (HEAP32[HEAP32[$2 + 148 + ($3 << 2) >> 2] + 4 >> 2] << 2) >> 2];
      var $42 = _CheckPps($30, $41);
      $tmp = $42;
      if ($tmp != 0) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      $45$$47$5 : do {
        if (__label__ == 4) {
          $1 = $tmp;
          __label__ = 32;
          break $24$$11$2;
        } else if (__label__ == 5) {
          if (HEAP32[$2 + 4 >> 2] == 256) {
            __label__ = 6;
          } else {
            __label__ = 7;
          }
          $52$$112$8 : do {
            if (__label__ == 6) {
              HEAP32[$2 + 4 >> 2] = $3;
              var $60 = HEAP32[$2 + 148 + ($3 << 2) >> 2];
              HEAP32[$2 + 12 >> 2] = $60;
              var $67 = HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2];
              HEAP32[$2 + 8 >> 2] = $67;
              var $76 = HEAP32[$2 + 20 + (HEAP32[$2 + 8 >> 2] << 2) >> 2];
              HEAP32[$2 + 16 >> 2] = $76;
              var $89 = HEAP32[HEAP32[$2 + 16 >> 2] + 52 >> 2] * HEAP32[HEAP32[$2 + 16 >> 2] + 56 >> 2];
              HEAP32[$2 + 1176 >> 2] = $89;
              var $96 = HEAP32[HEAP32[$2 + 16 >> 2] + 52 >> 2];
              HEAP32[$2 + 1340 >> 2] = $96;
              var $105 = HEAP32[HEAP32[$2 + 16 >> 2] + 56 >> 2];
              HEAP32[$2 + 1344 >> 2] = $105;
              HEAP32[$2 + 3380 >> 2] = 1;
            } else if (__label__ == 7) {
              if (HEAP32[$2 + 3380 >> 2] != 0) {
                __label__ = 8;
              } else {
                __label__ = 21;
              }
              $117$$253$11 : do {
                if (__label__ == 8) {
                  HEAP32[$2 + 3380 >> 2] = 0;
                  var $123 = HEAP32[$2 + 1212 >> 2];
                  _H264SwDecFree($123);
                  HEAP32[$2 + 1212 >> 2] = 0;
                  var $129 = HEAP32[$2 + 1172 >> 2];
                  _H264SwDecFree($129);
                  HEAP32[$2 + 1172 >> 2] = 0;
                  var $135 = HEAP32[$2 + 1176 >> 2] * 216;
                  var $136 = _H264SwDecMalloc($135);
                  var $137 = $136;
                  HEAP32[$2 + 1212 >> 2] = $137;
                  var $143 = HEAP32[$2 + 1176 >> 2] << 2;
                  var $144 = _H264SwDecMalloc($143);
                  var $145 = $144;
                  HEAP32[$2 + 1172 >> 2] = $145;
                  if (HEAP32[$2 + 1212 >> 2] == 0) {
                    __label__ = 10;
                  } else {
                    __label__ = 9;
                  }
                  $157$$152$13 : do {
                    if (__label__ == 9) {
                      if (HEAP32[$2 + 1172 >> 2] == 0) {
                        __label__ = 10;
                        break $157$$152$13;
                      }
                      var $162 = HEAP32[$2 + 1212 >> 2];
                      var $166 = HEAP32[$2 + 1176 >> 2] * 216;
                      _H264SwDecMemset($162, 0, $166);
                      var $169 = HEAP32[$2 + 1212 >> 2];
                      var $174 = HEAP32[HEAP32[$2 + 16 >> 2] + 52 >> 2];
                      var $177 = HEAP32[$2 + 1176 >> 2];
                      _h264bsdInitMbNeighbours($169, $174, $177);
                      if (HEAP32[$2 + 1216 >> 2] != 0) {
                        __label__ = 16;
                      } else {
                        __label__ = 12;
                      }
                      $214$$182$16 : do {
                        if (__label__ == 12) {
                          if (HEAP32[HEAP32[$2 + 16 >> 2] + 16 >> 2] == 2) {
                            __label__ = 16;
                            break $214$$182$16;
                          }
                          if (HEAP32[HEAP32[$2 + 16 >> 2] + 80 >> 2] != 0) {
                            __label__ = 14;
                          } else {
                            __label__ = 17;
                          }
                          $196$$215$19 : do {
                            if (__label__ == 14) {
                              if (!(HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 84 >> 2] + 920 >> 2] != 0)) {
                                __label__ = 17;
                                break $196$$215$19;
                              }
                              if (!(HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 84 >> 2] + 944 >> 2] != 0)) {
                                __label__ = 16;
                                break $214$$182$16;
                              }
                            }
                          } while (0);
                          $flag = 0;
                          __label__ = 18;
                          break $214$$182$16;
                        }
                      } while (0);
                      $214$$216$23 : do {
                        if (__label__ == 16) {
                          $flag = 1;
                        }
                      } while (0);
                      var $230 = HEAP32[HEAP32[$2 + 16 >> 2] + 52 >> 2] * HEAP32[HEAP32[$2 + 16 >> 2] + 56 >> 2];
                      var $235 = HEAP32[HEAP32[$2 + 16 >> 2] + 88 >> 2];
                      var $240 = HEAP32[HEAP32[$2 + 16 >> 2] + 44 >> 2];
                      var $245 = HEAP32[HEAP32[$2 + 16 >> 2] + 12 >> 2];
                      var $247 = _h264bsdResetDpb($2 + 1220, $230, $235, $240, $245, $flag);
                      $tmp = $247;
                      if ($tmp != 0) {
                        __label__ = 19;
                      } else {
                        __label__ = 20;
                      }
                      $250$$252$26 : do {
                        if (__label__ == 19) {
                          $1 = $tmp;
                          __label__ = 32;
                          break $24$$11$2;
                        } else if (__label__ == 20) {
                          __label__ = 30;
                          break $117$$253$11;
                        }
                      } while (0);
                    }
                  } while (0);
                  $1 = 65535;
                  __label__ = 32;
                  break $24$$11$2;
                } else if (__label__ == 21) {
                  if ($3 != HEAP32[$2 + 4 >> 2]) {
                    __label__ = 22;
                  } else {
                    __label__ = 29;
                  }
                  $259$$348$31 : do {
                    if (__label__ == 22) {
                      if (HEAP32[HEAP32[$2 + 148 + ($3 << 2) >> 2] + 4 >> 2] != HEAP32[$2 + 8 >> 2]) {
                        __label__ = 23;
                      } else {
                        __label__ = 27;
                      }
                      $271$$336$33 : do {
                        if (__label__ == 23) {
                          if ($4 != 0) {
                            __label__ = 24;
                          } else {
                            __label__ = 25;
                          }
                          $274$$334$35 : do {
                            if (__label__ == 24) {
                              HEAP32[$2 + 4 >> 2] = $3;
                              var $282 = HEAP32[$2 + 148 + ($3 << 2) >> 2];
                              HEAP32[$2 + 12 >> 2] = $282;
                              var $289 = HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2];
                              HEAP32[$2 + 8 >> 2] = $289;
                              var $298 = HEAP32[$2 + 20 + (HEAP32[$2 + 8 >> 2] << 2) >> 2];
                              HEAP32[$2 + 16 >> 2] = $298;
                              var $311 = HEAP32[HEAP32[$2 + 16 >> 2] + 52 >> 2] * HEAP32[HEAP32[$2 + 16 >> 2] + 56 >> 2];
                              HEAP32[$2 + 1176 >> 2] = $311;
                              var $318 = HEAP32[HEAP32[$2 + 16 >> 2] + 52 >> 2];
                              HEAP32[$2 + 1340 >> 2] = $318;
                              var $327 = HEAP32[HEAP32[$2 + 16 >> 2] + 56 >> 2];
                              HEAP32[$2 + 1344 >> 2] = $327;
                              HEAP32[$2 + 3380 >> 2] = 1;
                            } else if (__label__ == 25) {
                              $1 = 1;
                              __label__ = 32;
                              break $24$$11$2;
                            }
                          } while (0);
                        } else if (__label__ == 27) {
                          HEAP32[$2 + 4 >> 2] = $3;
                          var $344 = HEAP32[$2 + 148 + ($3 << 2) >> 2];
                          HEAP32[$2 + 12 >> 2] = $344;
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
          $1 = 0;
          __label__ = 32;
          break $24$$11$2;
        }
      } while (0);
    }
  } while (0);
  $24$$351$44 : do {
    if (__label__ == 2) {
      $1 = 1;
    }
  } while (0);
  var $352 = $1;
  return $352;
  return null;
}
_h264bsdActivateParamSets["X"] = 1;
function _h264bsdDecodeSliceGroupMap($map, $pps, $sliceGroupChangeCycle, $picWidth, $picHeight) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $i;
  var $picSize;
  var $unitsInSliceGroup0;
  var $sizeOfUpperLeftGroup;
  $1 = $map;
  $2 = $pps;
  $3 = $sliceGroupChangeCycle;
  $4 = $picWidth;
  $5 = $picHeight;
  $unitsInSliceGroup0 = 0;
  $sizeOfUpperLeftGroup = 0;
  $picSize = $4 * $5;
  if (HEAP32[$2 + 12 >> 2] == 1) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $13$$18$110 : do {
    if (__label__ == 1) {
      _H264SwDecMemset($1, 0, $picSize << 2);
    } else if (__label__ == 2) {
      if (HEAPU32[$2 + 16 >> 2] > 2) {
        __label__ = 3;
      } else {
        __label__ = 14;
      }
      $23$$69$113 : do {
        if (__label__ == 3) {
          if (!(HEAPU32[$2 + 16 >> 2] < 6)) {
            __label__ = 14;
            break $23$$69$113;
          }
          if ($3 * HEAP32[$2 + 36 >> 2] < $picSize) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $36$$42$116 : do {
            if (__label__ == 5) {
              var $45 = $3 * HEAP32[$2 + 36 >> 2];
            } else if (__label__ == 6) {
              var $45 = $picSize;
            }
          } while (0);
          var $45;
          $unitsInSliceGroup0 = $45;
          if (HEAP32[$2 + 16 >> 2] == 4) {
            __label__ = 9;
          } else {
            __label__ = 8;
          }
          $55$$50$120 : do {
            if (__label__ == 8) {
              if (HEAP32[$2 + 16 >> 2] == 5) {
                __label__ = 9;
                break $55$$50$120;
              } else {
                __label__ = 13;
                break $55$$50$120;
              }
            }
          } while (0);
          $55$$68$122 : do {
            if (__label__ == 9) {
              if (HEAP32[$2 + 32 >> 2] != 0) {
                __label__ = 10;
              } else {
                __label__ = 11;
              }
              $60$$64$124 : do {
                if (__label__ == 10) {
                  var $67 = $picSize - $unitsInSliceGroup0;
                } else if (__label__ == 11) {
                  var $67 = $unitsInSliceGroup0;
                }
              } while (0);
              var $67;
              $sizeOfUpperLeftGroup = $67;
            }
          } while (0);
        }
      } while (0);
      var $72 = HEAP32[$2 + 16 >> 2];
      if ($72 == 0) {
        __label__ = 15;
      } else if ($72 == 1) {
        __label__ = 16;
      } else if ($72 == 2) {
        __label__ = 17;
      } else if ($72 == 3) {
        __label__ = 18;
      } else if ($72 == 4) {
        __label__ = 19;
      } else if ($72 == 5) {
        __label__ = 20;
      } else {
        __label__ = 21;
      }
      $125$$73$$82$$89$$102$$110$$117$130 : do {
        if (__label__ == 21) {
          $i = 0;
          $126$132 : while (1) {
            if (!($i < $picSize)) {
              __label__ = 25;
              break $126$132;
            }
            var $136 = HEAP32[HEAP32[$2 + 44 >> 2] + ($i << 2) >> 2];
            HEAP32[$1 + ($i << 2) >> 2] = $136;
            var $142 = $i + 1;
            $i = $142;
          }
        } else if (__label__ == 15) {
          var $77 = HEAP32[$2 + 12 >> 2];
          var $80 = HEAP32[$2 + 20 >> 2];
          _DecodeInterleavedMap($1, $77, $80, $picSize);
        } else if (__label__ == 16) {
          var $86 = HEAP32[$2 + 12 >> 2];
          _DecodeDispersedMap($1, $86, $4, $5);
        } else if (__label__ == 17) {
          var $93 = HEAP32[$2 + 12 >> 2];
          var $96 = HEAP32[$2 + 24 >> 2];
          var $99 = HEAP32[$2 + 28 >> 2];
          _DecodeForegroundLeftOverMap($1, $93, $96, $99, $4, $5);
        } else if (__label__ == 18) {
          var $106 = HEAP32[$2 + 32 >> 2];
          _DecodeBoxOutMap($1, $106, $unitsInSliceGroup0, $4, $5);
        } else if (__label__ == 19) {
          var $114 = HEAP32[$2 + 32 >> 2];
          _DecodeRasterScanMap($1, $114, $sizeOfUpperLeftGroup, $picSize);
        } else if (__label__ == 20) {
          var $121 = HEAP32[$2 + 32 >> 2];
          _DecodeWipeMap($1, $121, $sizeOfUpperLeftGroup, $4, $5);
        }
      } while (0);
    }
  } while (0);
  return;
  return;
}
_h264bsdDecodeSliceGroupMap["X"] = 1;
function _DecodeInterleavedMap($map, $numSliceGroups, $runLength, $picSize) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $i;
  var $j;
  var $group;
  $1 = $map;
  $2 = $numSliceGroups;
  $3 = $runLength;
  $4 = $picSize;
  $i = 0;
  $5$145 : while (1) {
    $group = 0;
    $6$147 : while (1) {
      if ($group < $2) {
        __label__ = 3;
      } else {
        var $15 = 0;
        __label__ = 4;
      }
      $10$$14$149 : do {
        if (__label__ == 3) {
          var $15 = $i < $4;
        }
      } while (0);
      var $15;
      if (!$15) {
        __label__ = 13;
        break $6$147;
      }
      $j = 0;
      $17$153 : while (1) {
        if ($j < HEAPU32[$3 + ($group << 2) >> 2]) {
          __label__ = 7;
        } else {
          var $31 = 0;
          __label__ = 8;
        }
        $24$$30$155 : do {
          if (__label__ == 7) {
            var $31 = $i + $j < $4;
          }
        } while (0);
        var $31;
        if (!$31) {
          __label__ = 11;
          break $17$153;
        }
        HEAP32[$1 + ($i + $j << 2) >> 2] = $group;
        var $41 = $j + 1;
        $j = $41;
      }
      var $44 = $group;
      var $45 = $44 + 1;
      $group = $45;
      var $50 = $i + HEAP32[$3 + ($44 << 2) >> 2];
      $i = $50;
    }
    if (!($i < $4)) {
      __label__ = 15;
      break $5$145;
    }
  }
  return;
  return;
}
_DecodeInterleavedMap["X"] = 1;
function _h264bsdCheckAccessUnitBoundary($strm, $nuNext, $storage, $accessUnitBoundaryFlag) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 28;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $tmp;
  var $ppsId = __stackBase__;
  var $frameNum = __stackBase__ + 4;
  var $idrPicId = __stackBase__ + 8;
  var $picOrderCntLsb = __stackBase__ + 12;
  var $deltaPicOrderCntBottom = __stackBase__ + 16;
  var $deltaPicOrderCnt = __stackBase__ + 20;
  var $sps;
  var $pps;
  $2 = $strm;
  $3 = $nuNext;
  $4 = $storage;
  $5 = $accessUnitBoundaryFlag;
  HEAP32[$5 >> 2] = 0;
  if (HEAPU32[$3 >> 2] > 5) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $11$$16$2 : do {
    if (__label__ == 1) {
      if (HEAPU32[$3 >> 2] < 12) {
        __label__ = 4;
        break $11$$16$2;
      } else {
        __label__ = 2;
        break $11$$16$2;
      }
    }
  } while (0);
  $26$$16$4 : do {
    if (__label__ == 2) {
      if (HEAPU32[$3 >> 2] > 12) {
        __label__ = 3;
      } else {
        __label__ = 5;
      }
      $21$$28$6 : do {
        if (__label__ == 3) {
          if (HEAPU32[$3 >> 2] <= 18) {
            __label__ = 4;
            break $26$$16$4;
          }
        }
      } while (0);
      if (HEAP32[$3 >> 2] != 1) {
        __label__ = 6;
      } else {
        __label__ = 8;
      }
      $33$$39$9 : do {
        if (__label__ == 6) {
          if (!(HEAP32[$3 >> 2] != 5)) {
            __label__ = 8;
            break $33$$39$9;
          }
          $1 = 0;
          __label__ = 64;
          break $26$$16$4;
        }
      } while (0);
      if (HEAP32[$4 + 1332 >> 2] != 0) {
        __label__ = 10;
      } else {
        __label__ = 11;
      }
      $47$$53$14 : do {
        if (__label__ == 10) {
          HEAP32[$5 >> 2] = 1;
          HEAP32[$4 + 1332 >> 2] = 0;
        }
      } while (0);
      var $55 = _h264bsdCheckPpsId($2, $ppsId);
      $tmp = $55;
      if ($tmp != 0) {
        __label__ = 12;
      } else {
        __label__ = 13;
      }
      $58$$60$17 : do {
        if (__label__ == 12) {
          $1 = $tmp;
          __label__ = 64;
          break $26$$16$4;
        } else if (__label__ == 13) {
          $pps = HEAP32[$4 + 148 + (HEAP32[$ppsId >> 2] << 2) >> 2];
          if ($pps == 0) {
            __label__ = 18;
          } else {
            __label__ = 14;
          }
          $95$$68$20 : do {
            if (__label__ == 14) {
              if (HEAP32[$4 + 20 + (HEAP32[$pps + 4 >> 2] << 2) >> 2] == 0) {
                __label__ = 18;
                break $95$$68$20;
              }
              if (HEAP32[$4 + 8 >> 2] != 32) {
                __label__ = 16;
              } else {
                __label__ = 19;
              }
              $82$$96$23 : do {
                if (__label__ == 16) {
                  if (!(HEAP32[$pps + 4 >> 2] != HEAP32[$4 + 8 >> 2])) {
                    __label__ = 19;
                    break $82$$96$23;
                  }
                  if (HEAP32[$3 >> 2] != 5) {
                    __label__ = 18;
                    break $95$$68$20;
                  }
                }
              } while (0);
              $sps = HEAP32[$4 + 20 + (HEAP32[$pps + 4 >> 2] << 2) >> 2];
              if (HEAP32[$4 + 1304 >> 2] != HEAP32[$3 + 4 >> 2]) {
                __label__ = 20;
              } else {
                __label__ = 23;
              }
              $115$$131$27 : do {
                if (__label__ == 20) {
                  if (HEAP32[$4 + 1304 >> 2] == 0) {
                    __label__ = 22;
                  } else {
                    __label__ = 21;
                  }
                  $129$$124$29 : do {
                    if (__label__ == 21) {
                      if (!(HEAP32[$3 + 4 >> 2] == 0)) {
                        __label__ = 23;
                        break $115$$131$27;
                      }
                    }
                  } while (0);
                  HEAP32[$5 >> 2] = 1;
                }
              } while (0);
              if (HEAP32[$4 + 1300 >> 2] == 5) {
                __label__ = 24;
              } else {
                __label__ = 25;
              }
              $140$$145$33 : do {
                if (__label__ == 24) {
                  if (HEAP32[$3 >> 2] != 5) {
                    __label__ = 27;
                    break $140$$145$33;
                  } else {
                    __label__ = 25;
                    break $140$$145$33;
                  }
                }
              } while (0);
              $159$$145$35 : do {
                if (__label__ == 25) {
                  if (!(HEAP32[$4 + 1300 >> 2] != 5)) {
                    __label__ = 28;
                    break $159$$145$35;
                  }
                  if (HEAP32[$3 >> 2] == 5) {
                    __label__ = 27;
                    break $159$$145$35;
                  } else {
                    __label__ = 28;
                    break $159$$145$35;
                  }
                }
              } while (0);
              $159$$161$38 : do {
                if (__label__ == 27) {
                  HEAP32[$5 >> 2] = 1;
                }
              } while (0);
              var $165 = HEAP32[$sps + 12 >> 2];
              var $166 = _h264bsdCheckFrameNum($2, $165, $frameNum);
              $tmp = $166;
              if ($tmp != 0) {
                __label__ = 29;
              } else {
                __label__ = 30;
              }
              $169$$170$41 : do {
                if (__label__ == 29) {
                  $1 = 1;
                  __label__ = 64;
                  break $26$$16$4;
                } else if (__label__ == 30) {
                  if (HEAP32[$4 + 1308 >> 2] != HEAP32[$frameNum >> 2]) {
                    __label__ = 31;
                  } else {
                    __label__ = 32;
                  }
                  $178$$185$44 : do {
                    if (__label__ == 31) {
                      var $179 = HEAP32[$frameNum >> 2];
                      HEAP32[$4 + 1308 >> 2] = $179;
                      HEAP32[$5 >> 2] = 1;
                    }
                  } while (0);
                  if (HEAP32[$3 >> 2] == 5) {
                    __label__ = 33;
                  } else {
                    __label__ = 39;
                  }
                  $190$$227$47 : do {
                    if (__label__ == 33) {
                      var $194 = HEAP32[$sps + 12 >> 2];
                      var $197 = HEAP32[$3 >> 2];
                      var $198 = _h264bsdCheckIdrPicId($2, $194, $197, $idrPicId);
                      $tmp = $198;
                      if ($tmp != 0) {
                        __label__ = 34;
                      } else {
                        __label__ = 35;
                      }
                      $201$$202$49 : do {
                        if (__label__ == 34) {
                          $1 = 1;
                          __label__ = 64;
                          break $26$$16$4;
                        } else if (__label__ == 35) {
                          if (HEAP32[$4 + 1300 >> 2] == 5) {
                            __label__ = 36;
                          } else {
                            __label__ = 38;
                          }
                          $211$$221$52 : do {
                            if (__label__ == 36) {
                              if (!(HEAP32[$4 + 1312 >> 2] != HEAP32[$idrPicId >> 2])) {
                                __label__ = 38;
                                break $211$$221$52;
                              }
                              HEAP32[$5 >> 2] = 1;
                            }
                          } while (0);
                          var $222 = HEAP32[$idrPicId >> 2];
                          HEAP32[$4 + 1312 >> 2] = $222;
                        }
                      } while (0);
                    }
                  } while (0);
                  if (HEAP32[$sps + 16 >> 2] == 0) {
                    __label__ = 40;
                  } else {
                    __label__ = 51;
                  }
                  $232$$290$57 : do {
                    if (__label__ == 40) {
                      var $237 = HEAP32[$3 >> 2];
                      var $238 = _h264bsdCheckPicOrderCntLsb($2, $sps, $237, $picOrderCntLsb);
                      $tmp = $238;
                      if ($tmp != 0) {
                        __label__ = 41;
                      } else {
                        __label__ = 42;
                      }
                      $241$$242$59 : do {
                        if (__label__ == 41) {
                          $1 = 1;
                          __label__ = 64;
                          break $26$$16$4;
                        } else if (__label__ == 42) {
                          if (HEAP32[$4 + 1316 >> 2] != HEAP32[$picOrderCntLsb >> 2]) {
                            __label__ = 43;
                          } else {
                            __label__ = 44;
                          }
                          $250$$257$62 : do {
                            if (__label__ == 43) {
                              var $251 = HEAP32[$picOrderCntLsb >> 2];
                              HEAP32[$4 + 1316 >> 2] = $251;
                              HEAP32[$5 >> 2] = 1;
                            }
                          } while (0);
                          if (HEAP32[$pps + 8 >> 2] != 0) {
                            __label__ = 45;
                          } else {
                            __label__ = 50;
                          }
                          $262$$289$65 : do {
                            if (__label__ == 45) {
                              var $267 = HEAP32[$3 >> 2];
                              var $268 = _h264bsdCheckDeltaPicOrderCntBottom($2, $sps, $267, $deltaPicOrderCntBottom);
                              $tmp = $268;
                              if ($tmp != 0) {
                                __label__ = 46;
                              } else {
                                __label__ = 47;
                              }
                              $271$$273$67 : do {
                                if (__label__ == 46) {
                                  $1 = $tmp;
                                  __label__ = 64;
                                  break $26$$16$4;
                                } else if (__label__ == 47) {
                                  if (HEAP32[$4 + 1320 >> 2] != HEAP32[$deltaPicOrderCntBottom >> 2]) {
                                    __label__ = 48;
                                  } else {
                                    __label__ = 49;
                                  }
                                  $281$$288$70 : do {
                                    if (__label__ == 48) {
                                      var $282 = HEAP32[$deltaPicOrderCntBottom >> 2];
                                      HEAP32[$4 + 1320 >> 2] = $282;
                                      HEAP32[$5 >> 2] = 1;
                                    }
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                    } else if (__label__ == 51) {
                      if (HEAP32[$sps + 16 >> 2] == 1) {
                        __label__ = 52;
                      } else {
                        __label__ = 62;
                      }
                      $295$$360$75 : do {
                        if (__label__ == 52) {
                          if (HEAP32[$sps + 24 >> 2] != 0) {
                            __label__ = 62;
                            break $295$$360$75;
                          }
                          var $305 = HEAP32[$3 >> 2];
                          var $308 = HEAP32[$pps + 8 >> 2];
                          var $309 = $deltaPicOrderCnt;
                          var $310 = _h264bsdCheckDeltaPicOrderCnt($2, $sps, $305, $308, $309);
                          $tmp = $310;
                          if ($tmp != 0) {
                            __label__ = 54;
                          } else {
                            __label__ = 55;
                          }
                          $313$$315$78 : do {
                            if (__label__ == 54) {
                              $1 = $tmp;
                              __label__ = 64;
                              break $26$$16$4;
                            } else if (__label__ == 55) {
                              if (HEAP32[$4 + 1324 >> 2] != HEAP32[$deltaPicOrderCnt >> 2]) {
                                __label__ = 56;
                              } else {
                                __label__ = 57;
                              }
                              $325$$334$81 : do {
                                if (__label__ == 56) {
                                  var $327 = HEAP32[$deltaPicOrderCnt >> 2];
                                  HEAP32[$4 + 1324 >> 2] = $327;
                                  HEAP32[$5 >> 2] = 1;
                                }
                              } while (0);
                              if (HEAP32[$pps + 8 >> 2] != 0) {
                                __label__ = 58;
                              } else {
                                __label__ = 61;
                              }
                              $339$$359$84 : do {
                                if (__label__ == 58) {
                                  if (HEAP32[$4 + 1328 >> 2] != HEAP32[$deltaPicOrderCnt + 4 >> 2]) {
                                    __label__ = 59;
                                  } else {
                                    __label__ = 60;
                                  }
                                  $349$$358$86 : do {
                                    if (__label__ == 59) {
                                      var $351 = HEAP32[$deltaPicOrderCnt + 4 >> 2];
                                      HEAP32[$4 + 1328 >> 2] = $351;
                                      HEAP32[$5 >> 2] = 1;
                                    }
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                    }
                  } while (0);
                  var src, dest, stop, stop4;
                  src = $3;
                  dest = $4 + 1300;
                  stop = src + 8;
                  if (dest % 4 == src % 4 && 8 > 8) {
                    while (src % 4 !== 0 && src < stop) {
                      HEAP8[dest++] = HEAP8[src++];
                    }
                    src >>= 2;
                    dest >>= 2;
                    stop4 = stop >> 2;
                    while (src < stop4) {
                      HEAP32[dest++] = HEAP32[src++];
                    }
                    src <<= 2;
                    dest <<= 2;
                  }
                  while (src < stop) {
                    HEAP8[dest++] = HEAP8[src++];
                  }
                  $1 = 0;
                  __label__ = 64;
                  break $26$$16$4;
                }
              } while (0);
            }
          } while (0);
          $1 = 65520;
          __label__ = 64;
          break $26$$16$4;
        }
      } while (0);
    }
  } while (0);
  $26$$370$93 : do {
    if (__label__ == 4) {
      HEAP32[$5 >> 2] = 1;
      $1 = 0;
    }
  } while (0);
  var $371 = $1;
  STACKTOP = __stackBase__;
  return $371;
  return null;
}
_h264bsdCheckAccessUnitBoundary["X"] = 1;
function _h264bsdValidParamSets($pStorage) {
  var __label__;
  var $1;
  var $2;
  var $i;
  $2 = $pStorage;
  $i = 0;
  $3$97 : while (1) {
    if (!($i < 256)) {
      __label__ = 8;
      break $3$97;
    }
    if (HEAP32[$2 + 148 + ($i << 2) >> 2] != 0) {
      __label__ = 3;
    } else {
      __label__ = 6;
    }
    $13$$46$100 : do {
      if (__label__ == 3) {
        if (!(HEAP32[$2 + 20 + (HEAP32[HEAP32[$2 + 148 + ($i << 2) >> 2] + 4 >> 2] << 2) >> 2] != 0)) {
          __label__ = 6;
          break $13$$46$100;
        }
        var $31 = HEAP32[$2 + 148 + ($i << 2) >> 2];
        var $42 = HEAP32[$2 + 20 + (HEAP32[HEAP32[$2 + 148 + ($i << 2) >> 2] + 4 >> 2] << 2) >> 2];
        var $43 = _CheckPps($31, $42);
        if ($43 == 0) {
          __label__ = 5;
          break $3$97;
        }
      }
    } while (0);
    var $49 = $i + 1;
    $i = $49;
  }
  $50$$45$105 : do {
    if (__label__ == 8) {
      $1 = 1;
    } else if (__label__ == 5) {
      $1 = 0;
    }
  } while (0);
  var $52 = $1;
  return $52;
  return null;
}
_h264bsdValidParamSets["X"] = 1;
function _DecodeDispersedMap($map, $numSliceGroups, $picWidth, $picHeight) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $i;
  var $picSize;
  $1 = $map;
  $2 = $numSliceGroups;
  $3 = $picWidth;
  $4 = $picHeight;
  $picSize = $3 * $4;
  $i = 0;
  $8$2 : while (1) {
    if (!($i < $picSize)) {
      __label__ = 4;
      break $8$2;
    }
    var $15 = $i % $3;
    var $18 = Math.floor($i / $3);
    HEAP32[$1 + ($i << 2) >> 2] = ($15 + ($18 * $2 >>> 1)) % $2;
    var $30 = $i + 1;
    $i = $30;
  }
  return;
  return;
}
function _DecodeForegroundLeftOverMap($map, $numSliceGroups, $topLeft, $bottomRight, $picWidth, $picHeight) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $i;
  var $y;
  var $x;
  var $yTopLeft;
  var $yBottomRight;
  var $xTopLeft;
  var $xBottomRight;
  var $picSize;
  var $group;
  $1 = $map;
  $2 = $numSliceGroups;
  $3 = $topLeft;
  $4 = $bottomRight;
  $5 = $picWidth;
  $6 = $picHeight;
  $picSize = $5 * $6;
  $i = 0;
  $10$8 : while (1) {
    if (!($i < $picSize)) {
      __label__ = 4;
      break $10$8;
    }
    HEAP32[$1 + ($i << 2) >> 2] = $2 - 1;
    var $22 = $i + 1;
    $i = $22;
  }
  $group = $2 - 1;
  $26$13 : while (1) {
    var $27 = $group;
    var $28 = $27 - 1;
    $group = $28;
    if (!($27 != 0)) {
      __label__ = 15;
      break $26$13;
    }
    var $34 = HEAPU32[$3 + ($group << 2) >> 2];
    var $36 = Math.floor($34 / $5);
    $yTopLeft = $36;
    $xTopLeft = HEAPU32[$3 + ($group << 2) >> 2] % $5;
    var $46 = HEAPU32[$4 + ($group << 2) >> 2];
    var $48 = Math.floor($46 / $5);
    $yBottomRight = $48;
    $xBottomRight = HEAPU32[$4 + ($group << 2) >> 2] % $5;
    $y = $yTopLeft;
    $56$16 : while (1) {
      if (!($y <= $yBottomRight)) {
        __label__ = 14;
        break $56$16;
      }
      $x = $xTopLeft;
      $62$19 : while (1) {
        if (!($x <= $xBottomRight)) {
          __label__ = 12;
          break $62$19;
        }
        HEAP32[$1 + ($y * $5 + $x << 2) >> 2] = $group;
        var $77 = $x + 1;
        $x = $77;
      }
      var $81 = $y + 1;
      $y = $81;
    }
  }
  return;
  return;
}
_DecodeForegroundLeftOverMap["X"] = 1;
function _DecodeBoxOutMap($map, $sliceGroupChangeDirectionFlag, $unitsInSliceGroup0, $picWidth, $picHeight) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $i;
  var $k;
  var $picSize;
  var $x;
  var $y;
  var $xDir;
  var $yDir;
  var $leftBound;
  var $topBound;
  var $rightBound;
  var $bottomBound;
  var $mapUnitVacant;
  $1 = $map;
  $2 = $sliceGroupChangeDirectionFlag;
  $3 = $unitsInSliceGroup0;
  $4 = $picWidth;
  $5 = $picHeight;
  $picSize = $4 * $5;
  $i = 0;
  $9$28 : while (1) {
    if (!($i < $picSize)) {
      __label__ = 4;
      break $9$28;
    }
    HEAP32[$1 + ($i << 2) >> 2] = 1;
    var $19 = $i + 1;
    $i = $19;
  }
  $x = $4 - $2 >>> 1;
  $y = $5 - $2 >>> 1;
  $leftBound = $x;
  $topBound = $y;
  $rightBound = $x;
  $bottomBound = $y;
  $xDir = $2 - 1;
  $yDir = $2;
  $k = 0;
  $36$33 : while (1) {
    if (!($k < $3)) {
      __label__ = 38;
      break $36$33;
    }
    var $50 = HEAP32[$1 + ($y * $4 + $x << 2) >> 2] == 1 ? 1 : 0;
    $mapUnitVacant = $50;
    if ($mapUnitVacant != 0) {
      __label__ = 7;
    } else {
      __label__ = 8;
    }
    $53$$61$36 : do {
      if (__label__ == 7) {
        HEAP32[$1 + ($y * $4 + $x << 2) >> 2] = 0;
      }
    } while (0);
    if ($xDir == -1) {
      __label__ = 9;
    } else {
      __label__ = 14;
    }
    $64$$82$39 : do {
      if (__label__ == 9) {
        if (!($x == $leftBound)) {
          __label__ = 14;
          break $64$$82$39;
        }
        if ($leftBound - 1 > 0) {
          __label__ = 11;
        } else {
          __label__ = 12;
        }
        $72$$75$42 : do {
          if (__label__ == 11) {
            var $77 = $leftBound - 1;
          } else if (__label__ == 12) {
            var $77 = 0;
          }
        } while (0);
        var $77;
        $leftBound = $77;
        $x = $leftBound;
        $xDir = 0;
        $yDir = ($2 << 1) - 1;
        __label__ = 36;
        break $64$$82$39;
      }
    } while (0);
    $163$$82$46 : do {
      if (__label__ == 14) {
        if ($xDir == 1) {
          __label__ = 15;
        } else {
          __label__ = 20;
        }
        $85$$107$48 : do {
          if (__label__ == 15) {
            if (!($x == $rightBound)) {
              __label__ = 20;
              break $85$$107$48;
            }
            if ($rightBound + 1 < $4 - 1) {
              __label__ = 17;
            } else {
              __label__ = 18;
            }
            $95$$98$51 : do {
              if (__label__ == 17) {
                var $102 = $rightBound + 1;
              } else if (__label__ == 18) {
                var $102 = $4 - 1;
              }
            } while (0);
            var $102;
            $rightBound = $102;
            $x = $rightBound;
            $xDir = 0;
            $yDir = 1 - ($2 << 1);
            __label__ = 35;
            break $85$$107$48;
          }
        } while (0);
        $162$$107$55 : do {
          if (__label__ == 20) {
            if ($yDir == -1) {
              __label__ = 21;
            } else {
              __label__ = 26;
            }
            $110$$128$57 : do {
              if (__label__ == 21) {
                if (!($y == $topBound)) {
                  __label__ = 26;
                  break $110$$128$57;
                }
                if ($topBound - 1 > 0) {
                  __label__ = 23;
                } else {
                  __label__ = 24;
                }
                $118$$121$60 : do {
                  if (__label__ == 23) {
                    var $123 = $topBound - 1;
                  } else if (__label__ == 24) {
                    var $123 = 0;
                  }
                } while (0);
                var $123;
                $topBound = $123;
                $y = $topBound;
                $xDir = 1 - ($2 << 1);
                $yDir = 0;
                __label__ = 34;
                break $110$$128$57;
              }
            } while (0);
            $161$$128$64 : do {
              if (__label__ == 26) {
                if ($yDir == 1) {
                  __label__ = 27;
                } else {
                  __label__ = 32;
                }
                $131$$153$66 : do {
                  if (__label__ == 27) {
                    if (!($y == $bottomBound)) {
                      __label__ = 32;
                      break $131$$153$66;
                    }
                    if ($bottomBound + 1 < $5 - 1) {
                      __label__ = 29;
                    } else {
                      __label__ = 30;
                    }
                    $141$$144$69 : do {
                      if (__label__ == 29) {
                        var $148 = $bottomBound + 1;
                      } else if (__label__ == 30) {
                        var $148 = $5 - 1;
                      }
                    } while (0);
                    var $148;
                    $bottomBound = $148;
                    $y = $bottomBound;
                    $xDir = ($2 << 1) - 1;
                    $yDir = 0;
                    __label__ = 33;
                    break $131$$153$66;
                  }
                } while (0);
                $160$$153$73 : do {
                  if (__label__ == 32) {
                    var $156 = $x + $xDir;
                    $x = $156;
                    var $159 = $y + $yDir;
                    $y = $159;
                  }
                } while (0);
              }
            } while (0);
          }
        } while (0);
      }
    } while (0);
    var $167 = $mapUnitVacant != 0 ? 1 : 0;
    var $169 = $k + $167;
    $k = $169;
  }
  return;
  return;
}
_DecodeBoxOutMap["X"] = 1;
function _DecodeRasterScanMap($map, $sliceGroupChangeDirectionFlag, $sizeOfUpperLeftGroup, $picSize) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $i;
  $1 = $map;
  $2 = $sliceGroupChangeDirectionFlag;
  $3 = $sizeOfUpperLeftGroup;
  $4 = $picSize;
  $i = 0;
  $5$82 : while (1) {
    if (!($i < $4)) {
      __label__ = 7;
      break $5$82;
    }
    if ($i < $3) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    $13$$18$85 : do {
      if (__label__ == 3) {
        HEAP32[$1 + ($i << 2) >> 2] = $2;
      } else if (__label__ == 4) {
        HEAP32[$1 + ($i << 2) >> 2] = 1 - $2;
      }
    } while (0);
    var $27 = $i + 1;
    $i = $27;
  }
  return;
  return;
}
function _DecodeWipeMap($map, $sliceGroupChangeDirectionFlag, $sizeOfUpperLeftGroup, $picWidth, $picHeight) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $i;
  var $j;
  var $k;
  $1 = $map;
  $2 = $sliceGroupChangeDirectionFlag;
  $3 = $sizeOfUpperLeftGroup;
  $4 = $picWidth;
  $5 = $picHeight;
  $k = 0;
  $j = 0;
  $6$92 : while (1) {
    if (!($j < $4)) {
      __label__ = 11;
      break $6$92;
    }
    $i = 0;
    $11$95 : while (1) {
      if (!($i < $5)) {
        __label__ = 9;
        break $11$95;
      }
      var $16 = $k;
      var $17 = $16 + 1;
      $k = $17;
      if ($16 < $3) {
        __label__ = 5;
      } else {
        __label__ = 6;
      }
      $20$$29$98 : do {
        if (__label__ == 5) {
          HEAP32[$1 + ($i * $4 + $j << 2) >> 2] = $2;
        } else if (__label__ == 6) {
          HEAP32[$1 + ($i * $4 + $j << 2) >> 2] = 1 - $2;
        }
      } while (0);
      var $42 = $i + 1;
      $i = $42;
    }
    var $46 = $j + 1;
    $j = $46;
  }
  return;
  return;
}
_DecodeWipeMap["X"] = 1;
function _h264bsdIntraPrediction($pMb, $mbLayer, $image, $mbNum, $constrainedIntraPred, $data) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 72;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $pelAbove = __stackBase__;
  var $pelLeft = __stackBase__ + 40;
  var $tmp;
  $2 = $pMb;
  $3 = $mbLayer;
  $4 = $image;
  $5 = $mbNum;
  $6 = $constrainedIntraPred;
  $7 = $data;
  var $9 = $pelAbove;
  var $10 = $pelLeft;
  _h264bsdGetNeighbourPels($4, $9, $10, $5);
  var $14 = HEAP32[$2 >> 2];
  var $15 = _h264bsdMbPartPredMode($14);
  if ($15 == 1) {
    __label__ = 1;
  } else {
    __label__ = 4;
  }
  $17$$33$107 : do {
    if (__label__ == 1) {
      var $24 = $pelAbove;
      var $25 = $pelLeft;
      var $27 = _h264bsdIntra16x16Prediction($2, $7, $3 + 328, $24, $25, $6);
      $tmp = $27;
      if ($tmp != 0) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      $30$$32$109 : do {
        if (__label__ == 2) {
          $1 = $tmp;
          __label__ = 12;
          break $17$$33$107;
        } else if (__label__ == 3) {
          __label__ = 7;
          break $17$$33$107;
        }
      } while (0);
    } else if (__label__ == 4) {
      var $37 = $pelAbove;
      var $38 = $pelLeft;
      var $40 = _h264bsdIntra4x4Prediction($2, $7, $3, $37, $38, $6);
      $tmp = $40;
      if ($tmp != 0) {
        __label__ = 5;
      } else {
        __label__ = 6;
      }
      $43$$45$113 : do {
        if (__label__ == 5) {
          $1 = $tmp;
          __label__ = 12;
          break $17$$33$107;
        } else if (__label__ == 6) {
          __label__ = 7;
          break $17$$33$107;
        }
      } while (0);
    }
  } while (0);
  $78$$46$116 : do {
    if (__label__ == 7) {
      var $56 = $pelAbove + 21;
      var $58 = $pelLeft + 16;
      var $62 = HEAP32[$3 + 140 >> 2];
      var $64 = _h264bsdIntraChromaPrediction($2, $7 + 256, $3 + 1352, $56, $58, $62, $6);
      $tmp = $64;
      if ($tmp != 0) {
        __label__ = 8;
      } else {
        __label__ = 9;
      }
      $67$$69$118 : do {
        if (__label__ == 8) {
          $1 = $tmp;
        } else if (__label__ == 9) {
          if (HEAPU32[$2 + 196 >> 2] > 1) {
            __label__ = 10;
          } else {
            __label__ = 11;
          }
          $74$$75$121 : do {
            if (__label__ == 10) {
              $1 = 0;
            } else if (__label__ == 11) {
              _h264bsdWriteMacroblock($4, $7);
              $1 = 0;
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $79 = $1;
  STACKTOP = __stackBase__;
  return $79;
  return null;
}
_h264bsdIntraPrediction["X"] = 1;
function _h264bsdGetNeighbourPels($image, $above, $left, $mbNum) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $i;
  var $width;
  var $picSize;
  var $ptr;
  var $tmp;
  var $row;
  var $col;
  $1 = $image;
  $2 = $above;
  $3 = $left;
  $4 = $mbNum;
  if ($4 != 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $8$$7$2 : do {
    if (__label__ == 2) {
      $width = HEAP32[$1 + 4 >> 2];
      $picSize = $width * HEAP32[$1 + 8 >> 2];
      var $19 = Math.floor($4 / $width);
      $row = $19;
      $col = $4 - $row * $width;
      var $26 = $width << 4;
      $width = $26;
      $ptr = HEAP32[$1 >> 2] + ($row << 4) * $width + ($col << 4);
      if ($row != 0) {
        __label__ = 3;
      } else {
        __label__ = 7;
      }
      $40$$57$4 : do {
        if (__label__ == 3) {
          $tmp = $ptr + -($width + 1);
          $i = 21;
          $46$6 : while (1) {
            var $47 = $i;
            var $48 = $47 - 1;
            $i = $48;
            if (!($47 != 0)) {
              __label__ = 6;
              break $46$6;
            }
            var $51 = $tmp;
            var $52 = $51 + 1;
            $tmp = $52;
            var $53 = HEAP8[$51];
            var $54 = $2;
            var $55 = $54 + 1;
            $2 = $55;
            HEAP8[$54] = $53;
          }
        }
      } while (0);
      if ($col != 0) {
        __label__ = 8;
      } else {
        __label__ = 13;
      }
      $60$$77$11 : do {
        if (__label__ == 8) {
          var $62 = $ptr - 1;
          $ptr = $62;
          $i = 16;
          $63$13 : while (1) {
            var $64 = $i;
            var $65 = $64 - 1;
            $i = $65;
            if (!($64 != 0)) {
              __label__ = 12;
              break $63$13;
            }
            var $69 = HEAP8[$ptr];
            var $70 = $3;
            var $71 = $70 + 1;
            $3 = $71;
            HEAP8[$70] = $69;
            var $75 = $ptr + $width;
            $ptr = $75;
          }
        }
      } while (0);
      var $79 = $width >>> 1;
      $width = $79;
      $ptr = HEAP32[$1 >> 2] + ($picSize << 8) + ($row << 3) * $width + ($col << 3);
      if ($row != 0) {
        __label__ = 14;
      } else {
        __label__ = 21;
      }
      $96$$129$19 : do {
        if (__label__ == 14) {
          $tmp = $ptr + -($width + 1);
          $i = 9;
          $102$21 : while (1) {
            var $103 = $i;
            var $104 = $103 - 1;
            $i = $104;
            if (!($103 != 0)) {
              __label__ = 17;
              break $102$21;
            }
            var $107 = $tmp;
            var $108 = $107 + 1;
            $tmp = $108;
            var $109 = HEAP8[$107];
            var $110 = $2;
            var $111 = $110 + 1;
            $2 = $111;
            HEAP8[$110] = $109;
          }
          var $117 = $tmp + (($picSize << 6) - 9);
          $tmp = $117;
          $i = 9;
          $118$25 : while (1) {
            var $119 = $i;
            var $120 = $119 - 1;
            $i = $120;
            if (!($119 != 0)) {
              __label__ = 20;
              break $118$25;
            }
            var $123 = $tmp;
            var $124 = $123 + 1;
            $tmp = $124;
            var $125 = HEAP8[$123];
            var $126 = $2;
            var $127 = $126 + 1;
            $2 = $127;
            HEAP8[$126] = $125;
          }
        }
      } while (0);
      if (!($col != 0)) {
        __label__ = 31;
        break $8$$7$2;
      }
      var $134 = $ptr - 1;
      $ptr = $134;
      $i = 8;
      $135$31 : while (1) {
        var $136 = $i;
        var $137 = $136 - 1;
        $i = $137;
        if (!($136 != 0)) {
          __label__ = 26;
          break $135$31;
        }
        var $141 = HEAP8[$ptr];
        var $142 = $3;
        var $143 = $142 + 1;
        $3 = $143;
        HEAP8[$142] = $141;
        var $147 = $ptr + $width;
        $ptr = $147;
      }
      var $155 = $ptr + (($picSize << 6) - ($width << 3));
      $ptr = $155;
      $i = 8;
      $156$36 : while (1) {
        var $157 = $i;
        var $158 = $157 - 1;
        $i = $158;
        if (!($157 != 0)) {
          __label__ = 30;
          break $156$36;
        }
        var $162 = HEAP8[$ptr];
        var $163 = $3;
        var $164 = $163 + 1;
        $3 = $164;
        HEAP8[$163] = $162;
        var $168 = $ptr + $width;
        $ptr = $168;
      }
    } else if (__label__ == 1) {}
  } while (0);
  return;
  return;
}
_h264bsdGetNeighbourPels["X"] = 1;
function _h264bsdIntra16x16Prediction($pMb, $data, $residual, $above, $left, $constrainedIntraPred) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $i;
  var $availableA;
  var $availableB;
  var $availableD;
  $2 = $pMb;
  $3 = $data;
  $4 = $residual;
  $5 = $above;
  $6 = $left;
  $7 = $constrainedIntraPred;
  var $11 = HEAP32[$2 + 200 >> 2];
  var $12 = _h264bsdIsNeighbourAvailable($2, $11);
  $availableA = $12;
  if ($availableA != 0) {
    __label__ = 1;
  } else {
    __label__ = 4;
  }
  $15$$27$44 : do {
    if (__label__ == 1) {
      if (!($7 != 0)) {
        __label__ = 4;
        break $15$$27$44;
      }
      var $23 = HEAP32[HEAP32[$2 + 200 >> 2] >> 2];
      var $24 = _h264bsdMbPartPredMode($23);
      if (!($24 == 2)) {
        __label__ = 4;
        break $15$$27$44;
      }
      $availableA = 0;
    }
  } while (0);
  var $31 = HEAP32[$2 + 204 >> 2];
  var $32 = _h264bsdIsNeighbourAvailable($2, $31);
  $availableB = $32;
  if ($availableB != 0) {
    __label__ = 5;
  } else {
    __label__ = 8;
  }
  $35$$47$49 : do {
    if (__label__ == 5) {
      if (!($7 != 0)) {
        __label__ = 8;
        break $35$$47$49;
      }
      var $43 = HEAP32[HEAP32[$2 + 204 >> 2] >> 2];
      var $44 = _h264bsdMbPartPredMode($43);
      if (!($44 == 2)) {
        __label__ = 8;
        break $35$$47$49;
      }
      $availableB = 0;
    }
  } while (0);
  var $51 = HEAP32[$2 + 212 >> 2];
  var $52 = _h264bsdIsNeighbourAvailable($2, $51);
  $availableD = $52;
  if ($availableD != 0) {
    __label__ = 9;
  } else {
    __label__ = 12;
  }
  $55$$67$54 : do {
    if (__label__ == 9) {
      if (!($7 != 0)) {
        __label__ = 12;
        break $55$$67$54;
      }
      var $63 = HEAP32[HEAP32[$2 + 212 >> 2] >> 2];
      var $64 = _h264bsdMbPartPredMode($63);
      if (!($64 == 2)) {
        __label__ = 12;
        break $55$$67$54;
      }
      $availableD = 0;
    }
  } while (0);
  var $70 = HEAP32[$2 >> 2];
  var $71 = _h264bsdPredModeIntra16x16($70);
  if ($71 == 0) {
    __label__ = 13;
  } else if ($71 == 1) {
    __label__ = 16;
  } else if ($71 == 2) {
    __label__ = 19;
  } else {
    __label__ = 20;
  }
  $94$$72$$80$$87$59 : do {
    if (__label__ == 20) {
      if ($availableA != 0) {
        __label__ = 21;
      } else {
        __label__ = 23;
      }
      $97$$103$61 : do {
        if (__label__ == 21) {
          if (!($availableB != 0)) {
            __label__ = 23;
            break $97$$103$61;
          }
          if (!($availableD != 0)) {
            __label__ = 23;
            break $97$$103$61;
          }
          _Intra16x16PlanePrediction($3, $5 + 1, $6);
          __label__ = 25;
          break $94$$72$$80$$87$59;
        }
      } while (0);
      $1 = 1;
      __label__ = 30;
      break $94$$72$$80$$87$59;
    } else if (__label__ == 13) {
      if ($availableB != 0) {
        __label__ = 15;
      } else {
        __label__ = 14;
      }
      $76$$75$67 : do {
        if (__label__ == 15) {
          _Intra16x16VerticalPrediction($3, $5 + 1);
          __label__ = 25;
          break $94$$72$$80$$87$59;
        } else if (__label__ == 14) {
          $1 = 1;
          __label__ = 30;
          break $94$$72$$80$$87$59;
        }
      } while (0);
    } else if (__label__ == 16) {
      if ($availableA != 0) {
        __label__ = 18;
      } else {
        __label__ = 17;
      }
      $84$$83$71 : do {
        if (__label__ == 18) {
          _Intra16x16HorizontalPrediction($3, $6);
          __label__ = 25;
          break $94$$72$$80$$87$59;
        } else if (__label__ == 17) {
          $1 = 1;
          __label__ = 30;
          break $94$$72$$80$$87$59;
        }
      } while (0);
    } else if (__label__ == 19) {
      _Intra16x16DcPrediction($3, $5 + 1, $6, $availableA, $availableB);
      __label__ = 25;
      break $94$$72$$80$$87$59;
    }
  } while (0);
  $109$$124$75 : do {
    if (__label__ == 25) {
      $i = 0;
      $110$77 : while (1) {
        if (!($i < 16)) {
          __label__ = 29;
          break $110$77;
        }
        _h264bsdAddResidual($3, $4 + ($i << 6), $i);
        var $122 = $i + 1;
        $i = $122;
      }
      $1 = 0;
    }
  } while (0);
  var $125 = $1;
  return $125;
  return null;
}
_h264bsdIntra16x16Prediction["X"] = 1;
function _Intra16x16VerticalPrediction($data, $above) {
  var __label__;
  var $1;
  var $2;
  var $i;
  var $j;
  $1 = $data;
  $2 = $above;
  $i = 0;
  $3$114 : while (1) {
    if (!($i < 16)) {
      __label__ = 8;
      break $3$114;
    }
    $j = 0;
    $7$117 : while (1) {
      if (!($j < 16)) {
        __label__ = 6;
        break $7$117;
      }
      var $14 = HEAP8[$2 + $j];
      var $15 = $1;
      var $16 = $15 + 1;
      $1 = $16;
      HEAP8[$15] = $14;
      var $19 = $j + 1;
      $j = $19;
    }
    var $23 = $i + 1;
    $i = $23;
  }
  return;
  return;
}
function _Intra16x16HorizontalPrediction($data, $left) {
  var __label__;
  var $1;
  var $2;
  var $i;
  var $j;
  $1 = $data;
  $2 = $left;
  $i = 0;
  $3$125 : while (1) {
    if (!($i < 16)) {
      __label__ = 8;
      break $3$125;
    }
    $j = 0;
    $7$128 : while (1) {
      if (!($j < 16)) {
        __label__ = 6;
        break $7$128;
      }
      var $14 = HEAP8[$2 + $i];
      var $15 = $1;
      var $16 = $15 + 1;
      $1 = $16;
      HEAP8[$15] = $14;
      var $19 = $j + 1;
      $j = $19;
    }
    var $23 = $i + 1;
    $i = $23;
  }
  return;
  return;
}
function _h264bsdIntra4x4Prediction($pMb, $data, $mbLayer, $above, $left, $constrainedIntraPred) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 52;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $block;
  var $mode;
  var $neighbour = __stackBase__;
  var $neighbourB = __stackBase__ + 8;
  var $nMb;
  var $nMb2;
  var $a = __stackBase__ + 16;
  var $l = __stackBase__ + 28;
  var $data4x4 = __stackBase__ + 36;
  var $availableA;
  var $availableB;
  var $availableC;
  var $availableD;
  $2 = $pMb;
  $3 = $data;
  $4 = $mbLayer;
  $5 = $above;
  $6 = $left;
  $7 = $constrainedIntraPred;
  $block = 0;
  $8$2 : while (1) {
    if (!($block < 16)) {
      __label__ = 58;
      break $8$2;
    }
    var $13 = _h264bsdNeighbour4x4BlockA($block);
    var $14 = $neighbour;
    var src, dest, stop, stop4;
    src = $13;
    dest = $14;
    stop = src + 8;
    if (dest % 4 == src % 4 && 8 > 8) {
      while (src % 4 !== 0 && src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
      src >>= 2;
      dest >>= 2;
      stop4 = stop >> 2;
      while (src < stop4) {
        HEAP32[dest++] = HEAP32[src++];
      }
      src <<= 2;
      dest <<= 2;
    }
    while (src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    var $18 = HEAP32[$neighbour >> 2];
    var $19 = _h264bsdGetNeighbourMb($2, $18);
    $nMb = $19;
    var $22 = _h264bsdIsNeighbourAvailable($2, $nMb);
    $availableA = $22;
    if ($availableA != 0) {
      __label__ = 3;
    } else {
      __label__ = 6;
    }
    $25$$35$5 : do {
      if (__label__ == 3) {
        if (!($7 != 0)) {
          __label__ = 6;
          break $25$$35$5;
        }
        var $31 = HEAP32[$nMb >> 2];
        var $32 = _h264bsdMbPartPredMode($31);
        if (!($32 == 2)) {
          __label__ = 6;
          break $25$$35$5;
        }
        $availableA = 0;
      }
    } while (0);
    var $37 = _h264bsdNeighbour4x4BlockB($block);
    var $38 = $neighbourB;
    var src, dest, stop, stop4;
    src = $37;
    dest = $38;
    stop = src + 8;
    if (dest % 4 == src % 4 && 8 > 8) {
      while (src % 4 !== 0 && src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
      src >>= 2;
      dest >>= 2;
      stop4 = stop >> 2;
      while (src < stop4) {
        HEAP32[dest++] = HEAP32[src++];
      }
      src <<= 2;
      dest <<= 2;
    }
    while (src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    var $42 = HEAP32[$neighbourB >> 2];
    var $43 = _h264bsdGetNeighbourMb($2, $42);
    $nMb2 = $43;
    var $46 = _h264bsdIsNeighbourAvailable($2, $nMb2);
    $availableB = $46;
    if ($availableB != 0) {
      __label__ = 7;
    } else {
      __label__ = 10;
    }
    $49$$59$10 : do {
      if (__label__ == 7) {
        if (!($7 != 0)) {
          __label__ = 10;
          break $49$$59$10;
        }
        var $55 = HEAP32[$nMb2 >> 2];
        var $56 = _h264bsdMbPartPredMode($55);
        if (!($56 == 2)) {
          __label__ = 10;
          break $49$$59$10;
        }
        $availableB = 0;
      }
    } while (0);
    var $60 = $4;
    if ($availableA != 0) {
      __label__ = 11;
    } else {
      var $67 = 0;
      __label__ = 12;
    }
    $63$$66$15 : do {
      if (__label__ == 11) {
        var $67 = $availableB != 0;
      }
    } while (0);
    var $67;
    var $72 = _DetermineIntra4x4PredMode($60, $67, $neighbour, $neighbourB, $block, $nMb, $nMb2);
    $mode = $72;
    HEAP8[$block + ($2 + 82)] = $mode & 255;
    var $80 = _h264bsdNeighbour4x4BlockC($block);
    var $81 = $neighbour;
    var src, dest, stop, stop4;
    src = $80;
    dest = $81;
    stop = src + 8;
    if (dest % 4 == src % 4 && 8 > 8) {
      while (src % 4 !== 0 && src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
      src >>= 2;
      dest >>= 2;
      stop4 = stop >> 2;
      while (src < stop4) {
        HEAP32[dest++] = HEAP32[src++];
      }
      src <<= 2;
      dest <<= 2;
    }
    while (src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    var $85 = HEAP32[$neighbour >> 2];
    var $86 = _h264bsdGetNeighbourMb($2, $85);
    $nMb = $86;
    var $89 = _h264bsdIsNeighbourAvailable($2, $nMb);
    $availableC = $89;
    if ($availableC != 0) {
      __label__ = 13;
    } else {
      __label__ = 16;
    }
    $92$$102$18 : do {
      if (__label__ == 13) {
        if (!($7 != 0)) {
          __label__ = 16;
          break $92$$102$18;
        }
        var $98 = HEAP32[$nMb >> 2];
        var $99 = _h264bsdMbPartPredMode($98);
        if (!($99 == 2)) {
          __label__ = 16;
          break $92$$102$18;
        }
        $availableC = 0;
      }
    } while (0);
    var $104 = _h264bsdNeighbour4x4BlockD($block);
    var $105 = $neighbour;
    var src, dest, stop, stop4;
    src = $104;
    dest = $105;
    stop = src + 8;
    if (dest % 4 == src % 4 && 8 > 8) {
      while (src % 4 !== 0 && src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
      src >>= 2;
      dest >>= 2;
      stop4 = stop >> 2;
      while (src < stop4) {
        HEAP32[dest++] = HEAP32[src++];
      }
      src <<= 2;
      dest <<= 2;
    }
    while (src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    var $109 = HEAP32[$neighbour >> 2];
    var $110 = _h264bsdGetNeighbourMb($2, $109);
    $nMb = $110;
    var $113 = _h264bsdIsNeighbourAvailable($2, $nMb);
    $availableD = $113;
    if ($availableD != 0) {
      __label__ = 17;
    } else {
      __label__ = 20;
    }
    $116$$126$23 : do {
      if (__label__ == 17) {
        if (!($7 != 0)) {
          __label__ = 20;
          break $116$$126$23;
        }
        var $122 = HEAP32[$nMb >> 2];
        var $123 = _h264bsdMbPartPredMode($122);
        if (!($123 == 2)) {
          __label__ = 20;
          break $116$$126$23;
        }
        $availableD = 0;
      }
    } while (0);
    var $127 = $a;
    var $128 = $l;
    _Get4x4NeighbourPels($127, $128, $3, $5, $6, $block);
    var $133 = $mode;
    if ($133 == 0) {
      __label__ = 21;
    } else if ($133 == 1) {
      __label__ = 24;
    } else if ($133 == 2) {
      __label__ = 27;
    } else if ($133 == 3) {
      __label__ = 28;
    } else if ($133 == 4) {
      __label__ = 33;
    } else if ($133 == 5) {
      __label__ = 38;
    } else if ($133 == 6) {
      __label__ = 43;
    } else if ($133 == 7) {
      __label__ = 48;
    } else {
      __label__ = 53;
    }
    $250$$134$$143$$152$$161$$180$$197$$214$$231$28 : do {
      if (__label__ == 53) {
        if (!($availableA != 0)) {
          __label__ = 54;
          break $8$2;
        }
        var $256 = $data4x4;
        var $258 = $l + 1;
        _Intra4x4HorizontalUpPrediction($256, $258);
      } else if (__label__ == 21) {
        if (!($availableB != 0)) {
          __label__ = 22;
          break $8$2;
        }
        var $140 = $data4x4;
        var $142 = $a + 1;
        _Intra4x4VerticalPrediction($140, $142);
      } else if (__label__ == 24) {
        if (!($availableA != 0)) {
          __label__ = 25;
          break $8$2;
        }
        var $149 = $data4x4;
        var $151 = $l + 1;
        _Intra4x4HorizontalPrediction($149, $151);
      } else if (__label__ == 27) {
        var $154 = $data4x4;
        var $156 = $a + 1;
        var $158 = $l + 1;
        _Intra4x4DcPrediction($154, $156, $158, $availableA, $availableB);
      } else if (__label__ == 28) {
        if (!($availableB != 0)) {
          __label__ = 29;
          break $8$2;
        }
        if ($availableC != 0) {
          __label__ = 32;
        } else {
          __label__ = 31;
        }
        $175$$168$38 : do {
          if (__label__ == 31) {
            var $170 = HEAP8[$a + 4];
            HEAP8[$a + 8] = $170;
            HEAP8[$a + 7] = $170;
            HEAP8[$a + 6] = $170;
            HEAP8[$a + 5] = $170;
          }
        } while (0);
        var $177 = $data4x4;
        var $179 = $a + 1;
        _Intra4x4DiagonalDownLeftPrediction($177, $179);
      } else if (__label__ == 33) {
        if (!($availableA != 0)) {
          __label__ = 36;
          break $8$2;
        }
        if (!($availableB != 0)) {
          __label__ = 36;
          break $8$2;
        }
        if (!($availableD != 0)) {
          __label__ = 36;
          break $8$2;
        }
        var $192 = $data4x4;
        var $194 = $a + 1;
        var $196 = $l + 1;
        _Intra4x4DiagonalDownRightPrediction($192, $194, $196);
      } else if (__label__ == 38) {
        if (!($availableA != 0)) {
          __label__ = 41;
          break $8$2;
        }
        if (!($availableB != 0)) {
          __label__ = 41;
          break $8$2;
        }
        if (!($availableD != 0)) {
          __label__ = 41;
          break $8$2;
        }
        var $209 = $data4x4;
        var $211 = $a + 1;
        var $213 = $l + 1;
        _Intra4x4VerticalRightPrediction($209, $211, $213);
      } else if (__label__ == 43) {
        if (!($availableA != 0)) {
          __label__ = 46;
          break $8$2;
        }
        if (!($availableB != 0)) {
          __label__ = 46;
          break $8$2;
        }
        if (!($availableD != 0)) {
          __label__ = 46;
          break $8$2;
        }
        var $226 = $data4x4;
        var $228 = $a + 1;
        var $230 = $l + 1;
        _Intra4x4HorizontalDownPrediction($226, $228, $230);
      } else if (__label__ == 48) {
        if (!($availableB != 0)) {
          __label__ = 49;
          break $8$2;
        }
        if ($availableC != 0) {
          __label__ = 52;
        } else {
          __label__ = 51;
        }
        $245$$238$55 : do {
          if (__label__ == 51) {
            var $240 = HEAP8[$a + 4];
            HEAP8[$a + 8] = $240;
            HEAP8[$a + 7] = $240;
            HEAP8[$a + 6] = $240;
            HEAP8[$a + 5] = $240;
          }
        } while (0);
        var $247 = $data4x4;
        var $249 = $a + 1;
        _Intra4x4VerticalLeftPrediction($247, $249);
      }
    } while (0);
    var $262 = $data4x4;
    _Write4x4To16x16($3, $262, $block);
    _h264bsdAddResidual($3, $4 + 328 + ($block << 6), $block);
    var $274 = $block + 1;
    $block = $274;
  }
  $275$$137$$146$$164$$189$$206$$223$$234$$253$60 : do {
    if (__label__ == 58) {
      $1 = 0;
    } else if (__label__ == 22) {
      $1 = 1;
    } else if (__label__ == 25) {
      $1 = 1;
    } else if (__label__ == 29) {
      $1 = 1;
    } else if (__label__ == 36) {
      $1 = 1;
    } else if (__label__ == 41) {
      $1 = 1;
    } else if (__label__ == 46) {
      $1 = 1;
    } else if (__label__ == 49) {
      $1 = 1;
    } else if (__label__ == 54) {
      $1 = 1;
    }
  } while (0);
  var $277 = $1;
  STACKTOP = __stackBase__;
  return $277;
  return null;
}
_h264bsdIntra4x4Prediction["X"] = 1;
function _h264bsdIntraChromaPrediction($pMb, $data, $residual, $above, $left, $predMode, $constrainedIntraPred) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  var $i;
  var $comp;
  var $block;
  var $availableA;
  var $availableB;
  var $availableD;
  $2 = $pMb;
  $3 = $data;
  $4 = $residual;
  $5 = $above;
  $6 = $left;
  $7 = $predMode;
  $8 = $constrainedIntraPred;
  var $12 = HEAP32[$2 + 200 >> 2];
  var $13 = _h264bsdIsNeighbourAvailable($2, $12);
  $availableA = $13;
  if ($availableA != 0) {
    __label__ = 1;
  } else {
    __label__ = 4;
  }
  $16$$28$72 : do {
    if (__label__ == 1) {
      if (!($8 != 0)) {
        __label__ = 4;
        break $16$$28$72;
      }
      var $24 = HEAP32[HEAP32[$2 + 200 >> 2] >> 2];
      var $25 = _h264bsdMbPartPredMode($24);
      if (!($25 == 2)) {
        __label__ = 4;
        break $16$$28$72;
      }
      $availableA = 0;
    }
  } while (0);
  var $32 = HEAP32[$2 + 204 >> 2];
  var $33 = _h264bsdIsNeighbourAvailable($2, $32);
  $availableB = $33;
  if ($availableB != 0) {
    __label__ = 5;
  } else {
    __label__ = 8;
  }
  $36$$48$77 : do {
    if (__label__ == 5) {
      if (!($8 != 0)) {
        __label__ = 8;
        break $36$$48$77;
      }
      var $44 = HEAP32[HEAP32[$2 + 204 >> 2] >> 2];
      var $45 = _h264bsdMbPartPredMode($44);
      if (!($45 == 2)) {
        __label__ = 8;
        break $36$$48$77;
      }
      $availableB = 0;
    }
  } while (0);
  var $52 = HEAP32[$2 + 212 >> 2];
  var $53 = _h264bsdIsNeighbourAvailable($2, $52);
  $availableD = $53;
  if ($availableD != 0) {
    __label__ = 9;
  } else {
    __label__ = 12;
  }
  $56$$68$82 : do {
    if (__label__ == 9) {
      if (!($8 != 0)) {
        __label__ = 12;
        break $56$$68$82;
      }
      var $64 = HEAP32[HEAP32[$2 + 212 >> 2] >> 2];
      var $65 = _h264bsdMbPartPredMode($64);
      if (!($65 == 2)) {
        __label__ = 12;
        break $56$$68$82;
      }
      $availableD = 0;
    }
  } while (0);
  $comp = 0;
  $block = 16;
  $69$87 : while (1) {
    if (!($comp < 2)) {
      __label__ = 33;
      break $69$87;
    }
    if ($7 == 0) {
      __label__ = 15;
    } else if ($7 == 1) {
      __label__ = 16;
    } else if ($7 == 2) {
      __label__ = 19;
    } else {
      __label__ = 22;
    }
    $96$$74$$81$$88$90 : do {
      if (__label__ == 22) {
        if (!($availableA != 0)) {
          __label__ = 25;
          break $69$87;
        }
        if (!($availableB != 0)) {
          __label__ = 25;
          break $69$87;
        }
        if (!($availableD != 0)) {
          __label__ = 25;
          break $69$87;
        }
        _IntraChromaPlanePrediction($3, $5 + 1, $6);
      } else if (__label__ == 15) {
        _IntraChromaDcPrediction($3, $5 + 1, $6, $availableA, $availableB);
      } else if (__label__ == 16) {
        if (!($availableA != 0)) {
          __label__ = 17;
          break $69$87;
        }
        _IntraChromaHorizontalPrediction($3, $6);
      } else if (__label__ == 19) {
        if (!($availableB != 0)) {
          __label__ = 20;
          break $69$87;
        }
        _IntraChromaVerticalPrediction($3, $5 + 1);
      }
    } while (0);
    $i = 0;
    $112$101 : while (1) {
      if (!($i < 4)) {
        __label__ = 31;
        break $112$101;
      }
      _h264bsdAddResidual($3, $4 + ($i << 6), $block);
      var $124 = $i + 1;
      $i = $124;
      var $126 = $block + 1;
      $block = $126;
    }
    var $129 = $3 + 64;
    $3 = $129;
    var $131 = $5 + 9;
    $5 = $131;
    var $133 = $6 + 8;
    $6 = $133;
    var $135 = $4 + 256;
    $4 = $135;
    var $138 = $comp + 1;
    $comp = $138;
  }
  $139$$84$$91$$105$107 : do {
    if (__label__ == 33) {
      $1 = 0;
    } else if (__label__ == 17) {
      $1 = 1;
    } else if (__label__ == 20) {
      $1 = 1;
    } else if (__label__ == 25) {
      $1 = 1;
    }
  } while (0);
  var $141 = $1;
  return $141;
  return null;
}
_h264bsdIntraChromaPrediction["X"] = 1;
function _Intra16x16DcPrediction($data, $above, $left, $availableA, $availableB) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $i;
  var $tmp;
  $1 = $data;
  $2 = $above;
  $3 = $left;
  $4 = $availableA;
  $5 = $availableB;
  if ($4 != 0) {
    __label__ = 1;
  } else {
    __label__ = 7;
  }
  $8$$36$2 : do {
    if (__label__ == 1) {
      if (!($5 != 0)) {
        __label__ = 7;
        break $8$$36$2;
      }
      $i = 0;
      $tmp = 0;
      $12$5 : while (1) {
        if (!($i < 16)) {
          __label__ = 6;
          break $12$5;
        }
        var $28 = $tmp + (HEAPU8[$2 + $i] + HEAPU8[$3 + $i]);
        $tmp = $28;
        var $31 = $i + 1;
        $i = $31;
      }
      var $35 = $tmp + 16 >>> 5;
      $tmp = $35;
      __label__ = 22;
      break $8$$36$2;
    }
  } while (0);
  $83$$36$10 : do {
    if (__label__ == 7) {
      if ($4 != 0) {
        __label__ = 8;
      } else {
        __label__ = 13;
      }
      $39$$58$12 : do {
        if (__label__ == 8) {
          $i = 0;
          $tmp = 0;
          $40$14 : while (1) {
            if (!($i < 16)) {
              __label__ = 12;
              break $40$14;
            }
            var $50 = $tmp + HEAPU8[$3 + $i];
            $tmp = $50;
            var $53 = $i + 1;
            $i = $53;
          }
          var $57 = $tmp + 8 >>> 4;
          $tmp = $57;
        } else if (__label__ == 13) {
          if ($5 != 0) {
            __label__ = 14;
          } else {
            __label__ = 19;
          }
          $61$$80$20 : do {
            if (__label__ == 14) {
              $i = 0;
              $tmp = 0;
              $62$22 : while (1) {
                if (!($i < 16)) {
                  __label__ = 18;
                  break $62$22;
                }
                var $72 = $tmp + HEAPU8[$2 + $i];
                $tmp = $72;
                var $75 = $i + 1;
                $i = $75;
              }
              var $79 = $tmp + 8 >>> 4;
              $tmp = $79;
            } else if (__label__ == 19) {
              $tmp = 128;
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  $i = 0;
  $84$31 : while (1) {
    if (!($i < 256)) {
      __label__ = 26;
      break $84$31;
    }
    HEAP8[$1 + $i] = $tmp & 255;
    var $95 = $i + 1;
    $i = $95;
  }
  return;
  return;
}
_Intra16x16DcPrediction["X"] = 1;
function _Intra16x16PlanePrediction($data, $above, $left) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $i;
  var $j;
  var $a;
  var $b;
  var $c;
  var $tmp;
  $1 = $data;
  $2 = $above;
  $3 = $left;
  $a = HEAPU8[$2 + 15] + HEAPU8[$3 + 15] << 4;
  $i = 0;
  $b = 0;
  $14$37 : while (1) {
    if (!($i < 8)) {
      __label__ = 4;
      break $14$37;
    }
    var $35 = $b + ($i + 1) * (HEAPU8[$i + ($2 + 8)] - HEAPU8[$2 + (6 - $i)]);
    $b = $35;
    var $38 = $i + 1;
    $i = $38;
  }
  var $43 = $b * 5 + 32 >> 6;
  $b = $43;
  $i = 0;
  $c = 0;
  $44$42 : while (1) {
    if (!($i < 7)) {
      __label__ = 8;
      break $44$42;
    }
    var $65 = $c + ($i + 1) * (HEAPU8[$i + ($3 + 8)] - HEAPU8[$3 + (6 - $i)]);
    $c = $65;
    var $68 = $i + 1;
    $i = $68;
  }
  var $85 = $c + ($i + 1) * (HEAPU8[$i + ($3 + 8)] - HEAPU8[$2 - 1]);
  $c = $85;
  var $89 = $c * 5 + 32 >> 6;
  $c = $89;
  $i = 0;
  $90$47 : while (1) {
    if (!($i < 16)) {
      __label__ = 22;
      break $90$47;
    }
    $j = 0;
    $94$50 : while (1) {
      if (!($j < 16)) {
        __label__ = 20;
        break $94$50;
      }
      $tmp = $a + $b * ($j - 7) + $c * ($i - 7) + 16 >> 5;
      if ($tmp < 0) {
        __label__ = 13;
      } else {
        __label__ = 14;
      }
      $113$$114$53 : do {
        if (__label__ == 13) {
          var $123 = 0;
        } else if (__label__ == 14) {
          if ($tmp > 255) {
            __label__ = 15;
          } else {
            __label__ = 16;
          }
          $117$$118$56 : do {
            if (__label__ == 15) {
              var $121 = 255;
            } else if (__label__ == 16) {
              var $121 = $tmp;
            }
          } while (0);
          var $121;
          var $123 = $121;
        }
      } while (0);
      var $123;
      HEAP8[$1 + (($i << 4) + $j)] = $123 & 255;
      var $133 = $j + 1;
      $j = $133;
    }
    var $137 = $i + 1;
    $i = $137;
  }
  return;
  return;
}
_Intra16x16PlanePrediction["X"] = 1;
function _h264bsdAddResidual($data, $residual, $blockNum) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $i;
  var $x;
  var $y;
  var $width;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $tmp4;
  var $tmp;
  var $clp;
  $1 = $data;
  $2 = $residual;
  $3 = $blockNum;
  $clp = _h264bsdClip + 512;
  if (HEAP32[$2 >> 2] == 16777215) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $8$$9$66 : do {
    if (__label__ == 1) {} else if (__label__ == 2) {
      if ($3 < 16) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $12$$19$69 : do {
        if (__label__ == 3) {
          $width = 16;
          $x = HEAP32[_h264bsdBlockX + ($3 << 2) >> 2];
          $y = HEAP32[_h264bsdBlockY + ($3 << 2) >> 2];
        } else if (__label__ == 4) {
          $width = 8;
          $x = HEAP32[_h264bsdBlockX + (($3 & 3) << 2) >> 2];
          $y = HEAP32[_h264bsdBlockY + (($3 & 3) << 2) >> 2];
        }
      } while (0);
      $tmp = $1 + $y * $width + $x;
      $i = 4;
      $36$73 : while (1) {
        if (!($i != 0)) {
          __label__ = 9;
          break $8$$9$66;
        }
        var $40 = $2;
        var $41 = $40 + 4;
        $2 = $41;
        $tmp1 = HEAP32[$40 >> 2];
        $tmp2 = HEAPU8[$tmp];
        var $47 = $2;
        var $48 = $47 + 4;
        $2 = $48;
        $tmp3 = HEAP32[$47 >> 2];
        $tmp4 = HEAPU8[$tmp + 1];
        var $59 = HEAP8[$clp + ($tmp1 + $tmp2)];
        HEAP8[$tmp] = $59;
        var $62 = $2;
        var $63 = $62 + 4;
        $2 = $63;
        $tmp1 = HEAP32[$62 >> 2];
        $tmp2 = HEAPU8[$tmp + 2];
        var $74 = HEAP8[$clp + ($tmp3 + $tmp4)];
        HEAP8[$tmp + 1] = $74;
        var $77 = $2;
        var $78 = $77 + 4;
        $2 = $78;
        $tmp3 = HEAP32[$77 >> 2];
        $tmp4 = HEAPU8[$tmp + 3];
        var $90 = HEAPU8[$clp + ($tmp1 + $tmp2)];
        $tmp1 = $90;
        var $97 = HEAPU8[$clp + ($tmp3 + $tmp4)];
        $tmp3 = $97;
        HEAP8[$tmp + 2] = $tmp1 & 255;
        HEAP8[$tmp + 3] = $tmp3 & 255;
        var $108 = $tmp + $width;
        $tmp = $108;
        var $111 = $i - 1;
        $i = $111;
      }
    }
  } while (0);
  return;
  return;
}
_h264bsdAddResidual["X"] = 1;
function _DetermineIntra4x4PredMode($pMbLayer, $available, $nA, $nB, $index, $nMbA, $nMbB) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $mode1;
  var $mode2;
  var $pMb;
  $1 = $pMbLayer;
  $2 = $available;
  $3 = $nA;
  $4 = $nB;
  $5 = $index;
  $6 = $nMbA;
  $7 = $nMbB;
  if ($2 != 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $11$$10$79 : do {
    if (__label__ == 2) {
      $pMb = $6;
      var $15 = HEAP32[$pMb >> 2];
      var $16 = _h264bsdMbPartPredMode($15);
      if ($16 == 0) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $18$$28$81 : do {
        if (__label__ == 3) {
          $mode1 = HEAPU8[$pMb + 82 + HEAPU8[$3 + 4]];
        } else if (__label__ == 4) {
          $mode1 = 2;
        }
      } while (0);
      $pMb = $7;
      var $33 = HEAP32[$pMb >> 2];
      var $34 = _h264bsdMbPartPredMode($33);
      if ($34 == 0) {
        __label__ = 6;
      } else {
        __label__ = 7;
      }
      $36$$46$85 : do {
        if (__label__ == 6) {
          $mode2 = HEAPU8[$pMb + 82 + HEAPU8[$4 + 4]];
        } else if (__label__ == 7) {
          $mode2 = 2;
        }
      } while (0);
      if ($mode1 < $mode2) {
        __label__ = 9;
      } else {
        __label__ = 10;
      }
      $51$$53$89 : do {
        if (__label__ == 9) {
          var $56 = $mode1;
        } else if (__label__ == 10) {
          var $56 = $mode2;
        }
      } while (0);
      var $56;
      $mode1 = $56;
    } else if (__label__ == 1) {
      $mode1 = 2;
    }
  } while (0);
  if (HEAP32[$1 + 12 + ($5 << 2) >> 2] != 0) {
    __label__ = 17;
  } else {
    __label__ = 13;
  }
  $90$$65$95 : do {
    if (__label__ == 13) {
      if (HEAPU32[$1 + 76 + ($5 << 2) >> 2] < $mode1) {
        __label__ = 14;
      } else {
        __label__ = 15;
      }
      $74$$81$97 : do {
        if (__label__ == 14) {
          $mode1 = HEAP32[$1 + 76 + ($5 << 2) >> 2];
        } else if (__label__ == 15) {
          $mode1 = HEAP32[$1 + 76 + ($5 << 2) >> 2] + 1;
        }
      } while (0);
    }
  } while (0);
  var $91 = $mode1;
  return $91;
  return null;
}
_DetermineIntra4x4PredMode["X"] = 1;
function _Get4x4NeighbourPels($a, $l, $data, $above, $left, $blockNum) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $x;
  var $y;
  var $t1;
  var $t2;
  $1 = $a;
  $2 = $l;
  $3 = $data;
  $4 = $above;
  $5 = $left;
  $6 = $blockNum;
  $x = HEAP32[_h264bsdBlockX + ($6 << 2) >> 2];
  $y = HEAP32[_h264bsdBlockY + ($6 << 2) >> 2];
  if ($x == 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $15$$47$2 : do {
    if (__label__ == 1) {
      $t1 = HEAP8[$5 + $y];
      $t2 = HEAP8[$y + ($5 + 1)];
      HEAP8[$2 + 1] = $t1;
      HEAP8[$2 + 2] = $t2;
      $t1 = HEAP8[$y + ($5 + 2)];
      $t2 = HEAP8[$y + ($5 + 3)];
      HEAP8[$2 + 3] = $t1;
      HEAP8[$2 + 4] = $t2;
    } else if (__label__ == 2) {
      $t1 = HEAP8[$3 + (($y << 4) + $x - 1)];
      $t2 = HEAP8[$3 + (($y << 4) + $x - 1 + 16)];
      HEAP8[$2 + 1] = $t1;
      HEAP8[$2 + 2] = $t2;
      $t1 = HEAP8[$3 + (($y << 4) + $x - 1 + 32)];
      $t2 = HEAP8[$3 + (($y << 4) + $x - 1 + 48)];
      HEAP8[$2 + 3] = $t1;
      HEAP8[$2 + 4] = $t2;
    }
  } while (0);
  if ($y == 0) {
    __label__ = 4;
  } else {
    __label__ = 5;
  }
  $98$$177$6 : do {
    if (__label__ == 4) {
      $t1 = HEAP8[$4 + $x];
      $t2 = HEAP8[$4 + $x];
      HEAP8[$2] = $t1;
      HEAP8[$1] = $t2;
      $t1 = HEAP8[$x + ($4 + 1)];
      $t2 = HEAP8[$x + ($4 + 2)];
      HEAP8[$1 + 1] = $t1;
      HEAP8[$1 + 2] = $t2;
      $t1 = HEAP8[$x + ($4 + 3)];
      $t2 = HEAP8[$x + ($4 + 4)];
      HEAP8[$1 + 3] = $t1;
      HEAP8[$1 + 4] = $t2;
      $t1 = HEAP8[$x + ($4 + 5)];
      $t2 = HEAP8[$x + ($4 + 6)];
      HEAP8[$1 + 5] = $t1;
      HEAP8[$1 + 6] = $t2;
      $t1 = HEAP8[$x + ($4 + 7)];
      $t2 = HEAP8[$x + ($4 + 8)];
      HEAP8[$1 + 7] = $t1;
      HEAP8[$1 + 8] = $t2;
    } else if (__label__ == 5) {
      $t1 = HEAP8[$3 + (($y - 1 << 4) + $x)];
      $t2 = HEAP8[$3 + (($y - 1 << 4) + $x + 1)];
      HEAP8[$1 + 1] = $t1;
      HEAP8[$1 + 2] = $t2;
      $t1 = HEAP8[$3 + (($y - 1 << 4) + $x + 2)];
      $t2 = HEAP8[$3 + (($y - 1 << 4) + $x + 3)];
      HEAP8[$1 + 3] = $t1;
      HEAP8[$1 + 4] = $t2;
      $t1 = HEAP8[$3 + (($y - 1 << 4) + $x + 4)];
      $t2 = HEAP8[$3 + (($y - 1 << 4) + $x + 5)];
      HEAP8[$1 + 5] = $t1;
      HEAP8[$1 + 6] = $t2;
      $t1 = HEAP8[$3 + (($y - 1 << 4) + $x + 6)];
      $t2 = HEAP8[$3 + (($y - 1 << 4) + $x + 7)];
      HEAP8[$1 + 7] = $t1;
      HEAP8[$1 + 8] = $t2;
      if ($x == 0) {
        __label__ = 6;
      } else {
        __label__ = 7;
      }
      $275$$285$9 : do {
        if (__label__ == 6) {
          var $280 = HEAP8[$5 + ($y - 1)];
          HEAP8[$1] = $280;
          HEAP8[$2] = $280;
        } else if (__label__ == 7) {
          var $294 = HEAP8[$3 + (($y - 1 << 4) + $x - 1)];
          HEAP8[$1] = $294;
          HEAP8[$2] = $294;
        }
      } while (0);
    }
  } while (0);
  return;
  return;
}
_Get4x4NeighbourPels["X"] = 1;
function _Intra4x4VerticalPrediction($data, $above) {
  var $1;
  var $2;
  var $t1;
  var $t2;
  $1 = $data;
  $2 = $above;
  $t1 = HEAP8[$2];
  $t2 = HEAP8[$2 + 1];
  var $9 = $t1;
  HEAP8[$1 + 12] = $9;
  HEAP8[$1 + 8] = $9;
  HEAP8[$1 + 4] = $9;
  HEAP8[$1] = $9;
  var $18 = $t2;
  HEAP8[$1 + 13] = $18;
  HEAP8[$1 + 9] = $18;
  HEAP8[$1 + 5] = $18;
  HEAP8[$1 + 1] = $18;
  $t1 = HEAP8[$2 + 2];
  $t2 = HEAP8[$2 + 3];
  var $33 = $t1;
  HEAP8[$1 + 14] = $33;
  HEAP8[$1 + 10] = $33;
  HEAP8[$1 + 6] = $33;
  HEAP8[$1 + 2] = $33;
  var $42 = $t2;
  HEAP8[$1 + 15] = $42;
  HEAP8[$1 + 11] = $42;
  HEAP8[$1 + 7] = $42;
  HEAP8[$1 + 3] = $42;
  return;
  return;
}
_Intra4x4VerticalPrediction["X"] = 1;
function _Intra4x4HorizontalPrediction($data, $left) {
  var $1;
  var $2;
  var $t1;
  var $t2;
  $1 = $data;
  $2 = $left;
  $t1 = HEAP8[$2];
  $t2 = HEAP8[$2 + 1];
  var $9 = $t1;
  HEAP8[$1 + 3] = $9;
  HEAP8[$1 + 2] = $9;
  HEAP8[$1 + 1] = $9;
  HEAP8[$1] = $9;
  var $18 = $t2;
  HEAP8[$1 + 7] = $18;
  HEAP8[$1 + 6] = $18;
  HEAP8[$1 + 5] = $18;
  HEAP8[$1 + 4] = $18;
  $t1 = HEAP8[$2 + 2];
  $t2 = HEAP8[$2 + 3];
  var $33 = $t1;
  HEAP8[$1 + 11] = $33;
  HEAP8[$1 + 10] = $33;
  HEAP8[$1 + 9] = $33;
  HEAP8[$1 + 8] = $33;
  var $42 = $t2;
  HEAP8[$1 + 15] = $42;
  HEAP8[$1 + 14] = $42;
  HEAP8[$1 + 13] = $42;
  HEAP8[$1 + 12] = $42;
  return;
  return;
}
_Intra4x4HorizontalPrediction["X"] = 1;
function _Intra4x4DcPrediction($data, $above, $left, $availableA, $availableB) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $tmp;
  var $t1;
  var $t2;
  var $t3;
  var $t4;
  $1 = $data;
  $2 = $above;
  $3 = $left;
  $4 = $availableA;
  $5 = $availableB;
  if ($4 != 0) {
    __label__ = 1;
  } else {
    __label__ = 3;
  }
  $8$$63$17 : do {
    if (__label__ == 1) {
      if (!($5 != 0)) {
        __label__ = 3;
        break $8$$63$17;
      }
      $t1 = HEAP8[$2];
      $t2 = HEAP8[$2 + 1];
      $t3 = HEAP8[$2 + 2];
      $t4 = HEAP8[$2 + 3];
      $tmp = ($t1 & 255) + ($t2 & 255) + ($t3 & 255) + ($t4 & 255);
      $t1 = HEAP8[$3];
      $t2 = HEAP8[$3 + 1];
      $t3 = HEAP8[$3 + 2];
      $t4 = HEAP8[$3 + 3];
      var $59 = $tmp + (($t1 & 255) + ($t2 & 255) + ($t3 & 255) + ($t4 & 255));
      $tmp = $59;
      var $62 = $tmp + 4 >>> 3;
      $tmp = $62;
      __label__ = 10;
      break $8$$63$17;
    }
  } while (0);
  $124$$63$20 : do {
    if (__label__ == 3) {
      if ($4 != 0) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      $66$$92$22 : do {
        if (__label__ == 4) {
          $t1 = HEAP8[$3];
          $t2 = HEAP8[$3 + 1];
          $t3 = HEAP8[$3 + 2];
          $t4 = HEAP8[$3 + 3];
          $tmp = ($t1 & 255) + ($t2 & 255) + ($t3 & 255) + ($t4 & 255) + 2 >> 2;
        } else if (__label__ == 5) {
          if ($5 != 0) {
            __label__ = 6;
          } else {
            __label__ = 7;
          }
          $95$$121$25 : do {
            if (__label__ == 6) {
              $t1 = HEAP8[$2];
              $t2 = HEAP8[$2 + 1];
              $t3 = HEAP8[$2 + 2];
              $t4 = HEAP8[$2 + 3];
              $tmp = ($t1 & 255) + ($t2 & 255) + ($t3 & 255) + ($t4 & 255) + 2 >> 2;
            } else if (__label__ == 7) {
              $tmp = 128;
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $126 = $tmp & 255;
  HEAP8[$1 + 15] = $126;
  HEAP8[$1 + 14] = $126;
  HEAP8[$1 + 13] = $126;
  HEAP8[$1 + 12] = $126;
  HEAP8[$1 + 11] = $126;
  HEAP8[$1 + 10] = $126;
  HEAP8[$1 + 9] = $126;
  HEAP8[$1 + 8] = $126;
  HEAP8[$1 + 7] = $126;
  HEAP8[$1 + 6] = $126;
  HEAP8[$1 + 5] = $126;
  HEAP8[$1 + 4] = $126;
  HEAP8[$1 + 3] = $126;
  HEAP8[$1 + 2] = $126;
  HEAP8[$1 + 1] = $126;
  HEAP8[$1] = $126;
  return;
  return;
}
_Intra4x4DcPrediction["X"] = 1;
function _Intra4x4DiagonalDownLeftPrediction($data, $above) {
  var $1;
  var $2;
  $1 = $data;
  $2 = $above;
  HEAP8[$1] = HEAPU8[$2] + (HEAPU8[$2 + 1] << 1) + HEAPU8[$2 + 2] + 2 >> 2 & 255;
  HEAP8[$1 + 1] = HEAPU8[$2 + 1] + (HEAPU8[$2 + 2] << 1) + HEAPU8[$2 + 3] + 2 >> 2 & 255;
  HEAP8[$1 + 4] = HEAPU8[$2 + 1] + (HEAPU8[$2 + 2] << 1) + HEAPU8[$2 + 3] + 2 >> 2 & 255;
  HEAP8[$1 + 2] = HEAPU8[$2 + 2] + (HEAPU8[$2 + 3] << 1) + HEAPU8[$2 + 4] + 2 >> 2 & 255;
  HEAP8[$1 + 5] = HEAPU8[$2 + 2] + (HEAPU8[$2 + 3] << 1) + HEAPU8[$2 + 4] + 2 >> 2 & 255;
  HEAP8[$1 + 8] = HEAPU8[$2 + 2] + (HEAPU8[$2 + 3] << 1) + HEAPU8[$2 + 4] + 2 >> 2 & 255;
  HEAP8[$1 + 3] = HEAPU8[$2 + 3] + (HEAPU8[$2 + 4] << 1) + HEAPU8[$2 + 5] + 2 >> 2 & 255;
  HEAP8[$1 + 6] = HEAPU8[$2 + 3] + (HEAPU8[$2 + 4] << 1) + HEAPU8[$2 + 5] + 2 >> 2 & 255;
  HEAP8[$1 + 9] = HEAPU8[$2 + 3] + (HEAPU8[$2 + 4] << 1) + HEAPU8[$2 + 5] + 2 >> 2 & 255;
  HEAP8[$1 + 12] = HEAPU8[$2 + 3] + (HEAPU8[$2 + 4] << 1) + HEAPU8[$2 + 5] + 2 >> 2 & 255;
  HEAP8[$1 + 7] = HEAPU8[$2 + 4] + (HEAPU8[$2 + 5] << 1) + HEAPU8[$2 + 6] + 2 >> 2 & 255;
  HEAP8[$1 + 10] = HEAPU8[$2 + 4] + (HEAPU8[$2 + 5] << 1) + HEAPU8[$2 + 6] + 2 >> 2 & 255;
  HEAP8[$1 + 13] = HEAPU8[$2 + 4] + (HEAPU8[$2 + 5] << 1) + HEAPU8[$2 + 6] + 2 >> 2 & 255;
  HEAP8[$1 + 11] = HEAPU8[$2 + 5] + (HEAPU8[$2 + 6] << 1) + HEAPU8[$2 + 7] + 2 >> 2 & 255;
  HEAP8[$1 + 14] = HEAPU8[$2 + 5] + (HEAPU8[$2 + 6] << 1) + HEAPU8[$2 + 7] + 2 >> 2 & 255;
  HEAP8[$1 + 15] = HEAPU8[$2 + 6] + HEAPU8[$2 + 7] * 3 + 2 >> 2 & 255;
  return;
  return;
}
_Intra4x4DiagonalDownLeftPrediction["X"] = 1;
function _Intra4x4DiagonalDownRightPrediction($data, $above, $left) {
  var $1;
  var $2;
  var $3;
  $1 = $data;
  $2 = $above;
  $3 = $left;
  HEAP8[$1] = HEAPU8[$2] + (HEAPU8[$2 - 1] << 1) + HEAPU8[$3] + 2 >> 2 & 255;
  HEAP8[$1 + 5] = HEAPU8[$2] + (HEAPU8[$2 - 1] << 1) + HEAPU8[$3] + 2 >> 2 & 255;
  HEAP8[$1 + 10] = HEAPU8[$2] + (HEAPU8[$2 - 1] << 1) + HEAPU8[$3] + 2 >> 2 & 255;
  HEAP8[$1 + 15] = HEAPU8[$2] + (HEAPU8[$2 - 1] << 1) + HEAPU8[$3] + 2 >> 2 & 255;
  HEAP8[$1 + 1] = HEAPU8[$2 - 1] + (HEAPU8[$2] << 1) + HEAPU8[$2 + 1] + 2 >> 2 & 255;
  HEAP8[$1 + 6] = HEAPU8[$2 - 1] + (HEAPU8[$2] << 1) + HEAPU8[$2 + 1] + 2 >> 2 & 255;
  HEAP8[$1 + 11] = HEAPU8[$2 - 1] + (HEAPU8[$2] << 1) + HEAPU8[$2 + 1] + 2 >> 2 & 255;
  HEAP8[$1 + 2] = HEAPU8[$2] + (HEAPU8[$2 + 1] << 1) + HEAPU8[$2 + 2] + 2 >> 2 & 255;
  HEAP8[$1 + 7] = HEAPU8[$2] + (HEAPU8[$2 + 1] << 1) + HEAPU8[$2 + 2] + 2 >> 2 & 255;
  HEAP8[$1 + 3] = HEAPU8[$2 + 1] + (HEAPU8[$2 + 2] << 1) + HEAPU8[$2 + 3] + 2 >> 2 & 255;
  HEAP8[$1 + 4] = HEAPU8[$3 - 1] + (HEAPU8[$3] << 1) + HEAPU8[$3 + 1] + 2 >> 2 & 255;
  HEAP8[$1 + 9] = HEAPU8[$3 - 1] + (HEAPU8[$3] << 1) + HEAPU8[$3 + 1] + 2 >> 2 & 255;
  HEAP8[$1 + 14] = HEAPU8[$3 - 1] + (HEAPU8[$3] << 1) + HEAPU8[$3 + 1] + 2 >> 2 & 255;
  HEAP8[$1 + 8] = HEAPU8[$3] + (HEAPU8[$3 + 1] << 1) + HEAPU8[$3 + 2] + 2 >> 2 & 255;
  HEAP8[$1 + 13] = HEAPU8[$3] + (HEAPU8[$3 + 1] << 1) + HEAPU8[$3 + 2] + 2 >> 2 & 255;
  HEAP8[$1 + 12] = HEAPU8[$3 + 1] + (HEAPU8[$3 + 2] << 1) + HEAPU8[$3 + 3] + 2 >> 2 & 255;
  return;
  return;
}
_Intra4x4DiagonalDownRightPrediction["X"] = 1;
function _Intra4x4VerticalRightPrediction($data, $above, $left) {
  var $1;
  var $2;
  var $3;
  $1 = $data;
  $2 = $above;
  $3 = $left;
  HEAP8[$1] = HEAPU8[$2 - 1] + HEAPU8[$2] + 1 >> 1 & 255;
  HEAP8[$1 + 9] = HEAPU8[$2 - 1] + HEAPU8[$2] + 1 >> 1 & 255;
  HEAP8[$1 + 5] = HEAPU8[$2 - 1] + (HEAPU8[$2] << 1) + HEAPU8[$2 + 1] + 2 >> 2 & 255;
  HEAP8[$1 + 14] = HEAPU8[$2 - 1] + (HEAPU8[$2] << 1) + HEAPU8[$2 + 1] + 2 >> 2 & 255;
  HEAP8[$1 + 4] = HEAPU8[$2] + (HEAPU8[$2 - 1] << 1) + HEAPU8[$3] + 2 >> 2 & 255;
  HEAP8[$1 + 13] = HEAPU8[$2] + (HEAPU8[$2 - 1] << 1) + HEAPU8[$3] + 2 >> 2 & 255;
  HEAP8[$1 + 1] = HEAPU8[$2] + HEAPU8[$2 + 1] + 1 >> 1 & 255;
  HEAP8[$1 + 10] = HEAPU8[$2] + HEAPU8[$2 + 1] + 1 >> 1 & 255;
  HEAP8[$1 + 6] = HEAPU8[$2] + (HEAPU8[$2 + 1] << 1) + HEAPU8[$2 + 2] + 2 >> 2 & 255;
  HEAP8[$1 + 15] = HEAPU8[$2] + (HEAPU8[$2 + 1] << 1) + HEAPU8[$2 + 2] + 2 >> 2 & 255;
  HEAP8[$1 + 2] = HEAPU8[$2 + 1] + HEAPU8[$2 + 2] + 1 >> 1 & 255;
  HEAP8[$1 + 11] = HEAPU8[$2 + 1] + HEAPU8[$2 + 2] + 1 >> 1 & 255;
  HEAP8[$1 + 7] = HEAPU8[$2 + 1] + (HEAPU8[$2 + 2] << 1) + HEAPU8[$2 + 3] + 2 >> 2 & 255;
  HEAP8[$1 + 3] = HEAPU8[$2 + 2] + HEAPU8[$2 + 3] + 1 >> 1 & 255;
  HEAP8[$1 + 8] = HEAPU8[$3 + 1] + (HEAPU8[$3] << 1) + HEAPU8[$3 - 1] + 2 >> 2 & 255;
  HEAP8[$1 + 12] = HEAPU8[$3 + 2] + (HEAPU8[$3 + 1] << 1) + HEAPU8[$3] + 2 >> 2 & 255;
  return;
  return;
}
_Intra4x4VerticalRightPrediction["X"] = 1;
function _Intra4x4HorizontalDownPrediction($data, $above, $left) {
  var $1;
  var $2;
  var $3;
  $1 = $data;
  $2 = $above;
  $3 = $left;
  HEAP8[$1] = HEAPU8[$3 - 1] + HEAPU8[$3] + 1 >> 1 & 255;
  HEAP8[$1 + 6] = HEAPU8[$3 - 1] + HEAPU8[$3] + 1 >> 1 & 255;
  HEAP8[$1 + 5] = HEAPU8[$3 - 1] + (HEAPU8[$3] << 1) + HEAPU8[$3 + 1] + 2 >> 2 & 255;
  HEAP8[$1 + 11] = HEAPU8[$3 - 1] + (HEAPU8[$3] << 1) + HEAPU8[$3 + 1] + 2 >> 2 & 255;
  HEAP8[$1 + 4] = HEAPU8[$3] + HEAPU8[$3 + 1] + 1 >> 1 & 255;
  HEAP8[$1 + 10] = HEAPU8[$3] + HEAPU8[$3 + 1] + 1 >> 1 & 255;
  HEAP8[$1 + 9] = HEAPU8[$3] + (HEAPU8[$3 + 1] << 1) + HEAPU8[$3 + 2] + 2 >> 2 & 255;
  HEAP8[$1 + 15] = HEAPU8[$3] + (HEAPU8[$3 + 1] << 1) + HEAPU8[$3 + 2] + 2 >> 2 & 255;
  HEAP8[$1 + 8] = HEAPU8[$3 + 1] + HEAPU8[$3 + 2] + 1 >> 1 & 255;
  HEAP8[$1 + 14] = HEAPU8[$3 + 1] + HEAPU8[$3 + 2] + 1 >> 1 & 255;
  HEAP8[$1 + 13] = HEAPU8[$3 + 1] + (HEAPU8[$3 + 2] << 1) + HEAPU8[$3 + 3] + 2 >> 2 & 255;
  HEAP8[$1 + 12] = HEAPU8[$3 + 2] + HEAPU8[$3 + 3] + 1 >> 1 & 255;
  HEAP8[$1 + 1] = HEAPU8[$2] + (HEAPU8[$2 - 1] << 1) + HEAPU8[$3] + 2 >> 2 & 255;
  HEAP8[$1 + 7] = HEAPU8[$2] + (HEAPU8[$2 - 1] << 1) + HEAPU8[$3] + 2 >> 2 & 255;
  HEAP8[$1 + 2] = HEAPU8[$2 + 1] + (HEAPU8[$2] << 1) + HEAPU8[$2 - 1] + 2 >> 2 & 255;
  HEAP8[$1 + 3] = HEAPU8[$2 + 2] + (HEAPU8[$2 + 1] << 1) + HEAPU8[$2] + 2 >> 2 & 255;
  return;
  return;
}
_Intra4x4HorizontalDownPrediction["X"] = 1;
function _Intra4x4VerticalLeftPrediction($data, $above) {
  var $1;
  var $2;
  $1 = $data;
  $2 = $above;
  HEAP8[$1] = HEAPU8[$2] + HEAPU8[$2 + 1] + 1 >> 1 & 255;
  HEAP8[$1 + 1] = HEAPU8[$2 + 1] + HEAPU8[$2 + 2] + 1 >> 1 & 255;
  HEAP8[$1 + 2] = HEAPU8[$2 + 2] + HEAPU8[$2 + 3] + 1 >> 1 & 255;
  HEAP8[$1 + 3] = HEAPU8[$2 + 3] + HEAPU8[$2 + 4] + 1 >> 1 & 255;
  HEAP8[$1 + 4] = HEAPU8[$2] + (HEAPU8[$2 + 1] << 1) + HEAPU8[$2 + 2] + 2 >> 2 & 255;
  HEAP8[$1 + 5] = HEAPU8[$2 + 1] + (HEAPU8[$2 + 2] << 1) + HEAPU8[$2 + 3] + 2 >> 2 & 255;
  HEAP8[$1 + 6] = HEAPU8[$2 + 2] + (HEAPU8[$2 + 3] << 1) + HEAPU8[$2 + 4] + 2 >> 2 & 255;
  HEAP8[$1 + 7] = HEAPU8[$2 + 3] + (HEAPU8[$2 + 4] << 1) + HEAPU8[$2 + 5] + 2 >> 2 & 255;
  HEAP8[$1 + 8] = HEAPU8[$2 + 1] + HEAPU8[$2 + 2] + 1 >> 1 & 255;
  HEAP8[$1 + 9] = HEAPU8[$2 + 2] + HEAPU8[$2 + 3] + 1 >> 1 & 255;
  HEAP8[$1 + 10] = HEAPU8[$2 + 3] + HEAPU8[$2 + 4] + 1 >> 1 & 255;
  HEAP8[$1 + 11] = HEAPU8[$2 + 4] + HEAPU8[$2 + 5] + 1 >> 1 & 255;
  HEAP8[$1 + 12] = HEAPU8[$2 + 1] + (HEAPU8[$2 + 2] << 1) + HEAPU8[$2 + 3] + 2 >> 2 & 255;
  HEAP8[$1 + 13] = HEAPU8[$2 + 2] + (HEAPU8[$2 + 3] << 1) + HEAPU8[$2 + 4] + 2 >> 2 & 255;
  HEAP8[$1 + 14] = HEAPU8[$2 + 3] + (HEAPU8[$2 + 4] << 1) + HEAPU8[$2 + 5] + 2 >> 2 & 255;
  HEAP8[$1 + 15] = HEAPU8[$2 + 4] + (HEAPU8[$2 + 5] << 1) + HEAPU8[$2 + 6] + 2 >> 2 & 255;
  return;
  return;
}
_Intra4x4VerticalLeftPrediction["X"] = 1;
function _Intra4x4HorizontalUpPrediction($data, $left) {
  var $1;
  var $2;
  $1 = $data;
  $2 = $left;
  HEAP8[$1] = HEAPU8[$2] + HEAPU8[$2 + 1] + 1 >> 1 & 255;
  HEAP8[$1 + 1] = HEAPU8[$2] + (HEAPU8[$2 + 1] << 1) + HEAPU8[$2 + 2] + 2 >> 2 & 255;
  HEAP8[$1 + 2] = HEAPU8[$2 + 1] + HEAPU8[$2 + 2] + 1 >> 1 & 255;
  HEAP8[$1 + 3] = HEAPU8[$2 + 1] + (HEAPU8[$2 + 2] << 1) + HEAPU8[$2 + 3] + 2 >> 2 & 255;
  HEAP8[$1 + 4] = HEAPU8[$2 + 1] + HEAPU8[$2 + 2] + 1 >> 1 & 255;
  HEAP8[$1 + 5] = HEAPU8[$2 + 1] + (HEAPU8[$2 + 2] << 1) + HEAPU8[$2 + 3] + 2 >> 2 & 255;
  HEAP8[$1 + 6] = HEAPU8[$2 + 2] + HEAPU8[$2 + 3] + 1 >> 1 & 255;
  HEAP8[$1 + 7] = HEAPU8[$2 + 2] + HEAPU8[$2 + 3] * 3 + 2 >> 2 & 255;
  HEAP8[$1 + 8] = HEAPU8[$2 + 2] + HEAPU8[$2 + 3] + 1 >> 1 & 255;
  HEAP8[$1 + 9] = HEAPU8[$2 + 2] + HEAPU8[$2 + 3] * 3 + 2 >> 2 & 255;
  var $165 = HEAP8[$2 + 3];
  HEAP8[$1 + 10] = $165;
  var $170 = HEAP8[$2 + 3];
  HEAP8[$1 + 11] = $170;
  var $175 = HEAP8[$2 + 3];
  HEAP8[$1 + 12] = $175;
  var $180 = HEAP8[$2 + 3];
  HEAP8[$1 + 13] = $180;
  var $185 = HEAP8[$2 + 3];
  HEAP8[$1 + 14] = $185;
  var $190 = HEAP8[$2 + 3];
  HEAP8[$1 + 15] = $190;
  return;
  return;
}
_Intra4x4HorizontalUpPrediction["X"] = 1;
function _Write4x4To16x16($data, $data4x4, $blockNum) {
  var $1;
  var $2;
  var $3;
  var $x;
  var $y;
  var $in32;
  var $out32;
  $1 = $data;
  $2 = $data4x4;
  $3 = $blockNum;
  $x = HEAP32[_h264bsdBlockX + ($3 << 2) >> 2];
  $y = HEAP32[_h264bsdBlockY + ($3 << 2) >> 2];
  var $15 = $1 + (($y << 4) + $x);
  $1 = $15;
  $out32 = $1;
  $in32 = $2;
  var $20 = $in32;
  var $21 = $20 + 4;
  $in32 = $21;
  var $22 = HEAP32[$20 >> 2];
  HEAP32[$out32 >> 2] = $22;
  var $25 = $in32;
  var $26 = $25 + 4;
  $in32 = $26;
  var $27 = HEAP32[$25 >> 2];
  HEAP32[$out32 + 16 >> 2] = $27;
  var $30 = $in32;
  var $31 = $30 + 4;
  $in32 = $31;
  var $32 = HEAP32[$30 >> 2];
  HEAP32[$out32 + 32 >> 2] = $32;
  var $35 = $in32;
  var $36 = $35 + 4;
  $in32 = $36;
  var $37 = HEAP32[$35 >> 2];
  HEAP32[$out32 + 48 >> 2] = $37;
  return;
  return;
}
_Write4x4To16x16["X"] = 1;
function _IntraChromaDcPrediction($data, $above, $left, $availableA, $availableB) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $i;
  var $tmp1;
  var $tmp2;
  $1 = $data;
  $2 = $above;
  $3 = $left;
  $4 = $availableA;
  $5 = $availableB;
  if ($4 != 0) {
    __label__ = 1;
  } else {
    __label__ = 3;
  }
  $8$$75$2 : do {
    if (__label__ == 1) {
      if (!($5 != 0)) {
        __label__ = 3;
        break $8$$75$2;
      }
      $tmp1 = HEAPU8[$2] + HEAPU8[$2 + 1] + HEAPU8[$2 + 2] + HEAPU8[$2 + 3] + HEAPU8[$3] + HEAPU8[$3 + 1] + HEAPU8[$3 + 2] + HEAPU8[$3 + 3];
      var $53 = $tmp1 + 4 >>> 3;
      $tmp1 = $53;
      $tmp2 = HEAPU8[$2 + 4] + HEAPU8[$2 + 5] + HEAPU8[$2 + 6] + HEAPU8[$2 + 7] + 2 >> 2;
      __label__ = 10;
      break $8$$75$2;
    }
  } while (0);
  $150$$75$5 : do {
    if (__label__ == 3) {
      if ($5 != 0) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      $78$$121$7 : do {
        if (__label__ == 4) {
          $tmp1 = HEAPU8[$2] + HEAPU8[$2 + 1] + HEAPU8[$2 + 2] + HEAPU8[$2 + 3] + 2 >> 2;
          $tmp2 = HEAPU8[$2 + 4] + HEAPU8[$2 + 5] + HEAPU8[$2 + 6] + HEAPU8[$2 + 7] + 2 >> 2;
        } else if (__label__ == 5) {
          if ($4 != 0) {
            __label__ = 6;
          } else {
            __label__ = 7;
          }
          $124$$147$10 : do {
            if (__label__ == 6) {
              $tmp1 = HEAPU8[$3] + HEAPU8[$3 + 1] + HEAPU8[$3 + 2] + HEAPU8[$3 + 3] + 2 >> 2;
              $tmp2 = $tmp1;
            } else if (__label__ == 7) {
              $tmp2 = 128;
              $tmp1 = 128;
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  $i = 4;
  $151$16 : while (1) {
    var $152 = $i;
    var $153 = $152 - 1;
    $i = $153;
    if (!($152 != 0)) {
      __label__ = 13;
      break $151$16;
    }
    var $158 = $1;
    var $159 = $158 + 1;
    $1 = $159;
    HEAP8[$158] = $tmp1 & 255;
    var $162 = $1;
    var $163 = $162 + 1;
    $1 = $163;
    HEAP8[$162] = $tmp1 & 255;
    var $166 = $1;
    var $167 = $166 + 1;
    $1 = $167;
    HEAP8[$166] = $tmp1 & 255;
    var $170 = $1;
    var $171 = $170 + 1;
    $1 = $171;
    HEAP8[$170] = $tmp1 & 255;
    var $174 = $1;
    var $175 = $174 + 1;
    $1 = $175;
    HEAP8[$174] = $tmp2 & 255;
    var $178 = $1;
    var $179 = $178 + 1;
    $1 = $179;
    HEAP8[$178] = $tmp2 & 255;
    var $182 = $1;
    var $183 = $182 + 1;
    $1 = $183;
    HEAP8[$182] = $tmp2 & 255;
    var $186 = $1;
    var $187 = $186 + 1;
    $1 = $187;
    HEAP8[$186] = $tmp2 & 255;
  }
  if ($4 != 0) {
    __label__ = 14;
  } else {
    __label__ = 18;
  }
  $191$$261$20 : do {
    if (__label__ == 14) {
      $tmp1 = HEAPU8[$3 + 4] + HEAPU8[$3 + 5] + HEAPU8[$3 + 6] + HEAPU8[$3 + 7] + 2 >> 2;
      if ($5 != 0) {
        __label__ = 15;
      } else {
        __label__ = 16;
      }
      $215$$258$22 : do {
        if (__label__ == 15) {
          $tmp2 = HEAPU8[$2 + 4] + HEAPU8[$2 + 5] + HEAPU8[$2 + 6] + HEAPU8[$2 + 7] + HEAPU8[$3 + 4] + HEAPU8[$3 + 5] + HEAPU8[$3 + 6] + HEAPU8[$3 + 7];
          var $257 = $tmp2 + 4 >>> 3;
          $tmp2 = $257;
        } else if (__label__ == 16) {
          $tmp2 = $tmp1;
        }
      } while (0);
    } else if (__label__ == 18) {
      if ($5 != 0) {
        __label__ = 19;
      } else {
        __label__ = 20;
      }
      $264$$307$27 : do {
        if (__label__ == 19) {
          $tmp1 = HEAPU8[$2] + HEAPU8[$2 + 1] + HEAPU8[$2 + 2] + HEAPU8[$2 + 3] + 2 >> 2;
          $tmp2 = HEAPU8[$2 + 4] + HEAPU8[$2 + 5] + HEAPU8[$2 + 6] + HEAPU8[$2 + 7] + 2 >> 2;
        } else if (__label__ == 20) {
          $tmp2 = 128;
          $tmp1 = 128;
        }
      } while (0);
    }
  } while (0);
  $i = 4;
  $310$32 : while (1) {
    var $311 = $i;
    var $312 = $311 - 1;
    $i = $312;
    if (!($311 != 0)) {
      __label__ = 25;
      break $310$32;
    }
    var $317 = $1;
    var $318 = $317 + 1;
    $1 = $318;
    HEAP8[$317] = $tmp1 & 255;
    var $321 = $1;
    var $322 = $321 + 1;
    $1 = $322;
    HEAP8[$321] = $tmp1 & 255;
    var $325 = $1;
    var $326 = $325 + 1;
    $1 = $326;
    HEAP8[$325] = $tmp1 & 255;
    var $329 = $1;
    var $330 = $329 + 1;
    $1 = $330;
    HEAP8[$329] = $tmp1 & 255;
    var $333 = $1;
    var $334 = $333 + 1;
    $1 = $334;
    HEAP8[$333] = $tmp2 & 255;
    var $337 = $1;
    var $338 = $337 + 1;
    $1 = $338;
    HEAP8[$337] = $tmp2 & 255;
    var $341 = $1;
    var $342 = $341 + 1;
    $1 = $342;
    HEAP8[$341] = $tmp2 & 255;
    var $345 = $1;
    var $346 = $345 + 1;
    $1 = $346;
    HEAP8[$345] = $tmp2 & 255;
  }
  return;
  return;
}
_IntraChromaDcPrediction["X"] = 1;
function _IntraChromaHorizontalPrediction($data, $left) {
  var __label__;
  var $1;
  var $2;
  var $i;
  $1 = $data;
  $2 = $left;
  $i = 8;
  $3$37 : while (1) {
    var $4 = $i;
    var $5 = $4 - 1;
    $i = $5;
    if (!($4 != 0)) {
      __label__ = 3;
      break $3$37;
    }
    var $9 = HEAP8[$2];
    var $10 = $1;
    var $11 = $10 + 1;
    $1 = $11;
    HEAP8[$10] = $9;
    var $13 = HEAP8[$2];
    var $14 = $1;
    var $15 = $14 + 1;
    $1 = $15;
    HEAP8[$14] = $13;
    var $17 = HEAP8[$2];
    var $18 = $1;
    var $19 = $18 + 1;
    $1 = $19;
    HEAP8[$18] = $17;
    var $21 = HEAP8[$2];
    var $22 = $1;
    var $23 = $22 + 1;
    $1 = $23;
    HEAP8[$22] = $21;
    var $25 = HEAP8[$2];
    var $26 = $1;
    var $27 = $26 + 1;
    $1 = $27;
    HEAP8[$26] = $25;
    var $29 = HEAP8[$2];
    var $30 = $1;
    var $31 = $30 + 1;
    $1 = $31;
    HEAP8[$30] = $29;
    var $33 = HEAP8[$2];
    var $34 = $1;
    var $35 = $34 + 1;
    $1 = $35;
    HEAP8[$34] = $33;
    var $36 = $2;
    var $37 = $36 + 1;
    $2 = $37;
    var $38 = HEAP8[$36];
    var $39 = $1;
    var $40 = $39 + 1;
    $1 = $40;
    HEAP8[$39] = $38;
  }
  return;
  return;
}
_IntraChromaHorizontalPrediction["X"] = 1;
function _IntraChromaVerticalPrediction($data, $above) {
  var __label__;
  var $1;
  var $2;
  var $i;
  $1 = $data;
  $2 = $above;
  $i = 8;
  $3$42 : while (1) {
    var $4 = $i;
    var $5 = $4 - 1;
    $i = $5;
    if (!($4 != 0)) {
      __label__ = 4;
      break $3$42;
    }
    var $9 = HEAP8[$2];
    HEAP8[$1] = $9;
    var $13 = HEAP8[$2];
    HEAP8[$1 + 8] = $13;
    var $17 = HEAP8[$2];
    HEAP8[$1 + 16] = $17;
    var $21 = HEAP8[$2];
    HEAP8[$1 + 24] = $21;
    var $25 = HEAP8[$2];
    HEAP8[$1 + 32] = $25;
    var $29 = HEAP8[$2];
    HEAP8[$1 + 40] = $29;
    var $33 = HEAP8[$2];
    HEAP8[$1 + 48] = $33;
    var $36 = $2;
    var $37 = $36 + 1;
    $2 = $37;
    var $38 = HEAP8[$36];
    HEAP8[$1 + 56] = $38;
    var $43 = $1 + 1;
    $1 = $43;
  }
  return;
  return;
}
_IntraChromaVerticalPrediction["X"] = 1;
function _IntraChromaPlanePrediction($data, $above, $left) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $i;
  var $a;
  var $b;
  var $c;
  var $tmp;
  var $clp;
  $1 = $data;
  $2 = $above;
  $3 = $left;
  $clp = _h264bsdClip + 512;
  $a = HEAPU8[$2 + 7] + HEAPU8[$3 + 7] << 4;
  $b = HEAPU8[$2 + 4] - HEAPU8[$2 + 2] + (HEAPU8[$2 + 5] - HEAPU8[$2 + 1] << 1) + (HEAPU8[$2 + 6] - HEAPU8[$2]) * 3 + (HEAPU8[$2 + 7] - HEAPU8[$2 - 1] << 2);
  var $59 = $b * 17 + 16 >> 5;
  $b = $59;
  $c = HEAPU8[$3 + 4] - HEAPU8[$3 + 2] + (HEAPU8[$3 + 5] - HEAPU8[$3 + 1] << 1) + (HEAPU8[$3 + 6] - HEAPU8[$3]) * 3 + (HEAPU8[$3 + 7] - HEAPU8[$2 - 1] << 2);
  var $105 = $c * 17 + 16 >> 5;
  $c = $105;
  var $110 = $a - $c * 3 + 16;
  $a = $110;
  $i = 8;
  $111$48 : while (1) {
    var $112 = $i;
    var $113 = $112 - 1;
    $i = $113;
    if (!($112 != 0)) {
      __label__ = 4;
      break $111$48;
    }
    $tmp = $a - $b * 3;
    var $124 = HEAP8[$clp + ($tmp >> 5)];
    var $125 = $1;
    var $126 = $125 + 1;
    $1 = $126;
    HEAP8[$125] = $124;
    var $129 = $tmp + $b;
    $tmp = $129;
    var $134 = HEAP8[$clp + ($tmp >> 5)];
    var $135 = $1;
    var $136 = $135 + 1;
    $1 = $136;
    HEAP8[$135] = $134;
    var $139 = $tmp + $b;
    $tmp = $139;
    var $144 = HEAP8[$clp + ($tmp >> 5)];
    var $145 = $1;
    var $146 = $145 + 1;
    $1 = $146;
    HEAP8[$145] = $144;
    var $149 = $tmp + $b;
    $tmp = $149;
    var $154 = HEAP8[$clp + ($tmp >> 5)];
    var $155 = $1;
    var $156 = $155 + 1;
    $1 = $156;
    HEAP8[$155] = $154;
    var $159 = $tmp + $b;
    $tmp = $159;
    var $164 = HEAP8[$clp + ($tmp >> 5)];
    var $165 = $1;
    var $166 = $165 + 1;
    $1 = $166;
    HEAP8[$165] = $164;
    var $169 = $tmp + $b;
    $tmp = $169;
    var $174 = HEAP8[$clp + ($tmp >> 5)];
    var $175 = $1;
    var $176 = $175 + 1;
    $1 = $176;
    HEAP8[$175] = $174;
    var $179 = $tmp + $b;
    $tmp = $179;
    var $184 = HEAP8[$clp + ($tmp >> 5)];
    var $185 = $1;
    var $186 = $185 + 1;
    $1 = $186;
    HEAP8[$185] = $184;
    var $189 = $tmp + $b;
    $tmp = $189;
    var $194 = HEAP8[$clp + ($tmp >> 5)];
    var $195 = $1;
    var $196 = $195 + 1;
    $1 = $196;
    HEAP8[$195] = $194;
    var $200 = $a + $c;
    $a = $200;
  }
  return;
  return;
}
_IntraChromaPlanePrediction["X"] = 1;
function _h264bsdInterPrediction($pMb, $pMbLayer, $dpb, $mbNum, $currImage, $data) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $i;
  var $x;
  var $y;
  var $row;
  var $col;
  var $subPartMode;
  var $refImage = __stackBase__;
  $2 = $pMb;
  $3 = $pMbLayer;
  $4 = $dpb;
  $5 = $mbNum;
  $6 = $currImage;
  $7 = $data;
  var $11 = HEAPU32[$6 + 4 >> 2];
  var $12 = Math.floor($5 / $11);
  $row = $12;
  $col = $5 - $row * HEAP32[$6 + 4 >> 2];
  var $21 = $row << 4;
  $row = $21;
  var $23 = $col << 4;
  $col = $23;
  var $26 = HEAP32[$6 + 4 >> 2];
  HEAP32[$refImage + 4 >> 2] = $26;
  var $30 = HEAP32[$6 + 8 >> 2];
  HEAP32[$refImage + 8 >> 2] = $30;
  var $34 = HEAP32[$2 >> 2];
  if ($34 == 0) {
    __label__ = 1;
  } else if ($34 == 1) {
    __label__ = 1;
  } else if ($34 == 2) {
    __label__ = 4;
  } else if ($34 == 3) {
    __label__ = 7;
  } else {
    __label__ = 10;
  }
  $119$$35$$55$$87$2 : do {
    if (__label__ == 10) {
      var $124 = _MvPrediction8x8($2, $3 + 176, $4);
      if ($124 != 0) {
        __label__ = 11;
      } else {
        __label__ = 12;
      }
      $126$$127$4 : do {
        if (__label__ == 11) {
          $1 = 1;
          __label__ = 28;
          break $119$$35$$55$$87$2;
        } else if (__label__ == 12) {
          $i = 0;
          $128$7 : while (1) {
            if (!($i < 4)) {
              __label__ = 21;
              break $128$7;
            }
            var $136 = HEAP32[$2 + 116 + ($i << 2) >> 2];
            HEAP32[$refImage >> 2] = $136;
            var $143 = HEAP32[$3 + 176 + ($i << 2) >> 2];
            var $144 = _h264bsdSubMbPartMode($143);
            $subPartMode = $144;
            var $148 = ($i & 1) != 0 ? 8 : 0;
            $x = $148;
            var $151 = $i < 2 ? 0 : 8;
            $y = $151;
            if ($subPartMode == 0) {
              __label__ = 15;
            } else if ($subPartMode == 1) {
              __label__ = 16;
            } else if ($subPartMode == 2) {
              __label__ = 17;
            } else {
              __label__ = 18;
            }
            $215$$153$$165$$190$10 : do {
              if (__label__ == 18) {
                _h264bsdPredictSamples($7, $2 + 132 + ($i << 2 << 2), $refImage, $col, $row, $x, $y, 4, 4);
                _h264bsdPredictSamples($7, $2 + 132 + ($i << 2 << 2) + 4, $refImage, $col, $row, $x + 4, $y, 4, 4);
                _h264bsdPredictSamples($7, $2 + 132 + ($i << 2 << 2) + 8, $refImage, $col, $row, $x, $y + 4, 4, 4);
                _h264bsdPredictSamples($7, $2 + 132 + ($i << 2 << 2) + 12, $refImage, $col, $row, $x + 4, $y + 4, 4, 4);
              } else if (__label__ == 15) {
                _h264bsdPredictSamples($7, $2 + 132 + ($i << 2 << 2), $refImage, $col, $row, $x, $y, 8, 8);
              } else if (__label__ == 16) {
                _h264bsdPredictSamples($7, $2 + 132 + ($i << 2 << 2), $refImage, $col, $row, $x, $y, 8, 4);
                _h264bsdPredictSamples($7, $2 + 132 + ($i << 2 << 2) + 8, $refImage, $col, $row, $x, $y + 4, 8, 4);
              } else if (__label__ == 17) {
                _h264bsdPredictSamples($7, $2 + 132 + ($i << 2 << 2), $refImage, $col, $row, $x, $y, 4, 8);
                _h264bsdPredictSamples($7, $2 + 132 + ($i << 2 << 2) + 4, $refImage, $col, $row, $x + 4, $y, 4, 8);
              }
            } while (0);
            var $270 = $i + 1;
            $i = $270;
          }
          __label__ = 22;
          break $119$$35$$55$$87$2;
        }
      } while (0);
    } else if (__label__ == 1) {
      var $40 = _MvPrediction16x16($2, $3 + 12, $4);
      if ($40 != 0) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      $42$$43$19 : do {
        if (__label__ == 2) {
          $1 = 1;
          __label__ = 28;
          break $119$$35$$55$$87$2;
        } else if (__label__ == 3) {
          var $47 = HEAP32[$2 + 116 >> 2];
          HEAP32[$refImage >> 2] = $47;
          _h264bsdPredictSamples($7, $2 + 132, $refImage, $col, $row, 0, 0, 16, 16);
          __label__ = 22;
          break $119$$35$$55$$87$2;
        }
      } while (0);
    } else if (__label__ == 4) {
      var $60 = _MvPrediction16x8($2, $3 + 12, $4);
      if ($60 != 0) {
        __label__ = 5;
      } else {
        __label__ = 6;
      }
      $62$$63$23 : do {
        if (__label__ == 5) {
          $1 = 1;
          __label__ = 28;
          break $119$$35$$55$$87$2;
        } else if (__label__ == 6) {
          var $67 = HEAP32[$2 + 116 >> 2];
          HEAP32[$refImage >> 2] = $67;
          _h264bsdPredictSamples($7, $2 + 132, $refImage, $col, $row, 0, 0, 16, 8);
          var $78 = HEAP32[$2 + 124 >> 2];
          HEAP32[$refImage >> 2] = $78;
          _h264bsdPredictSamples($7, $2 + 164, $refImage, $col, $row, 0, 8, 16, 8);
          __label__ = 22;
          break $119$$35$$55$$87$2;
        }
      } while (0);
    } else if (__label__ == 7) {
      var $92 = _MvPrediction8x16($2, $3 + 12, $4);
      if ($92 != 0) {
        __label__ = 8;
      } else {
        __label__ = 9;
      }
      $94$$95$27 : do {
        if (__label__ == 8) {
          $1 = 1;
          __label__ = 28;
          break $119$$35$$55$$87$2;
        } else if (__label__ == 9) {
          var $99 = HEAP32[$2 + 116 >> 2];
          HEAP32[$refImage >> 2] = $99;
          _h264bsdPredictSamples($7, $2 + 132, $refImage, $col, $row, 0, 0, 8, 16);
          var $110 = HEAP32[$2 + 120 >> 2];
          HEAP32[$refImage >> 2] = $110;
          _h264bsdPredictSamples($7, $2 + 148, $refImage, $col, $row, 8, 0, 8, 16);
          __label__ = 22;
          break $119$$35$$55$$87$2;
        }
      } while (0);
    }
  } while (0);
  $295$$272$30 : do {
    if (__label__ == 22) {
      if (HEAPU32[$2 + 196 >> 2] > 1) {
        __label__ = 23;
      } else {
        __label__ = 24;
      }
      $277$$278$32 : do {
        if (__label__ == 23) {
          $1 = 0;
        } else if (__label__ == 24) {
          if (HEAP32[$2 >> 2] != 0) {
            __label__ = 25;
          } else {
            __label__ = 26;
          }
          $283$$291$35 : do {
            if (__label__ == 25) {
              _h264bsdWriteOutputBlocks($6, $5, $7, $3 + 328);
            } else if (__label__ == 26) {
              _h264bsdWriteMacroblock($6, $7);
            }
          } while (0);
          $1 = 0;
        }
      } while (0);
    }
  } while (0);
  var $296 = $1;
  STACKTOP = __stackBase__;
  return $296;
  return null;
}
_h264bsdInterPrediction["X"] = 1;
function _MvPrediction16x16($pMb, $mbPred, $dpb) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 44;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $mv = __stackBase__;
  var $mvPred = __stackBase__ + 4;
  var $a = __stackBase__ + 8;
  var $refIndex;
  var $tmp;
  var $tmpMv1;
  var $tmpMv2;
  $2 = $pMb;
  $3 = $mbPred;
  $4 = $dpb;
  $refIndex = HEAP32[$3 + 132 >> 2];
  var $11 = HEAP32[$2 + 4 >> 2];
  var $14 = HEAP32[$2 + 200 >> 2];
  var $15 = $a;
  _GetInterNeighbour($11, $14, $15, 5);
  var $18 = HEAP32[$2 + 4 >> 2];
  var $21 = HEAP32[$2 + 204 >> 2];
  var $23 = $a + 12;
  _GetInterNeighbour($18, $21, $23, 10);
  $tmpMv1 = $a + 8;
  $tmpMv2 = $a + 20;
  if (HEAP32[$2 >> 2] == 0) {
    __label__ = 1;
  } else {
    __label__ = 8;
  }
  $34$$65$41 : do {
    if (__label__ == 1) {
      if (HEAP32[$a >> 2] != 0) {
        __label__ = 2;
      } else {
        __label__ = 7;
      }
      $39$$62$43 : do {
        if (__label__ == 2) {
          if (!(HEAP32[$a + 12 >> 2] != 0)) {
            __label__ = 7;
            break $39$$62$43;
          }
          if (HEAP32[$a + 4 >> 2] == 0) {
            __label__ = 4;
          } else {
            __label__ = 5;
          }
          $49$$53$46 : do {
            if (__label__ == 4) {
              if (HEAP32[$tmpMv1 >> 2] == 0) {
                __label__ = 7;
                break $39$$62$43;
              }
            }
          } while (0);
          if (!(HEAP32[$a + 16 >> 2] == 0)) {
            __label__ = 8;
            break $34$$65$41;
          }
          if (!(HEAP32[$tmpMv2 >> 2] == 0)) {
            __label__ = 8;
            break $34$$65$41;
          }
        }
      } while (0);
      HEAP16[$mv + 2 >> 1] = 0;
      HEAP16[$mv >> 1] = 0;
      __label__ = 15;
      break $34$$65$41;
    }
  } while (0);
  $125$$65$51 : do {
    if (__label__ == 8) {
      var $69 = $mv;
      var src, dest, stop, stop4;
      src = $3 + 148;
      dest = $69;
      stop = src + 4;
      if (dest % 4 == src % 4 && 4 > 8) {
        while (src % 4 !== 0 && src < stop) {
          HEAP8[dest++] = HEAP8[src++];
        }
        src >>= 2;
        dest >>= 2;
        stop4 = stop >> 2;
        while (src < stop4) {
          HEAP32[dest++] = HEAP32[src++];
        }
        src <<= 2;
        dest <<= 2;
      }
      while (src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
      var $73 = HEAP32[$2 + 4 >> 2];
      var $76 = HEAP32[$2 + 208 >> 2];
      var $78 = $a + 24;
      _GetInterNeighbour($73, $76, $78, 10);
      if (HEAP32[$a + 24 >> 2] != 0) {
        __label__ = 10;
      } else {
        __label__ = 9;
      }
      $92$$83$53 : do {
        if (__label__ == 9) {
          var $86 = HEAP32[$2 + 4 >> 2];
          var $89 = HEAP32[$2 + 212 >> 2];
          var $91 = $a + 24;
          _GetInterNeighbour($86, $89, $91, 15);
        }
      } while (0);
      var $93 = $a;
      _GetPredictionMv($mvPred, $93, $refIndex);
      var $102 = HEAP16[$mv >> 1] + HEAP16[$mvPred >> 1] & 65535;
      HEAP16[$mv >> 1] = $102;
      var $110 = HEAP16[$mv + 2 >> 1] + HEAP16[$mvPred + 2 >> 1] & 65535;
      HEAP16[$mv + 2 >> 1] = $110;
      if (HEAP16[$mv >> 1] + 8192 >= 16384) {
        __label__ = 11;
      } else {
        __label__ = 12;
      }
      $116$$117$56 : do {
        if (__label__ == 11) {
          $1 = 1;
          __label__ = 18;
          break $125$$65$51;
        } else if (__label__ == 12) {
          if (HEAP16[$mv + 2 >> 1] + 2048 >= 4096) {
            __label__ = 13;
          } else {
            __label__ = 14;
          }
          $123$$124$59 : do {
            if (__label__ == 13) {
              $1 = 1;
              __label__ = 18;
              break $125$$65$51;
            } else if (__label__ == 14) {
              __label__ = 15;
              break $125$$65$51;
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  $125$$245$62 : do {
    if (__label__ == 15) {
      var $128 = _h264bsdGetRefPicData($4, $refIndex);
      $tmp = $128;
      if ($tmp == 0) {
        __label__ = 16;
      } else {
        __label__ = 17;
      }
      $131$$132$64 : do {
        if (__label__ == 16) {
          $1 = 1;
        } else if (__label__ == 17) {
          var src, dest, stop, stop4;
          src = $mv;
          dest = $2 + 192;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          var src, dest, stop, stop4;
          src = $2 + 192;
          dest = $2 + 188;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          var src, dest, stop, stop4;
          src = $2 + 188;
          dest = $2 + 184;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          var src, dest, stop, stop4;
          src = $2 + 184;
          dest = $2 + 180;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          var src, dest, stop, stop4;
          src = $2 + 180;
          dest = $2 + 176;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          var src, dest, stop, stop4;
          src = $2 + 176;
          dest = $2 + 172;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          var src, dest, stop, stop4;
          src = $2 + 172;
          dest = $2 + 168;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          var src, dest, stop, stop4;
          src = $2 + 168;
          dest = $2 + 164;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          var src, dest, stop, stop4;
          src = $2 + 164;
          dest = $2 + 160;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          var src, dest, stop, stop4;
          src = $2 + 160;
          dest = $2 + 156;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          var src, dest, stop, stop4;
          src = $2 + 156;
          dest = $2 + 152;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          var src, dest, stop, stop4;
          src = $2 + 152;
          dest = $2 + 148;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          var src, dest, stop, stop4;
          src = $2 + 148;
          dest = $2 + 144;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          var src, dest, stop, stop4;
          src = $2 + 144;
          dest = $2 + 140;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          var src, dest, stop, stop4;
          src = $2 + 140;
          dest = $2 + 136;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          var src, dest, stop, stop4;
          src = $2 + 136;
          dest = $2 + 132;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          HEAP32[$2 + 100 >> 2] = $refIndex;
          HEAP32[$2 + 104 >> 2] = $refIndex;
          HEAP32[$2 + 108 >> 2] = $refIndex;
          HEAP32[$2 + 112 >> 2] = $refIndex;
          HEAP32[$2 + 116 >> 2] = $tmp;
          HEAP32[$2 + 120 >> 2] = $tmp;
          HEAP32[$2 + 124 >> 2] = $tmp;
          HEAP32[$2 + 128 >> 2] = $tmp;
          $1 = 0;
        }
      } while (0);
    }
  } while (0);
  var $246 = $1;
  STACKTOP = __stackBase__;
  return $246;
  return null;
}
_MvPrediction16x16["X"] = 1;
function _MvPrediction16x8($pMb, $mbPred, $dpb) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 44;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $mv = __stackBase__;
  var $mvPred = __stackBase__ + 4;
  var $a = __stackBase__ + 8;
  var $refIndex;
  var $tmp;
  $2 = $pMb;
  $3 = $mbPred;
  $4 = $dpb;
  var $8 = $mv;
  var src, dest, stop, stop4;
  src = $3 + 148;
  dest = $8;
  stop = src + 4;
  if (dest % 4 == src % 4 && 4 > 8) {
    while (src % 4 !== 0 && src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    src >>= 2;
    dest >>= 2;
    stop4 = stop >> 2;
    while (src < stop4) {
      HEAP32[dest++] = HEAP32[src++];
    }
    src <<= 2;
    dest <<= 2;
  }
  while (src < stop) {
    HEAP8[dest++] = HEAP8[src++];
  }
  $refIndex = HEAP32[$3 + 132 >> 2];
  var $16 = HEAP32[$2 + 4 >> 2];
  var $19 = HEAP32[$2 + 204 >> 2];
  var $21 = $a + 12;
  _GetInterNeighbour($16, $19, $21, 10);
  if (HEAP32[$a + 16 >> 2] == $refIndex) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $27$$32$2 : do {
    if (__label__ == 1) {
      var $30 = $mvPred;
      var src, dest, stop, stop4;
      src = $a + 20;
      dest = $30;
      stop = src + 4;
      if (dest % 4 == src % 4 && 4 > 8) {
        while (src % 4 !== 0 && src < stop) {
          HEAP8[dest++] = HEAP8[src++];
        }
        src >>= 2;
        dest >>= 2;
        stop4 = stop >> 2;
        while (src < stop4) {
          HEAP32[dest++] = HEAP32[src++];
        }
        src <<= 2;
        dest <<= 2;
      }
      while (src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
    } else if (__label__ == 2) {
      var $35 = HEAP32[$2 + 4 >> 2];
      var $38 = HEAP32[$2 + 200 >> 2];
      var $39 = $a;
      _GetInterNeighbour($35, $38, $39, 5);
      var $42 = HEAP32[$2 + 4 >> 2];
      var $45 = HEAP32[$2 + 208 >> 2];
      var $47 = $a + 24;
      _GetInterNeighbour($42, $45, $47, 10);
      if (HEAP32[$a + 24 >> 2] != 0) {
        __label__ = 4;
      } else {
        __label__ = 3;
      }
      $61$$52$5 : do {
        if (__label__ == 3) {
          var $55 = HEAP32[$2 + 4 >> 2];
          var $58 = HEAP32[$2 + 212 >> 2];
          var $60 = $a + 24;
          _GetInterNeighbour($55, $58, $60, 15);
        }
      } while (0);
      var $62 = $a;
      _GetPredictionMv($mvPred, $62, $refIndex);
    }
  } while (0);
  var $72 = HEAP16[$mv >> 1] + HEAP16[$mvPred >> 1] & 65535;
  HEAP16[$mv >> 1] = $72;
  var $80 = HEAP16[$mv + 2 >> 1] + HEAP16[$mvPred + 2 >> 1] & 65535;
  HEAP16[$mv + 2 >> 1] = $80;
  if (HEAP16[$mv >> 1] + 8192 >= 16384) {
    __label__ = 6;
  } else {
    __label__ = 7;
  }
  $86$$87$9 : do {
    if (__label__ == 6) {
      $1 = 1;
    } else if (__label__ == 7) {
      if (HEAP16[$mv + 2 >> 1] + 2048 >= 4096) {
        __label__ = 8;
      } else {
        __label__ = 9;
      }
      $93$$94$12 : do {
        if (__label__ == 8) {
          $1 = 1;
        } else if (__label__ == 9) {
          var $97 = _h264bsdGetRefPicData($4, $refIndex);
          $tmp = $97;
          if ($tmp == 0) {
            __label__ = 10;
          } else {
            __label__ = 11;
          }
          $100$$101$15 : do {
            if (__label__ == 10) {
              $1 = 1;
            } else if (__label__ == 11) {
              var src, dest, stop, stop4;
              src = $mv;
              dest = $2 + 160;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $2 + 160;
              dest = $2 + 156;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $2 + 156;
              dest = $2 + 152;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $2 + 152;
              dest = $2 + 148;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $2 + 148;
              dest = $2 + 144;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $2 + 144;
              dest = $2 + 140;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $2 + 140;
              dest = $2 + 136;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $2 + 136;
              dest = $2 + 132;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              HEAP32[$2 + 100 >> 2] = $refIndex;
              HEAP32[$2 + 104 >> 2] = $refIndex;
              HEAP32[$2 + 116 >> 2] = $tmp;
              HEAP32[$2 + 120 >> 2] = $tmp;
              var $161 = $mv;
              var src, dest, stop, stop4;
              src = $3 + 152;
              dest = $161;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              $refIndex = HEAP32[$3 + 136 >> 2];
              var $169 = HEAP32[$2 + 4 >> 2];
              var $172 = HEAP32[$2 + 200 >> 2];
              var $173 = $a;
              _GetInterNeighbour($169, $172, $173, 13);
              if (HEAP32[$a + 4 >> 2] == $refIndex) {
                __label__ = 12;
              } else {
                __label__ = 13;
              }
              $179$$184$18 : do {
                if (__label__ == 12) {
                  var $182 = $mvPred;
                  var src, dest, stop, stop4;
                  src = $a + 8;
                  dest = $182;
                  stop = src + 4;
                  if (dest % 4 == src % 4 && 4 > 8) {
                    while (src % 4 !== 0 && src < stop) {
                      HEAP8[dest++] = HEAP8[src++];
                    }
                    src >>= 2;
                    dest >>= 2;
                    stop4 = stop >> 2;
                    while (src < stop4) {
                      HEAP32[dest++] = HEAP32[src++];
                    }
                    src <<= 2;
                    dest <<= 2;
                  }
                  while (src < stop) {
                    HEAP8[dest++] = HEAP8[src++];
                  }
                } else if (__label__ == 13) {
                  HEAP32[$a + 12 >> 2] = 1;
                  var $190 = HEAP32[$2 + 100 >> 2];
                  HEAP32[$a + 16 >> 2] = $190;
                  var $198 = $a + 20;
                  var src, dest, stop, stop4;
                  src = $2 + 132;
                  dest = $198;
                  stop = src + 4;
                  if (dest % 4 == src % 4 && 4 > 8) {
                    while (src % 4 !== 0 && src < stop) {
                      HEAP8[dest++] = HEAP8[src++];
                    }
                    src >>= 2;
                    dest >>= 2;
                    stop4 = stop >> 2;
                    while (src < stop4) {
                      HEAP32[dest++] = HEAP32[src++];
                    }
                    src <<= 2;
                    dest <<= 2;
                  }
                  while (src < stop) {
                    HEAP8[dest++] = HEAP8[src++];
                  }
                  var $202 = HEAP32[$2 + 4 >> 2];
                  var $205 = HEAP32[$2 + 200 >> 2];
                  var $207 = $a + 24;
                  _GetInterNeighbour($202, $205, $207, 7);
                  var $208 = $a;
                  _GetPredictionMv($mvPred, $208, $refIndex);
                }
              } while (0);
              var $218 = HEAP16[$mv >> 1] + HEAP16[$mvPred >> 1] & 65535;
              HEAP16[$mv >> 1] = $218;
              var $226 = HEAP16[$mv + 2 >> 1] + HEAP16[$mvPred + 2 >> 1] & 65535;
              HEAP16[$mv + 2 >> 1] = $226;
              if (HEAP16[$mv >> 1] + 8192 >= 16384) {
                __label__ = 15;
              } else {
                __label__ = 16;
              }
              $232$$233$22 : do {
                if (__label__ == 15) {
                  $1 = 1;
                } else if (__label__ == 16) {
                  if (HEAP16[$mv + 2 >> 1] + 2048 >= 4096) {
                    __label__ = 17;
                  } else {
                    __label__ = 18;
                  }
                  $239$$240$25 : do {
                    if (__label__ == 17) {
                      $1 = 1;
                    } else if (__label__ == 18) {
                      var $243 = _h264bsdGetRefPicData($4, $refIndex);
                      $tmp = $243;
                      if ($tmp == 0) {
                        __label__ = 19;
                      } else {
                        __label__ = 20;
                      }
                      $246$$247$28 : do {
                        if (__label__ == 19) {
                          $1 = 1;
                        } else if (__label__ == 20) {
                          var src, dest, stop, stop4;
                          src = $mv;
                          dest = $2 + 192;
                          stop = src + 4;
                          if (dest % 4 == src % 4 && 4 > 8) {
                            while (src % 4 !== 0 && src < stop) {
                              HEAP8[dest++] = HEAP8[src++];
                            }
                            src >>= 2;
                            dest >>= 2;
                            stop4 = stop >> 2;
                            while (src < stop4) {
                              HEAP32[dest++] = HEAP32[src++];
                            }
                            src <<= 2;
                            dest <<= 2;
                          }
                          while (src < stop) {
                            HEAP8[dest++] = HEAP8[src++];
                          }
                          var src, dest, stop, stop4;
                          src = $2 + 192;
                          dest = $2 + 188;
                          stop = src + 4;
                          if (dest % 4 == src % 4 && 4 > 8) {
                            while (src % 4 !== 0 && src < stop) {
                              HEAP8[dest++] = HEAP8[src++];
                            }
                            src >>= 2;
                            dest >>= 2;
                            stop4 = stop >> 2;
                            while (src < stop4) {
                              HEAP32[dest++] = HEAP32[src++];
                            }
                            src <<= 2;
                            dest <<= 2;
                          }
                          while (src < stop) {
                            HEAP8[dest++] = HEAP8[src++];
                          }
                          var src, dest, stop, stop4;
                          src = $2 + 188;
                          dest = $2 + 184;
                          stop = src + 4;
                          if (dest % 4 == src % 4 && 4 > 8) {
                            while (src % 4 !== 0 && src < stop) {
                              HEAP8[dest++] = HEAP8[src++];
                            }
                            src >>= 2;
                            dest >>= 2;
                            stop4 = stop >> 2;
                            while (src < stop4) {
                              HEAP32[dest++] = HEAP32[src++];
                            }
                            src <<= 2;
                            dest <<= 2;
                          }
                          while (src < stop) {
                            HEAP8[dest++] = HEAP8[src++];
                          }
                          var src, dest, stop, stop4;
                          src = $2 + 184;
                          dest = $2 + 180;
                          stop = src + 4;
                          if (dest % 4 == src % 4 && 4 > 8) {
                            while (src % 4 !== 0 && src < stop) {
                              HEAP8[dest++] = HEAP8[src++];
                            }
                            src >>= 2;
                            dest >>= 2;
                            stop4 = stop >> 2;
                            while (src < stop4) {
                              HEAP32[dest++] = HEAP32[src++];
                            }
                            src <<= 2;
                            dest <<= 2;
                          }
                          while (src < stop) {
                            HEAP8[dest++] = HEAP8[src++];
                          }
                          var src, dest, stop, stop4;
                          src = $2 + 180;
                          dest = $2 + 176;
                          stop = src + 4;
                          if (dest % 4 == src % 4 && 4 > 8) {
                            while (src % 4 !== 0 && src < stop) {
                              HEAP8[dest++] = HEAP8[src++];
                            }
                            src >>= 2;
                            dest >>= 2;
                            stop4 = stop >> 2;
                            while (src < stop4) {
                              HEAP32[dest++] = HEAP32[src++];
                            }
                            src <<= 2;
                            dest <<= 2;
                          }
                          while (src < stop) {
                            HEAP8[dest++] = HEAP8[src++];
                          }
                          var src, dest, stop, stop4;
                          src = $2 + 176;
                          dest = $2 + 172;
                          stop = src + 4;
                          if (dest % 4 == src % 4 && 4 > 8) {
                            while (src % 4 !== 0 && src < stop) {
                              HEAP8[dest++] = HEAP8[src++];
                            }
                            src >>= 2;
                            dest >>= 2;
                            stop4 = stop >> 2;
                            while (src < stop4) {
                              HEAP32[dest++] = HEAP32[src++];
                            }
                            src <<= 2;
                            dest <<= 2;
                          }
                          while (src < stop) {
                            HEAP8[dest++] = HEAP8[src++];
                          }
                          var src, dest, stop, stop4;
                          src = $2 + 172;
                          dest = $2 + 168;
                          stop = src + 4;
                          if (dest % 4 == src % 4 && 4 > 8) {
                            while (src % 4 !== 0 && src < stop) {
                              HEAP8[dest++] = HEAP8[src++];
                            }
                            src >>= 2;
                            dest >>= 2;
                            stop4 = stop >> 2;
                            while (src < stop4) {
                              HEAP32[dest++] = HEAP32[src++];
                            }
                            src <<= 2;
                            dest <<= 2;
                          }
                          while (src < stop) {
                            HEAP8[dest++] = HEAP8[src++];
                          }
                          var src, dest, stop, stop4;
                          src = $2 + 168;
                          dest = $2 + 164;
                          stop = src + 4;
                          if (dest % 4 == src % 4 && 4 > 8) {
                            while (src % 4 !== 0 && src < stop) {
                              HEAP8[dest++] = HEAP8[src++];
                            }
                            src >>= 2;
                            dest >>= 2;
                            stop4 = stop >> 2;
                            while (src < stop4) {
                              HEAP32[dest++] = HEAP32[src++];
                            }
                            src <<= 2;
                            dest <<= 2;
                          }
                          while (src < stop) {
                            HEAP8[dest++] = HEAP8[src++];
                          }
                          HEAP32[$2 + 108 >> 2] = $refIndex;
                          HEAP32[$2 + 112 >> 2] = $refIndex;
                          HEAP32[$2 + 124 >> 2] = $tmp;
                          HEAP32[$2 + 128 >> 2] = $tmp;
                          $1 = 0;
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $305 = $1;
  STACKTOP = __stackBase__;
  return $305;
  return null;
}
_MvPrediction16x8["X"] = 1;
function _MvPrediction8x16($pMb, $mbPred, $dpb) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 44;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $mv = __stackBase__;
  var $mvPred = __stackBase__ + 4;
  var $a = __stackBase__ + 8;
  var $refIndex;
  var $tmp;
  $2 = $pMb;
  $3 = $mbPred;
  $4 = $dpb;
  var $8 = $mv;
  var src, dest, stop, stop4;
  src = $3 + 148;
  dest = $8;
  stop = src + 4;
  if (dest % 4 == src % 4 && 4 > 8) {
    while (src % 4 !== 0 && src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    src >>= 2;
    dest >>= 2;
    stop4 = stop >> 2;
    while (src < stop4) {
      HEAP32[dest++] = HEAP32[src++];
    }
    src <<= 2;
    dest <<= 2;
  }
  while (src < stop) {
    HEAP8[dest++] = HEAP8[src++];
  }
  $refIndex = HEAP32[$3 + 132 >> 2];
  var $16 = HEAP32[$2 + 4 >> 2];
  var $19 = HEAP32[$2 + 200 >> 2];
  var $20 = $a;
  _GetInterNeighbour($16, $19, $20, 5);
  if (HEAP32[$a + 4 >> 2] == $refIndex) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $26$$31$33 : do {
    if (__label__ == 1) {
      var $29 = $mvPred;
      var src, dest, stop, stop4;
      src = $a + 8;
      dest = $29;
      stop = src + 4;
      if (dest % 4 == src % 4 && 4 > 8) {
        while (src % 4 !== 0 && src < stop) {
          HEAP8[dest++] = HEAP8[src++];
        }
        src >>= 2;
        dest >>= 2;
        stop4 = stop >> 2;
        while (src < stop4) {
          HEAP32[dest++] = HEAP32[src++];
        }
        src <<= 2;
        dest <<= 2;
      }
      while (src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
    } else if (__label__ == 2) {
      var $34 = HEAP32[$2 + 4 >> 2];
      var $37 = HEAP32[$2 + 204 >> 2];
      var $39 = $a + 12;
      _GetInterNeighbour($34, $37, $39, 10);
      var $42 = HEAP32[$2 + 4 >> 2];
      var $45 = HEAP32[$2 + 204 >> 2];
      var $47 = $a + 24;
      _GetInterNeighbour($42, $45, $47, 14);
      if (HEAP32[$a + 24 >> 2] != 0) {
        __label__ = 4;
      } else {
        __label__ = 3;
      }
      $61$$52$36 : do {
        if (__label__ == 3) {
          var $55 = HEAP32[$2 + 4 >> 2];
          var $58 = HEAP32[$2 + 212 >> 2];
          var $60 = $a + 24;
          _GetInterNeighbour($55, $58, $60, 15);
        }
      } while (0);
      var $62 = $a;
      _GetPredictionMv($mvPred, $62, $refIndex);
    }
  } while (0);
  var $72 = HEAP16[$mv >> 1] + HEAP16[$mvPred >> 1] & 65535;
  HEAP16[$mv >> 1] = $72;
  var $80 = HEAP16[$mv + 2 >> 1] + HEAP16[$mvPred + 2 >> 1] & 65535;
  HEAP16[$mv + 2 >> 1] = $80;
  if (HEAP16[$mv >> 1] + 8192 >= 16384) {
    __label__ = 6;
  } else {
    __label__ = 7;
  }
  $86$$87$40 : do {
    if (__label__ == 6) {
      $1 = 1;
    } else if (__label__ == 7) {
      if (HEAP16[$mv + 2 >> 1] + 2048 >= 4096) {
        __label__ = 8;
      } else {
        __label__ = 9;
      }
      $93$$94$43 : do {
        if (__label__ == 8) {
          $1 = 1;
        } else if (__label__ == 9) {
          var $97 = _h264bsdGetRefPicData($4, $refIndex);
          $tmp = $97;
          if ($tmp == 0) {
            __label__ = 10;
          } else {
            __label__ = 11;
          }
          $100$$101$46 : do {
            if (__label__ == 10) {
              $1 = 1;
            } else if (__label__ == 11) {
              var src, dest, stop, stop4;
              src = $mv;
              dest = $2 + 176;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $2 + 176;
              dest = $2 + 172;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $2 + 172;
              dest = $2 + 168;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $2 + 168;
              dest = $2 + 164;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $2 + 164;
              dest = $2 + 144;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $2 + 144;
              dest = $2 + 140;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $2 + 140;
              dest = $2 + 136;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $2 + 136;
              dest = $2 + 132;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              HEAP32[$2 + 100 >> 2] = $refIndex;
              HEAP32[$2 + 108 >> 2] = $refIndex;
              HEAP32[$2 + 116 >> 2] = $tmp;
              HEAP32[$2 + 124 >> 2] = $tmp;
              var $161 = $mv;
              var src, dest, stop, stop4;
              src = $3 + 152;
              dest = $161;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              $refIndex = HEAP32[$3 + 136 >> 2];
              var $169 = HEAP32[$2 + 4 >> 2];
              var $172 = HEAP32[$2 + 208 >> 2];
              var $174 = $a + 24;
              _GetInterNeighbour($169, $172, $174, 10);
              if (HEAP32[$a + 24 >> 2] != 0) {
                __label__ = 13;
              } else {
                __label__ = 12;
              }
              $188$$179$49 : do {
                if (__label__ == 12) {
                  var $182 = HEAP32[$2 + 4 >> 2];
                  var $185 = HEAP32[$2 + 204 >> 2];
                  var $187 = $a + 24;
                  _GetInterNeighbour($182, $185, $187, 11);
                }
              } while (0);
              if (HEAP32[$a + 28 >> 2] == $refIndex) {
                __label__ = 14;
              } else {
                __label__ = 15;
              }
              $194$$199$52 : do {
                if (__label__ == 14) {
                  var $197 = $mvPred;
                  var src, dest, stop, stop4;
                  src = $a + 32;
                  dest = $197;
                  stop = src + 4;
                  if (dest % 4 == src % 4 && 4 > 8) {
                    while (src % 4 !== 0 && src < stop) {
                      HEAP8[dest++] = HEAP8[src++];
                    }
                    src >>= 2;
                    dest >>= 2;
                    stop4 = stop >> 2;
                    while (src < stop4) {
                      HEAP32[dest++] = HEAP32[src++];
                    }
                    src <<= 2;
                    dest <<= 2;
                  }
                  while (src < stop) {
                    HEAP8[dest++] = HEAP8[src++];
                  }
                } else if (__label__ == 15) {
                  HEAP32[$a >> 2] = 1;
                  var $205 = HEAP32[$2 + 100 >> 2];
                  HEAP32[$a + 4 >> 2] = $205;
                  var $213 = $a + 8;
                  var src, dest, stop, stop4;
                  src = $2 + 132;
                  dest = $213;
                  stop = src + 4;
                  if (dest % 4 == src % 4 && 4 > 8) {
                    while (src % 4 !== 0 && src < stop) {
                      HEAP8[dest++] = HEAP8[src++];
                    }
                    src >>= 2;
                    dest >>= 2;
                    stop4 = stop >> 2;
                    while (src < stop4) {
                      HEAP32[dest++] = HEAP32[src++];
                    }
                    src <<= 2;
                    dest <<= 2;
                  }
                  while (src < stop) {
                    HEAP8[dest++] = HEAP8[src++];
                  }
                  var $217 = HEAP32[$2 + 4 >> 2];
                  var $220 = HEAP32[$2 + 204 >> 2];
                  var $222 = $a + 12;
                  _GetInterNeighbour($217, $220, $222, 14);
                  var $223 = $a;
                  _GetPredictionMv($mvPred, $223, $refIndex);
                }
              } while (0);
              var $233 = HEAP16[$mv >> 1] + HEAP16[$mvPred >> 1] & 65535;
              HEAP16[$mv >> 1] = $233;
              var $241 = HEAP16[$mv + 2 >> 1] + HEAP16[$mvPred + 2 >> 1] & 65535;
              HEAP16[$mv + 2 >> 1] = $241;
              if (HEAP16[$mv >> 1] + 8192 >= 16384) {
                __label__ = 17;
              } else {
                __label__ = 18;
              }
              $247$$248$56 : do {
                if (__label__ == 17) {
                  $1 = 1;
                } else if (__label__ == 18) {
                  if (HEAP16[$mv + 2 >> 1] + 2048 >= 4096) {
                    __label__ = 19;
                  } else {
                    __label__ = 20;
                  }
                  $254$$255$59 : do {
                    if (__label__ == 19) {
                      $1 = 1;
                    } else if (__label__ == 20) {
                      var $258 = _h264bsdGetRefPicData($4, $refIndex);
                      $tmp = $258;
                      if ($tmp == 0) {
                        __label__ = 21;
                      } else {
                        __label__ = 22;
                      }
                      $261$$262$62 : do {
                        if (__label__ == 21) {
                          $1 = 1;
                        } else if (__label__ == 22) {
                          var src, dest, stop, stop4;
                          src = $mv;
                          dest = $2 + 192;
                          stop = src + 4;
                          if (dest % 4 == src % 4 && 4 > 8) {
                            while (src % 4 !== 0 && src < stop) {
                              HEAP8[dest++] = HEAP8[src++];
                            }
                            src >>= 2;
                            dest >>= 2;
                            stop4 = stop >> 2;
                            while (src < stop4) {
                              HEAP32[dest++] = HEAP32[src++];
                            }
                            src <<= 2;
                            dest <<= 2;
                          }
                          while (src < stop) {
                            HEAP8[dest++] = HEAP8[src++];
                          }
                          var src, dest, stop, stop4;
                          src = $2 + 192;
                          dest = $2 + 188;
                          stop = src + 4;
                          if (dest % 4 == src % 4 && 4 > 8) {
                            while (src % 4 !== 0 && src < stop) {
                              HEAP8[dest++] = HEAP8[src++];
                            }
                            src >>= 2;
                            dest >>= 2;
                            stop4 = stop >> 2;
                            while (src < stop4) {
                              HEAP32[dest++] = HEAP32[src++];
                            }
                            src <<= 2;
                            dest <<= 2;
                          }
                          while (src < stop) {
                            HEAP8[dest++] = HEAP8[src++];
                          }
                          var src, dest, stop, stop4;
                          src = $2 + 188;
                          dest = $2 + 184;
                          stop = src + 4;
                          if (dest % 4 == src % 4 && 4 > 8) {
                            while (src % 4 !== 0 && src < stop) {
                              HEAP8[dest++] = HEAP8[src++];
                            }
                            src >>= 2;
                            dest >>= 2;
                            stop4 = stop >> 2;
                            while (src < stop4) {
                              HEAP32[dest++] = HEAP32[src++];
                            }
                            src <<= 2;
                            dest <<= 2;
                          }
                          while (src < stop) {
                            HEAP8[dest++] = HEAP8[src++];
                          }
                          var src, dest, stop, stop4;
                          src = $2 + 184;
                          dest = $2 + 180;
                          stop = src + 4;
                          if (dest % 4 == src % 4 && 4 > 8) {
                            while (src % 4 !== 0 && src < stop) {
                              HEAP8[dest++] = HEAP8[src++];
                            }
                            src >>= 2;
                            dest >>= 2;
                            stop4 = stop >> 2;
                            while (src < stop4) {
                              HEAP32[dest++] = HEAP32[src++];
                            }
                            src <<= 2;
                            dest <<= 2;
                          }
                          while (src < stop) {
                            HEAP8[dest++] = HEAP8[src++];
                          }
                          var src, dest, stop, stop4;
                          src = $2 + 180;
                          dest = $2 + 160;
                          stop = src + 4;
                          if (dest % 4 == src % 4 && 4 > 8) {
                            while (src % 4 !== 0 && src < stop) {
                              HEAP8[dest++] = HEAP8[src++];
                            }
                            src >>= 2;
                            dest >>= 2;
                            stop4 = stop >> 2;
                            while (src < stop4) {
                              HEAP32[dest++] = HEAP32[src++];
                            }
                            src <<= 2;
                            dest <<= 2;
                          }
                          while (src < stop) {
                            HEAP8[dest++] = HEAP8[src++];
                          }
                          var src, dest, stop, stop4;
                          src = $2 + 160;
                          dest = $2 + 156;
                          stop = src + 4;
                          if (dest % 4 == src % 4 && 4 > 8) {
                            while (src % 4 !== 0 && src < stop) {
                              HEAP8[dest++] = HEAP8[src++];
                            }
                            src >>= 2;
                            dest >>= 2;
                            stop4 = stop >> 2;
                            while (src < stop4) {
                              HEAP32[dest++] = HEAP32[src++];
                            }
                            src <<= 2;
                            dest <<= 2;
                          }
                          while (src < stop) {
                            HEAP8[dest++] = HEAP8[src++];
                          }
                          var src, dest, stop, stop4;
                          src = $2 + 156;
                          dest = $2 + 152;
                          stop = src + 4;
                          if (dest % 4 == src % 4 && 4 > 8) {
                            while (src % 4 !== 0 && src < stop) {
                              HEAP8[dest++] = HEAP8[src++];
                            }
                            src >>= 2;
                            dest >>= 2;
                            stop4 = stop >> 2;
                            while (src < stop4) {
                              HEAP32[dest++] = HEAP32[src++];
                            }
                            src <<= 2;
                            dest <<= 2;
                          }
                          while (src < stop) {
                            HEAP8[dest++] = HEAP8[src++];
                          }
                          var src, dest, stop, stop4;
                          src = $2 + 152;
                          dest = $2 + 148;
                          stop = src + 4;
                          if (dest % 4 == src % 4 && 4 > 8) {
                            while (src % 4 !== 0 && src < stop) {
                              HEAP8[dest++] = HEAP8[src++];
                            }
                            src >>= 2;
                            dest >>= 2;
                            stop4 = stop >> 2;
                            while (src < stop4) {
                              HEAP32[dest++] = HEAP32[src++];
                            }
                            src <<= 2;
                            dest <<= 2;
                          }
                          while (src < stop) {
                            HEAP8[dest++] = HEAP8[src++];
                          }
                          HEAP32[$2 + 104 >> 2] = $refIndex;
                          HEAP32[$2 + 112 >> 2] = $refIndex;
                          HEAP32[$2 + 120 >> 2] = $tmp;
                          HEAP32[$2 + 128 >> 2] = $tmp;
                          $1 = 0;
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $320 = $1;
  STACKTOP = __stackBase__;
  return $320;
  return null;
}
_MvPrediction8x16["X"] = 1;
function _MvPrediction8x8($pMb, $subMbPred, $dpb) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $i;
  var $j;
  var $numSubMbPart;
  $2 = $pMb;
  $3 = $subMbPred;
  $4 = $dpb;
  $i = 0;
  $5$67 : while (1) {
    if (!($i < 4)) {
      __label__ = 12;
      break $5$67;
    }
    var $13 = HEAP32[$3 + ($i << 2) >> 2];
    var $14 = _h264bsdNumSubMbPart($13);
    $numSubMbPart = $14;
    var $19 = HEAP32[$3 + 16 + ($i << 2) >> 2];
    HEAP32[$2 + 100 + ($i << 2) >> 2] = $19;
    var $29 = HEAP32[$3 + 16 + ($i << 2) >> 2];
    var $30 = _h264bsdGetRefPicData($4, $29);
    HEAP32[$2 + 116 + ($i << 2) >> 2] = $30;
    if (HEAP32[$2 + 116 + ($i << 2) >> 2] == 0) {
      __label__ = 3;
      break $5$67;
    }
    $j = 0;
    $43$71 : while (1) {
      if (!($j < $numSubMbPart)) {
        __label__ = 10;
        break $43$71;
      }
      var $52 = _MvPrediction($2, $3, $i, $j);
      if ($52 != 0) {
        __label__ = 7;
        break $5$67;
      }
      var $58 = $j + 1;
      $j = $58;
    }
    var $62 = $i + 1;
    $i = $62;
  }
  $63$$41$$54$78 : do {
    if (__label__ == 12) {
      $1 = 0;
    } else if (__label__ == 3) {
      $1 = 1;
    } else if (__label__ == 7) {
      $1 = 1;
    }
  } while (0);
  var $65 = $1;
  return $65;
  return null;
}
_MvPrediction8x8["X"] = 1;
function _MedianFilter($a, $b, $c) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $max;
  var $min;
  var $med;
  $1 = $a;
  $2 = $b;
  $3 = $c;
  $med = $1;
  $min = $1;
  $max = $1;
  if ($2 > $max) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $8$$10$47 : do {
    if (__label__ == 1) {
      $max = $2;
    } else if (__label__ == 2) {
      if ($2 < $min) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $14$$16$50 : do {
        if (__label__ == 3) {
          $min = $2;
        }
      } while (0);
    }
  } while (0);
  if ($3 > $max) {
    __label__ = 6;
  } else {
    __label__ = 7;
  }
  $21$$23$54 : do {
    if (__label__ == 6) {
      $med = $max;
    } else if (__label__ == 7) {
      if ($3 < $min) {
        __label__ = 8;
      } else {
        __label__ = 9;
      }
      $27$$29$57 : do {
        if (__label__ == 8) {
          $med = $min;
        } else if (__label__ == 9) {
          $med = $3;
        }
      } while (0);
    }
  } while (0);
  var $33 = $med;
  return $33;
  return null;
}
function _GetInterNeighbour($sliceId, $nMb, $n, $index) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $tmp;
  var $tmpMv = __stackBase__;
  $1 = $sliceId;
  $2 = $nMb;
  $3 = $n;
  $4 = $index;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = -1;
  HEAP16[$3 + 10 >> 1] = 0;
  HEAP16[$3 + 8 >> 1] = 0;
  if ($2 != 0) {
    __label__ = 1;
  } else {
    __label__ = 5;
  }
  $17$$52$19 : do {
    if (__label__ == 1) {
      if (!($1 == HEAP32[$2 + 4 >> 2])) {
        __label__ = 5;
        break $17$$52$19;
      }
      $tmp = HEAP32[$2 >> 2];
      HEAP32[$3 >> 2] = 1;
      if ($tmp <= 5) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $31$$51$22 : do {
        if (__label__ == 3) {
          var $36 = $tmpMv;
          var src, dest, stop, stop4;
          src = $2 + 132 + ($4 << 2);
          dest = $36;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          $tmp = HEAP32[$2 + 100 + ($4 >>> 2 << 2) >> 2];
          HEAP32[$3 + 4 >> 2] = $tmp;
          var src, dest, stop, stop4;
          src = $tmpMv;
          dest = $3 + 8;
          stop = src + 4;
          if (dest % 4 == src % 4 && 4 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        }
      } while (0);
    }
  } while (0);
  STACKTOP = __stackBase__;
  return;
  return;
}
_GetInterNeighbour["X"] = 1;
function _h264bsdInterpolateChromaHor($pRef, $predPartChroma, $x0, $y0, $width, $height, $xFrac, $chromaPartWidth, $chromaPartHeight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 144;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  var $9;
  var $x;
  var $y;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $tmp4;
  var $c;
  var $val;
  var $ptrA;
  var $cbr;
  var $comp;
  var $block = __stackBase__;
  $1 = $pRef;
  $2 = $predPartChroma;
  $3 = $x0;
  $4 = $y0;
  $5 = $width;
  $6 = $height;
  $7 = $xFrac;
  $8 = $chromaPartWidth;
  $9 = $chromaPartHeight;
  if ($3 < 0) {
    __label__ = 4;
  } else {
    __label__ = 1;
  }
  $28$$12$63 : do {
    if (__label__ == 1) {
      if ($8 + ($3 + 1) > $5) {
        __label__ = 4;
        break $28$$12$63;
      }
      if ($4 < 0) {
        __label__ = 4;
        break $28$$12$63;
      }
      if ($4 + $9 > $6) {
        __label__ = 4;
        break $28$$12$63;
      } else {
        __label__ = 5;
        break $28$$12$63;
      }
    }
  } while (0);
  $28$$65$67 : do {
    if (__label__ == 4) {
      var $30 = $block;
      _h264bsdFillBlock($1, $30, $3, $4, $5, $6, $8 + 1, $9, $8 + 1);
      var $44 = $1 + $5 * $6;
      $1 = $44;
      var $51 = $block + ($8 + 1) * $9;
      _h264bsdFillBlock($1, $51, $3, $4, $5, $6, $8 + 1, $9, $8 + 1);
      $1 = $block;
      $3 = 0;
      $4 = 0;
      $5 = $8 + 1;
      $6 = $9;
    }
  } while (0);
  $val = 8 - $7;
  $comp = 0;
  $68$70 : while (1) {
    if (!($comp <= 1)) {
      __label__ = 17;
      break $68$70;
    }
    $ptrA = $1 + ($comp * $6 + $4) * $5 + $3;
    $cbr = $2 + ($comp << 3 << 3);
    $y = $9 >>> 1;
    $90$73 : while (1) {
      if (!($y != 0)) {
        __label__ = 15;
        break $90$73;
      }
      $x = $8 >>> 1;
      $96$76 : while (1) {
        if (!($x != 0)) {
          __label__ = 13;
          break $96$76;
        }
        $tmp1 = HEAPU8[$ptrA + $5];
        var $105 = $ptrA;
        var $106 = $105 + 1;
        $ptrA = $106;
        $tmp2 = HEAPU8[$105];
        $tmp3 = HEAPU8[$ptrA + $5];
        var $114 = $ptrA;
        var $115 = $114 + 1;
        $ptrA = $115;
        $tmp4 = HEAPU8[$114];
        $c = ($val * $tmp1 + $7 * $tmp3 << 3) + 32;
        var $128 = $c >>> 6;
        $c = $128;
        HEAP8[$cbr + 8] = $c & 255;
        $c = ($val * $tmp2 + $7 * $tmp4 << 3) + 32;
        var $143 = $c >>> 6;
        $c = $143;
        var $146 = $cbr;
        var $147 = $146 + 1;
        $cbr = $147;
        HEAP8[$146] = $c & 255;
        $tmp1 = HEAPU8[$ptrA + $5];
        $tmp2 = HEAPU8[$ptrA];
        $c = ($val * $tmp3 + $7 * $tmp1 << 3) + 32;
        var $166 = $c >>> 6;
        $c = $166;
        HEAP8[$cbr + 8] = $c & 255;
        $c = ($val * $tmp4 + $7 * $tmp2 << 3) + 32;
        var $181 = $c >>> 6;
        $c = $181;
        var $184 = $cbr;
        var $185 = $184 + 1;
        $cbr = $185;
        HEAP8[$184] = $c & 255;
        var $188 = $x - 1;
        $x = $188;
      }
      var $193 = $cbr + (16 - $8);
      $cbr = $193;
      var $199 = $ptrA + (($5 << 1) - $8);
      $ptrA = $199;
      var $202 = $y - 1;
      $y = $202;
    }
    var $206 = $comp + 1;
    $comp = $206;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
_h264bsdInterpolateChromaHor["X"] = 1;
function _MvPrediction($pMb, $subMbPred, $mbPartIdx, $subMbPartIdx) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 44;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $mv = __stackBase__;
  var $mvPred = __stackBase__ + 4;
  var $refIndex;
  var $subMbPartMode;
  var $n;
  var $nMb;
  var $a = __stackBase__ + 8;
  $2 = $pMb;
  $3 = $subMbPred;
  $4 = $mbPartIdx;
  $5 = $subMbPartIdx;
  var $12 = $mv;
  var src, dest, stop, stop4;
  src = $3 + 32 + ($4 << 4) + ($5 << 2);
  dest = $12;
  stop = src + 4;
  if (dest % 4 == src % 4 && 4 > 8) {
    while (src % 4 !== 0 && src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    src >>= 2;
    dest >>= 2;
    stop4 = stop >> 2;
    while (src < stop4) {
      HEAP32[dest++] = HEAP32[src++];
    }
    src <<= 2;
    dest <<= 2;
  }
  while (src < stop) {
    HEAP8[dest++] = HEAP8[src++];
  }
  var $18 = HEAP32[$3 + ($4 << 2) >> 2];
  var $19 = _h264bsdSubMbPartMode($18);
  $subMbPartMode = $19;
  $refIndex = HEAP32[$3 + 16 + ($4 << 2) >> 2];
  $n = _N_A_SUB_PART + ($4 << 7) + ($subMbPartMode << 5) + ($5 << 3);
  var $35 = HEAP32[$n >> 2];
  var $36 = _h264bsdGetNeighbourMb($2, $35);
  $nMb = $36;
  var $39 = HEAP32[$2 + 4 >> 2];
  var $41 = $a;
  var $45 = HEAPU8[$n + 4];
  _GetInterNeighbour($39, $nMb, $41, $45);
  $n = _N_B_SUB_PART + ($4 << 7) + ($subMbPartMode << 5) + ($5 << 3);
  var $56 = HEAP32[$n >> 2];
  var $57 = _h264bsdGetNeighbourMb($2, $56);
  $nMb = $57;
  var $60 = HEAP32[$2 + 4 >> 2];
  var $63 = $a + 12;
  var $67 = HEAPU8[$n + 4];
  _GetInterNeighbour($60, $nMb, $63, $67);
  $n = _N_C_SUB_PART + ($4 << 7) + ($subMbPartMode << 5) + ($5 << 3);
  var $78 = HEAP32[$n >> 2];
  var $79 = _h264bsdGetNeighbourMb($2, $78);
  $nMb = $79;
  var $82 = HEAP32[$2 + 4 >> 2];
  var $85 = $a + 24;
  var $89 = HEAPU8[$n + 4];
  _GetInterNeighbour($82, $nMb, $85, $89);
  if (HEAP32[$a + 24 >> 2] != 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $117$$94$2 : do {
    if (__label__ == 1) {
      $n = _N_D_SUB_PART + ($4 << 7) + ($subMbPartMode << 5) + ($5 << 3);
      var $105 = HEAP32[$n >> 2];
      var $106 = _h264bsdGetNeighbourMb($2, $105);
      $nMb = $106;
      var $109 = HEAP32[$2 + 4 >> 2];
      var $112 = $a + 24;
      var $116 = HEAPU8[$n + 4];
      _GetInterNeighbour($109, $nMb, $112, $116);
    }
  } while (0);
  var $118 = $a;
  _GetPredictionMv($mvPred, $118, $refIndex);
  var $127 = HEAP16[$mv >> 1] + HEAP16[$mvPred >> 1] & 65535;
  HEAP16[$mv >> 1] = $127;
  var $135 = HEAP16[$mv + 2 >> 1] + HEAP16[$mvPred + 2 >> 1] & 65535;
  HEAP16[$mv + 2 >> 1] = $135;
  if (HEAP16[$mv >> 1] + 8192 >= 16384) {
    __label__ = 3;
  } else {
    __label__ = 4;
  }
  $141$$142$5 : do {
    if (__label__ == 3) {
      $1 = 1;
    } else if (__label__ == 4) {
      if (HEAP16[$mv + 2 >> 1] + 2048 >= 4096) {
        __label__ = 5;
      } else {
        __label__ = 6;
      }
      $148$$149$8 : do {
        if (__label__ == 5) {
          $1 = 1;
        } else if (__label__ == 6) {
          var $150 = $subMbPartMode;
          if ($150 == 0) {
            __label__ = 7;
          } else if ($150 == 1) {
            __label__ = 8;
          } else if ($150 == 2) {
            __label__ = 9;
          } else if ($150 == 3) {
            __label__ = 10;
          } else {
            __label__ = 11;
          }
          $235$$151$$183$$205$$225$11 : do {
            if (__label__ == 7) {
              var src, dest, stop, stop4;
              src = $mv;
              dest = $2 + 132 + ($4 << 2 << 2);
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $mv;
              dest = $2 + 132 + (($4 << 2) + 1 << 2);
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $mv;
              dest = $2 + 132 + (($4 << 2) + 2 << 2);
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $mv;
              dest = $2 + 132 + (($4 << 2) + 3 << 2);
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
            } else if (__label__ == 8) {
              var src, dest, stop, stop4;
              src = $mv;
              dest = $2 + 132 + (($4 << 2) + ($5 << 1) << 2);
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $mv;
              dest = $2 + 132 + (($4 << 2) + ($5 << 1) + 1 << 2);
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
            } else if (__label__ == 9) {
              var src, dest, stop, stop4;
              src = $mv;
              dest = $2 + 132 + (($4 << 2) + $5 << 2);
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
              var src, dest, stop, stop4;
              src = $mv;
              dest = $2 + 132 + (($4 << 2) + $5 + 2 << 2);
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
            } else if (__label__ == 10) {
              var src, dest, stop, stop4;
              src = $mv;
              dest = $2 + 132 + (($4 << 2) + $5 << 2);
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
            }
          } while (0);
          $1 = 0;
        }
      } while (0);
    }
  } while (0);
  var $237 = $1;
  STACKTOP = __stackBase__;
  return $237;
  return null;
}
_MvPrediction["X"] = 1;
function _GetPredictionMv($mv, $a, $refIndex) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $isA;
  var $isB;
  var $isC;
  $1 = $mv;
  $2 = $a;
  $3 = $refIndex;
  if (HEAP32[$2 + 12 >> 2] != 0) {
    __label__ = 3;
  } else {
    __label__ = 1;
  }
  $21$$9$27 : do {
    if (__label__ == 1) {
      if (HEAP32[$2 + 24 >> 2] != 0) {
        __label__ = 3;
        break $21$$9$27;
      }
      if (!(HEAP32[$2 >> 2] != 0)) {
        __label__ = 3;
        break $21$$9$27;
      }
      var src, dest, stop, stop4;
      src = $2 + 8;
      dest = $1;
      stop = src + 4;
      if (dest % 4 == src % 4 && 4 > 8) {
        while (src % 4 !== 0 && src < stop) {
          HEAP8[dest++] = HEAP8[src++];
        }
        src >>= 2;
        dest >>= 2;
        stop4 = stop >> 2;
        while (src < stop4) {
          HEAP32[dest++] = HEAP32[src++];
        }
        src <<= 2;
        dest <<= 2;
      }
      while (src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
      __label__ = 14;
      break $21$$9$27;
    }
  } while (0);
  $21$$131$31 : do {
    if (__label__ == 3) {
      var $28 = HEAP32[$2 + 4 >> 2] == $3 ? 1 : 0;
      $isA = $28;
      var $35 = HEAP32[$2 + 16 >> 2] == $3 ? 1 : 0;
      $isB = $35;
      var $42 = HEAP32[$2 + 28 >> 2] == $3 ? 1 : 0;
      $isC = $42;
      if ($isA + $isB + $isC != 1) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      $49$$94$33 : do {
        if (__label__ == 4) {
          var $55 = HEAP16[$2 + 8 >> 1];
          var $61 = HEAP16[$2 + 20 >> 1];
          var $67 = HEAP16[$2 + 32 >> 1];
          var $68 = _MedianFilter($55, $61, $67);
          var $69 = $68 & 65535;
          HEAP16[$1 >> 1] = $69;
          var $77 = HEAP16[$2 + 10 >> 1];
          var $83 = HEAP16[$2 + 22 >> 1];
          var $89 = HEAP16[$2 + 34 >> 1];
          var $90 = _MedianFilter($77, $83, $89);
          var $91 = $90 & 65535;
          HEAP16[$1 + 2 >> 1] = $91;
        } else if (__label__ == 5) {
          if ($isA != 0) {
            __label__ = 6;
          } else {
            __label__ = 7;
          }
          $97$$104$36 : do {
            if (__label__ == 6) {
              var src, dest, stop, stop4;
              src = $2 + 8;
              dest = $1;
              stop = src + 4;
              if (dest % 4 == src % 4 && 4 > 8) {
                while (src % 4 !== 0 && src < stop) {
                  HEAP8[dest++] = HEAP8[src++];
                }
                src >>= 2;
                dest >>= 2;
                stop4 = stop >> 2;
                while (src < stop4) {
                  HEAP32[dest++] = HEAP32[src++];
                }
                src <<= 2;
                dest <<= 2;
              }
              while (src < stop) {
                HEAP8[dest++] = HEAP8[src++];
              }
            } else if (__label__ == 7) {
              if ($isB != 0) {
                __label__ = 8;
              } else {
                __label__ = 9;
              }
              $107$$114$39 : do {
                if (__label__ == 8) {
                  var src, dest, stop, stop4;
                  src = $2 + 20;
                  dest = $1;
                  stop = src + 4;
                  if (dest % 4 == src % 4 && 4 > 8) {
                    while (src % 4 !== 0 && src < stop) {
                      HEAP8[dest++] = HEAP8[src++];
                    }
                    src >>= 2;
                    dest >>= 2;
                    stop4 = stop >> 2;
                    while (src < stop4) {
                      HEAP32[dest++] = HEAP32[src++];
                    }
                    src <<= 2;
                    dest <<= 2;
                  }
                  while (src < stop) {
                    HEAP8[dest++] = HEAP8[src++];
                  }
                } else if (__label__ == 9) {
                  var src, dest, stop, stop4;
                  src = $2 + 32;
                  dest = $1;
                  stop = src + 4;
                  if (dest % 4 == src % 4 && 4 > 8) {
                    while (src % 4 !== 0 && src < stop) {
                      HEAP8[dest++] = HEAP8[src++];
                    }
                    src >>= 2;
                    dest >>= 2;
                    stop4 = stop >> 2;
                    while (src < stop4) {
                      HEAP32[dest++] = HEAP32[src++];
                    }
                    src <<= 2;
                    dest <<= 2;
                  }
                  while (src < stop) {
                    HEAP8[dest++] = HEAP8[src++];
                  }
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  return;
  return;
}
_GetPredictionMv["X"] = 1;
function _h264bsdFillBlock($ref, $fill, $x0, $y0, $width, $height, $blockWidth, $blockHeight, $fillScanLength) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  var $9;
  var $xstop;
  var $ystop;
  var $fp;
  var $left;
  var $x;
  var $right;
  var $top;
  var $y;
  var $bottom;
  $1 = $ref;
  $2 = $fill;
  $3 = $x0;
  $4 = $y0;
  $5 = $width;
  $6 = $height;
  $7 = $blockWidth;
  $8 = $blockHeight;
  $9 = $fillScanLength;
  $xstop = $3 + $7;
  $ystop = $4 + $8;
  if ($3 >= 0) {
    __label__ = 1;
  } else {
    __label__ = 3;
  }
  $18$$23$2 : do {
    if (__label__ == 1) {
      if (!($xstop <= $5)) {
        __label__ = 3;
        break $18$$23$2;
      }
      $fp = 2;
      __label__ = 4;
      break $18$$23$2;
    }
  } while (0);
  $24$$23$5 : do {
    if (__label__ == 3) {
      $fp = 4;
    }
  } while (0);
  if ($ystop < 0) {
    __label__ = 5;
  } else {
    __label__ = 6;
  }
  $27$$30$8 : do {
    if (__label__ == 5) {
      $4 = -$8;
    }
  } while (0);
  if ($xstop < 0) {
    __label__ = 7;
  } else {
    __label__ = 8;
  }
  $33$$36$11 : do {
    if (__label__ == 7) {
      $3 = -$7;
    }
  } while (0);
  if ($4 > $6) {
    __label__ = 9;
  } else {
    __label__ = 10;
  }
  $40$$42$14 : do {
    if (__label__ == 9) {
      $4 = $6;
    }
  } while (0);
  if ($3 > $5) {
    __label__ = 11;
  } else {
    __label__ = 12;
  }
  $46$$48$17 : do {
    if (__label__ == 11) {
      $3 = $5;
    }
  } while (0);
  $xstop = $3 + $7;
  $ystop = $4 + $8;
  if ($3 > 0) {
    __label__ = 13;
  } else {
    __label__ = 14;
  }
  $57$$61$20 : do {
    if (__label__ == 13) {
      var $60 = $1 + $3;
      $1 = $60;
    }
  } while (0);
  if ($4 > 0) {
    __label__ = 15;
  } else {
    __label__ = 16;
  }
  $64$$70$23 : do {
    if (__label__ == 15) {
      var $69 = $1 + $4 * $5;
      $1 = $69;
    }
  } while (0);
  if ($3 < 0) {
    __label__ = 17;
  } else {
    __label__ = 18;
  }
  $73$$76$26 : do {
    if (__label__ == 17) {
      var $78 = -$3;
    } else if (__label__ == 18) {
      var $78 = 0;
    }
  } while (0);
  var $78;
  $left = $78;
  if ($xstop > $5) {
    __label__ = 20;
  } else {
    __label__ = 21;
  }
  $82$$86$30 : do {
    if (__label__ == 20) {
      var $88 = $xstop - $5;
    } else if (__label__ == 21) {
      var $88 = 0;
    }
  } while (0);
  var $88;
  $right = $88;
  $x = $7 - $left - $right;
  if ($4 < 0) {
    __label__ = 23;
  } else {
    __label__ = 24;
  }
  $96$$99$34 : do {
    if (__label__ == 23) {
      var $101 = -$4;
    } else if (__label__ == 24) {
      var $101 = 0;
    }
  } while (0);
  var $101;
  $top = $101;
  if ($ystop > $6) {
    __label__ = 26;
  } else {
    __label__ = 27;
  }
  $105$$109$38 : do {
    if (__label__ == 26) {
      var $111 = $ystop - $6;
    } else if (__label__ == 27) {
      var $111 = 0;
    }
  } while (0);
  var $111;
  $bottom = $111;
  $y = $8 - $top - $bottom;
  $117$42 : while (1) {
    if (!($top != 0)) {
      __label__ = 32;
      break $117$42;
    }
    var $121 = $fp;
    FUNCTION_TABLE[$121]($1, $2, $left, $x, $right);
    var $129 = $2 + $9;
    $2 = $129;
    var $132 = $top - 1;
    $top = $132;
  }
  $134$47 : while (1) {
    if (!($y != 0)) {
      __label__ = 36;
      break $134$47;
    }
    var $138 = $fp;
    FUNCTION_TABLE[$138]($1, $2, $left, $x, $right);
    var $146 = $1 + $5;
    $1 = $146;
    var $149 = $2 + $9;
    $2 = $149;
    var $152 = $y - 1;
    $y = $152;
  }
  var $157 = $1 + -$5;
  $1 = $157;
  $158$52 : while (1) {
    if (!($bottom != 0)) {
      __label__ = 40;
      break $158$52;
    }
    var $162 = $fp;
    FUNCTION_TABLE[$162]($1, $2, $left, $x, $right);
    var $170 = $2 + $9;
    $2 = $170;
    var $173 = $bottom - 1;
    $bottom = $173;
  }
  return;
  return;
}
_h264bsdFillBlock["X"] = 1;
function _h264bsdInterpolateChromaVer($pRef, $predPartChroma, $x0, $y0, $width, $height, $yFrac, $chromaPartWidth, $chromaPartHeight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 144;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  var $9;
  var $x;
  var $y;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $c;
  var $val;
  var $ptrA;
  var $cbr;
  var $comp;
  var $block = __stackBase__;
  $1 = $pRef;
  $2 = $predPartChroma;
  $3 = $x0;
  $4 = $y0;
  $5 = $width;
  $6 = $height;
  $7 = $yFrac;
  $8 = $chromaPartWidth;
  $9 = $chromaPartHeight;
  if ($3 < 0) {
    __label__ = 4;
  } else {
    __label__ = 1;
  }
  $28$$12$58 : do {
    if (__label__ == 1) {
      if ($3 + $8 > $5) {
        __label__ = 4;
        break $28$$12$58;
      }
      if ($4 < 0) {
        __label__ = 4;
        break $28$$12$58;
      }
      if ($9 + ($4 + 1) > $6) {
        __label__ = 4;
        break $28$$12$58;
      } else {
        __label__ = 5;
        break $28$$12$58;
      }
    }
  } while (0);
  $28$$63$62 : do {
    if (__label__ == 4) {
      var $30 = $block;
      _h264bsdFillBlock($1, $30, $3, $4, $5, $6, $8, $9 + 1, $8);
      var $43 = $1 + $5 * $6;
      $1 = $43;
      var $50 = $block + $8 * ($9 + 1);
      _h264bsdFillBlock($1, $50, $3, $4, $5, $6, $8, $9 + 1, $8);
      $1 = $block;
      $3 = 0;
      $4 = 0;
      $5 = $8;
      $6 = $9 + 1;
    }
  } while (0);
  $val = 8 - $7;
  $comp = 0;
  $66$65 : while (1) {
    if (!($comp <= 1)) {
      __label__ = 17;
      break $66$65;
    }
    $ptrA = $1 + ($comp * $6 + $4) * $5 + $3;
    $cbr = $2 + ($comp << 3 << 3);
    $y = $9 >>> 1;
    $88$68 : while (1) {
      if (!($y != 0)) {
        __label__ = 15;
        break $88$68;
      }
      $x = $8 >>> 1;
      $94$71 : while (1) {
        if (!($x != 0)) {
          __label__ = 13;
          break $94$71;
        }
        $tmp3 = HEAPU8[$ptrA + ($5 << 1)];
        $tmp2 = HEAPU8[$ptrA + $5];
        var $109 = $ptrA;
        var $110 = $109 + 1;
        $ptrA = $110;
        $tmp1 = HEAPU8[$109];
        $c = ($val * $tmp2 + $7 * $tmp3 << 3) + 32;
        var $123 = $c >>> 6;
        $c = $123;
        HEAP8[$cbr + 8] = $c & 255;
        $c = ($val * $tmp1 + $7 * $tmp2 << 3) + 32;
        var $138 = $c >>> 6;
        $c = $138;
        var $141 = $cbr;
        var $142 = $141 + 1;
        $cbr = $142;
        HEAP8[$141] = $c & 255;
        $tmp3 = HEAPU8[$ptrA + ($5 << 1)];
        $tmp2 = HEAPU8[$ptrA + $5];
        var $154 = $ptrA;
        var $155 = $154 + 1;
        $ptrA = $155;
        $tmp1 = HEAPU8[$154];
        $c = ($val * $tmp2 + $7 * $tmp3 << 3) + 32;
        var $168 = $c >>> 6;
        $c = $168;
        HEAP8[$cbr + 8] = $c & 255;
        $c = ($val * $tmp1 + $7 * $tmp2 << 3) + 32;
        var $183 = $c >>> 6;
        $c = $183;
        var $186 = $cbr;
        var $187 = $186 + 1;
        $cbr = $187;
        HEAP8[$186] = $c & 255;
        var $190 = $x - 1;
        $x = $190;
      }
      var $195 = $cbr + (16 - $8);
      $cbr = $195;
      var $201 = $ptrA + (($5 << 1) - $8);
      $ptrA = $201;
      var $204 = $y - 1;
      $y = $204;
    }
    var $208 = $comp + 1;
    $comp = $208;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
_h264bsdInterpolateChromaVer["X"] = 1;
function _h264bsdInterpolateChromaHorVer($ref, $predPartChroma, $x0, $y0, $width, $height, $xFrac, $yFrac, $chromaPartWidth, $chromaPartHeight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 164;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  var $9;
  var $10;
  var $block = __stackBase__;
  var $x;
  var $y;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $tmp4;
  var $tmp5;
  var $tmp6;
  var $valX;
  var $valY;
  var $plus32;
  var $comp;
  var $ptrA;
  var $cbr;
  $1 = $ref;
  $2 = $predPartChroma;
  $3 = $x0;
  $4 = $y0;
  $5 = $width;
  $6 = $height;
  $7 = $xFrac;
  $8 = $yFrac;
  $9 = $chromaPartWidth;
  $10 = $chromaPartHeight;
  $plus32 = 32;
  if ($3 < 0) {
    __label__ = 4;
  } else {
    __label__ = 1;
  }
  $30$$13$2 : do {
    if (__label__ == 1) {
      if ($9 + ($3 + 1) > $5) {
        __label__ = 4;
        break $30$$13$2;
      }
      if ($4 < 0) {
        __label__ = 4;
        break $30$$13$2;
      }
      if ($10 + ($4 + 1) > $6) {
        __label__ = 4;
        break $30$$13$2;
      } else {
        __label__ = 5;
        break $30$$13$2;
      }
    }
  } while (0);
  $30$$71$6 : do {
    if (__label__ == 4) {
      var $32 = $block;
      _h264bsdFillBlock($1, $32, $3, $4, $5, $6, $9 + 1, $10 + 1, $9 + 1);
      var $47 = $1 + $5 * $6;
      $1 = $47;
      var $55 = $block + ($9 + 1) * ($10 + 1);
      _h264bsdFillBlock($1, $55, $3, $4, $5, $6, $9 + 1, $10 + 1, $9 + 1);
      $1 = $block;
      $3 = 0;
      $4 = 0;
      $5 = $9 + 1;
      $6 = $10 + 1;
    }
  } while (0);
  $valX = 8 - $7;
  $valY = 8 - $8;
  $comp = 0;
  $76$9 : while (1) {
    if (!($comp <= 1)) {
      __label__ = 17;
      break $76$9;
    }
    $ptrA = $1 + ($comp * $6 + $4) * $5 + $3;
    $cbr = $2 + ($comp << 3 << 3);
    $y = $10 >>> 1;
    $98$12 : while (1) {
      if (!($y != 0)) {
        __label__ = 15;
        break $98$12;
      }
      $tmp1 = HEAPU8[$ptrA];
      $tmp3 = HEAPU8[$ptrA + $5];
      $tmp5 = HEAPU8[$ptrA + ($5 << 1)];
      var $118 = $tmp1 * $valY;
      $tmp1 = $118;
      var $123 = $tmp1 + $tmp3 * $8;
      $tmp1 = $123;
      var $126 = $tmp3 * $valY;
      $tmp3 = $126;
      var $131 = $tmp3 + $tmp5 * $8;
      $tmp3 = $131;
      $x = $9 >>> 1;
      $134$15 : while (1) {
        if (!($x != 0)) {
          __label__ = 13;
          break $134$15;
        }
        var $139 = $ptrA + 1;
        $ptrA = $139;
        $tmp2 = HEAPU8[$139];
        $tmp4 = HEAPU8[$ptrA + $5];
        $tmp6 = HEAPU8[$ptrA + ($5 << 1)];
        var $155 = $tmp2 * $valY;
        $tmp2 = $155;
        var $160 = $tmp2 + $tmp4 * $8;
        $tmp2 = $160;
        var $163 = $tmp4 * $valY;
        $tmp4 = $163;
        var $168 = $tmp4 + $tmp6 * $8;
        $tmp4 = $168;
        var $173 = $tmp1 * $valX + $plus32;
        $tmp1 = $173;
        var $178 = $tmp3 * $valX + $plus32;
        $tmp3 = $178;
        var $183 = $tmp1 + $tmp2 * $7;
        $tmp1 = $183;
        var $185 = $tmp1 >>> 6;
        $tmp1 = $185;
        var $190 = $tmp3 + $tmp4 * $7;
        $tmp3 = $190;
        var $192 = $tmp3 >>> 6;
        $tmp3 = $192;
        HEAP8[$cbr + 8] = $tmp3 & 255;
        var $199 = $cbr;
        var $200 = $199 + 1;
        $cbr = $200;
        HEAP8[$199] = $tmp1 & 255;
        var $202 = $ptrA + 1;
        $ptrA = $202;
        $tmp1 = HEAPU8[$202];
        $tmp3 = HEAPU8[$ptrA + $5];
        $tmp5 = HEAPU8[$ptrA + ($5 << 1)];
        var $218 = $tmp1 * $valY;
        $tmp1 = $218;
        var $223 = $tmp1 + $tmp3 * $8;
        $tmp1 = $223;
        var $226 = $tmp3 * $valY;
        $tmp3 = $226;
        var $231 = $tmp3 + $tmp5 * $8;
        $tmp3 = $231;
        var $236 = $tmp2 * $valX + $plus32;
        $tmp2 = $236;
        var $241 = $tmp4 * $valX + $plus32;
        $tmp4 = $241;
        var $246 = $tmp2 + $tmp1 * $7;
        $tmp2 = $246;
        var $248 = $tmp2 >>> 6;
        $tmp2 = $248;
        var $253 = $tmp4 + $tmp3 * $7;
        $tmp4 = $253;
        var $255 = $tmp4 >>> 6;
        $tmp4 = $255;
        HEAP8[$cbr + 8] = $tmp4 & 255;
        var $262 = $cbr;
        var $263 = $262 + 1;
        $cbr = $263;
        HEAP8[$262] = $tmp2 & 255;
        var $266 = $x - 1;
        $x = $266;
      }
      var $271 = $cbr + (16 - $9);
      $cbr = $271;
      var $277 = $ptrA + (($5 << 1) - $9);
      $ptrA = $277;
      var $280 = $y - 1;
      $y = $280;
    }
    var $284 = $comp + 1;
    $comp = $284;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
_h264bsdInterpolateChromaHorVer["X"] = 1;
function _h264bsdInterpolateVerHalf($ref, $mb, $x0, $y0, $width, $height, $partWidth, $partHeight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 444;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  var $p1 = __stackBase__;
  var $i;
  var $j;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $tmp4;
  var $tmp5;
  var $tmp6;
  var $tmp7;
  var $ptrC;
  var $ptrV;
  var $clp;
  $1 = $ref;
  $2 = $mb;
  $3 = $x0;
  $4 = $y0;
  $5 = $width;
  $6 = $height;
  $7 = $partWidth;
  $8 = $partHeight;
  $clp = _h264bsdClip + 512;
  if ($3 < 0) {
    __label__ = 4;
  } else {
    __label__ = 1;
  }
  $27$$11$25 : do {
    if (__label__ == 1) {
      if ($3 + $7 > $5) {
        __label__ = 4;
        break $27$$11$25;
      }
      if ($4 < 0) {
        __label__ = 4;
        break $27$$11$25;
      }
      if ($8 + ($4 + 5) > $6) {
        __label__ = 4;
        break $27$$11$25;
      } else {
        __label__ = 5;
        break $27$$11$25;
      }
    }
  } while (0);
  $27$$42$29 : do {
    if (__label__ == 4) {
      var $30 = $p1;
      _h264bsdFillBlock($1, $30, $3, $4, $5, $6, $7, $8 + 5, $7);
      $3 = 0;
      $4 = 0;
      $1 = $p1;
      $5 = $7;
    }
  } while (0);
  var $49 = $1 + ($4 * $5 + $3);
  $1 = $49;
  $ptrC = $1 + $5;
  $ptrV = $ptrC + $5 * 5;
  $i = $8 >>> 2;
  $59$32 : while (1) {
    if (!($i != 0)) {
      __label__ = 13;
      break $59$32;
    }
    $j = $7;
    $64$35 : while (1) {
      if (!($j != 0)) {
        __label__ = 11;
        break $64$35;
      }
      $tmp4 = HEAPU8[$ptrV + (-$5 << 1)];
      $tmp5 = HEAPU8[$ptrV + -$5];
      $tmp1 = HEAPU8[$ptrV + $5];
      $tmp2 = HEAPU8[$ptrV + ($5 << 1)];
      var $92 = $ptrV;
      var $93 = $92 + 1;
      $ptrV = $93;
      $tmp6 = HEAPU8[$92];
      $tmp7 = $tmp4 + $tmp1;
      var $102 = $tmp2 - ($tmp7 << 2);
      $tmp2 = $102;
      var $105 = $tmp2 - $tmp7;
      $tmp2 = $105;
      var $107 = $tmp2 + 16;
      $tmp2 = $107;
      $tmp7 = $tmp5 + $tmp6;
      $tmp3 = HEAPU8[$ptrC + ($5 << 1)];
      var $120 = $tmp2 + ($tmp7 << 4);
      $tmp2 = $120;
      var $124 = $tmp2 + ($tmp7 << 2);
      $tmp2 = $124;
      var $127 = $tmp2 + $tmp3;
      $tmp2 = $127;
      var $133 = HEAPU8[$clp + ($tmp2 >> 5)];
      $tmp2 = $133;
      var $135 = $tmp1 + 16;
      $tmp1 = $135;
      HEAP8[$2 + 48] = $tmp2 & 255;
      $tmp7 = $tmp3 + $tmp6;
      var $146 = $tmp1 - ($tmp7 << 2);
      $tmp1 = $146;
      var $149 = $tmp1 - $tmp7;
      $tmp1 = $149;
      $tmp7 = $tmp4 + $tmp5;
      $tmp2 = HEAPU8[$ptrC + $5];
      var $161 = $tmp1 + ($tmp7 << 4);
      $tmp1 = $161;
      var $165 = $tmp1 + ($tmp7 << 2);
      $tmp1 = $165;
      var $168 = $tmp1 + $tmp2;
      $tmp1 = $168;
      var $174 = HEAPU8[$clp + ($tmp1 >> 5)];
      $tmp1 = $174;
      var $176 = $tmp6 + 16;
      $tmp6 = $176;
      HEAP8[$2 + 32] = $tmp1 & 255;
      $tmp7 = $tmp2 + $tmp5;
      var $187 = $tmp6 - ($tmp7 << 2);
      $tmp6 = $187;
      var $190 = $tmp6 - $tmp7;
      $tmp6 = $190;
      $tmp7 = $tmp4 + $tmp3;
      $tmp1 = HEAPU8[$ptrC];
      var $200 = $tmp6 + ($tmp7 << 4);
      $tmp6 = $200;
      var $204 = $tmp6 + ($tmp7 << 2);
      $tmp6 = $204;
      var $207 = $tmp6 + $tmp1;
      $tmp6 = $207;
      var $213 = HEAPU8[$clp + ($tmp6 >> 5)];
      $tmp6 = $213;
      var $215 = $tmp5 + 16;
      $tmp5 = $215;
      HEAP8[$2 + 16] = $tmp6 & 255;
      var $222 = $tmp1 + $tmp4;
      $tmp1 = $222;
      var $226 = $tmp5 - ($tmp1 << 2);
      $tmp5 = $226;
      var $229 = $tmp5 - $tmp1;
      $tmp5 = $229;
      var $232 = $tmp3 + $tmp2;
      $tmp3 = $232;
      $tmp6 = HEAPU8[$ptrC + -$5];
      var $242 = $tmp5 + ($tmp3 << 4);
      $tmp5 = $242;
      var $246 = $tmp5 + ($tmp3 << 2);
      $tmp5 = $246;
      var $249 = $tmp5 + $tmp6;
      $tmp5 = $249;
      var $255 = HEAPU8[$clp + ($tmp5 >> 5)];
      $tmp5 = $255;
      var $258 = $2;
      var $259 = $258 + 1;
      $2 = $259;
      HEAP8[$258] = $tmp5 & 255;
      var $261 = $ptrC + 1;
      $ptrC = $261;
      var $264 = $j - 1;
      $j = $264;
    }
    var $271 = $ptrC + (($5 << 2) - $7);
    $ptrC = $271;
    var $277 = $ptrV + (($5 << 2) - $7);
    $ptrV = $277;
    var $281 = $2 + (64 - $7);
    $2 = $281;
    var $284 = $i - 1;
    $i = $284;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
_h264bsdInterpolateVerHalf["X"] = 1;
function _h264bsdInterpolateVerQuarter($ref, $mb, $x0, $y0, $width, $height, $partWidth, $partHeight, $verOffset) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 444;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  var $9;
  var $p1 = __stackBase__;
  var $i;
  var $j;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $tmp4;
  var $tmp5;
  var $tmp6;
  var $tmp7;
  var $ptrC;
  var $ptrV;
  var $ptrInt;
  var $clp;
  $1 = $ref;
  $2 = $mb;
  $3 = $x0;
  $4 = $y0;
  $5 = $width;
  $6 = $height;
  $7 = $partWidth;
  $8 = $partHeight;
  $9 = $verOffset;
  $clp = _h264bsdClip + 512;
  if ($3 < 0) {
    __label__ = 4;
  } else {
    __label__ = 1;
  }
  $28$$12$2 : do {
    if (__label__ == 1) {
      if ($3 + $7 > $5) {
        __label__ = 4;
        break $28$$12$2;
      }
      if ($4 < 0) {
        __label__ = 4;
        break $28$$12$2;
      }
      if ($8 + ($4 + 5) > $6) {
        __label__ = 4;
        break $28$$12$2;
      } else {
        __label__ = 5;
        break $28$$12$2;
      }
    }
  } while (0);
  $28$$43$6 : do {
    if (__label__ == 4) {
      var $31 = $p1;
      _h264bsdFillBlock($1, $31, $3, $4, $5, $6, $7, $8 + 5, $7);
      $3 = 0;
      $4 = 0;
      $1 = $p1;
      $5 = $7;
    }
  } while (0);
  var $50 = $1 + ($4 * $5 + $3);
  $1 = $50;
  $ptrC = $1 + $5;
  $ptrV = $ptrC + $5 * 5;
  $ptrInt = $ptrC + ($9 + 2) * $5;
  $i = $8 >>> 2;
  $66$9 : while (1) {
    if (!($i != 0)) {
      __label__ = 13;
      break $66$9;
    }
    $j = $7;
    $71$12 : while (1) {
      if (!($j != 0)) {
        __label__ = 11;
        break $71$12;
      }
      $tmp4 = HEAPU8[$ptrV + (-$5 << 1)];
      $tmp5 = HEAPU8[$ptrV + -$5];
      $tmp1 = HEAPU8[$ptrV + $5];
      $tmp2 = HEAPU8[$ptrV + ($5 << 1)];
      var $99 = $ptrV;
      var $100 = $99 + 1;
      $ptrV = $100;
      $tmp6 = HEAPU8[$99];
      $tmp7 = $tmp4 + $tmp1;
      var $109 = $tmp2 - ($tmp7 << 2);
      $tmp2 = $109;
      var $112 = $tmp2 - $tmp7;
      $tmp2 = $112;
      var $114 = $tmp2 + 16;
      $tmp2 = $114;
      $tmp7 = $tmp5 + $tmp6;
      $tmp3 = HEAPU8[$ptrC + ($5 << 1)];
      var $127 = $tmp2 + ($tmp7 << 4);
      $tmp2 = $127;
      var $131 = $tmp2 + ($tmp7 << 2);
      $tmp2 = $131;
      var $134 = $tmp2 + $tmp3;
      $tmp2 = $134;
      var $140 = HEAPU8[$clp + ($tmp2 >> 5)];
      $tmp2 = $140;
      $tmp7 = HEAPU8[$ptrInt + ($5 << 1)];
      var $148 = $tmp1 + 16;
      $tmp1 = $148;
      var $150 = $tmp2 + 1;
      $tmp2 = $150;
      HEAP8[$2 + 48] = $tmp2 + $tmp7 >> 1 & 255;
      $tmp7 = $tmp3 + $tmp6;
      var $164 = $tmp1 - ($tmp7 << 2);
      $tmp1 = $164;
      var $167 = $tmp1 - $tmp7;
      $tmp1 = $167;
      $tmp7 = $tmp4 + $tmp5;
      $tmp2 = HEAPU8[$ptrC + $5];
      var $179 = $tmp1 + ($tmp7 << 4);
      $tmp1 = $179;
      var $183 = $tmp1 + ($tmp7 << 2);
      $tmp1 = $183;
      var $186 = $tmp1 + $tmp2;
      $tmp1 = $186;
      var $192 = HEAPU8[$clp + ($tmp1 >> 5)];
      $tmp1 = $192;
      $tmp7 = HEAPU8[$ptrInt + $5];
      var $199 = $tmp6 + 16;
      $tmp6 = $199;
      var $201 = $tmp1 + 1;
      $tmp1 = $201;
      HEAP8[$2 + 32] = $tmp1 + $tmp7 >> 1 & 255;
      $tmp7 = $tmp2 + $tmp5;
      var $215 = $tmp6 - ($tmp7 << 2);
      $tmp6 = $215;
      var $218 = $tmp6 - $tmp7;
      $tmp6 = $218;
      $tmp7 = $tmp4 + $tmp3;
      $tmp1 = HEAPU8[$ptrC];
      var $228 = $tmp6 + ($tmp7 << 4);
      $tmp6 = $228;
      var $232 = $tmp6 + ($tmp7 << 2);
      $tmp6 = $232;
      var $235 = $tmp6 + $tmp1;
      $tmp6 = $235;
      var $241 = HEAPU8[$clp + ($tmp6 >> 5)];
      $tmp6 = $241;
      $tmp7 = HEAPU8[$ptrInt];
      var $246 = $tmp5 + 16;
      $tmp5 = $246;
      var $248 = $tmp6 + 1;
      $tmp6 = $248;
      HEAP8[$2 + 16] = $tmp6 + $tmp7 >> 1 & 255;
      var $258 = $tmp1 + $tmp4;
      $tmp1 = $258;
      var $262 = $tmp5 - ($tmp1 << 2);
      $tmp5 = $262;
      var $265 = $tmp5 - $tmp1;
      $tmp5 = $265;
      var $268 = $tmp3 + $tmp2;
      $tmp3 = $268;
      $tmp6 = HEAPU8[$ptrC + -$5];
      var $278 = $tmp5 + ($tmp3 << 4);
      $tmp5 = $278;
      var $282 = $tmp5 + ($tmp3 << 2);
      $tmp5 = $282;
      var $285 = $tmp5 + $tmp6;
      $tmp5 = $285;
      var $291 = HEAPU8[$clp + ($tmp5 >> 5)];
      $tmp5 = $291;
      $tmp7 = HEAPU8[$ptrInt + -$5];
      var $299 = $tmp5 + 1;
      $tmp5 = $299;
      var $305 = $2;
      var $306 = $305 + 1;
      $2 = $306;
      HEAP8[$305] = $tmp5 + $tmp7 >> 1 & 255;
      var $308 = $ptrC + 1;
      $ptrC = $308;
      var $310 = $ptrInt + 1;
      $ptrInt = $310;
      var $313 = $j - 1;
      $j = $313;
    }
    var $320 = $ptrC + (($5 << 2) - $7);
    $ptrC = $320;
    var $326 = $ptrV + (($5 << 2) - $7);
    $ptrV = $326;
    var $332 = $ptrInt + (($5 << 2) - $7);
    $ptrInt = $332;
    var $336 = $2 + (64 - $7);
    $2 = $336;
    var $339 = $i - 1;
    $i = $339;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
_h264bsdInterpolateVerQuarter["X"] = 1;
function _h264bsdInterpolateHorHalf($ref, $mb, $x0, $y0, $width, $height, $partWidth, $partHeight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 444;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  var $p1 = __stackBase__;
  var $ptrJ;
  var $x;
  var $y;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $tmp4;
  var $tmp5;
  var $tmp6;
  var $tmp7;
  var $clp;
  $1 = $ref;
  $2 = $mb;
  $3 = $x0;
  $4 = $y0;
  $5 = $width;
  $6 = $height;
  $7 = $partWidth;
  $8 = $partHeight;
  $clp = _h264bsdClip + 512;
  if ($3 < 0) {
    __label__ = 4;
  } else {
    __label__ = 1;
  }
  $27$$11$20 : do {
    if (__label__ == 1) {
      if ($7 + ($3 + 5) > $5) {
        __label__ = 4;
        break $27$$11$20;
      }
      if ($4 < 0) {
        __label__ = 4;
        break $27$$11$20;
      }
      if ($4 + $8 > $6) {
        __label__ = 4;
        break $27$$11$20;
      } else {
        __label__ = 5;
        break $27$$11$20;
      }
    }
  } while (0);
  $27$$44$24 : do {
    if (__label__ == 4) {
      var $30 = $p1;
      _h264bsdFillBlock($1, $30, $3, $4, $5, $6, $7 + 5, $8, $7 + 5);
      $3 = 0;
      $4 = 0;
      $1 = $p1;
      $5 = $7 + 5;
    }
  } while (0);
  var $51 = $1 + ($4 * $5 + $3);
  $1 = $51;
  $ptrJ = $1 + 5;
  $y = $8;
  $55$27 : while (1) {
    if (!($y != 0)) {
      __label__ = 13;
      break $55$27;
    }
    $tmp6 = HEAPU8[$ptrJ - 5];
    $tmp5 = HEAPU8[$ptrJ - 4];
    $tmp4 = HEAPU8[$ptrJ - 3];
    $tmp3 = HEAPU8[$ptrJ - 2];
    $tmp2 = HEAPU8[$ptrJ - 1];
    $x = $7 >>> 2;
    $81$30 : while (1) {
      if (!($x != 0)) {
        __label__ = 11;
        break $81$30;
      }
      var $86 = $tmp6 + 16;
      $tmp6 = $86;
      $tmp7 = $tmp3 + $tmp4;
      var $93 = $tmp6 + ($tmp7 << 4);
      $tmp6 = $93;
      var $97 = $tmp6 + ($tmp7 << 2);
      $tmp6 = $97;
      $tmp7 = $tmp2 + $tmp5;
      var $101 = $ptrJ;
      var $102 = $101 + 1;
      $ptrJ = $102;
      $tmp1 = HEAPU8[$101];
      var $108 = $tmp6 - ($tmp7 << 2);
      $tmp6 = $108;
      var $111 = $tmp6 - $tmp7;
      $tmp6 = $111;
      var $114 = $tmp6 + $tmp1;
      $tmp6 = $114;
      var $120 = HEAPU8[$clp + ($tmp6 >> 5)];
      $tmp6 = $120;
      var $122 = $tmp5 + 16;
      $tmp5 = $122;
      $tmp7 = $tmp2 + $tmp3;
      var $128 = $2;
      var $129 = $128 + 1;
      $2 = $129;
      HEAP8[$128] = $tmp6 & 255;
      var $133 = $tmp5 + ($tmp7 << 4);
      $tmp5 = $133;
      var $137 = $tmp5 + ($tmp7 << 2);
      $tmp5 = $137;
      $tmp7 = $tmp1 + $tmp4;
      var $141 = $ptrJ;
      var $142 = $141 + 1;
      $ptrJ = $142;
      $tmp6 = HEAPU8[$141];
      var $148 = $tmp5 - ($tmp7 << 2);
      $tmp5 = $148;
      var $151 = $tmp5 - $tmp7;
      $tmp5 = $151;
      var $154 = $tmp5 + $tmp6;
      $tmp5 = $154;
      var $160 = HEAPU8[$clp + ($tmp5 >> 5)];
      $tmp5 = $160;
      var $162 = $tmp4 + 16;
      $tmp4 = $162;
      $tmp7 = $tmp1 + $tmp2;
      var $168 = $2;
      var $169 = $168 + 1;
      $2 = $169;
      HEAP8[$168] = $tmp5 & 255;
      var $173 = $tmp4 + ($tmp7 << 4);
      $tmp4 = $173;
      var $177 = $tmp4 + ($tmp7 << 2);
      $tmp4 = $177;
      $tmp7 = $tmp6 + $tmp3;
      var $181 = $ptrJ;
      var $182 = $181 + 1;
      $ptrJ = $182;
      $tmp5 = HEAPU8[$181];
      var $188 = $tmp4 - ($tmp7 << 2);
      $tmp4 = $188;
      var $191 = $tmp4 - $tmp7;
      $tmp4 = $191;
      var $194 = $tmp4 + $tmp5;
      $tmp4 = $194;
      var $200 = HEAPU8[$clp + ($tmp4 >> 5)];
      $tmp4 = $200;
      var $202 = $tmp3 + 16;
      $tmp3 = $202;
      $tmp7 = $tmp6 + $tmp1;
      var $208 = $2;
      var $209 = $208 + 1;
      $2 = $209;
      HEAP8[$208] = $tmp4 & 255;
      var $213 = $tmp3 + ($tmp7 << 4);
      $tmp3 = $213;
      var $217 = $tmp3 + ($tmp7 << 2);
      $tmp3 = $217;
      $tmp7 = $tmp5 + $tmp2;
      var $221 = $ptrJ;
      var $222 = $221 + 1;
      $ptrJ = $222;
      $tmp4 = HEAPU8[$221];
      var $228 = $tmp3 - ($tmp7 << 2);
      $tmp3 = $228;
      var $231 = $tmp3 - $tmp7;
      $tmp3 = $231;
      var $234 = $tmp3 + $tmp4;
      $tmp3 = $234;
      var $240 = HEAPU8[$clp + ($tmp3 >> 5)];
      $tmp3 = $240;
      $tmp7 = $tmp4;
      $tmp4 = $tmp6;
      $tmp6 = $tmp2;
      $tmp2 = $tmp7;
      var $247 = $2;
      var $248 = $247 + 1;
      $2 = $248;
      HEAP8[$247] = $tmp3 & 255;
      $tmp3 = $tmp5;
      $tmp5 = $tmp1;
      var $253 = $x - 1;
      $x = $253;
    }
    var $259 = $ptrJ + ($5 - $7);
    $ptrJ = $259;
    var $263 = $2 + (16 - $7);
    $2 = $263;
    var $266 = $y - 1;
    $y = $266;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
_h264bsdInterpolateHorHalf["X"] = 1;
function _h264bsdInterpolateHorQuarter($ref, $mb, $x0, $y0, $width, $height, $partWidth, $partHeight, $horOffset) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 444;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  var $9;
  var $p1 = __stackBase__;
  var $ptrJ;
  var $x;
  var $y;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $tmp4;
  var $tmp5;
  var $tmp6;
  var $tmp7;
  var $clp;
  $1 = $ref;
  $2 = $mb;
  $3 = $x0;
  $4 = $y0;
  $5 = $width;
  $6 = $height;
  $7 = $partWidth;
  $8 = $partHeight;
  $9 = $horOffset;
  $clp = _h264bsdClip + 512;
  if ($3 < 0) {
    __label__ = 4;
  } else {
    __label__ = 1;
  }
  $28$$12$2 : do {
    if (__label__ == 1) {
      if ($7 + ($3 + 5) > $5) {
        __label__ = 4;
        break $28$$12$2;
      }
      if ($4 < 0) {
        __label__ = 4;
        break $28$$12$2;
      }
      if ($4 + $8 > $6) {
        __label__ = 4;
        break $28$$12$2;
      } else {
        __label__ = 5;
        break $28$$12$2;
      }
    }
  } while (0);
  $28$$45$6 : do {
    if (__label__ == 4) {
      var $31 = $p1;
      _h264bsdFillBlock($1, $31, $3, $4, $5, $6, $7 + 5, $8, $7 + 5);
      $3 = 0;
      $4 = 0;
      $1 = $p1;
      $5 = $7 + 5;
    }
  } while (0);
  var $52 = $1 + ($4 * $5 + $3);
  $1 = $52;
  $ptrJ = $1 + 5;
  $y = $8;
  $56$9 : while (1) {
    if (!($y != 0)) {
      __label__ = 25;
      break $56$9;
    }
    $tmp6 = HEAPU8[$ptrJ - 5];
    $tmp5 = HEAPU8[$ptrJ - 4];
    $tmp4 = HEAPU8[$ptrJ - 3];
    $tmp3 = HEAPU8[$ptrJ - 2];
    $tmp2 = HEAPU8[$ptrJ - 1];
    $x = $7 >>> 2;
    $82$12 : while (1) {
      if (!($x != 0)) {
        __label__ = 23;
        break $82$12;
      }
      var $87 = $tmp6 + 16;
      $tmp6 = $87;
      $tmp7 = $tmp3 + $tmp4;
      var $94 = $tmp6 + ($tmp7 << 4);
      $tmp6 = $94;
      var $98 = $tmp6 + ($tmp7 << 2);
      $tmp6 = $98;
      $tmp7 = $tmp2 + $tmp5;
      var $102 = $ptrJ;
      var $103 = $102 + 1;
      $ptrJ = $103;
      $tmp1 = HEAPU8[$102];
      var $109 = $tmp6 - ($tmp7 << 2);
      $tmp6 = $109;
      var $112 = $tmp6 - $tmp7;
      $tmp6 = $112;
      var $115 = $tmp6 + $tmp1;
      $tmp6 = $115;
      var $121 = HEAPU8[$clp + ($tmp6 >> 5)];
      $tmp6 = $121;
      var $123 = $tmp5 + 16;
      $tmp5 = $123;
      if ($9 != 0) {
        __label__ = 11;
      } else {
        __label__ = 10;
      }
      $130$$126$15 : do {
        if (__label__ == 11) {
          var $133 = $tmp6 + $tmp3;
          $tmp6 = $133;
        } else if (__label__ == 10) {
          var $129 = $tmp6 + $tmp4;
          $tmp6 = $129;
        }
      } while (0);
      var $139 = $2;
      var $140 = $139 + 1;
      $2 = $140;
      HEAP8[$139] = $tmp6 + 1 >> 1 & 255;
      $tmp7 = $tmp2 + $tmp3;
      var $147 = $tmp5 + ($tmp7 << 4);
      $tmp5 = $147;
      var $151 = $tmp5 + ($tmp7 << 2);
      $tmp5 = $151;
      $tmp7 = $tmp1 + $tmp4;
      var $155 = $ptrJ;
      var $156 = $155 + 1;
      $ptrJ = $156;
      $tmp6 = HEAPU8[$155];
      var $162 = $tmp5 - ($tmp7 << 2);
      $tmp5 = $162;
      var $165 = $tmp5 - $tmp7;
      $tmp5 = $165;
      var $168 = $tmp5 + $tmp6;
      $tmp5 = $168;
      var $174 = HEAPU8[$clp + ($tmp5 >> 5)];
      $tmp5 = $174;
      var $176 = $tmp4 + 16;
      $tmp4 = $176;
      if ($9 != 0) {
        __label__ = 14;
      } else {
        __label__ = 13;
      }
      $183$$179$19 : do {
        if (__label__ == 14) {
          var $186 = $tmp5 + $tmp2;
          $tmp5 = $186;
        } else if (__label__ == 13) {
          var $182 = $tmp5 + $tmp3;
          $tmp5 = $182;
        }
      } while (0);
      var $192 = $2;
      var $193 = $192 + 1;
      $2 = $193;
      HEAP8[$192] = $tmp5 + 1 >> 1 & 255;
      $tmp7 = $tmp1 + $tmp2;
      var $200 = $tmp4 + ($tmp7 << 4);
      $tmp4 = $200;
      var $204 = $tmp4 + ($tmp7 << 2);
      $tmp4 = $204;
      $tmp7 = $tmp6 + $tmp3;
      var $208 = $ptrJ;
      var $209 = $208 + 1;
      $ptrJ = $209;
      $tmp5 = HEAPU8[$208];
      var $215 = $tmp4 - ($tmp7 << 2);
      $tmp4 = $215;
      var $218 = $tmp4 - $tmp7;
      $tmp4 = $218;
      var $221 = $tmp4 + $tmp5;
      $tmp4 = $221;
      var $227 = HEAPU8[$clp + ($tmp4 >> 5)];
      $tmp4 = $227;
      var $229 = $tmp3 + 16;
      $tmp3 = $229;
      if ($9 != 0) {
        __label__ = 17;
      } else {
        __label__ = 16;
      }
      $236$$232$23 : do {
        if (__label__ == 17) {
          var $239 = $tmp4 + $tmp1;
          $tmp4 = $239;
        } else if (__label__ == 16) {
          var $235 = $tmp4 + $tmp2;
          $tmp4 = $235;
        }
      } while (0);
      var $245 = $2;
      var $246 = $245 + 1;
      $2 = $246;
      HEAP8[$245] = $tmp4 + 1 >> 1 & 255;
      $tmp7 = $tmp6 + $tmp1;
      var $253 = $tmp3 + ($tmp7 << 4);
      $tmp3 = $253;
      var $257 = $tmp3 + ($tmp7 << 2);
      $tmp3 = $257;
      $tmp7 = $tmp5 + $tmp2;
      var $261 = $ptrJ;
      var $262 = $261 + 1;
      $ptrJ = $262;
      $tmp4 = HEAPU8[$261];
      var $268 = $tmp3 - ($tmp7 << 2);
      $tmp3 = $268;
      var $271 = $tmp3 - $tmp7;
      $tmp3 = $271;
      var $274 = $tmp3 + $tmp4;
      $tmp3 = $274;
      var $280 = HEAPU8[$clp + ($tmp3 >> 5)];
      $tmp3 = $280;
      if ($9 != 0) {
        __label__ = 20;
      } else {
        __label__ = 19;
      }
      $287$$283$27 : do {
        if (__label__ == 20) {
          var $290 = $tmp3 + $tmp6;
          $tmp3 = $290;
        } else if (__label__ == 19) {
          var $286 = $tmp3 + $tmp1;
          $tmp3 = $286;
        }
      } while (0);
      var $296 = $2;
      var $297 = $296 + 1;
      $2 = $297;
      HEAP8[$296] = $tmp3 + 1 >> 1 & 255;
      $tmp3 = $tmp5;
      $tmp5 = $tmp1;
      $tmp7 = $tmp4;
      $tmp4 = $tmp6;
      $tmp6 = $tmp2;
      $tmp2 = $tmp7;
      var $306 = $x - 1;
      $x = $306;
    }
    var $312 = $ptrJ + ($5 - $7);
    $ptrJ = $312;
    var $316 = $2 + (16 - $7);
    $2 = $316;
    var $319 = $y - 1;
    $y = $319;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
_h264bsdInterpolateHorQuarter["X"] = 1;
function _h264bsdInterpolateHorVerQuarter($ref, $mb, $x0, $y0, $width, $height, $partWidth, $partHeight, $horVerOffset) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 444;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  var $9;
  var $p1 = __stackBase__;
  var $ptrC;
  var $ptrJ;
  var $ptrV;
  var $x;
  var $y;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $tmp4;
  var $tmp5;
  var $tmp6;
  var $tmp7;
  var $clp;
  $1 = $ref;
  $2 = $mb;
  $3 = $x0;
  $4 = $y0;
  $5 = $width;
  $6 = $height;
  $7 = $partWidth;
  $8 = $partHeight;
  $9 = $horVerOffset;
  $clp = _h264bsdClip + 512;
  if ($3 < 0) {
    __label__ = 4;
  } else {
    __label__ = 1;
  }
  $29$$12$2 : do {
    if (__label__ == 1) {
      if ($7 + ($3 + 5) > $5) {
        __label__ = 4;
        break $29$$12$2;
      }
      if ($4 < 0) {
        __label__ = 4;
        break $29$$12$2;
      }
      if ($8 + ($4 + 5) > $6) {
        __label__ = 4;
        break $29$$12$2;
      } else {
        __label__ = 5;
        break $29$$12$2;
      }
    }
  } while (0);
  $29$$47$6 : do {
    if (__label__ == 4) {
      var $32 = $p1;
      _h264bsdFillBlock($1, $32, $3, $4, $5, $6, $7 + 5, $8 + 5, $7 + 5);
      $3 = 0;
      $4 = 0;
      $1 = $p1;
      $5 = $7 + 5;
    }
  } while (0);
  var $54 = $1 + ($4 * $5 + $3);
  $1 = $54;
  $ptrJ = $1 + ((($9 & 2) >>> 1) + 2) * $5 + 5;
  $ptrC = $5 + ($1 + 2) + ($9 & 1);
  $y = $8;
  $72$9 : while (1) {
    if (!($y != 0)) {
      __label__ = 13;
      break $72$9;
    }
    $tmp6 = HEAPU8[$ptrJ - 5];
    $tmp5 = HEAPU8[$ptrJ - 4];
    $tmp4 = HEAPU8[$ptrJ - 3];
    $tmp3 = HEAPU8[$ptrJ - 2];
    $tmp2 = HEAPU8[$ptrJ - 1];
    $x = $7 >>> 2;
    $98$12 : while (1) {
      if (!($x != 0)) {
        __label__ = 11;
        break $98$12;
      }
      var $103 = $tmp6 + 16;
      $tmp6 = $103;
      $tmp7 = $tmp3 + $tmp4;
      var $110 = $tmp6 + ($tmp7 << 4);
      $tmp6 = $110;
      var $114 = $tmp6 + ($tmp7 << 2);
      $tmp6 = $114;
      $tmp7 = $tmp2 + $tmp5;
      var $118 = $ptrJ;
      var $119 = $118 + 1;
      $ptrJ = $119;
      $tmp1 = HEAPU8[$118];
      var $125 = $tmp6 - ($tmp7 << 2);
      $tmp6 = $125;
      var $128 = $tmp6 - $tmp7;
      $tmp6 = $128;
      var $131 = $tmp6 + $tmp1;
      $tmp6 = $131;
      var $137 = HEAPU8[$clp + ($tmp6 >> 5)];
      $tmp6 = $137;
      var $139 = $tmp5 + 16;
      $tmp5 = $139;
      $tmp7 = $tmp2 + $tmp3;
      var $145 = $2;
      var $146 = $145 + 1;
      $2 = $146;
      HEAP8[$145] = $tmp6 & 255;
      var $150 = $tmp5 + ($tmp7 << 4);
      $tmp5 = $150;
      var $154 = $tmp5 + ($tmp7 << 2);
      $tmp5 = $154;
      $tmp7 = $tmp1 + $tmp4;
      var $158 = $ptrJ;
      var $159 = $158 + 1;
      $ptrJ = $159;
      $tmp6 = HEAPU8[$158];
      var $165 = $tmp5 - ($tmp7 << 2);
      $tmp5 = $165;
      var $168 = $tmp5 - $tmp7;
      $tmp5 = $168;
      var $171 = $tmp5 + $tmp6;
      $tmp5 = $171;
      var $177 = HEAPU8[$clp + ($tmp5 >> 5)];
      $tmp5 = $177;
      var $179 = $tmp4 + 16;
      $tmp4 = $179;
      $tmp7 = $tmp1 + $tmp2;
      var $185 = $2;
      var $186 = $185 + 1;
      $2 = $186;
      HEAP8[$185] = $tmp5 & 255;
      var $190 = $tmp4 + ($tmp7 << 4);
      $tmp4 = $190;
      var $194 = $tmp4 + ($tmp7 << 2);
      $tmp4 = $194;
      $tmp7 = $tmp6 + $tmp3;
      var $198 = $ptrJ;
      var $199 = $198 + 1;
      $ptrJ = $199;
      $tmp5 = HEAPU8[$198];
      var $205 = $tmp4 - ($tmp7 << 2);
      $tmp4 = $205;
      var $208 = $tmp4 - $tmp7;
      $tmp4 = $208;
      var $211 = $tmp4 + $tmp5;
      $tmp4 = $211;
      var $217 = HEAPU8[$clp + ($tmp4 >> 5)];
      $tmp4 = $217;
      var $219 = $tmp3 + 16;
      $tmp3 = $219;
      $tmp7 = $tmp6 + $tmp1;
      var $225 = $2;
      var $226 = $225 + 1;
      $2 = $226;
      HEAP8[$225] = $tmp4 & 255;
      var $230 = $tmp3 + ($tmp7 << 4);
      $tmp3 = $230;
      var $234 = $tmp3 + ($tmp7 << 2);
      $tmp3 = $234;
      $tmp7 = $tmp5 + $tmp2;
      var $238 = $ptrJ;
      var $239 = $238 + 1;
      $ptrJ = $239;
      $tmp4 = HEAPU8[$238];
      var $245 = $tmp3 - ($tmp7 << 2);
      $tmp3 = $245;
      var $248 = $tmp3 - $tmp7;
      $tmp3 = $248;
      var $251 = $tmp3 + $tmp4;
      $tmp3 = $251;
      var $257 = HEAPU8[$clp + ($tmp3 >> 5)];
      $tmp3 = $257;
      $tmp7 = $tmp4;
      $tmp4 = $tmp6;
      $tmp6 = $tmp2;
      $tmp2 = $tmp7;
      var $264 = $2;
      var $265 = $264 + 1;
      $2 = $265;
      HEAP8[$264] = $tmp3 & 255;
      $tmp3 = $tmp5;
      $tmp5 = $tmp1;
      var $270 = $x - 1;
      $x = $270;
    }
    var $276 = $ptrJ + ($5 - $7);
    $ptrJ = $276;
    var $280 = $2 + (16 - $7);
    $2 = $280;
    var $283 = $y - 1;
    $y = $283;
  }
  var $289 = $2 + -($8 << 4);
  $2 = $289;
  $ptrV = $ptrC + $5 * 5;
  $y = $8 >>> 2;
  $296$19 : while (1) {
    if (!($y != 0)) {
      __label__ = 21;
      break $296$19;
    }
    $x = $7;
    $301$22 : while (1) {
      if (!($x != 0)) {
        __label__ = 19;
        break $301$22;
      }
      $tmp4 = HEAPU8[$ptrV + (-$5 << 1)];
      $tmp5 = HEAPU8[$ptrV + -$5];
      $tmp1 = HEAPU8[$ptrV + $5];
      $tmp2 = HEAPU8[$ptrV + ($5 << 1)];
      var $329 = $ptrV;
      var $330 = $329 + 1;
      $ptrV = $330;
      $tmp6 = HEAPU8[$329];
      $tmp7 = $tmp4 + $tmp1;
      var $339 = $tmp2 - ($tmp7 << 2);
      $tmp2 = $339;
      var $342 = $tmp2 - $tmp7;
      $tmp2 = $342;
      var $344 = $tmp2 + 16;
      $tmp2 = $344;
      $tmp7 = $tmp5 + $tmp6;
      $tmp3 = HEAPU8[$ptrC + ($5 << 1)];
      var $357 = $tmp2 + ($tmp7 << 4);
      $tmp2 = $357;
      var $361 = $tmp2 + ($tmp7 << 2);
      $tmp2 = $361;
      var $364 = $tmp2 + $tmp3;
      $tmp2 = $364;
      $tmp7 = HEAPU8[$clp + ($tmp2 >> 5)];
      $tmp2 = HEAPU8[$2 + 48];
      var $376 = $tmp1 + 16;
      $tmp1 = $376;
      var $378 = $tmp7 + 1;
      $tmp7 = $378;
      HEAP8[$2 + 48] = $tmp2 + $tmp7 >> 1 & 255;
      $tmp7 = $tmp3 + $tmp6;
      var $392 = $tmp1 - ($tmp7 << 2);
      $tmp1 = $392;
      var $395 = $tmp1 - $tmp7;
      $tmp1 = $395;
      $tmp7 = $tmp4 + $tmp5;
      $tmp2 = HEAPU8[$ptrC + $5];
      var $407 = $tmp1 + ($tmp7 << 4);
      $tmp1 = $407;
      var $411 = $tmp1 + ($tmp7 << 2);
      $tmp1 = $411;
      var $414 = $tmp1 + $tmp2;
      $tmp1 = $414;
      $tmp7 = HEAPU8[$clp + ($tmp1 >> 5)];
      $tmp1 = HEAPU8[$2 + 32];
      var $426 = $tmp6 + 16;
      $tmp6 = $426;
      var $428 = $tmp7 + 1;
      $tmp7 = $428;
      HEAP8[$2 + 32] = $tmp1 + $tmp7 >> 1 & 255;
      $tmp1 = HEAPU8[$ptrC];
      $tmp7 = $tmp2 + $tmp5;
      var $445 = $tmp6 - ($tmp7 << 2);
      $tmp6 = $445;
      var $448 = $tmp6 - $tmp7;
      $tmp6 = $448;
      $tmp7 = $tmp4 + $tmp3;
      var $455 = $tmp6 + ($tmp7 << 4);
      $tmp6 = $455;
      var $459 = $tmp6 + ($tmp7 << 2);
      $tmp6 = $459;
      var $462 = $tmp6 + $tmp1;
      $tmp6 = $462;
      $tmp7 = HEAPU8[$clp + ($tmp6 >> 5)];
      $tmp6 = HEAPU8[$2 + 16];
      var $474 = $tmp5 + 16;
      $tmp5 = $474;
      var $476 = $tmp7 + 1;
      $tmp7 = $476;
      HEAP8[$2 + 16] = $tmp6 + $tmp7 >> 1 & 255;
      $tmp6 = HEAPU8[$ptrC + -$5];
      var $492 = $tmp1 + $tmp4;
      $tmp1 = $492;
      var $496 = $tmp5 - ($tmp1 << 2);
      $tmp5 = $496;
      var $499 = $tmp5 - $tmp1;
      $tmp5 = $499;
      var $502 = $tmp3 + $tmp2;
      $tmp3 = $502;
      var $506 = $tmp5 + ($tmp3 << 4);
      $tmp5 = $506;
      var $510 = $tmp5 + ($tmp3 << 2);
      $tmp5 = $510;
      var $513 = $tmp5 + $tmp6;
      $tmp5 = $513;
      $tmp7 = HEAPU8[$clp + ($tmp5 >> 5)];
      $tmp5 = HEAPU8[$2];
      var $524 = $tmp7 + 1;
      $tmp7 = $524;
      var $530 = $2;
      var $531 = $530 + 1;
      $2 = $531;
      HEAP8[$530] = $tmp5 + $tmp7 >> 1 & 255;
      var $533 = $ptrC + 1;
      $ptrC = $533;
      var $536 = $x - 1;
      $x = $536;
    }
    var $543 = $ptrC + (($5 << 2) - $7);
    $ptrC = $543;
    var $549 = $ptrV + (($5 << 2) - $7);
    $ptrV = $549;
    var $553 = $2 + (64 - $7);
    $2 = $553;
    var $556 = $y - 1;
    $y = $556;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
_h264bsdInterpolateHorVerQuarter["X"] = 1;
function _h264bsdInterpolateMidHalf($ref, $mb, $x0, $y0, $width, $height, $partWidth, $partHeight) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 1788;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  var $p1 = __stackBase__;
  var $x;
  var $y;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $tmp4;
  var $tmp5;
  var $tmp6;
  var $tmp7;
  var $ptrC;
  var $ptrV;
  var $b1;
  var $ptrJ;
  var $table = __stackBase__ + 444;
  var $clp;
  $1 = $ref;
  $2 = $mb;
  $3 = $x0;
  $4 = $y0;
  $5 = $width;
  $6 = $height;
  $7 = $partWidth;
  $8 = $partHeight;
  $clp = _h264bsdClip + 512;
  if ($3 < 0) {
    __label__ = 4;
  } else {
    __label__ = 1;
  }
  $28$$11$2 : do {
    if (__label__ == 1) {
      if ($7 + ($3 + 5) > $5) {
        __label__ = 4;
        break $28$$11$2;
      }
      if ($4 < 0) {
        __label__ = 4;
        break $28$$11$2;
      }
      if ($8 + ($4 + 5) > $6) {
        __label__ = 4;
        break $28$$11$2;
      } else {
        __label__ = 5;
        break $28$$11$2;
      }
    }
  } while (0);
  $28$$46$6 : do {
    if (__label__ == 4) {
      var $31 = $p1;
      _h264bsdFillBlock($1, $31, $3, $4, $5, $6, $7 + 5, $8 + 5, $7 + 5);
      $3 = 0;
      $4 = 0;
      $1 = $p1;
      $5 = $7 + 5;
    }
  } while (0);
  var $53 = $1 + ($4 * $5 + $3);
  $1 = $53;
  $b1 = $table;
  $ptrJ = $1 + 5;
  $y = $8 + 5;
  $59$9 : while (1) {
    if (!($y != 0)) {
      __label__ = 13;
      break $59$9;
    }
    $tmp6 = HEAPU8[$ptrJ - 5];
    $tmp5 = HEAPU8[$ptrJ - 4];
    $tmp4 = HEAPU8[$ptrJ - 3];
    $tmp3 = HEAPU8[$ptrJ - 2];
    $tmp2 = HEAPU8[$ptrJ - 1];
    $x = $7 >>> 2;
    $85$12 : while (1) {
      if (!($x != 0)) {
        __label__ = 11;
        break $85$12;
      }
      $tmp7 = $tmp3 + $tmp4;
      var $95 = $tmp6 + ($tmp7 << 4);
      $tmp6 = $95;
      var $99 = $tmp6 + ($tmp7 << 2);
      $tmp6 = $99;
      $tmp7 = $tmp2 + $tmp5;
      var $103 = $ptrJ;
      var $104 = $103 + 1;
      $ptrJ = $104;
      $tmp1 = HEAPU8[$103];
      var $110 = $tmp6 - ($tmp7 << 2);
      $tmp6 = $110;
      var $113 = $tmp6 - $tmp7;
      $tmp6 = $113;
      var $116 = $tmp6 + $tmp1;
      $tmp6 = $116;
      var $118 = $b1;
      var $119 = $118 + 4;
      $b1 = $119;
      HEAP32[$118 >> 2] = $tmp6;
      $tmp7 = $tmp2 + $tmp3;
      var $126 = $tmp5 + ($tmp7 << 4);
      $tmp5 = $126;
      var $130 = $tmp5 + ($tmp7 << 2);
      $tmp5 = $130;
      $tmp7 = $tmp1 + $tmp4;
      var $134 = $ptrJ;
      var $135 = $134 + 1;
      $ptrJ = $135;
      $tmp6 = HEAPU8[$134];
      var $141 = $tmp5 - ($tmp7 << 2);
      $tmp5 = $141;
      var $144 = $tmp5 - $tmp7;
      $tmp5 = $144;
      var $147 = $tmp5 + $tmp6;
      $tmp5 = $147;
      var $149 = $b1;
      var $150 = $149 + 4;
      $b1 = $150;
      HEAP32[$149 >> 2] = $tmp5;
      $tmp7 = $tmp1 + $tmp2;
      var $157 = $tmp4 + ($tmp7 << 4);
      $tmp4 = $157;
      var $161 = $tmp4 + ($tmp7 << 2);
      $tmp4 = $161;
      $tmp7 = $tmp6 + $tmp3;
      var $165 = $ptrJ;
      var $166 = $165 + 1;
      $ptrJ = $166;
      $tmp5 = HEAPU8[$165];
      var $172 = $tmp4 - ($tmp7 << 2);
      $tmp4 = $172;
      var $175 = $tmp4 - $tmp7;
      $tmp4 = $175;
      var $178 = $tmp4 + $tmp5;
      $tmp4 = $178;
      var $180 = $b1;
      var $181 = $180 + 4;
      $b1 = $181;
      HEAP32[$180 >> 2] = $tmp4;
      $tmp7 = $tmp6 + $tmp1;
      var $188 = $tmp3 + ($tmp7 << 4);
      $tmp3 = $188;
      var $192 = $tmp3 + ($tmp7 << 2);
      $tmp3 = $192;
      $tmp7 = $tmp5 + $tmp2;
      var $196 = $ptrJ;
      var $197 = $196 + 1;
      $ptrJ = $197;
      $tmp4 = HEAPU8[$196];
      var $203 = $tmp3 - ($tmp7 << 2);
      $tmp3 = $203;
      var $206 = $tmp3 - $tmp7;
      $tmp3 = $206;
      var $209 = $tmp3 + $tmp4;
      $tmp3 = $209;
      var $211 = $b1;
      var $212 = $211 + 4;
      $b1 = $212;
      HEAP32[$211 >> 2] = $tmp3;
      $tmp7 = $tmp4;
      $tmp4 = $tmp6;
      $tmp6 = $tmp2;
      $tmp2 = $tmp7;
      $tmp3 = $tmp5;
      $tmp5 = $tmp1;
      var $221 = $x - 1;
      $x = $221;
    }
    var $227 = $ptrJ + ($5 - $7);
    $ptrJ = $227;
    var $230 = $y - 1;
    $y = $230;
  }
  $ptrC = $table + ($7 << 2);
  $ptrV = $ptrC + ($7 * 5 << 2);
  $y = $8 >>> 2;
  $241$19 : while (1) {
    if (!($y != 0)) {
      __label__ = 21;
      break $241$19;
    }
    $x = $7;
    $246$22 : while (1) {
      if (!($x != 0)) {
        __label__ = 19;
        break $246$22;
      }
      $tmp4 = HEAP32[$ptrV + (-$7 << 1 << 2) >> 2];
      $tmp5 = HEAP32[$ptrV + (-$7 << 2) >> 2];
      $tmp1 = HEAP32[$ptrV + ($7 << 2) >> 2];
      $tmp2 = HEAP32[$ptrV + ($7 << 1 << 2) >> 2];
      var $270 = $ptrV;
      var $271 = $270 + 4;
      $ptrV = $271;
      $tmp6 = HEAP32[$270 >> 2];
      $tmp7 = $tmp4 + $tmp1;
      var $279 = $tmp2 - ($tmp7 << 2);
      $tmp2 = $279;
      var $282 = $tmp2 - $tmp7;
      $tmp2 = $282;
      var $284 = $tmp2 + 512;
      $tmp2 = $284;
      $tmp7 = $tmp5 + $tmp6;
      $tmp3 = HEAP32[$ptrC + ($7 << 1 << 2) >> 2];
      var $296 = $tmp2 + ($tmp7 << 4);
      $tmp2 = $296;
      var $300 = $tmp2 + ($tmp7 << 2);
      $tmp2 = $300;
      var $303 = $tmp2 + $tmp3;
      $tmp2 = $303;
      $tmp7 = HEAPU8[$clp + ($tmp2 >> 10)];
      var $311 = $tmp1 + 512;
      $tmp1 = $311;
      HEAP8[$2 + 48] = $tmp7 & 255;
      $tmp7 = $tmp3 + $tmp6;
      var $322 = $tmp1 - ($tmp7 << 2);
      $tmp1 = $322;
      var $325 = $tmp1 - $tmp7;
      $tmp1 = $325;
      $tmp7 = $tmp4 + $tmp5;
      $tmp2 = HEAP32[$ptrC + ($7 << 2) >> 2];
      var $336 = $tmp1 + ($tmp7 << 4);
      $tmp1 = $336;
      var $340 = $tmp1 + ($tmp7 << 2);
      $tmp1 = $340;
      var $343 = $tmp1 + $tmp2;
      $tmp1 = $343;
      $tmp7 = HEAPU8[$clp + ($tmp1 >> 10)];
      var $351 = $tmp6 + 512;
      $tmp6 = $351;
      HEAP8[$2 + 32] = $tmp7 & 255;
      $tmp1 = HEAP32[$ptrC >> 2];
      $tmp7 = $tmp2 + $tmp5;
      var $364 = $tmp6 - ($tmp7 << 2);
      $tmp6 = $364;
      var $367 = $tmp6 - $tmp7;
      $tmp6 = $367;
      $tmp7 = $tmp4 + $tmp3;
      var $374 = $tmp6 + ($tmp7 << 4);
      $tmp6 = $374;
      var $378 = $tmp6 + ($tmp7 << 2);
      $tmp6 = $378;
      var $381 = $tmp6 + $tmp1;
      $tmp6 = $381;
      $tmp7 = HEAPU8[$clp + ($tmp6 >> 10)];
      var $389 = $tmp5 + 512;
      $tmp5 = $389;
      HEAP8[$2 + 16] = $tmp7 & 255;
      $tmp6 = HEAP32[$ptrC + (-$7 << 2) >> 2];
      var $401 = $tmp1 + $tmp4;
      $tmp1 = $401;
      var $405 = $tmp5 - ($tmp1 << 2);
      $tmp5 = $405;
      var $408 = $tmp5 - $tmp1;
      $tmp5 = $408;
      var $411 = $tmp3 + $tmp2;
      $tmp3 = $411;
      var $415 = $tmp5 + ($tmp3 << 4);
      $tmp5 = $415;
      var $419 = $tmp5 + ($tmp3 << 2);
      $tmp5 = $419;
      var $422 = $tmp5 + $tmp6;
      $tmp5 = $422;
      $tmp7 = HEAPU8[$clp + ($tmp5 >> 10)];
      var $431 = $2;
      var $432 = $431 + 1;
      $2 = $432;
      HEAP8[$431] = $tmp7 & 255;
      var $434 = $ptrC + 4;
      $ptrC = $434;
      var $437 = $x - 1;
      $x = $437;
    }
    var $442 = $2 + (64 - $7);
    $2 = $442;
    var $446 = $ptrC + ($7 * 3 << 2);
    $ptrC = $446;
    var $450 = $ptrV + ($7 * 3 << 2);
    $ptrV = $450;
    var $453 = $y - 1;
    $y = $453;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
_h264bsdInterpolateMidHalf["X"] = 1;
function _h264bsdInterpolateMidVerQuarter($ref, $mb, $x0, $y0, $width, $height, $partWidth, $partHeight, $verOffset) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 1788;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  var $9;
  var $p1 = __stackBase__;
  var $x;
  var $y;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $tmp4;
  var $tmp5;
  var $tmp6;
  var $tmp7;
  var $ptrC;
  var $ptrV;
  var $ptrInt;
  var $b1;
  var $ptrJ;
  var $table = __stackBase__ + 444;
  var $clp;
  $1 = $ref;
  $2 = $mb;
  $3 = $x0;
  $4 = $y0;
  $5 = $width;
  $6 = $height;
  $7 = $partWidth;
  $8 = $partHeight;
  $9 = $verOffset;
  $clp = _h264bsdClip + 512;
  if ($3 < 0) {
    __label__ = 4;
  } else {
    __label__ = 1;
  }
  $29$$12$2 : do {
    if (__label__ == 1) {
      if ($7 + ($3 + 5) > $5) {
        __label__ = 4;
        break $29$$12$2;
      }
      if ($4 < 0) {
        __label__ = 4;
        break $29$$12$2;
      }
      if ($8 + ($4 + 5) > $6) {
        __label__ = 4;
        break $29$$12$2;
      } else {
        __label__ = 5;
        break $29$$12$2;
      }
    }
  } while (0);
  $29$$47$6 : do {
    if (__label__ == 4) {
      var $32 = $p1;
      _h264bsdFillBlock($1, $32, $3, $4, $5, $6, $7 + 5, $8 + 5, $7 + 5);
      $3 = 0;
      $4 = 0;
      $1 = $p1;
      $5 = $7 + 5;
    }
  } while (0);
  var $54 = $1 + ($4 * $5 + $3);
  $1 = $54;
  $b1 = $table;
  $ptrJ = $1 + 5;
  $y = $8 + 5;
  $60$9 : while (1) {
    if (!($y != 0)) {
      __label__ = 13;
      break $60$9;
    }
    $tmp6 = HEAPU8[$ptrJ - 5];
    $tmp5 = HEAPU8[$ptrJ - 4];
    $tmp4 = HEAPU8[$ptrJ - 3];
    $tmp3 = HEAPU8[$ptrJ - 2];
    $tmp2 = HEAPU8[$ptrJ - 1];
    $x = $7 >>> 2;
    $86$12 : while (1) {
      if (!($x != 0)) {
        __label__ = 11;
        break $86$12;
      }
      $tmp7 = $tmp3 + $tmp4;
      var $96 = $tmp6 + ($tmp7 << 4);
      $tmp6 = $96;
      var $100 = $tmp6 + ($tmp7 << 2);
      $tmp6 = $100;
      $tmp7 = $tmp2 + $tmp5;
      var $104 = $ptrJ;
      var $105 = $104 + 1;
      $ptrJ = $105;
      $tmp1 = HEAPU8[$104];
      var $111 = $tmp6 - ($tmp7 << 2);
      $tmp6 = $111;
      var $114 = $tmp6 - $tmp7;
      $tmp6 = $114;
      var $117 = $tmp6 + $tmp1;
      $tmp6 = $117;
      var $119 = $b1;
      var $120 = $119 + 4;
      $b1 = $120;
      HEAP32[$119 >> 2] = $tmp6;
      $tmp7 = $tmp2 + $tmp3;
      var $127 = $tmp5 + ($tmp7 << 4);
      $tmp5 = $127;
      var $131 = $tmp5 + ($tmp7 << 2);
      $tmp5 = $131;
      $tmp7 = $tmp1 + $tmp4;
      var $135 = $ptrJ;
      var $136 = $135 + 1;
      $ptrJ = $136;
      $tmp6 = HEAPU8[$135];
      var $142 = $tmp5 - ($tmp7 << 2);
      $tmp5 = $142;
      var $145 = $tmp5 - $tmp7;
      $tmp5 = $145;
      var $148 = $tmp5 + $tmp6;
      $tmp5 = $148;
      var $150 = $b1;
      var $151 = $150 + 4;
      $b1 = $151;
      HEAP32[$150 >> 2] = $tmp5;
      $tmp7 = $tmp1 + $tmp2;
      var $158 = $tmp4 + ($tmp7 << 4);
      $tmp4 = $158;
      var $162 = $tmp4 + ($tmp7 << 2);
      $tmp4 = $162;
      $tmp7 = $tmp6 + $tmp3;
      var $166 = $ptrJ;
      var $167 = $166 + 1;
      $ptrJ = $167;
      $tmp5 = HEAPU8[$166];
      var $173 = $tmp4 - ($tmp7 << 2);
      $tmp4 = $173;
      var $176 = $tmp4 - $tmp7;
      $tmp4 = $176;
      var $179 = $tmp4 + $tmp5;
      $tmp4 = $179;
      var $181 = $b1;
      var $182 = $181 + 4;
      $b1 = $182;
      HEAP32[$181 >> 2] = $tmp4;
      $tmp7 = $tmp6 + $tmp1;
      var $189 = $tmp3 + ($tmp7 << 4);
      $tmp3 = $189;
      var $193 = $tmp3 + ($tmp7 << 2);
      $tmp3 = $193;
      $tmp7 = $tmp5 + $tmp2;
      var $197 = $ptrJ;
      var $198 = $197 + 1;
      $ptrJ = $198;
      $tmp4 = HEAPU8[$197];
      var $204 = $tmp3 - ($tmp7 << 2);
      $tmp3 = $204;
      var $207 = $tmp3 - $tmp7;
      $tmp3 = $207;
      var $210 = $tmp3 + $tmp4;
      $tmp3 = $210;
      var $212 = $b1;
      var $213 = $212 + 4;
      $b1 = $213;
      HEAP32[$212 >> 2] = $tmp3;
      $tmp7 = $tmp4;
      $tmp4 = $tmp6;
      $tmp6 = $tmp2;
      $tmp2 = $tmp7;
      $tmp3 = $tmp5;
      $tmp5 = $tmp1;
      var $222 = $x - 1;
      $x = $222;
    }
    var $228 = $ptrJ + ($5 - $7);
    $ptrJ = $228;
    var $231 = $y - 1;
    $y = $231;
  }
  $ptrC = $table + ($7 << 2);
  $ptrV = $ptrC + ($7 * 5 << 2);
  $ptrInt = $ptrC + (($9 + 2) * $7 << 2);
  $y = $8 >>> 2;
  $248$19 : while (1) {
    if (!($y != 0)) {
      __label__ = 21;
      break $248$19;
    }
    $x = $7;
    $253$22 : while (1) {
      if (!($x != 0)) {
        __label__ = 19;
        break $253$22;
      }
      $tmp4 = HEAP32[$ptrV + (-$7 << 1 << 2) >> 2];
      $tmp5 = HEAP32[$ptrV + (-$7 << 2) >> 2];
      $tmp1 = HEAP32[$ptrV + ($7 << 2) >> 2];
      $tmp2 = HEAP32[$ptrV + ($7 << 1 << 2) >> 2];
      var $277 = $ptrV;
      var $278 = $277 + 4;
      $ptrV = $278;
      $tmp6 = HEAP32[$277 >> 2];
      $tmp7 = $tmp4 + $tmp1;
      var $286 = $tmp2 - ($tmp7 << 2);
      $tmp2 = $286;
      var $289 = $tmp2 - $tmp7;
      $tmp2 = $289;
      var $291 = $tmp2 + 512;
      $tmp2 = $291;
      $tmp7 = $tmp5 + $tmp6;
      $tmp3 = HEAP32[$ptrC + ($7 << 1 << 2) >> 2];
      var $303 = $tmp2 + ($tmp7 << 4);
      $tmp2 = $303;
      var $307 = $tmp2 + ($tmp7 << 2);
      $tmp2 = $307;
      $tmp7 = HEAP32[$ptrInt + ($7 << 1 << 2) >> 2];
      var $315 = $tmp2 + $tmp3;
      $tmp2 = $315;
      var $321 = HEAPU8[$clp + ($tmp2 >> 10)];
      $tmp2 = $321;
      var $323 = $tmp7 + 16;
      $tmp7 = $323;
      var $329 = HEAPU8[$clp + ($tmp7 >> 5)];
      $tmp7 = $329;
      var $331 = $tmp1 + 512;
      $tmp1 = $331;
      var $333 = $tmp2 + 1;
      $tmp2 = $333;
      HEAP8[$2 + 48] = $tmp7 + $tmp2 >> 1 & 255;
      $tmp7 = $tmp3 + $tmp6;
      var $347 = $tmp1 - ($tmp7 << 2);
      $tmp1 = $347;
      var $350 = $tmp1 - $tmp7;
      $tmp1 = $350;
      $tmp7 = $tmp4 + $tmp5;
      $tmp2 = HEAP32[$ptrC + ($7 << 2) >> 2];
      var $361 = $tmp1 + ($tmp7 << 4);
      $tmp1 = $361;
      var $365 = $tmp1 + ($tmp7 << 2);
      $tmp1 = $365;
      $tmp7 = HEAP32[$ptrInt + ($7 << 2) >> 2];
      var $372 = $tmp1 + $tmp2;
      $tmp1 = $372;
      var $378 = HEAPU8[$clp + ($tmp1 >> 10)];
      $tmp1 = $378;
      var $380 = $tmp7 + 16;
      $tmp7 = $380;
      var $386 = HEAPU8[$clp + ($tmp7 >> 5)];
      $tmp7 = $386;
      var $388 = $tmp6 + 512;
      $tmp6 = $388;
      var $390 = $tmp1 + 1;
      $tmp1 = $390;
      HEAP8[$2 + 32] = $tmp7 + $tmp1 >> 1 & 255;
      $tmp1 = HEAP32[$ptrC >> 2];
      $tmp7 = $tmp2 + $tmp5;
      var $406 = $tmp6 - ($tmp7 << 2);
      $tmp6 = $406;
      var $409 = $tmp6 - $tmp7;
      $tmp6 = $409;
      $tmp7 = $tmp4 + $tmp3;
      var $416 = $tmp6 + ($tmp7 << 4);
      $tmp6 = $416;
      var $420 = $tmp6 + ($tmp7 << 2);
      $tmp6 = $420;
      $tmp7 = HEAP32[$ptrInt >> 2];
      var $425 = $tmp6 + $tmp1;
      $tmp6 = $425;
      var $431 = HEAPU8[$clp + ($tmp6 >> 10)];
      $tmp6 = $431;
      var $433 = $tmp7 + 16;
      $tmp7 = $433;
      var $439 = HEAPU8[$clp + ($tmp7 >> 5)];
      $tmp7 = $439;
      var $441 = $tmp5 + 512;
      $tmp5 = $441;
      var $443 = $tmp6 + 1;
      $tmp6 = $443;
      HEAP8[$2 + 16] = $tmp7 + $tmp6 >> 1 & 255;
      $tmp6 = HEAP32[$ptrC + (-$7 << 2) >> 2];
      var $458 = $tmp1 + $tmp4;
      $tmp1 = $458;
      var $462 = $tmp5 - ($tmp1 << 2);
      $tmp5 = $462;
      var $465 = $tmp5 - $tmp1;
      $tmp5 = $465;
      var $468 = $tmp3 + $tmp2;
      $tmp3 = $468;
      var $472 = $tmp5 + ($tmp3 << 4);
      $tmp5 = $472;
      var $476 = $tmp5 + ($tmp3 << 2);
      $tmp5 = $476;
      $tmp7 = HEAP32[$ptrInt + (-$7 << 2) >> 2];
      var $484 = $tmp5 + $tmp6;
      $tmp5 = $484;
      var $490 = HEAPU8[$clp + ($tmp5 >> 10)];
      $tmp5 = $490;
      var $492 = $tmp7 + 16;
      $tmp7 = $492;
      var $498 = HEAPU8[$clp + ($tmp7 >> 5)];
      $tmp7 = $498;
      var $500 = $tmp5 + 1;
      $tmp5 = $500;
      var $506 = $2;
      var $507 = $506 + 1;
      $2 = $507;
      HEAP8[$506] = $tmp7 + $tmp5 >> 1 & 255;
      var $509 = $ptrC + 4;
      $ptrC = $509;
      var $511 = $ptrInt + 4;
      $ptrInt = $511;
      var $514 = $x - 1;
      $x = $514;
    }
    var $519 = $2 + (64 - $7);
    $2 = $519;
    var $523 = $ptrC + ($7 * 3 << 2);
    $ptrC = $523;
    var $527 = $ptrV + ($7 * 3 << 2);
    $ptrV = $527;
    var $531 = $ptrInt + ($7 * 3 << 2);
    $ptrInt = $531;
    var $534 = $y - 1;
    $y = $534;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
_h264bsdInterpolateMidVerQuarter["X"] = 1;
function _h264bsdInterpolateMidHorQuarter($ref, $mb, $x0, $y0, $width, $height, $partWidth, $partHeight, $horOffset) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 1788;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  var $9;
  var $p1 = __stackBase__;
  var $x;
  var $y;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $tmp4;
  var $tmp5;
  var $tmp6;
  var $tmp7;
  var $ptrJ;
  var $ptrInt;
  var $h1;
  var $ptrC;
  var $ptrV;
  var $table = __stackBase__ + 444;
  var $tableWidth;
  var $clp;
  $1 = $ref;
  $2 = $mb;
  $3 = $x0;
  $4 = $y0;
  $5 = $width;
  $6 = $height;
  $7 = $partWidth;
  $8 = $partHeight;
  $9 = $horOffset;
  $tableWidth = $7 + 5;
  $clp = _h264bsdClip + 512;
  if ($3 < 0) {
    __label__ = 4;
  } else {
    __label__ = 1;
  }
  $31$$14$2 : do {
    if (__label__ == 1) {
      if ($7 + ($3 + 5) > $5) {
        __label__ = 4;
        break $31$$14$2;
      }
      if ($4 < 0) {
        __label__ = 4;
        break $31$$14$2;
      }
      if ($8 + ($4 + 5) > $6) {
        __label__ = 4;
        break $31$$14$2;
      } else {
        __label__ = 5;
        break $31$$14$2;
      }
    }
  } while (0);
  $31$$49$6 : do {
    if (__label__ == 4) {
      var $34 = $p1;
      _h264bsdFillBlock($1, $34, $3, $4, $5, $6, $7 + 5, $8 + 5, $7 + 5);
      $3 = 0;
      $4 = 0;
      $1 = $p1;
      $5 = $7 + 5;
    }
  } while (0);
  var $56 = $1 + ($4 * $5 + $3);
  $1 = $56;
  $h1 = $table + ($tableWidth << 2);
  $ptrC = $1 + $5;
  $ptrV = $ptrC + $5 * 5;
  $y = $8 >>> 2;
  $69$9 : while (1) {
    if (!($y != 0)) {
      __label__ = 13;
      break $69$9;
    }
    $x = $tableWidth;
    $74$12 : while (1) {
      if (!($x != 0)) {
        __label__ = 11;
        break $74$12;
      }
      $tmp4 = HEAPU8[$ptrV + (-$5 << 1)];
      $tmp5 = HEAPU8[$ptrV + -$5];
      $tmp1 = HEAPU8[$ptrV + $5];
      $tmp2 = HEAPU8[$ptrV + ($5 << 1)];
      var $102 = $ptrV;
      var $103 = $102 + 1;
      $ptrV = $103;
      $tmp6 = HEAPU8[$102];
      $tmp7 = $tmp4 + $tmp1;
      var $112 = $tmp2 - ($tmp7 << 2);
      $tmp2 = $112;
      var $115 = $tmp2 - $tmp7;
      $tmp2 = $115;
      $tmp7 = $tmp5 + $tmp6;
      $tmp3 = HEAPU8[$ptrC + ($5 << 1)];
      var $128 = $tmp2 + ($tmp7 << 4);
      $tmp2 = $128;
      var $132 = $tmp2 + ($tmp7 << 2);
      $tmp2 = $132;
      var $135 = $tmp2 + $tmp3;
      $tmp2 = $135;
      HEAP32[$h1 + ($tableWidth << 1 << 2) >> 2] = $tmp2;
      $tmp7 = $tmp3 + $tmp6;
      var $147 = $tmp1 - ($tmp7 << 2);
      $tmp1 = $147;
      var $150 = $tmp1 - $tmp7;
      $tmp1 = $150;
      $tmp7 = $tmp4 + $tmp5;
      $tmp2 = HEAPU8[$ptrC + $5];
      var $162 = $tmp1 + ($tmp7 << 4);
      $tmp1 = $162;
      var $166 = $tmp1 + ($tmp7 << 2);
      $tmp1 = $166;
      var $169 = $tmp1 + $tmp2;
      $tmp1 = $169;
      HEAP32[$h1 + ($tableWidth << 2) >> 2] = $tmp1;
      $tmp1 = HEAPU8[$ptrC];
      $tmp7 = $tmp2 + $tmp5;
      var $183 = $tmp6 - ($tmp7 << 2);
      $tmp6 = $183;
      var $186 = $tmp6 - $tmp7;
      $tmp6 = $186;
      $tmp7 = $tmp4 + $tmp3;
      var $193 = $tmp6 + ($tmp7 << 4);
      $tmp6 = $193;
      var $197 = $tmp6 + ($tmp7 << 2);
      $tmp6 = $197;
      var $200 = $tmp6 + $tmp1;
      $tmp6 = $200;
      HEAP32[$h1 >> 2] = $tmp6;
      $tmp6 = HEAPU8[$ptrC + -$5];
      var $211 = $tmp1 + $tmp4;
      $tmp1 = $211;
      var $215 = $tmp5 - ($tmp1 << 2);
      $tmp5 = $215;
      var $218 = $tmp5 - $tmp1;
      $tmp5 = $218;
      var $221 = $tmp3 + $tmp2;
      $tmp3 = $221;
      var $225 = $tmp5 + ($tmp3 << 4);
      $tmp5 = $225;
      var $229 = $tmp5 + ($tmp3 << 2);
      $tmp5 = $229;
      var $232 = $tmp5 + $tmp6;
      $tmp5 = $232;
      HEAP32[$h1 + (-$tableWidth << 2) >> 2] = $tmp5;
      var $239 = $h1 + 4;
      $h1 = $239;
      var $241 = $ptrC + 1;
      $ptrC = $241;
      var $244 = $x - 1;
      $x = $244;
    }
    var $252 = $ptrC + (($5 << 2) - $7 - 5);
    $ptrC = $252;
    var $259 = $ptrV + (($5 << 2) - $7 - 5);
    $ptrV = $259;
    var $263 = $h1 + ($tableWidth * 3 << 2);
    $h1 = $263;
    var $266 = $y - 1;
    $y = $266;
  }
  $ptrJ = $table + 20;
  $ptrInt = $table + 8 + ($9 << 2);
  $y = $8;
  $275$19 : while (1) {
    if (!($y != 0)) {
      __label__ = 21;
      break $275$19;
    }
    $tmp6 = HEAP32[$ptrJ - 20 >> 2];
    $tmp5 = HEAP32[$ptrJ - 16 >> 2];
    $tmp4 = HEAP32[$ptrJ - 12 >> 2];
    $tmp3 = HEAP32[$ptrJ - 8 >> 2];
    $tmp2 = HEAP32[$ptrJ - 4 >> 2];
    $x = $7 >>> 2;
    $296$22 : while (1) {
      if (!($x != 0)) {
        __label__ = 19;
        break $296$22;
      }
      var $301 = $tmp6 + 512;
      $tmp6 = $301;
      $tmp7 = $tmp3 + $tmp4;
      var $308 = $tmp6 + ($tmp7 << 4);
      $tmp6 = $308;
      var $312 = $tmp6 + ($tmp7 << 2);
      $tmp6 = $312;
      $tmp7 = $tmp2 + $tmp5;
      var $316 = $ptrJ;
      var $317 = $316 + 4;
      $ptrJ = $317;
      $tmp1 = HEAP32[$316 >> 2];
      var $322 = $tmp6 - ($tmp7 << 2);
      $tmp6 = $322;
      var $325 = $tmp6 - $tmp7;
      $tmp6 = $325;
      var $326 = $ptrInt;
      var $327 = $326 + 4;
      $ptrInt = $327;
      $tmp7 = HEAP32[$326 >> 2];
      var $331 = $tmp6 + $tmp1;
      $tmp6 = $331;
      var $337 = HEAPU8[$clp + ($tmp6 >> 10)];
      $tmp6 = $337;
      var $339 = $tmp7 + 16;
      $tmp7 = $339;
      var $345 = HEAPU8[$clp + ($tmp7 >> 5)];
      $tmp7 = $345;
      var $347 = $tmp5 + 512;
      $tmp5 = $347;
      var $349 = $tmp6 + 1;
      $tmp6 = $349;
      var $355 = $2;
      var $356 = $355 + 1;
      $2 = $356;
      HEAP8[$355] = $tmp6 + $tmp7 >> 1 & 255;
      $tmp7 = $tmp2 + $tmp3;
      var $363 = $tmp5 + ($tmp7 << 4);
      $tmp5 = $363;
      var $367 = $tmp5 + ($tmp7 << 2);
      $tmp5 = $367;
      $tmp7 = $tmp1 + $tmp4;
      var $371 = $ptrJ;
      var $372 = $371 + 4;
      $ptrJ = $372;
      $tmp6 = HEAP32[$371 >> 2];
      var $377 = $tmp5 - ($tmp7 << 2);
      $tmp5 = $377;
      var $380 = $tmp5 - $tmp7;
      $tmp5 = $380;
      var $381 = $ptrInt;
      var $382 = $381 + 4;
      $ptrInt = $382;
      $tmp7 = HEAP32[$381 >> 2];
      var $386 = $tmp5 + $tmp6;
      $tmp5 = $386;
      var $392 = HEAPU8[$clp + ($tmp5 >> 10)];
      $tmp5 = $392;
      var $394 = $tmp7 + 16;
      $tmp7 = $394;
      var $400 = HEAPU8[$clp + ($tmp7 >> 5)];
      $tmp7 = $400;
      var $402 = $tmp4 + 512;
      $tmp4 = $402;
      var $404 = $tmp5 + 1;
      $tmp5 = $404;
      var $410 = $2;
      var $411 = $410 + 1;
      $2 = $411;
      HEAP8[$410] = $tmp5 + $tmp7 >> 1 & 255;
      $tmp7 = $tmp1 + $tmp2;
      var $418 = $tmp4 + ($tmp7 << 4);
      $tmp4 = $418;
      var $422 = $tmp4 + ($tmp7 << 2);
      $tmp4 = $422;
      $tmp7 = $tmp6 + $tmp3;
      var $426 = $ptrJ;
      var $427 = $426 + 4;
      $ptrJ = $427;
      $tmp5 = HEAP32[$426 >> 2];
      var $432 = $tmp4 - ($tmp7 << 2);
      $tmp4 = $432;
      var $435 = $tmp4 - $tmp7;
      $tmp4 = $435;
      var $436 = $ptrInt;
      var $437 = $436 + 4;
      $ptrInt = $437;
      $tmp7 = HEAP32[$436 >> 2];
      var $441 = $tmp4 + $tmp5;
      $tmp4 = $441;
      var $447 = HEAPU8[$clp + ($tmp4 >> 10)];
      $tmp4 = $447;
      var $449 = $tmp7 + 16;
      $tmp7 = $449;
      var $455 = HEAPU8[$clp + ($tmp7 >> 5)];
      $tmp7 = $455;
      var $457 = $tmp3 + 512;
      $tmp3 = $457;
      var $459 = $tmp4 + 1;
      $tmp4 = $459;
      var $465 = $2;
      var $466 = $465 + 1;
      $2 = $466;
      HEAP8[$465] = $tmp4 + $tmp7 >> 1 & 255;
      $tmp7 = $tmp6 + $tmp1;
      var $473 = $tmp3 + ($tmp7 << 4);
      $tmp3 = $473;
      var $477 = $tmp3 + ($tmp7 << 2);
      $tmp3 = $477;
      $tmp7 = $tmp5 + $tmp2;
      var $481 = $ptrJ;
      var $482 = $481 + 4;
      $ptrJ = $482;
      $tmp4 = HEAP32[$481 >> 2];
      var $487 = $tmp3 - ($tmp7 << 2);
      $tmp3 = $487;
      var $490 = $tmp3 - $tmp7;
      $tmp3 = $490;
      var $491 = $ptrInt;
      var $492 = $491 + 4;
      $ptrInt = $492;
      $tmp7 = HEAP32[$491 >> 2];
      var $496 = $tmp3 + $tmp4;
      $tmp3 = $496;
      var $502 = HEAPU8[$clp + ($tmp3 >> 10)];
      $tmp3 = $502;
      var $504 = $tmp7 + 16;
      $tmp7 = $504;
      var $510 = HEAPU8[$clp + ($tmp7 >> 5)];
      $tmp7 = $510;
      var $512 = $tmp3 + 1;
      $tmp3 = $512;
      var $518 = $2;
      var $519 = $518 + 1;
      $2 = $519;
      HEAP8[$518] = $tmp3 + $tmp7 >> 1 & 255;
      $tmp3 = $tmp5;
      $tmp5 = $tmp1;
      $tmp7 = $tmp4;
      $tmp4 = $tmp6;
      $tmp6 = $tmp2;
      $tmp2 = $tmp7;
      var $528 = $x - 1;
      $x = $528;
    }
    var $531 = $ptrJ + 20;
    $ptrJ = $531;
    var $533 = $ptrInt + 20;
    $ptrInt = $533;
    var $537 = $2 + (16 - $7);
    $2 = $537;
    var $540 = $y - 1;
    $y = $540;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
_h264bsdInterpolateMidHorQuarter["X"] = 1;
function _FillRow1($ref, $fill, $left, $center, $right) {
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1 = $ref;
  $2 = $fill;
  $3 = $left;
  $4 = $center;
  $5 = $right;
  _H264SwDecMemcpy($2, $1, $4);
  return;
  return;
}
function _h264bsdPredictSamples($data, $mv, $refPic, $xA, $yA, $partX, $partY, $partWidth, $partHeight) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  var $9;
  var $xFrac;
  var $yFrac;
  var $width;
  var $height;
  var $xInt;
  var $yInt;
  var $lumaPartData;
  $1 = $data;
  $2 = $mv;
  $3 = $refPic;
  $4 = $xA;
  $5 = $yA;
  $6 = $partX;
  $7 = $partY;
  $8 = $partWidth;
  $9 = $partHeight;
  $lumaPartData = $1 + ($7 << 4) + $6;
  $xFrac = HEAP16[$2 >> 1] & 3;
  $yFrac = HEAP16[$2 + 2 >> 1] & 3;
  $width = HEAP32[$3 + 4 >> 2] << 4;
  $height = HEAP32[$3 + 8 >> 2] << 4;
  $xInt = $4 + $6 + (HEAP16[$2 >> 1] >> 2);
  $yInt = $5 + $7 + (HEAP16[$2 + 2 >> 1] >> 2);
  var $56 = HEAP32[_lumaFracPos + ($xFrac << 4) + ($yFrac << 2) >> 2];
  if ($56 == 0) {
    __label__ = 1;
  } else if ($56 == 1) {
    __label__ = 2;
  } else if ($56 == 2) {
    __label__ = 3;
  } else if ($56 == 3) {
    __label__ = 4;
  } else if ($56 == 4) {
    __label__ = 5;
  } else if ($56 == 5) {
    __label__ = 6;
  } else if ($56 == 6) {
    __label__ = 7;
  } else if ($56 == 7) {
    __label__ = 8;
  } else if ($56 == 8) {
    __label__ = 9;
  } else if ($56 == 9) {
    __label__ = 10;
  } else if ($56 == 10) {
    __label__ = 11;
  } else if ($56 == 11) {
    __label__ = 12;
  } else if ($56 == 12) {
    __label__ = 13;
  } else if ($56 == 13) {
    __label__ = 14;
  } else if ($56 == 14) {
    __label__ = 15;
  } else {
    __label__ = 16;
  }
  $244$$57$$68$$80$$92$$104$$116$$129$$142$$155$$167$$180$$193$$206$$218$$231$2 : do {
    if (__label__ == 16) {
      var $247 = HEAP32[$3 >> 2];
      _h264bsdInterpolateHorVerQuarter($247, $lumaPartData, $xInt - 2, $yInt - 2, $width, $height, $8, $9, 3);
    } else if (__label__ == 1) {
      var $60 = HEAP32[$3 >> 2];
      _h264bsdFillBlock($60, $lumaPartData, $xInt, $yInt, $width, $height, $8, $9, 16);
    } else if (__label__ == 2) {
      var $71 = HEAP32[$3 >> 2];
      _h264bsdInterpolateVerQuarter($71, $lumaPartData, $xInt, $yInt - 2, $width, $height, $8, $9, 0);
    } else if (__label__ == 3) {
      var $83 = HEAP32[$3 >> 2];
      _h264bsdInterpolateVerHalf($83, $lumaPartData, $xInt, $yInt - 2, $width, $height, $8, $9);
    } else if (__label__ == 4) {
      var $95 = HEAP32[$3 >> 2];
      _h264bsdInterpolateVerQuarter($95, $lumaPartData, $xInt, $yInt - 2, $width, $height, $8, $9, 1);
    } else if (__label__ == 5) {
      var $107 = HEAP32[$3 >> 2];
      _h264bsdInterpolateHorQuarter($107, $lumaPartData, $xInt - 2, $yInt, $width, $height, $8, $9, 0);
    } else if (__label__ == 6) {
      var $119 = HEAP32[$3 >> 2];
      _h264bsdInterpolateHorVerQuarter($119, $lumaPartData, $xInt - 2, $yInt - 2, $width, $height, $8, $9, 0);
    } else if (__label__ == 7) {
      var $132 = HEAP32[$3 >> 2];
      _h264bsdInterpolateMidHorQuarter($132, $lumaPartData, $xInt - 2, $yInt - 2, $width, $height, $8, $9, 0);
    } else if (__label__ == 8) {
      var $145 = HEAP32[$3 >> 2];
      _h264bsdInterpolateHorVerQuarter($145, $lumaPartData, $xInt - 2, $yInt - 2, $width, $height, $8, $9, 2);
    } else if (__label__ == 9) {
      var $158 = HEAP32[$3 >> 2];
      _h264bsdInterpolateHorHalf($158, $lumaPartData, $xInt - 2, $yInt, $width, $height, $8, $9);
    } else if (__label__ == 10) {
      var $170 = HEAP32[$3 >> 2];
      _h264bsdInterpolateMidVerQuarter($170, $lumaPartData, $xInt - 2, $yInt - 2, $width, $height, $8, $9, 0);
    } else if (__label__ == 11) {
      var $183 = HEAP32[$3 >> 2];
      _h264bsdInterpolateMidHalf($183, $lumaPartData, $xInt - 2, $yInt - 2, $width, $height, $8, $9);
    } else if (__label__ == 12) {
      var $196 = HEAP32[$3 >> 2];
      _h264bsdInterpolateMidVerQuarter($196, $lumaPartData, $xInt - 2, $yInt - 2, $width, $height, $8, $9, 1);
    } else if (__label__ == 13) {
      var $209 = HEAP32[$3 >> 2];
      _h264bsdInterpolateHorQuarter($209, $lumaPartData, $xInt - 2, $yInt, $width, $height, $8, $9, 1);
    } else if (__label__ == 14) {
      var $221 = HEAP32[$3 >> 2];
      _h264bsdInterpolateHorVerQuarter($221, $lumaPartData, $xInt - 2, $yInt - 2, $width, $height, $8, $9, 1);
    } else if (__label__ == 15) {
      var $234 = HEAP32[$3 >> 2];
      _h264bsdInterpolateMidHorQuarter($234, $lumaPartData, $xInt - 2, $yInt - 2, $width, $height, $8, $9, 1);
    }
  } while (0);
  _PredictChroma($1 + 256 + ($7 >>> 1 << 3) + ($6 >>> 1), $4 + $6, $5 + $7, $8, $9, $2, $3);
  return;
  return;
}
_h264bsdPredictSamples["X"] = 1;
function _PredictChroma($mbPartChroma, $xAL, $yAL, $partWidth, $partHeight, $mv, $refPic) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $xFrac;
  var $yFrac;
  var $width;
  var $height;
  var $chromaPartWidth;
  var $chromaPartHeight;
  var $xInt;
  var $yInt;
  var $ref;
  $1 = $mbPartChroma;
  $2 = $xAL;
  $3 = $yAL;
  $4 = $partWidth;
  $5 = $partHeight;
  $6 = $mv;
  $7 = $refPic;
  $width = HEAP32[$7 + 4 >> 2] << 3;
  $height = HEAP32[$7 + 8 >> 2] << 3;
  $xInt = ($2 >>> 1) + (HEAP16[$6 >> 1] >> 3);
  $yInt = ($3 >>> 1) + (HEAP16[$6 + 2 >> 1] >> 3);
  $xFrac = HEAP16[$6 >> 1] & 7;
  $yFrac = HEAP16[$6 + 2 >> 1] & 7;
  $chromaPartWidth = $4 >>> 1;
  $chromaPartHeight = $5 >>> 1;
  $ref = HEAP32[$7 >> 2] + (HEAP32[$7 + 4 >> 2] << 8) * HEAP32[$7 + 8 >> 2];
  if ($xFrac != 0) {
    __label__ = 1;
  } else {
    __label__ = 3;
  }
  $60$$74$21 : do {
    if (__label__ == 1) {
      if (!($yFrac != 0)) {
        __label__ = 3;
        break $60$$74$21;
      }
      _h264bsdInterpolateChromaHorVer($ref, $1, $xInt, $yInt, $width, $height, $xFrac, $yFrac, $chromaPartWidth, $chromaPartHeight);
      __label__ = 10;
      break $60$$74$21;
    }
  } while (0);
  $125$$74$24 : do {
    if (__label__ == 3) {
      if ($xFrac != 0) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      $77$$87$26 : do {
        if (__label__ == 4) {
          _h264bsdInterpolateChromaHor($ref, $1, $xInt, $yInt, $width, $height, $xFrac, $chromaPartWidth, $chromaPartHeight);
        } else if (__label__ == 5) {
          if ($yFrac != 0) {
            __label__ = 6;
          } else {
            __label__ = 7;
          }
          $90$$100$29 : do {
            if (__label__ == 6) {
              _h264bsdInterpolateChromaVer($ref, $1, $xInt, $yInt, $width, $height, $yFrac, $chromaPartWidth, $chromaPartHeight);
            } else if (__label__ == 7) {
              _h264bsdFillBlock($ref, $1, $xInt, $yInt, $width, $height, $chromaPartWidth, $chromaPartHeight, 8);
              var $113 = $ref + $width * $height;
              $ref = $113;
              _h264bsdFillBlock($ref, $1 + 64, $xInt, $yInt, $width, $height, $chromaPartWidth, $chromaPartHeight, 8);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  return;
  return;
}
_PredictChroma["X"] = 1;
function _h264bsdFillRow7($ref, $fill, $left, $center, $right) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $tmp;
  $1 = $ref;
  $2 = $fill;
  $3 = $left;
  $4 = $center;
  $5 = $right;
  if ($3 != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $8$$11$36 : do {
    if (__label__ == 1) {
      $tmp = HEAP8[$1];
    }
  } while (0);
  $12$39 : while (1) {
    if (!($3 != 0)) {
      __label__ = 6;
      break $12$39;
    }
    var $17 = $2;
    var $18 = $17 + 1;
    $2 = $18;
    HEAP8[$17] = $tmp;
    var $21 = $3 - 1;
    $3 = $21;
  }
  $23$44 : while (1) {
    if (!($4 != 0)) {
      __label__ = 10;
      break $23$44;
    }
    var $27 = $1;
    var $28 = $27 + 1;
    $1 = $28;
    var $29 = HEAP8[$27];
    var $30 = $2;
    var $31 = $30 + 1;
    $2 = $31;
    HEAP8[$30] = $29;
    var $34 = $4 - 1;
    $4 = $34;
  }
  if ($5 != 0) {
    __label__ = 11;
  } else {
    __label__ = 12;
  }
  $38$$42$49 : do {
    if (__label__ == 11) {
      $tmp = HEAP8[$1 - 1];
    }
  } while (0);
  $43$52 : while (1) {
    if (!($5 != 0)) {
      __label__ = 16;
      break $43$52;
    }
    var $48 = $2;
    var $49 = $48 + 1;
    $2 = $49;
    HEAP8[$48] = $tmp;
    var $52 = $5 - 1;
    $5 = $52;
  }
  return;
  return;
}
_h264bsdFillRow7["X"] = 1;
function _SetPicNums($dpb, $currFrameNum) {
  var __label__;
  var $1;
  var $2;
  var $i;
  var $frameNumWrap;
  $1 = $dpb;
  $2 = $currFrameNum;
  $i = 0;
  $3$45 : while (1) {
    if (!($i < HEAPU32[$1 + 40 >> 2])) {
      __label__ = 10;
      break $3$45;
    }
    if (HEAP32[HEAP32[$1 >> 2] + $i * 40 + 20 >> 2] == 1) {
      __label__ = 4;
    } else {
      __label__ = 3;
    }
    $27$$18$48 : do {
      if (__label__ == 3) {
        if (HEAP32[HEAP32[$1 >> 2] + $i * 40 + 20 >> 2] == 2) {
          __label__ = 4;
          break $27$$18$48;
        } else {
          __label__ = 8;
          break $27$$18$48;
        }
      }
    } while (0);
    $27$$65$50 : do {
      if (__label__ == 4) {
        if (HEAPU32[HEAP32[$1 >> 2] + $i * 40 + 12 >> 2] > $2) {
          __label__ = 5;
        } else {
          __label__ = 6;
        }
        $37$$49$52 : do {
          if (__label__ == 5) {
            $frameNumWrap = HEAP32[HEAP32[$1 >> 2] + $i * 40 + 12 >> 2] - HEAP32[$1 + 32 >> 2];
          } else if (__label__ == 6) {
            $frameNumWrap = HEAP32[HEAP32[$1 >> 2] + $i * 40 + 12 >> 2];
          }
        } while (0);
        var $64 = HEAP32[$1 >> 2] + $i * 40 + 8;
        HEAP32[$64 >> 2] = $frameNumWrap;
      }
    } while (0);
    var $68 = $i + 1;
    $i = $68;
  }
  return;
  return;
}
_SetPicNums["X"] = 1;
function _FindDpbPic($dpb, $picNum, $isShortTerm) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $i;
  var $found;
  $2 = $dpb;
  $3 = $picNum;
  $4 = $isShortTerm;
  $i = 0;
  $found = 0;
  if ($4 != 0) {
    __label__ = 1;
  } else {
    __label__ = 12;
  }
  $7$$54$60 : do {
    if (__label__ == 1) {
      $8$62 : while (1) {
        if ($i < HEAPU32[$2 + 24 >> 2]) {
          __label__ = 3;
        } else {
          var $19 = 0;
          __label__ = 4;
        }
        $14$$18$64 : do {
          if (__label__ == 3) {
            var $19 = $found != 0 ^ 1;
          }
        } while (0);
        var $19;
        if (!$19) {
          __label__ = 11;
          break $8$62;
        }
        if (HEAP32[HEAP32[$2 >> 2] + $i * 40 + 20 >> 2] == 1) {
          __label__ = 7;
        } else {
          __label__ = 6;
        }
        $38$$29$68 : do {
          if (__label__ == 6) {
            if (HEAP32[HEAP32[$2 >> 2] + $i * 40 + 20 >> 2] == 2) {
              __label__ = 7;
              break $38$$29$68;
            } else {
              __label__ = 9;
              break $38$$29$68;
            }
          }
        } while (0);
        $38$$49$70 : do {
          if (__label__ == 7) {
            if (!(HEAP32[HEAP32[$2 >> 2] + $i * 40 + 8 >> 2] == $3)) {
              __label__ = 9;
              break $38$$49$70;
            }
            $found = 1;
            __label__ = 10;
            break $38$$49$70;
          }
        } while (0);
        $52$$49$73 : do {
          if (__label__ == 9) {
            var $51 = $i + 1;
            $i = $51;
          }
        } while (0);
      }
    } else if (__label__ == 12) {
      $55$78 : while (1) {
        if ($i < HEAPU32[$2 + 24 >> 2]) {
          __label__ = 14;
        } else {
          var $66 = 0;
          __label__ = 15;
        }
        $61$$65$80 : do {
          if (__label__ == 14) {
            var $66 = $found != 0 ^ 1;
          }
        } while (0);
        var $66;
        if (!$66) {
          __label__ = 21;
          break $55$78;
        }
        if (HEAP32[HEAP32[$2 >> 2] + $i * 40 + 20 >> 2] == 3) {
          __label__ = 17;
        } else {
          __label__ = 19;
        }
        $76$$87$84 : do {
          if (__label__ == 17) {
            if (!(HEAP32[HEAP32[$2 >> 2] + $i * 40 + 8 >> 2] == $3)) {
              __label__ = 19;
              break $76$$87$84;
            }
            $found = 1;
            __label__ = 20;
            break $76$$87$84;
          }
        } while (0);
        $90$$87$87 : do {
          if (__label__ == 19) {
            var $89 = $i + 1;
            $i = $89;
          }
        } while (0);
      }
    }
  } while (0);
  if ($found != 0) {
    __label__ = 23;
  } else {
    __label__ = 24;
  }
  $95$$97$92 : do {
    if (__label__ == 23) {
      $1 = $i;
    } else if (__label__ == 24) {
      $1 = -1;
    }
  } while (0);
  var $99 = $1;
  return $99;
  return null;
}
_FindDpbPic["X"] = 1;
function _h264bsdReorderRefPicList($dpb, $order, $currFrameNum, $numRefIdxActive) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $i;
  var $j;
  var $k;
  var $picNumPred;
  var $refIdx;
  var $picNum;
  var $picNumNoWrap;
  var $index;
  var $isShortTerm;
  $2 = $dpb;
  $3 = $order;
  $4 = $currFrameNum;
  $5 = $numRefIdxActive;
  _SetPicNums($2, $4);
  if (HEAP32[$3 >> 2] != 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $13$$12$2 : do {
    if (__label__ == 2) {
      $refIdx = 0;
      $picNumPred = $4;
      $i = 0;
      $15$4 : while (1) {
        if (!(HEAPU32[$3 + 4 + $i * 12 >> 2] < 3)) {
          __label__ = 30;
          break $15$4;
        }
        if (HEAPU32[$3 + 4 + $i * 12 >> 2] < 2) {
          __label__ = 5;
        } else {
          __label__ = 15;
        }
        $31$$91$7 : do {
          if (__label__ == 5) {
            if (HEAP32[$3 + 4 + $i * 12 >> 2] == 0) {
              __label__ = 6;
            } else {
              __label__ = 9;
            }
            $39$$57$9 : do {
              if (__label__ == 6) {
                $picNumNoWrap = $picNumPred - HEAP32[$3 + 4 + $i * 12 + 4 >> 2];
                if ($picNumNoWrap < 0) {
                  __label__ = 7;
                } else {
                  __label__ = 8;
                }
                $50$$56$11 : do {
                  if (__label__ == 7) {
                    var $55 = $picNumNoWrap + HEAP32[$2 + 32 >> 2];
                    $picNumNoWrap = $55;
                  }
                } while (0);
              } else if (__label__ == 9) {
                $picNumNoWrap = $picNumPred + HEAP32[$3 + 4 + $i * 12 + 4 >> 2];
                if ($picNumNoWrap >= HEAP32[$2 + 32 >> 2]) {
                  __label__ = 10;
                } else {
                  __label__ = 11;
                }
                $71$$77$15 : do {
                  if (__label__ == 10) {
                    var $76 = $picNumNoWrap - HEAP32[$2 + 32 >> 2];
                    $picNumNoWrap = $76;
                  }
                } while (0);
              }
            } while (0);
            $picNumPred = $picNumNoWrap;
            $picNum = $picNumNoWrap;
            if ($picNumNoWrap > $4) {
              __label__ = 13;
            } else {
              __label__ = 14;
            }
            $84$$90$19 : do {
              if (__label__ == 13) {
                var $89 = $picNum - HEAP32[$2 + 32 >> 2];
                $picNum = $89;
              }
            } while (0);
            $isShortTerm = 1;
          } else if (__label__ == 15) {
            $picNum = HEAP32[$3 + 4 + $i * 12 + 8 >> 2];
            $isShortTerm = 0;
          }
        } while (0);
        var $102 = _FindDpbPic($2, $picNum, $isShortTerm);
        $index = $102;
        if ($index < 0) {
          __label__ = 18;
          break $15$4;
        }
        if (!(HEAPU32[HEAP32[$2 >> 2] + $index * 40 + 20 >> 2] > 1)) {
          __label__ = 18;
          break $15$4;
        }
        $j = $5;
        $117$26 : while (1) {
          if (!($j > $refIdx)) {
            __label__ = 23;
            break $117$26;
          }
          var $128 = HEAP32[HEAP32[$2 + 4 >> 2] + ($j - 1 << 2) >> 2];
          var $133 = HEAP32[$2 + 4 >> 2] + ($j << 2);
          HEAP32[$133 >> 2] = $128;
          var $136 = $j - 1;
          $j = $136;
        }
        var $142 = HEAP32[$2 >> 2] + $index * 40;
        var $143 = $refIdx;
        var $144 = $143 + 1;
        $refIdx = $144;
        var $148 = HEAP32[$2 + 4 >> 2] + ($143 << 2);
        HEAP32[$148 >> 2] = $142;
        $k = $refIdx;
        $j = $refIdx;
        $150$31 : while (1) {
          if (!($j <= $5)) {
            __label__ = 29;
            break $150$31;
          }
          if (HEAP32[HEAP32[$2 + 4 >> 2] + ($j << 2) >> 2] != HEAP32[$2 >> 2] + $index * 40) {
            __label__ = 26;
          } else {
            __label__ = 27;
          }
          $167$$180$34 : do {
            if (__label__ == 26) {
              var $173 = HEAP32[HEAP32[$2 + 4 >> 2] + ($j << 2) >> 2];
              var $174 = $k;
              var $175 = $174 + 1;
              $k = $175;
              var $179 = HEAP32[$2 + 4 >> 2] + ($174 << 2);
              HEAP32[$179 >> 2] = $173;
            }
          } while (0);
          var $183 = $j + 1;
          $j = $183;
        }
        var $186 = $i + 1;
        $i = $186;
      }
      $187$$114$39 : do {
        if (__label__ == 30) {
          $1 = 0;
        } else if (__label__ == 18) {
          $1 = 1;
        }
      } while (0);
    } else if (__label__ == 1) {
      $1 = 0;
    }
  } while (0);
  var $189 = $1;
  return $189;
  return null;
}
_h264bsdReorderRefPicList["X"] = 1;
function _h264bsdMarkDecRefPic($dpb, $mark, $image, $frameNum, $picOrderCnt, $isIdr, $currentPicId, $numErrMbs) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  var $9;
  var $i;
  var $status;
  var $markedAsLongTerm;
  var $toBeDisplayed;
  $2 = $dpb;
  $3 = $mark;
  $4 = $image;
  $5 = $frameNum;
  $6 = $picOrderCnt;
  $7 = $isIdr;
  $8 = $currentPicId;
  $9 = $numErrMbs;
  if (HEAP32[$4 >> 2] != HEAP32[HEAP32[$2 + 8 >> 2] >> 2]) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $19$$20$2 : do {
    if (__label__ == 1) {
      $1 = 1;
    } else if (__label__ == 2) {
      HEAP32[$2 + 52 >> 2] = 0;
      $status = 0;
      var $27 = HEAP32[$2 + 56 >> 2] != 0 ? 0 : 1;
      $toBeDisplayed = $27;
      if ($3 == 0) {
        __label__ = 3;
      } else {
        __label__ = 6;
      }
      $30$$65$5 : do {
        if (__label__ == 3) {
          var $34 = HEAP32[$2 + 8 >> 2] + 20;
          HEAP32[$34 >> 2] = 0;
          var $39 = HEAP32[$2 + 8 >> 2] + 12;
          HEAP32[$39 >> 2] = $5;
          var $44 = HEAP32[$2 + 8 >> 2] + 8;
          HEAP32[$44 >> 2] = $5;
          var $49 = HEAP32[$2 + 8 >> 2] + 16;
          HEAP32[$49 >> 2] = $6;
          var $54 = HEAP32[$2 + 8 >> 2] + 24;
          HEAP32[$54 >> 2] = $toBeDisplayed;
          if (HEAP32[$2 + 56 >> 2] != 0) {
            __label__ = 5;
          } else {
            __label__ = 4;
          }
          $64$$59$7 : do {
            if (__label__ == 4) {
              var $63 = HEAP32[$2 + 44 >> 2] + 1;
              HEAP32[$2 + 44 >> 2] = $63;
            }
          } while (0);
        } else if (__label__ == 6) {
          if ($7 != 0) {
            __label__ = 7;
          } else {
            __label__ = 14;
          }
          $68$$130$11 : do {
            if (__label__ == 7) {
              HEAP32[$2 + 20 >> 2] = 0;
              HEAP32[$2 + 16 >> 2] = 0;
              var $74 = _Mmcop5($2);
              if (HEAP32[$3 >> 2] != 0) {
                __label__ = 9;
              } else {
                __label__ = 8;
              }
              $84$$79$13 : do {
                if (__label__ == 8) {
                  if (HEAP32[$2 + 56 >> 2] != 0) {
                    __label__ = 9;
                    break $84$$79$13;
                  } else {
                    __label__ = 10;
                    break $84$$79$13;
                  }
                }
              } while (0);
              $84$$89$15 : do {
                if (__label__ == 9) {
                  HEAP32[$2 + 16 >> 2] = 0;
                  HEAP32[$2 + 20 >> 2] = 0;
                }
              } while (0);
              if (HEAP32[$3 + 4 >> 2] != 0) {
                __label__ = 11;
              } else {
                __label__ = 12;
              }
              $94$$101$18 : do {
                if (__label__ == 11) {
                  var $98 = HEAP32[$2 + 8 >> 2] + 20;
                  HEAP32[$98 >> 2] = 3;
                  HEAP32[$2 + 36 >> 2] = 0;
                } else if (__label__ == 12) {
                  var $105 = HEAP32[$2 + 8 >> 2] + 20;
                  HEAP32[$105 >> 2] = 2;
                  HEAP32[$2 + 36 >> 2] = 65535;
                }
              } while (0);
              var $112 = HEAP32[$2 + 8 >> 2] + 12;
              HEAP32[$112 >> 2] = 0;
              var $116 = HEAP32[$2 + 8 >> 2] + 8;
              HEAP32[$116 >> 2] = 0;
              var $120 = HEAP32[$2 + 8 >> 2] + 16;
              HEAP32[$120 >> 2] = 0;
              var $125 = HEAP32[$2 + 8 >> 2] + 24;
              HEAP32[$125 >> 2] = $toBeDisplayed;
              HEAP32[$2 + 44 >> 2] = 1;
              HEAP32[$2 + 40 >> 2] = 1;
            } else if (__label__ == 14) {
              $markedAsLongTerm = 0;
              if (HEAP32[$3 + 8 >> 2] != 0) {
                __label__ = 15;
              } else {
                __label__ = 31;
              }
              $135$$224$23 : do {
                if (__label__ == 15) {
                  $i = 0;
                  $136$25 : while (1) {
                    if (!(HEAP32[$3 + 12 + $i * 20 >> 2] != 0)) {
                      __label__ = 30;
                      break $136$25;
                    }
                    var $150 = HEAP32[$3 + 12 + $i * 20 >> 2];
                    if ($150 == 1) {
                      __label__ = 18;
                    } else if ($150 == 2) {
                      __label__ = 19;
                    } else if ($150 == 3) {
                      __label__ = 20;
                    } else if ($150 == 4) {
                      __label__ = 21;
                    } else if ($150 == 5) {
                      __label__ = 22;
                    } else if ($150 == 6) {
                      __label__ = 23;
                    } else {
                      __label__ = 26;
                    }
                    $215$$151$$161$$170$$186$$195$$200$28 : do {
                      if (__label__ == 26) {
                        $status = 1;
                      } else if (__label__ == 18) {
                        var $159 = HEAP32[$3 + 12 + $i * 20 + 4 >> 2];
                        var $160 = _Mmcop1($2, $5, $159);
                        $status = $160;
                      } else if (__label__ == 19) {
                        var $168 = HEAP32[$3 + 12 + $i * 20 + 8 >> 2];
                        var $169 = _Mmcop2($2, $168);
                        $status = $169;
                      } else if (__label__ == 20) {
                        var $178 = HEAP32[$3 + 12 + $i * 20 + 4 >> 2];
                        var $184 = HEAP32[$3 + 12 + $i * 20 + 12 >> 2];
                        var $185 = _Mmcop3($2, $5, $178, $184);
                        $status = $185;
                      } else if (__label__ == 21) {
                        var $193 = HEAP32[$3 + 12 + $i * 20 + 16 >> 2];
                        var $194 = _Mmcop4($2, $193);
                        $status = $194;
                      } else if (__label__ == 22) {
                        var $197 = _Mmcop5($2);
                        $status = $197;
                        HEAP32[$2 + 52 >> 2] = 1;
                        $5 = 0;
                      } else if (__label__ == 23) {
                        var $209 = HEAP32[$3 + 12 + $i * 20 + 12 >> 2];
                        var $210 = _Mmcop6($2, $5, $6, $209);
                        $status = $210;
                        if ($status == 0) {
                          __label__ = 24;
                        } else {
                          __label__ = 25;
                        }
                        $213$$214$36 : do {
                          if (__label__ == 24) {
                            $markedAsLongTerm = 1;
                          }
                        } while (0);
                      }
                    } while (0);
                    if ($status != 0) {
                      __label__ = 28;
                      break $136$25;
                    }
                    var $222 = $i + 1;
                    $i = $222;
                  }
                  $223$$219$41 : do {
                    if (__label__ == 28) {}
                  } while (0);
                } else if (__label__ == 31) {
                  var $226 = _SlidingWindowRefPicMarking($2);
                  $status = $226;
                }
              } while (0);
              if ($markedAsLongTerm != 0) {
                __label__ = 37;
              } else {
                __label__ = 33;
              }
              $273$$230$46 : do {
                if (__label__ == 33) {
                  if (HEAPU32[$2 + 40 >> 2] < HEAPU32[$2 + 24 >> 2]) {
                    __label__ = 34;
                  } else {
                    __label__ = 35;
                  }
                  $238$$271$48 : do {
                    if (__label__ == 34) {
                      var $243 = HEAP32[$2 + 8 >> 2] + 12;
                      HEAP32[$243 >> 2] = $5;
                      var $248 = HEAP32[$2 + 8 >> 2] + 8;
                      HEAP32[$248 >> 2] = $5;
                      var $253 = HEAP32[$2 + 8 >> 2] + 16;
                      HEAP32[$253 >> 2] = $6;
                      var $257 = HEAP32[$2 + 8 >> 2] + 20;
                      HEAP32[$257 >> 2] = 2;
                      var $262 = HEAP32[$2 + 8 >> 2] + 24;
                      HEAP32[$262 >> 2] = $toBeDisplayed;
                      var $266 = HEAP32[$2 + 44 >> 2] + 1;
                      HEAP32[$2 + 44 >> 2] = $266;
                      var $270 = HEAP32[$2 + 40 >> 2] + 1;
                      HEAP32[$2 + 40 >> 2] = $270;
                    } else if (__label__ == 35) {
                      $status = 1;
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
      var $280 = HEAP32[$2 + 8 >> 2] + 36;
      HEAP32[$280 >> 2] = $7;
      var $285 = HEAP32[$2 + 8 >> 2] + 28;
      HEAP32[$285 >> 2] = $8;
      var $290 = HEAP32[$2 + 8 >> 2] + 32;
      HEAP32[$290 >> 2] = $9;
      if (HEAP32[$2 + 56 >> 2] != 0) {
        __label__ = 40;
      } else {
        __label__ = 41;
      }
      $295$$352$55 : do {
        if (__label__ == 40) {
          var $300 = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
          var $308 = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 16 >> 2] << 4);
          HEAP32[$308 >> 2] = $300;
          var $313 = HEAP32[HEAP32[$2 + 8 >> 2] + 36 >> 2];
          var $321 = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 16 >> 2] << 4) + 12;
          HEAP32[$321 >> 2] = $313;
          var $326 = HEAP32[HEAP32[$2 + 8 >> 2] + 28 >> 2];
          var $334 = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 16 >> 2] << 4) + 4;
          HEAP32[$334 >> 2] = $326;
          var $339 = HEAP32[HEAP32[$2 + 8 >> 2] + 32 >> 2];
          var $347 = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 16 >> 2] << 4) + 8;
          HEAP32[$347 >> 2] = $339;
          var $351 = HEAP32[$2 + 16 >> 2] + 1;
          HEAP32[$2 + 16 >> 2] = $351;
        } else if (__label__ == 41) {
          $353$58 : while (1) {
            if (!(HEAPU32[$2 + 44 >> 2] > HEAPU32[$2 + 28 >> 2])) {
              __label__ = 44;
              break $353$58;
            }
            var $363 = _OutputPicture($2);
            $i = $363;
          }
        }
      } while (0);
      var $368 = HEAP32[$2 >> 2];
      var $372 = HEAP32[$2 + 28 >> 2] + 1;
      _ShellSort($368, $372);
      $1 = $status;
    }
  } while (0);
  var $375 = $1;
  return $375;
  return null;
}
_h264bsdMarkDecRefPic["X"] = 1;
function _Mmcop5($dpb) {
  var __label__;
  var $1;
  var $i;
  $1 = $dpb;
  $i = 0;
  $2$65 : while (1) {
    if (!($i < 16)) {
      __label__ = 8;
      break $2$65;
    }
    if (HEAP32[HEAP32[$1 >> 2] + $i * 40 + 20 >> 2] != 0) {
      __label__ = 3;
    } else {
      __label__ = 6;
    }
    $14$$35$68 : do {
      if (__label__ == 3) {
        var $20 = HEAP32[$1 >> 2] + $i * 40 + 20;
        HEAP32[$20 >> 2] = 0;
        if (HEAP32[HEAP32[$1 >> 2] + $i * 40 + 24 >> 2] != 0) {
          __label__ = 5;
        } else {
          __label__ = 4;
        }
        $34$$29$70 : do {
          if (__label__ == 4) {
            var $33 = HEAP32[$1 + 44 >> 2] - 1;
            HEAP32[$1 + 44 >> 2] = $33;
          }
        } while (0);
      }
    } while (0);
    var $38 = $i + 1;
    $i = $38;
  }
  $40$76 : while (1) {
    var $42 = _OutputPicture($1);
    if (!($42 == 0)) {
      __label__ = 11;
      break $40$76;
    }
  }
  HEAP32[$1 + 40 >> 2] = 0;
  HEAP32[$1 + 36 >> 2] = 65535;
  HEAP32[$1 + 48 >> 2] = 0;
  return 0;
  return null;
}
_Mmcop5["X"] = 1;
function _Mmcop1($dpb, $currPicNum, $differenceOfPicNums) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $index;
  var $picNum;
  $2 = $dpb;
  $3 = $currPicNum;
  $4 = $differenceOfPicNums;
  $picNum = $3 - $4;
  var $10 = _FindDpbPic($2, $picNum, 1);
  $index = $10;
  if ($index < 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $13$$14$81 : do {
    if (__label__ == 1) {
      $1 = 1;
    } else if (__label__ == 2) {
      var $20 = HEAP32[$2 >> 2] + $index * 40 + 20;
      HEAP32[$20 >> 2] = 0;
      var $24 = HEAP32[$2 + 40 >> 2] - 1;
      HEAP32[$2 + 40 >> 2] = $24;
      if (HEAP32[HEAP32[$2 >> 2] + $index * 40 + 24 >> 2] != 0) {
        __label__ = 4;
      } else {
        __label__ = 3;
      }
      $38$$33$84 : do {
        if (__label__ == 3) {
          var $37 = HEAP32[$2 + 44 >> 2] - 1;
          HEAP32[$2 + 44 >> 2] = $37;
        }
      } while (0);
      $1 = 0;
    }
  } while (0);
  var $40 = $1;
  return $40;
  return null;
}
_Mmcop1["X"] = 1;
function _Mmcop2($dpb, $longTermPicNum) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $index;
  $2 = $dpb;
  $3 = $longTermPicNum;
  var $6 = _FindDpbPic($2, $3, 0);
  $index = $6;
  if ($index < 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $9$$10$89 : do {
    if (__label__ == 1) {
      $1 = 1;
    } else if (__label__ == 2) {
      var $16 = HEAP32[$2 >> 2] + $index * 40 + 20;
      HEAP32[$16 >> 2] = 0;
      var $20 = HEAP32[$2 + 40 >> 2] - 1;
      HEAP32[$2 + 40 >> 2] = $20;
      if (HEAP32[HEAP32[$2 >> 2] + $index * 40 + 24 >> 2] != 0) {
        __label__ = 4;
      } else {
        __label__ = 3;
      }
      $34$$29$92 : do {
        if (__label__ == 3) {
          var $33 = HEAP32[$2 + 44 >> 2] - 1;
          HEAP32[$2 + 44 >> 2] = $33;
        }
      } while (0);
      $1 = 0;
    }
  } while (0);
  var $36 = $1;
  return $36;
  return null;
}
function _Mmcop3($dpb, $currPicNum, $differenceOfPicNums, $longTermFrameIdx) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $index;
  var $picNum;
  var $i;
  $2 = $dpb;
  $3 = $currPicNum;
  $4 = $differenceOfPicNums;
  $5 = $longTermFrameIdx;
  if (HEAP32[$2 + 36 >> 2] == 65535) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $16$$10$97 : do {
    if (__label__ == 1) {
      if ($5 > HEAPU32[$2 + 36 >> 2]) {
        __label__ = 2;
        break $16$$10$97;
      }
      $i = 0;
      $18$100 : while (1) {
        if (!($i < HEAPU32[$2 + 24 >> 2])) {
          __label__ = 12;
          break $18$100;
        }
        if (HEAP32[HEAP32[$2 >> 2] + $i * 40 + 20 >> 2] == 3) {
          __label__ = 6;
        } else {
          __label__ = 10;
        }
        $33$$68$103 : do {
          if (__label__ == 6) {
            if (HEAP32[HEAP32[$2 >> 2] + $i * 40 + 8 >> 2] == $5) {
              __label__ = 7;
              break $18$100;
            }
          }
        } while (0);
        var $71 = $i + 1;
        $i = $71;
      }
      $72$$43$107 : do {
        if (__label__ == 7) {
          var $49 = HEAP32[$2 >> 2] + $i * 40 + 20;
          HEAP32[$49 >> 2] = 0;
          var $53 = HEAP32[$2 + 40 >> 2] - 1;
          HEAP32[$2 + 40 >> 2] = $53;
          if (HEAP32[HEAP32[$2 >> 2] + $i * 40 + 24 >> 2] != 0) {
            __label__ = 9;
          } else {
            __label__ = 8;
          }
          $67$$62$109 : do {
            if (__label__ == 8) {
              var $66 = HEAP32[$2 + 44 >> 2] - 1;
              HEAP32[$2 + 44 >> 2] = $66;
            }
          } while (0);
        }
      } while (0);
      $picNum = $3 - $4;
      var $78 = _FindDpbPic($2, $picNum, 1);
      $index = $78;
      if ($index < 0) {
        __label__ = 13;
      } else {
        __label__ = 14;
      }
      $81$$82$113 : do {
        if (__label__ == 13) {
          $1 = 1;
          __label__ = 17;
          break $16$$10$97;
        } else if (__label__ == 14) {
          if (HEAPU32[HEAP32[$2 >> 2] + $index * 40 + 20 >> 2] > 1) {
            __label__ = 16;
          } else {
            __label__ = 15;
          }
          $92$$91$116 : do {
            if (__label__ == 16) {
              var $98 = HEAP32[$2 >> 2] + $index * 40 + 20;
              HEAP32[$98 >> 2] = 3;
              var $105 = HEAP32[$2 >> 2] + $index * 40 + 8;
              HEAP32[$105 >> 2] = $5;
              $1 = 0;
              __label__ = 17;
              break $16$$10$97;
            } else if (__label__ == 15) {
              $1 = 1;
              __label__ = 17;
              break $16$$10$97;
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  $16$$106$119 : do {
    if (__label__ == 2) {
      $1 = 1;
    }
  } while (0);
  var $107 = $1;
  return $107;
  return null;
}
_Mmcop3["X"] = 1;
function _Mmcop4($dpb, $maxLongTermFrameIdx) {
  var __label__;
  var $1;
  var $2;
  var $i;
  $1 = $dpb;
  $2 = $maxLongTermFrameIdx;
  HEAP32[$1 + 36 >> 2] = $2;
  $i = 0;
  $6$2 : while (1) {
    if (!($i < HEAPU32[$1 + 24 >> 2])) {
      __label__ = 10;
      break $6$2;
    }
    if (HEAP32[HEAP32[$1 >> 2] + $i * 40 + 20 >> 2] == 3) {
      __label__ = 3;
    } else {
      __label__ = 8;
    }
    $21$$61$5 : do {
      if (__label__ == 3) {
        if (HEAPU32[HEAP32[$1 >> 2] + $i * 40 + 8 >> 2] > $2) {
          __label__ = 5;
        } else {
          __label__ = 4;
        }
        $36$$31$7 : do {
          if (__label__ == 4) {
            if (!(HEAP32[$1 + 36 >> 2] == 65535)) {
              __label__ = 8;
              break $21$$61$5;
            }
          }
        } while (0);
        var $42 = HEAP32[$1 >> 2] + $i * 40 + 20;
        HEAP32[$42 >> 2] = 0;
        var $46 = HEAP32[$1 + 40 >> 2] - 1;
        HEAP32[$1 + 40 >> 2] = $46;
        if (HEAP32[HEAP32[$1 >> 2] + $i * 40 + 24 >> 2] != 0) {
          __label__ = 7;
        } else {
          __label__ = 6;
        }
        $60$$55$10 : do {
          if (__label__ == 6) {
            var $59 = HEAP32[$1 + 44 >> 2] - 1;
            HEAP32[$1 + 44 >> 2] = $59;
          }
        } while (0);
      }
    } while (0);
    var $64 = $i + 1;
    $i = $64;
  }
  return 0;
  return null;
}
_Mmcop4["X"] = 1;
function _Mmcop6($dpb, $frameNum, $picOrderCnt, $longTermFrameIdx) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $i;
  $2 = $dpb;
  $3 = $frameNum;
  $4 = $picOrderCnt;
  $5 = $longTermFrameIdx;
  if (HEAP32[$2 + 36 >> 2] == 65535) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $16$$10$17 : do {
    if (__label__ == 1) {
      if ($5 > HEAPU32[$2 + 36 >> 2]) {
        __label__ = 2;
        break $16$$10$17;
      }
      $i = 0;
      $18$20 : while (1) {
        if (!($i < HEAPU32[$2 + 24 >> 2])) {
          __label__ = 12;
          break $18$20;
        }
        if (HEAP32[HEAP32[$2 >> 2] + $i * 40 + 20 >> 2] == 3) {
          __label__ = 6;
        } else {
          __label__ = 10;
        }
        $33$$68$23 : do {
          if (__label__ == 6) {
            if (HEAP32[HEAP32[$2 >> 2] + $i * 40 + 8 >> 2] == $5) {
              __label__ = 7;
              break $18$20;
            }
          }
        } while (0);
        var $71 = $i + 1;
        $i = $71;
      }
      $72$$43$27 : do {
        if (__label__ == 7) {
          var $49 = HEAP32[$2 >> 2] + $i * 40 + 20;
          HEAP32[$49 >> 2] = 0;
          var $53 = HEAP32[$2 + 40 >> 2] - 1;
          HEAP32[$2 + 40 >> 2] = $53;
          if (HEAP32[HEAP32[$2 >> 2] + $i * 40 + 24 >> 2] != 0) {
            __label__ = 9;
          } else {
            __label__ = 8;
          }
          $67$$62$29 : do {
            if (__label__ == 8) {
              var $66 = HEAP32[$2 + 44 >> 2] - 1;
              HEAP32[$2 + 44 >> 2] = $66;
            }
          } while (0);
        }
      } while (0);
      if (HEAPU32[$2 + 40 >> 2] < HEAPU32[$2 + 24 >> 2]) {
        __label__ = 13;
      } else {
        __label__ = 17;
      }
      $80$$123$33 : do {
        if (__label__ == 13) {
          var $85 = HEAP32[$2 + 8 >> 2] + 12;
          HEAP32[$85 >> 2] = $3;
          var $90 = HEAP32[$2 + 8 >> 2] + 8;
          HEAP32[$90 >> 2] = $5;
          var $95 = HEAP32[$2 + 8 >> 2] + 16;
          HEAP32[$95 >> 2] = $4;
          var $99 = HEAP32[$2 + 8 >> 2] + 20;
          HEAP32[$99 >> 2] = 3;
          if (HEAP32[$2 + 56 >> 2] != 0) {
            __label__ = 14;
          } else {
            __label__ = 15;
          }
          $104$$109$35 : do {
            if (__label__ == 14) {
              var $108 = HEAP32[$2 + 8 >> 2] + 24;
              HEAP32[$108 >> 2] = 0;
            } else if (__label__ == 15) {
              var $113 = HEAP32[$2 + 8 >> 2] + 24;
              HEAP32[$113 >> 2] = 1;
            }
          } while (0);
          var $118 = HEAP32[$2 + 40 >> 2] + 1;
          HEAP32[$2 + 40 >> 2] = $118;
          var $122 = HEAP32[$2 + 44 >> 2] + 1;
          HEAP32[$2 + 44 >> 2] = $122;
          $1 = 0;
          __label__ = 18;
          break $16$$10$17;
        } else if (__label__ == 17) {
          $1 = 1;
          __label__ = 18;
          break $16$$10$17;
        }
      } while (0);
    }
  } while (0);
  $16$$124$40 : do {
    if (__label__ == 2) {
      $1 = 1;
    }
  } while (0);
  var $125 = $1;
  return $125;
  return null;
}
_Mmcop6["X"] = 1;
function _SlidingWindowRefPicMarking($dpb) {
  var __label__;
  var $1;
  var $2;
  var $index;
  var $picNum;
  var $i;
  $2 = $dpb;
  if (HEAPU32[$2 + 40 >> 2] < HEAPU32[$2 + 24 >> 2]) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $10$$11$44 : do {
    if (__label__ == 1) {
      $1 = 0;
    } else if (__label__ == 2) {
      $index = -1;
      $picNum = 0;
      $i = 0;
      $12$47 : while (1) {
        if (!($i < HEAPU32[$2 + 40 >> 2])) {
          __label__ = 12;
          break $12$47;
        }
        if (HEAP32[HEAP32[$2 >> 2] + $i * 40 + 20 >> 2] == 1) {
          __label__ = 6;
        } else {
          __label__ = 5;
        }
        $36$$27$50 : do {
          if (__label__ == 5) {
            if (HEAP32[HEAP32[$2 >> 2] + $i * 40 + 20 >> 2] == 2) {
              __label__ = 6;
              break $36$$27$50;
            } else {
              __label__ = 10;
              break $36$$27$50;
            }
          }
        } while (0);
        $36$$59$52 : do {
          if (__label__ == 6) {
            if (HEAP32[HEAP32[$2 >> 2] + $i * 40 + 8 >> 2] < $picNum) {
              __label__ = 8;
            } else {
              __label__ = 7;
            }
            $49$$46$54 : do {
              if (__label__ == 7) {
                if ($index == -1) {
                  __label__ = 8;
                  break $49$$46$54;
                } else {
                  __label__ = 9;
                  break $49$$46$54;
                }
              }
            } while (0);
            $49$$58$56 : do {
              if (__label__ == 8) {
                $index = $i;
                $picNum = HEAP32[HEAP32[$2 >> 2] + $i * 40 + 8 >> 2];
              }
            } while (0);
          }
        } while (0);
        var $62 = $i + 1;
        $i = $62;
      }
      if ($index >= 0) {
        __label__ = 13;
      } else {
        __label__ = 16;
      }
      $66$$91$62 : do {
        if (__label__ == 13) {
          var $72 = HEAP32[$2 >> 2] + $index * 40 + 20;
          HEAP32[$72 >> 2] = 0;
          var $76 = HEAP32[$2 + 40 >> 2] - 1;
          HEAP32[$2 + 40 >> 2] = $76;
          if (HEAP32[HEAP32[$2 >> 2] + $index * 40 + 24 >> 2] != 0) {
            __label__ = 15;
          } else {
            __label__ = 14;
          }
          $90$$85$64 : do {
            if (__label__ == 14) {
              var $89 = HEAP32[$2 + 44 >> 2] - 1;
              HEAP32[$2 + 44 >> 2] = $89;
            }
          } while (0);
          $1 = 0;
        } else if (__label__ == 16) {
          $1 = 1;
        }
      } while (0);
    }
  } while (0);
  var $94 = $1;
  return $94;
  return null;
}
_SlidingWindowRefPicMarking["X"] = 1;
function _h264bsdGetRefPicData($dpb, $index) {
  var __label__;
  var $1;
  var $2;
  var $3;
  $2 = $dpb;
  $3 = $index;
  if ($3 > 16) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $14$$6$99 : do {
    if (__label__ == 1) {
      if (HEAP32[HEAP32[$2 + 4 >> 2] + ($3 << 2) >> 2] == 0) {
        __label__ = 2;
        break $14$$6$99;
      }
      if (HEAPU32[HEAP32[HEAP32[$2 + 4 >> 2] + ($3 << 2) >> 2] + 20 >> 2] > 1) {
        __label__ = 5;
      } else {
        __label__ = 4;
      }
      $26$$25$102 : do {
        if (__label__ == 5) {
          $1 = HEAP32[HEAP32[HEAP32[$2 + 4 >> 2] + ($3 << 2) >> 2] >> 2];
          __label__ = 6;
          break $14$$6$99;
        } else if (__label__ == 4) {
          $1 = 0;
          __label__ = 6;
          break $14$$6$99;
        }
      } while (0);
    }
  } while (0);
  $14$$35$105 : do {
    if (__label__ == 2) {
      $1 = 0;
    }
  } while (0);
  var $36 = $1;
  return $36;
  return null;
}
function _h264bsdAllocateDpbImage($dpb) {
  var $1;
  $1 = $dpb;
  var $8 = HEAP32[$1 >> 2] + HEAP32[$1 + 28 >> 2] * 40;
  HEAP32[$1 + 8 >> 2] = $8;
  var $15 = HEAP32[HEAP32[$1 + 8 >> 2] >> 2];
  return $15;
  return null;
}
function _OutputPicture($dpb) {
  var __label__;
  var $1;
  var $2;
  var $tmp;
  $2 = $dpb;
  if (HEAP32[$2 + 56 >> 2] != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $7$$8$71 : do {
    if (__label__ == 1) {
      $1 = 1;
    } else if (__label__ == 2) {
      var $10 = _FindSmallestPicOrderCnt($2);
      $tmp = $10;
      if ($tmp == 0) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $13$$14$74 : do {
        if (__label__ == 3) {
          $1 = 1;
        } else if (__label__ == 4) {
          var $17 = HEAP32[$tmp >> 2];
          var $25 = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 16 >> 2] << 4);
          HEAP32[$25 >> 2] = $17;
          var $28 = HEAP32[$tmp + 36 >> 2];
          var $36 = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 16 >> 2] << 4) + 12;
          HEAP32[$36 >> 2] = $28;
          var $39 = HEAP32[$tmp + 28 >> 2];
          var $47 = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 16 >> 2] << 4) + 4;
          HEAP32[$47 >> 2] = $39;
          var $50 = HEAP32[$tmp + 32 >> 2];
          var $58 = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 16 >> 2] << 4) + 8;
          HEAP32[$58 >> 2] = $50;
          var $62 = HEAP32[$2 + 16 >> 2] + 1;
          HEAP32[$2 + 16 >> 2] = $62;
          HEAP32[$tmp + 24 >> 2] = 0;
          if (HEAP32[$tmp + 20 >> 2] != 0) {
            __label__ = 6;
          } else {
            __label__ = 5;
          }
          $74$$69$77 : do {
            if (__label__ == 5) {
              var $73 = HEAP32[$2 + 44 >> 2] - 1;
              HEAP32[$2 + 44 >> 2] = $73;
            }
          } while (0);
          $1 = 0;
        }
      } while (0);
    }
  } while (0);
  var $76 = $1;
  return $76;
  return null;
}
_OutputPicture["X"] = 1;
function _ShellSort($pPic, $num) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 40;
  var __label__;
  var $1;
  var $2;
  var $i;
  var $j;
  var $step;
  var $tmpPic = __stackBase__;
  $1 = $pPic;
  $2 = $num;
  $step = 7;
  $3$82 : while (1) {
    if (!($step != 0)) {
      __label__ = 12;
      break $3$82;
    }
    $i = $step;
    $8$85 : while (1) {
      if (!($i < $2)) {
        __label__ = 11;
        break $8$85;
      }
      var $16 = $tmpPic;
      var src, dest, stop, stop4;
      src = $1 + $i * 40;
      dest = $16;
      stop = src + 40;
      if (dest % 4 == src % 4 && 40 > 8) {
        while (src % 4 !== 0 && src < stop) {
          HEAP8[dest++] = HEAP8[src++];
        }
        src >>= 2;
        dest >>= 2;
        stop4 = stop >> 2;
        while (src < stop4) {
          HEAP32[dest++] = HEAP32[src++];
        }
        src <<= 2;
        dest <<= 2;
      }
      while (src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
      $j = $i;
      $19$88 : while (1) {
        if ($j >= $step) {
          __label__ = 6;
        } else {
          var $35 = 0;
          __label__ = 7;
        }
        $23$$34$90 : do {
          if (__label__ == 6) {
            var $31 = $tmpPic;
            var $32 = _ComparePictures($1 + $j * 40 + -$step * 40, $31);
            var $35 = $32 > 0;
          }
        } while (0);
        var $35;
        if (!$35) {
          __label__ = 9;
          break $19$88;
        }
        var src, dest, stop, stop4;
        src = $1 + ($j - $step) * 40;
        dest = $1 + $j * 40;
        stop = src + 40;
        if (dest % 4 == src % 4 && 40 > 8) {
          while (src % 4 !== 0 && src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          src >>= 2;
          dest >>= 2;
          stop4 = stop >> 2;
          while (src < stop4) {
            HEAP32[dest++] = HEAP32[src++];
          }
          src <<= 2;
          dest <<= 2;
        }
        while (src < stop) {
          HEAP8[dest++] = HEAP8[src++];
        }
        var $49 = $j - $step;
        $j = $49;
      }
      var src, dest, stop, stop4;
      src = $tmpPic;
      dest = $1 + $j * 40;
      stop = src + 40;
      if (dest % 4 == src % 4 && 40 > 8) {
        while (src % 4 !== 0 && src < stop) {
          HEAP8[dest++] = HEAP8[src++];
        }
        src >>= 2;
        dest >>= 2;
        stop4 = stop >> 2;
        while (src < stop4) {
          HEAP32[dest++] = HEAP32[src++];
        }
        src <<= 2;
        dest <<= 2;
      }
      while (src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
      var $58 = $i + 1;
      $i = $58;
    }
    var $61 = $step >>> 1;
    $step = $61;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
_ShellSort["X"] = 1;
function _h264bsdInitDpb($dpb, $picSizeInMbs, $dpbSize, $maxRefFrames, $maxFrameNum, $noReordering) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $i;
  $2 = $dpb;
  $3 = $picSizeInMbs;
  $4 = $dpbSize;
  $5 = $maxRefFrames;
  $6 = $maxFrameNum;
  $7 = $noReordering;
  HEAP32[$2 + 36 >> 2] = 65535;
  if ($5 > 1) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $12$$14$110 : do {
    if (__label__ == 1) {
      var $16 = $5;
    } else if (__label__ == 2) {
      var $16 = 1;
    }
  } while (0);
  var $16;
  HEAP32[$2 + 24 >> 2] = $16;
  if ($7 != 0) {
    __label__ = 4;
  } else {
    __label__ = 5;
  }
  $21$$27$114 : do {
    if (__label__ == 4) {
      var $24 = HEAP32[$2 + 24 >> 2];
      HEAP32[$2 + 28 >> 2] = $24;
    } else if (__label__ == 5) {
      HEAP32[$2 + 28 >> 2] = $4;
    }
  } while (0);
  HEAP32[$2 + 32 >> 2] = $6;
  HEAP32[$2 + 56 >> 2] = $7;
  HEAP32[$2 + 44 >> 2] = 0;
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 48 >> 2] = 0;
  var $44 = _H264SwDecMalloc(680);
  HEAP32[$2 >> 2] = $44;
  if (HEAP32[$2 >> 2] == 0) {
    __label__ = 7;
  } else {
    __label__ = 8;
  }
  $52$$53$118 : do {
    if (__label__ == 7) {
      $1 = 65535;
    } else if (__label__ == 8) {
      var $57 = HEAP32[$2 >> 2];
      _H264SwDecMemset($57, 0, 680);
      $i = 0;
      $58$121 : while (1) {
        if (!($i < HEAP32[$2 + 28 >> 2] + 1)) {
          __label__ = 14;
          break $58$121;
        }
        var $71 = _H264SwDecMalloc($3 * 384 + 32 + 15);
        var $77 = HEAP32[$2 >> 2] + $i * 40 + 4;
        HEAP32[$77 >> 2] = $71;
        if (HEAP32[HEAP32[$2 >> 2] + $i * 40 + 4 >> 2] == 0) {
          __label__ = 11;
          break $58$121;
        }
        var $94 = HEAP32[HEAP32[$2 >> 2] + $i * 40 + 4 >> 2];
        var $104 = 16 - HEAP32[HEAP32[$2 >> 2] + $i * 40 + 4 >> 2] & 15;
        var $105 = Math.floor($104);
        var $106 = $94 + $105;
        var $112 = HEAP32[$2 >> 2] + $i * 40;
        HEAP32[$112 >> 2] = $106;
        var $115 = $i + 1;
        $i = $115;
      }
      $116$$86$126 : do {
        if (__label__ == 14) {
          var $117 = _H264SwDecMalloc(68);
          HEAP32[$2 + 4 >> 2] = $117;
          var $125 = HEAP32[$2 + 28 >> 2] + 1 << 4;
          var $126 = _H264SwDecMalloc($125);
          var $127 = $126;
          HEAP32[$2 + 12 >> 2] = $127;
          if (HEAP32[$2 + 4 >> 2] == 0) {
            __label__ = 16;
          } else {
            __label__ = 15;
          }
          $139$$134$128 : do {
            if (__label__ == 15) {
              if (HEAP32[$2 + 12 >> 2] == 0) {
                __label__ = 16;
                break $139$$134$128;
              }
              var $144 = HEAP32[$2 + 4 >> 2];
              _H264SwDecMemset($144, 0, 68);
              HEAP32[$2 + 20 >> 2] = 0;
              HEAP32[$2 + 16 >> 2] = 0;
              $1 = 0;
              __label__ = 18;
              break $52$$53$118;
            }
          } while (0);
          $1 = 65535;
        } else if (__label__ == 11) {
          $1 = 65535;
        }
      } while (0);
    }
  } while (0);
  var $150 = $1;
  return $150;
  return null;
}
_h264bsdInitDpb["X"] = 1;
function _h264bsdResetDpb($dpb, $picSizeInMbs, $dpbSize, $maxRefFrames, $maxFrameNum, $noReordering) {
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  $1 = $dpb;
  $2 = $picSizeInMbs;
  $3 = $dpbSize;
  $4 = $maxRefFrames;
  $5 = $maxFrameNum;
  $6 = $noReordering;
  _h264bsdFreeDpb($1);
  var $14 = _h264bsdInitDpb($1, $2, $3, $4, $5, $6);
  return $14;
  return null;
}
function _h264bsdFreeDpb($dpb) {
  var __label__;
  var $1;
  var $i;
  $1 = $dpb;
  if (HEAP32[$1 >> 2] != 0) {
    __label__ = 1;
  } else {
    __label__ = 6;
  }
  $6$$32$2 : do {
    if (__label__ == 1) {
      $i = 0;
      $7$4 : while (1) {
        if (!($i < HEAP32[$1 + 28 >> 2] + 1)) {
          __label__ = 5;
          break $7$4;
        }
        var $21 = HEAP32[HEAP32[$1 >> 2] + $i * 40 + 4 >> 2];
        _H264SwDecFree($21);
        var $27 = HEAP32[$1 >> 2] + $i * 40 + 4;
        HEAP32[$27 >> 2] = 0;
        var $30 = $i + 1;
        $i = $30;
      }
    }
  } while (0);
  var $36 = HEAP32[$1 >> 2];
  _H264SwDecFree($36);
  HEAP32[$1 >> 2] = 0;
  var $42 = HEAP32[$1 + 4 >> 2];
  _H264SwDecFree($42);
  HEAP32[$1 + 4 >> 2] = 0;
  var $48 = HEAP32[$1 + 12 >> 2];
  _H264SwDecFree($48);
  HEAP32[$1 + 12 >> 2] = 0;
  return;
  return;
}
_h264bsdFreeDpb["X"] = 1;
function _h264bsdInitRefPicList($dpb) {
  var __label__;
  var $1;
  var $i;
  $1 = $dpb;
  $i = 0;
  $2$11 : while (1) {
    if (!($i < HEAPU32[$1 + 40 >> 2])) {
      __label__ = 4;
      break $2$11;
    }
    var $13 = HEAP32[$1 >> 2] + $i * 40;
    var $18 = HEAP32[$1 + 4 >> 2] + ($i << 2);
    HEAP32[$18 >> 2] = $13;
    var $21 = $i + 1;
    $i = $21;
  }
  return;
  return;
}
function _h264bsdDpbOutputPicture($dpb) {
  var __label__;
  var $1;
  var $2;
  $2 = $dpb;
  if (HEAPU32[$2 + 20 >> 2] < HEAPU32[$2 + 16 >> 2]) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $10$$19$69 : do {
    if (__label__ == 1) {
      var $13 = HEAP32[$2 + 12 >> 2];
      var $16 = HEAP32[$2 + 20 >> 2];
      var $17 = $16 + 1;
      HEAP32[$2 + 20 >> 2] = $17;
      $1 = $13 + ($16 << 4);
    } else if (__label__ == 2) {
      $1 = 0;
    }
  } while (0);
  var $21 = $1;
  return $21;
  return null;
}
function _ComparePictures($ptr1, $ptr2) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $pic1;
  var $pic2;
  $2 = $ptr1;
  $3 = $ptr2;
  $pic1 = $2;
  $pic2 = $3;
  if (HEAP32[$pic1 + 20 >> 2] != 0) {
    __label__ = 9;
  } else {
    __label__ = 1;
  }
  $40$$12$82 : do {
    if (__label__ == 1) {
      if (HEAP32[$pic2 + 20 >> 2] != 0) {
        __label__ = 9;
        break $40$$12$82;
      }
      if (HEAP32[$pic1 + 24 >> 2] != 0) {
        __label__ = 3;
      } else {
        __label__ = 5;
      }
      $22$$28$85 : do {
        if (__label__ == 3) {
          if (HEAP32[$pic2 + 24 >> 2] != 0) {
            __label__ = 5;
            break $22$$28$85;
          }
          $1 = -1;
          __label__ = 33;
          break $40$$12$82;
        }
      } while (0);
      if (HEAP32[$pic1 + 24 >> 2] != 0) {
        __label__ = 8;
      } else {
        __label__ = 6;
      }
      $39$$33$89 : do {
        if (__label__ == 6) {
          if (!(HEAP32[$pic2 + 24 >> 2] != 0)) {
            __label__ = 8;
            break $39$$33$89;
          }
          $1 = 1;
          __label__ = 33;
          break $40$$12$82;
        }
      } while (0);
      $1 = 0;
      __label__ = 33;
      break $40$$12$82;
    }
  } while (0);
  $40$$132$93 : do {
    if (__label__ == 9) {
      if (HEAP32[$pic2 + 20 >> 2] != 0) {
        __label__ = 11;
      } else {
        __label__ = 10;
      }
      $46$$45$95 : do {
        if (__label__ == 11) {
          if (HEAP32[$pic1 + 20 >> 2] != 0) {
            __label__ = 13;
          } else {
            __label__ = 12;
          }
          $52$$51$97 : do {
            if (__label__ == 13) {
              if (HEAP32[$pic1 + 20 >> 2] == 1) {
                __label__ = 15;
              } else {
                __label__ = 14;
              }
              $62$$57$99 : do {
                if (__label__ == 14) {
                  if (HEAP32[$pic1 + 20 >> 2] == 2) {
                    __label__ = 15;
                    break $62$$57$99;
                  } else {
                    __label__ = 22;
                    break $62$$57$99;
                  }
                }
              } while (0);
              $62$$91$101 : do {
                if (__label__ == 15) {
                  if (HEAP32[$pic2 + 20 >> 2] == 1) {
                    __label__ = 17;
                  } else {
                    __label__ = 16;
                  }
                  $72$$67$103 : do {
                    if (__label__ == 16) {
                      if (!(HEAP32[$pic2 + 20 >> 2] == 2)) {
                        __label__ = 22;
                        break $62$$91$101;
                      }
                    }
                  } while (0);
                  if (HEAP32[$pic1 + 8 >> 2] > HEAP32[$pic2 + 8 >> 2]) {
                    __label__ = 18;
                  } else {
                    __label__ = 19;
                  }
                  $80$$81$106 : do {
                    if (__label__ == 18) {
                      $1 = -1;
                      __label__ = 33;
                      break $40$$132$93;
                    } else if (__label__ == 19) {
                      if (HEAP32[$pic1 + 8 >> 2] < HEAP32[$pic2 + 8 >> 2]) {
                        __label__ = 20;
                      } else {
                        __label__ = 21;
                      }
                      $89$$90$109 : do {
                        if (__label__ == 20) {
                          $1 = 1;
                          __label__ = 33;
                          break $40$$132$93;
                        } else if (__label__ == 21) {
                          $1 = 0;
                          __label__ = 33;
                          break $40$$132$93;
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
              if (HEAP32[$pic1 + 20 >> 2] == 1) {
                __label__ = 24;
              } else {
                __label__ = 23;
              }
              $101$$96$113 : do {
                if (__label__ == 23) {
                  if (HEAP32[$pic1 + 20 >> 2] == 2) {
                    __label__ = 24;
                    break $101$$96$113;
                  }
                  if (HEAP32[$pic2 + 20 >> 2] == 1) {
                    __label__ = 27;
                  } else {
                    __label__ = 26;
                  }
                  $112$$107$116 : do {
                    if (__label__ == 26) {
                      if (HEAP32[$pic2 + 20 >> 2] == 2) {
                        __label__ = 27;
                        break $112$$107$116;
                      }
                      if (HEAP32[$pic1 + 8 >> 2] > HEAP32[$pic2 + 8 >> 2]) {
                        __label__ = 29;
                      } else {
                        __label__ = 30;
                      }
                      $121$$122$119 : do {
                        if (__label__ == 29) {
                          $1 = 1;
                          __label__ = 33;
                          break $40$$132$93;
                        } else if (__label__ == 30) {
                          if (HEAP32[$pic1 + 8 >> 2] < HEAP32[$pic2 + 8 >> 2]) {
                            __label__ = 31;
                          } else {
                            __label__ = 32;
                          }
                          $130$$131$122 : do {
                            if (__label__ == 31) {
                              $1 = -1;
                              __label__ = 33;
                              break $40$$132$93;
                            } else if (__label__ == 32) {
                              $1 = 0;
                              __label__ = 33;
                              break $40$$132$93;
                            }
                          } while (0);
                        }
                      } while (0);
                    }
                  } while (0);
                  $1 = 1;
                  __label__ = 33;
                  break $40$$132$93;
                }
              } while (0);
              $1 = -1;
            } else if (__label__ == 12) {
              $1 = 1;
            }
          } while (0);
        } else if (__label__ == 10) {
          $1 = -1;
        }
      } while (0);
    }
  } while (0);
  var $133 = $1;
  return $133;
  return null;
}
_ComparePictures["X"] = 1;
function _FindSmallestPicOrderCnt($dpb) {
  var __label__;
  var $1;
  var $i;
  var $picOrderCnt;
  var $tmp;
  $1 = $dpb;
  $picOrderCnt = 2147483647;
  $tmp = 0;
  $i = 0;
  $2$131 : while (1) {
    if (!($i <= HEAPU32[$1 + 28 >> 2])) {
      __label__ = 7;
      break $2$131;
    }
    if (HEAP32[HEAP32[$1 >> 2] + $i * 40 + 24 >> 2] != 0) {
      __label__ = 3;
    } else {
      __label__ = 5;
    }
    $17$$40$134 : do {
      if (__label__ == 3) {
        if (!(HEAP32[HEAP32[$1 >> 2] + $i * 40 + 16 >> 2] < $picOrderCnt)) {
          __label__ = 5;
          break $17$$40$134;
        }
        $tmp = HEAP32[$1 >> 2] + $i * 40;
        $picOrderCnt = HEAP32[HEAP32[$1 >> 2] + $i * 40 + 16 >> 2];
      }
    } while (0);
    var $43 = $i + 1;
    $i = $43;
  }
  var $45 = $tmp;
  return $45;
  return null;
}
_FindSmallestPicOrderCnt["X"] = 1;
function _h264bsdCheckGapsInFrameNum($dpb, $frameNum, $isRefPic, $gapsAllowed) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $unUsedShortTermFrameNum;
  var $tmp;
  var $i;
  $2 = $dpb;
  $3 = $frameNum;
  $4 = $isRefPic;
  $5 = $gapsAllowed;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 0;
  if ($5 != 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $13$$12$17 : do {
    if (__label__ == 2) {
      if ($3 != HEAP32[$2 + 48 >> 2]) {
        __label__ = 3;
      } else {
        __label__ = 27;
      }
      $19$$218$19 : do {
        if (__label__ == 3) {
          if (!($3 != (HEAP32[$2 + 48 >> 2] + 1) % HEAPU32[$2 + 32 >> 2])) {
            __label__ = 27;
            break $19$$218$19;
          }
          $unUsedShortTermFrameNum = (HEAP32[$2 + 48 >> 2] + 1) % HEAPU32[$2 + 32 >> 2];
          $tmp = HEAP32[HEAP32[$2 >> 2] + HEAP32[$2 + 28 >> 2] * 40 >> 2];
          $48$22 : while (1) {
            _SetPicNums($2, $unUsedShortTermFrameNum);
            var $52 = _SlidingWindowRefPicMarking($2);
            if ($52 != 0) {
              __label__ = 6;
              break $48$22;
            }
            $56$25 : while (1) {
              if (!(HEAPU32[$2 + 44 >> 2] >= HEAPU32[$2 + 28 >> 2])) {
                __label__ = 10;
                break $56$25;
              }
              var $66 = _OutputPicture($2);
            }
            var $75 = HEAP32[$2 >> 2] + HEAP32[$2 + 28 >> 2] * 40 + 20;
            HEAP32[$75 >> 2] = 1;
            var $84 = HEAP32[$2 >> 2] + HEAP32[$2 + 28 >> 2] * 40 + 12;
            HEAP32[$84 >> 2] = $unUsedShortTermFrameNum;
            var $93 = HEAP32[$2 >> 2] + HEAP32[$2 + 28 >> 2] * 40 + 8;
            HEAP32[$93 >> 2] = $unUsedShortTermFrameNum;
            var $101 = HEAP32[$2 >> 2] + HEAP32[$2 + 28 >> 2] * 40 + 16;
            HEAP32[$101 >> 2] = 0;
            var $109 = HEAP32[$2 >> 2] + HEAP32[$2 + 28 >> 2] * 40 + 24;
            HEAP32[$109 >> 2] = 0;
            var $113 = HEAP32[$2 + 44 >> 2] + 1;
            HEAP32[$2 + 44 >> 2] = $113;
            var $117 = HEAP32[$2 + 40 >> 2] + 1;
            HEAP32[$2 + 40 >> 2] = $117;
            var $120 = HEAP32[$2 >> 2];
            var $124 = HEAP32[$2 + 28 >> 2] + 1;
            _ShellSort($120, $124);
            var $130 = ($unUsedShortTermFrameNum + 1) % HEAPU32[$2 + 32 >> 2];
            $unUsedShortTermFrameNum = $130;
            if (!($unUsedShortTermFrameNum != $3)) {
              __label__ = 12;
              break $48$22;
            }
          }
          $54$$135$30 : do {
            if (__label__ == 6) {
              $1 = 1;
              __label__ = 37;
              break $13$$12$17;
            } else if (__label__ == 12) {
              if (HEAP32[$2 + 16 >> 2] != 0) {
                __label__ = 13;
              } else {
                __label__ = 26;
              }
              $140$$217$33 : do {
                if (__label__ == 13) {
                  $i = 0;
                  $141$35 : while (1) {
                    if (!($i < HEAPU32[$2 + 16 >> 2])) {
                      __label__ = 25;
                      break $141$35;
                    }
                    if (HEAP32[HEAP32[$2 + 12 >> 2] + ($i << 4) >> 2] == HEAP32[HEAP32[$2 >> 2] + HEAP32[$2 + 28 >> 2] * 40 >> 2]) {
                      __label__ = 16;
                      break $141$35;
                    }
                    var $215 = $i + 1;
                    $i = $215;
                  }
                  $216$$165$40 : do {
                    if (__label__ == 16) {
                      $i = 0;
                      $166$42 : while (1) {
                        if (!($i < HEAPU32[$2 + 28 >> 2])) {
                          __label__ = 22;
                          break $166$42;
                        }
                        if (HEAP32[HEAP32[$2 >> 2] + $i * 40 >> 2] == $tmp) {
                          __label__ = 19;
                          break $166$42;
                        }
                        var $210 = $i + 1;
                        $i = $210;
                      }
                      $211$$182$47 : do {
                        if (__label__ == 19) {
                          var $191 = HEAP32[HEAP32[$2 >> 2] + HEAP32[$2 + 28 >> 2] * 40 >> 2];
                          var $197 = HEAP32[$2 >> 2] + $i * 40;
                          HEAP32[$197 >> 2] = $191;
                          var $206 = HEAP32[$2 >> 2] + HEAP32[$2 + 28 >> 2] * 40;
                          HEAP32[$206 >> 2] = $tmp;
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
              __label__ = 31;
              break $19$$218$19;
            }
          } while (0);
        }
      } while (0);
      $229$$218$52 : do {
        if (__label__ == 27) {
          if ($4 != 0) {
            __label__ = 28;
          } else {
            __label__ = 30;
          }
          $221$$228$54 : do {
            if (__label__ == 28) {
              if (!($3 == HEAP32[$2 + 48 >> 2])) {
                __label__ = 30;
                break $221$$228$54;
              }
              $1 = 1;
              __label__ = 37;
              break $13$$12$17;
            }
          } while (0);
        }
      } while (0);
      if ($4 != 0) {
        __label__ = 32;
      } else {
        __label__ = 33;
      }
      $232$$236$59 : do {
        if (__label__ == 32) {
          HEAP32[$2 + 48 >> 2] = $3;
        } else if (__label__ == 33) {
          if ($3 != HEAP32[$2 + 48 >> 2]) {
            __label__ = 34;
          } else {
            __label__ = 35;
          }
          $242$$255$62 : do {
            if (__label__ == 34) {
              var $252 = ($3 + HEAP32[$2 + 32 >> 2] - 1) % HEAPU32[$2 + 32 >> 2];
              HEAP32[$2 + 48 >> 2] = $252;
            }
          } while (0);
        }
      } while (0);
      $1 = 0;
    } else if (__label__ == 1) {
      $1 = 0;
    }
  } while (0);
  var $258 = $1;
  return $258;
  return null;
}
_h264bsdCheckGapsInFrameNum["X"] = 1;
function _h264bsdFlushDpb($dpb) {
  var __label__;
  var $1;
  $1 = $dpb;
  if (HEAP32[$1 >> 2] != 0) {
    __label__ = 1;
  } else {
    __label__ = 5;
  }
  $6$$15$74 : do {
    if (__label__ == 1) {
      HEAP32[$1 + 60 >> 2] = 1;
      $9$76 : while (1) {
        var $11 = _OutputPicture($1);
        if (!($11 == 0)) {
          __label__ = 4;
          break $9$76;
        }
      }
    }
  } while (0);
  return;
  return;
}
function _h264bsdWriteMacroblock($image, $data) {
  var __label__;
  var $1;
  var $2;
  var $i;
  var $width;
  var $lum;
  var $cb;
  var $cr;
  var $ptr;
  var $tmp1;
  var $tmp2;
  $1 = $image;
  $2 = $data;
  $width = HEAP32[$1 + 4 >> 2];
  $lum = HEAP32[$1 + 12 >> 2];
  $cb = HEAP32[$1 + 16 >> 2];
  $cr = HEAP32[$1 + 20 >> 2];
  $ptr = $2;
  var $21 = $width << 2;
  $width = $21;
  $i = 16;
  $22$2 : while (1) {
    if (!($i != 0)) {
      __label__ = 4;
      break $22$2;
    }
    var $26 = $ptr;
    var $27 = $26 + 4;
    $ptr = $27;
    $tmp1 = HEAP32[$26 >> 2];
    var $29 = $ptr;
    var $30 = $29 + 4;
    $ptr = $30;
    $tmp2 = HEAP32[$29 >> 2];
    var $33 = $lum;
    var $34 = $33 + 4;
    $lum = $34;
    HEAP32[$33 >> 2] = $tmp1;
    var $36 = $lum;
    var $37 = $36 + 4;
    $lum = $37;
    HEAP32[$36 >> 2] = $tmp2;
    var $38 = $ptr;
    var $39 = $38 + 4;
    $ptr = $39;
    $tmp1 = HEAP32[$38 >> 2];
    var $41 = $ptr;
    var $42 = $41 + 4;
    $ptr = $42;
    $tmp2 = HEAP32[$41 >> 2];
    var $45 = $lum;
    var $46 = $45 + 4;
    $lum = $46;
    HEAP32[$45 >> 2] = $tmp1;
    var $48 = $lum;
    var $49 = $48 + 4;
    $lum = $49;
    HEAP32[$48 >> 2] = $tmp2;
    var $53 = $lum + ($width - 4 << 2);
    $lum = $53;
    var $56 = $i - 1;
    $i = $56;
  }
  var $59 = $width >>> 1;
  $width = $59;
  $i = 8;
  $60$7 : while (1) {
    if (!($i != 0)) {
      __label__ = 8;
      break $60$7;
    }
    var $64 = $ptr;
    var $65 = $64 + 4;
    $ptr = $65;
    $tmp1 = HEAP32[$64 >> 2];
    var $67 = $ptr;
    var $68 = $67 + 4;
    $ptr = $68;
    $tmp2 = HEAP32[$67 >> 2];
    var $71 = $cb;
    var $72 = $71 + 4;
    $cb = $72;
    HEAP32[$71 >> 2] = $tmp1;
    var $74 = $cb;
    var $75 = $74 + 4;
    $cb = $75;
    HEAP32[$74 >> 2] = $tmp2;
    var $79 = $cb + ($width - 2 << 2);
    $cb = $79;
    var $82 = $i - 1;
    $i = $82;
  }
  $i = 8;
  $84$12 : while (1) {
    if (!($i != 0)) {
      __label__ = 12;
      break $84$12;
    }
    var $88 = $ptr;
    var $89 = $88 + 4;
    $ptr = $89;
    $tmp1 = HEAP32[$88 >> 2];
    var $91 = $ptr;
    var $92 = $91 + 4;
    $ptr = $92;
    $tmp2 = HEAP32[$91 >> 2];
    var $95 = $cr;
    var $96 = $95 + 4;
    $cr = $96;
    HEAP32[$95 >> 2] = $tmp1;
    var $98 = $cr;
    var $99 = $98 + 4;
    $cr = $99;
    HEAP32[$98 >> 2] = $tmp2;
    var $103 = $cr + ($width - 2 << 2);
    $cr = $103;
    var $106 = $i - 1;
    $i = $106;
  }
  return;
  return;
}
_h264bsdWriteMacroblock["X"] = 1;
function _h264bsdWriteOutputBlocks($image, $mbNum, $data, $residual) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $i;
  var $picWidth;
  var $picSize;
  var $lum;
  var $cb;
  var $cr;
  var $imageBlock;
  var $tmp;
  var $row;
  var $col;
  var $block;
  var $x;
  var $y;
  var $pRes;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $tmp4;
  var $clp;
  var $in32;
  var $out32;
  var $in321;
  var $out322;
  $1 = $image;
  $2 = $mbNum;
  $3 = $data;
  $4 = $residual;
  $clp = _h264bsdClip + 512;
  $picWidth = HEAP32[$1 + 4 >> 2];
  $picSize = $picWidth * HEAP32[$1 + 8 >> 2];
  var $15 = Math.floor($2 / $picWidth);
  $row = $15;
  $col = $2 % $picWidth;
  $lum = HEAP32[$1 >> 2] + ($row * $picWidth << 8) + ($col << 4);
  $cb = HEAP32[$1 >> 2] + ($picSize << 8) + ($row * $picWidth << 6) + ($col << 3);
  $cr = $cb + ($picSize << 6);
  var $49 = $picWidth << 4;
  $picWidth = $49;
  $block = 0;
  $50$18 : while (1) {
    if (!($block < 16)) {
      __label__ = 11;
      break $50$18;
    }
    $x = HEAP32[_h264bsdBlockX + ($block << 2) >> 2];
    $y = HEAP32[_h264bsdBlockY + ($block << 2) >> 2];
    $pRes = $4 + ($block << 6);
    $tmp = $3 + ($y << 4) + $x;
    $imageBlock = $lum + $y * $picWidth + $x;
    if (HEAP32[$pRes >> 2] == 16777215) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    $81$$120$21 : do {
      if (__label__ == 3) {
        $in32 = $tmp;
        $out32 = $imageBlock;
        $tmp1 = HEAP32[$in32 >> 2];
        var $89 = $in32 + 16;
        $in32 = $89;
        $tmp2 = HEAP32[$in32 >> 2];
        var $93 = $in32 + 16;
        $in32 = $93;
        HEAP32[$out32 >> 2] = $tmp1;
        var $97 = Math.floor($picWidth / 4);
        var $99 = $out32 + ($97 << 2);
        $out32 = $99;
        HEAP32[$out32 >> 2] = $tmp2;
        var $103 = Math.floor($picWidth / 4);
        var $105 = $out32 + ($103 << 2);
        $out32 = $105;
        $tmp1 = HEAP32[$in32 >> 2];
        var $109 = $in32 + 16;
        $in32 = $109;
        $tmp2 = HEAP32[$in32 >> 2];
        HEAP32[$out32 >> 2] = $tmp1;
        var $115 = Math.floor($picWidth / 4);
        var $117 = $out32 + ($115 << 2);
        $out32 = $117;
        HEAP32[$out32 >> 2] = $tmp2;
      } else if (__label__ == 4) {
        $i = 4;
        $121$24 : while (1) {
          if (!($i != 0)) {
            __label__ = 8;
            break $121$24;
          }
          $tmp1 = HEAPU8[$tmp];
          var $129 = $pRes;
          var $130 = $129 + 4;
          $pRes = $130;
          $tmp2 = HEAP32[$129 >> 2];
          $tmp3 = HEAPU8[$tmp + 1];
          var $142 = HEAPU8[$clp + ($tmp1 + $tmp2)];
          $tmp1 = $142;
          var $143 = $pRes;
          var $144 = $143 + 4;
          $pRes = $144;
          $tmp4 = HEAP32[$143 >> 2];
          HEAP8[$imageBlock] = $tmp1 & 255;
          var $156 = HEAPU8[$clp + ($tmp3 + $tmp4)];
          $tmp3 = $156;
          $tmp1 = HEAPU8[$tmp + 2];
          var $161 = $pRes;
          var $162 = $161 + 4;
          $pRes = $162;
          $tmp2 = HEAP32[$161 >> 2];
          HEAP8[$imageBlock + 1] = $tmp3 & 255;
          var $174 = HEAPU8[$clp + ($tmp1 + $tmp2)];
          $tmp1 = $174;
          $tmp3 = HEAPU8[$tmp + 3];
          var $179 = $pRes;
          var $180 = $179 + 4;
          $pRes = $180;
          $tmp4 = HEAP32[$179 >> 2];
          HEAP8[$imageBlock + 2] = $tmp1 & 255;
          var $192 = HEAPU8[$clp + ($tmp3 + $tmp4)];
          $tmp3 = $192;
          var $194 = $tmp + 16;
          $tmp = $194;
          HEAP8[$imageBlock + 3] = $tmp3 & 255;
          var $201 = $imageBlock + $picWidth;
          $imageBlock = $201;
          var $204 = $i - 1;
          $i = $204;
        }
      }
    } while (0);
    var $209 = $block + 1;
    $block = $209;
  }
  var $212 = Math.floor($picWidth / 2);
  $picWidth = $212;
  $block = 16;
  $213$32 : while (1) {
    if (!($block <= 23)) {
      __label__ = 24;
      break $213$32;
    }
    $x = HEAP32[_h264bsdBlockX + (($block & 3) << 2) >> 2];
    $y = HEAP32[_h264bsdBlockY + (($block & 3) << 2) >> 2];
    $pRes = $4 + ($block << 6);
    $tmp = $3 + 256;
    $imageBlock = $cb;
    if ($block >= 20) {
      __label__ = 14;
    } else {
      __label__ = 15;
    }
    $234$$238$35 : do {
      if (__label__ == 14) {
        $imageBlock = $cr;
        var $237 = $tmp + 64;
        $tmp = $237;
      }
    } while (0);
    var $244 = $tmp + (($y << 3) + $x);
    $tmp = $244;
    var $251 = $imageBlock + ($y * $picWidth + $x);
    $imageBlock = $251;
    if (HEAP32[$pRes >> 2] == 16777215) {
      __label__ = 16;
    } else {
      __label__ = 17;
    }
    $256$$295$38 : do {
      if (__label__ == 16) {
        $in321 = $tmp;
        $out322 = $imageBlock;
        $tmp1 = HEAP32[$in321 >> 2];
        var $264 = $in321 + 8;
        $in321 = $264;
        $tmp2 = HEAP32[$in321 >> 2];
        var $268 = $in321 + 8;
        $in321 = $268;
        HEAP32[$out322 >> 2] = $tmp1;
        var $272 = Math.floor($picWidth / 4);
        var $274 = $out322 + ($272 << 2);
        $out322 = $274;
        HEAP32[$out322 >> 2] = $tmp2;
        var $278 = Math.floor($picWidth / 4);
        var $280 = $out322 + ($278 << 2);
        $out322 = $280;
        $tmp1 = HEAP32[$in321 >> 2];
        var $284 = $in321 + 8;
        $in321 = $284;
        $tmp2 = HEAP32[$in321 >> 2];
        HEAP32[$out322 >> 2] = $tmp1;
        var $290 = Math.floor($picWidth / 4);
        var $292 = $out322 + ($290 << 2);
        $out322 = $292;
        HEAP32[$out322 >> 2] = $tmp2;
      } else if (__label__ == 17) {
        $i = 4;
        $296$41 : while (1) {
          if (!($i != 0)) {
            __label__ = 21;
            break $296$41;
          }
          $tmp1 = HEAPU8[$tmp];
          var $304 = $pRes;
          var $305 = $304 + 4;
          $pRes = $305;
          $tmp2 = HEAP32[$304 >> 2];
          $tmp3 = HEAPU8[$tmp + 1];
          var $317 = HEAPU8[$clp + ($tmp1 + $tmp2)];
          $tmp1 = $317;
          var $318 = $pRes;
          var $319 = $318 + 4;
          $pRes = $319;
          $tmp4 = HEAP32[$318 >> 2];
          HEAP8[$imageBlock] = $tmp1 & 255;
          var $331 = HEAPU8[$clp + ($tmp3 + $tmp4)];
          $tmp3 = $331;
          $tmp1 = HEAPU8[$tmp + 2];
          var $336 = $pRes;
          var $337 = $336 + 4;
          $pRes = $337;
          $tmp2 = HEAP32[$336 >> 2];
          HEAP8[$imageBlock + 1] = $tmp3 & 255;
          var $349 = HEAPU8[$clp + ($tmp1 + $tmp2)];
          $tmp1 = $349;
          $tmp3 = HEAPU8[$tmp + 3];
          var $354 = $pRes;
          var $355 = $354 + 4;
          $pRes = $355;
          $tmp4 = HEAP32[$354 >> 2];
          HEAP8[$imageBlock + 2] = $tmp1 & 255;
          var $367 = HEAPU8[$clp + ($tmp3 + $tmp4)];
          $tmp3 = $367;
          var $369 = $tmp + 8;
          $tmp = $369;
          HEAP8[$imageBlock + 3] = $tmp3 & 255;
          var $376 = $imageBlock + $picWidth;
          $imageBlock = $376;
          var $379 = $i - 1;
          $i = $379;
        }
      }
    } while (0);
    var $384 = $block + 1;
    $block = $384;
  }
  return;
  return;
}
_h264bsdWriteOutputBlocks["X"] = 1;
function _InnerBoundaryStrength2($mb1, $ind1, $ind2) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $tmp1;
  var $tmp2;
  var $tmp3;
  var $tmp4;
  $2 = $mb1;
  $3 = $ind1;
  $4 = $ind2;
  $tmp1 = HEAP16[$2 + 132 + ($3 << 2) >> 1];
  $tmp2 = HEAP16[$2 + 132 + ($4 << 2) >> 1];
  $tmp3 = HEAP16[$2 + 132 + ($3 << 2) + 2 >> 1];
  $tmp4 = HEAP16[$2 + 132 + ($4 << 2) + 2 >> 1];
  var $36 = _abs($tmp1 - $tmp2);
  if ($36 >= 4) {
    __label__ = 3;
  } else {
    __label__ = 1;
  }
  $58$$38$50 : do {
    if (__label__ == 1) {
      var $42 = _abs($tmp3 - $tmp4);
      if ($42 >= 4) {
        __label__ = 3;
        break $58$$38$50;
      }
      if (HEAP32[$2 + 116 + ($3 >>> 2 << 2) >> 2] != HEAP32[$2 + 116 + ($4 >>> 2 << 2) >> 2]) {
        __label__ = 3;
        break $58$$38$50;
      }
      $1 = 0;
      __label__ = 5;
      break $58$$38$50;
    }
  } while (0);
  $58$$60$54 : do {
    if (__label__ == 3) {
      $1 = 1;
    }
  } while (0);
  var $61 = $1;
  return $61;
  return null;
}
_InnerBoundaryStrength2["X"] = 1;
function _h264bsdFilterPicture($image, $mb) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 164;
  var __label__;
  var $1;
  var $2;
  var $flags;
  var $picSizeInMbs;
  var $mbRow;
  var $mbCol;
  var $picWidthInMbs;
  var $data;
  var $pMb;
  var $bS = __stackBase__;
  var $thresholds = __stackBase__ + 128;
  $1 = $image;
  $2 = $mb;
  $picWidthInMbs = HEAP32[$1 + 4 >> 2];
  $data = HEAP32[$1 >> 2];
  $picSizeInMbs = $picWidthInMbs * HEAP32[$1 + 8 >> 2];
  $pMb = $2;
  $mbRow = 0;
  $mbCol = 0;
  $15$2 : while (1) {
    if (!($mbRow < HEAPU32[$1 + 8 >> 2])) {
      __label__ = 10;
      break $15$2;
    }
    var $23 = _GetMbFilteringFlags($pMb);
    $flags = $23;
    if ($flags != 0) {
      __label__ = 3;
    } else {
      __label__ = 6;
    }
    $26$$82$5 : do {
      if (__label__ == 3) {
        var $28 = $bS;
        var $30 = _GetBoundaryStrengths($pMb, $28, $flags);
        if ($30 != 0) {
          __label__ = 4;
        } else {
          __label__ = 5;
        }
        $32$$81$7 : do {
          if (__label__ == 4) {
            var $33 = $thresholds;
            _GetLumaEdgeThresholds($33, $pMb, $flags);
            $data = HEAP32[$1 >> 2] + ($mbRow * $picWidthInMbs << 8) + ($mbCol << 4);
            var $48 = $bS;
            var $49 = $thresholds;
            _FilterLuma($data, $48, $49, $picWidthInMbs << 4);
            var $52 = $thresholds;
            var $57 = HEAP32[$pMb + 24 >> 2];
            _GetChromaEdgeThresholds($52, $pMb, $flags, $57);
            $data = HEAP32[$1 >> 2] + ($picSizeInMbs << 8) + ($mbRow * $picWidthInMbs << 6) + ($mbCol << 3);
            var $77 = $bS;
            var $78 = $thresholds;
            _FilterChroma($data, $data + ($picSizeInMbs << 6), $77, $78, $picWidthInMbs << 3);
          }
        } while (0);
      }
    } while (0);
    var $84 = $mbCol + 1;
    $mbCol = $84;
    if ($mbCol == $picWidthInMbs) {
      __label__ = 7;
    } else {
      __label__ = 8;
    }
    $88$$91$11 : do {
      if (__label__ == 7) {
        $mbCol = 0;
        var $90 = $mbRow + 1;
        $mbRow = $90;
      }
    } while (0);
    var $94 = $pMb + 216;
    $pMb = $94;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}
_h264bsdFilterPicture["X"] = 1;
function _GetMbFilteringFlags($mb) {
  var __label__;
  var $1;
  var $flags;
  $1 = $mb;
  $flags = 0;
  if (HEAP32[$1 + 8 >> 2] != 1) {
    __label__ = 1;
  } else {
    __label__ = 10;
  }
  $6$$43$17 : do {
    if (__label__ == 1) {
      var $8 = $flags | 1;
      $flags = $8;
      if (HEAP32[$1 + 200 >> 2] != 0) {
        __label__ = 2;
      } else {
        __label__ = 5;
      }
      $13$$25$19 : do {
        if (__label__ == 2) {
          if (HEAP32[$1 + 8 >> 2] != 2) {
            __label__ = 4;
          } else {
            __label__ = 3;
          }
          $22$$18$21 : do {
            if (__label__ == 3) {
              var $20 = _IsSliceBoundaryOnLeft($1);
              if ($20 != 0) {
                __label__ = 5;
                break $13$$25$19;
              }
            }
          } while (0);
          var $24 = $flags | 4;
          $flags = $24;
        }
      } while (0);
      if (HEAP32[$1 + 204 >> 2] != 0) {
        __label__ = 6;
      } else {
        __label__ = 9;
      }
      $30$$42$25 : do {
        if (__label__ == 6) {
          if (HEAP32[$1 + 8 >> 2] != 2) {
            __label__ = 8;
          } else {
            __label__ = 7;
          }
          $39$$35$27 : do {
            if (__label__ == 7) {
              var $37 = _IsSliceBoundaryOnTop($1);
              if ($37 != 0) {
                __label__ = 9;
                break $30$$42$25;
              }
            }
          } while (0);
          var $41 = $flags | 2;
          $flags = $41;
        }
      } while (0);
    }
  } while (0);
  var $44 = $flags;
  return $44;
  return null;
}
_GetMbFilteringFlags["X"] = 1;
function _GetBoundaryStrengths($mb, $bS, $flags) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $nonZeroBs;
  $1 = $mb;
  $2 = $bS;
  $3 = $flags;
  $nonZeroBs = 0;
  if (($3 & 2) != 0) {
    __label__ = 1;
  } else {
    __label__ = 11;
  }
  $7$$91$2 : do {
    if (__label__ == 1) {
      if (HEAPU32[$1 >> 2] > 5) {
        __label__ = 3;
      } else {
        __label__ = 2;
      }
      $19$$12$4 : do {
        if (__label__ == 2) {
          if (HEAPU32[HEAP32[$1 + 204 >> 2] >> 2] > 5) {
            __label__ = 3;
            break $19$$12$4;
          }
          var $36 = HEAP32[$1 + 204 >> 2];
          var $37 = _EdgeBoundaryStrength($1, $36, 0, 10);
          HEAP32[$2 >> 2] = $37;
          var $44 = HEAP32[$1 + 204 >> 2];
          var $45 = _EdgeBoundaryStrength($1, $44, 1, 11);
          HEAP32[$2 + 8 >> 2] = $45;
          var $52 = HEAP32[$1 + 204 >> 2];
          var $53 = _EdgeBoundaryStrength($1, $52, 4, 14);
          HEAP32[$2 + 16 >> 2] = $53;
          var $60 = HEAP32[$1 + 204 >> 2];
          var $61 = _EdgeBoundaryStrength($1, $60, 5, 15);
          HEAP32[$2 + 24 >> 2] = $61;
          if (HEAP32[$2 >> 2] != 0) {
            __label__ = 8;
          } else {
            __label__ = 5;
          }
          $88$$70$7 : do {
            if (__label__ == 5) {
              if (HEAP32[$2 + 8 >> 2] != 0) {
                __label__ = 8;
                break $88$$70$7;
              }
              if (HEAP32[$2 + 16 >> 2] != 0) {
                __label__ = 8;
                break $88$$70$7;
              }
              if (HEAP32[$2 + 24 >> 2] != 0) {
                __label__ = 8;
                break $88$$70$7;
              } else {
                __label__ = 9;
                break $88$$70$7;
              }
            }
          } while (0);
          $88$$89$11 : do {
            if (__label__ == 8) {
              $nonZeroBs = 1;
            }
          } while (0);
          __label__ = 10;
          break $19$$12$4;
        }
      } while (0);
      $19$$90$14 : do {
        if (__label__ == 3) {
          HEAP32[$2 + 24 >> 2] = 4;
          HEAP32[$2 + 16 >> 2] = 4;
          HEAP32[$2 + 8 >> 2] = 4;
          HEAP32[$2 >> 2] = 4;
          $nonZeroBs = 1;
        }
      } while (0);
    } else if (__label__ == 11) {
      HEAP32[$2 + 24 >> 2] = 0;
      HEAP32[$2 + 16 >> 2] = 0;
      HEAP32[$2 + 8 >> 2] = 0;
      HEAP32[$2 >> 2] = 0;
    }
  } while (0);
  if (($3 & 4) != 0) {
    __label__ = 13;
  } else {
    __label__ = 24;
  }
  $108$$195$19 : do {
    if (__label__ == 13) {
      if (HEAPU32[$1 >> 2] > 5) {
        __label__ = 15;
      } else {
        __label__ = 14;
      }
      $120$$113$21 : do {
        if (__label__ == 14) {
          if (HEAPU32[HEAP32[$1 + 200 >> 2] >> 2] > 5) {
            __label__ = 15;
            break $120$$113$21;
          }
          var $137 = HEAP32[$1 + 200 >> 2];
          var $138 = _EdgeBoundaryStrength($1, $137, 0, 5);
          HEAP32[$2 + 4 >> 2] = $138;
          var $145 = HEAP32[$1 + 200 >> 2];
          var $146 = _EdgeBoundaryStrength($1, $145, 2, 7);
          HEAP32[$2 + 36 >> 2] = $146;
          var $153 = HEAP32[$1 + 200 >> 2];
          var $154 = _EdgeBoundaryStrength($1, $153, 8, 13);
          HEAP32[$2 + 68 >> 2] = $154;
          var $161 = HEAP32[$1 + 200 >> 2];
          var $162 = _EdgeBoundaryStrength($1, $161, 10, 15);
          HEAP32[$2 + 100 >> 2] = $162;
          if ($nonZeroBs != 0) {
            __label__ = 22;
          } else {
            __label__ = 17;
          }
          $193$$168$24 : do {
            if (__label__ == 17) {
              if (HEAP32[$2 + 4 >> 2] != 0) {
                __label__ = 21;
              } else {
                __label__ = 18;
              }
              $192$$174$26 : do {
                if (__label__ == 18) {
                  if (HEAP32[$2 + 36 >> 2] != 0) {
                    __label__ = 21;
                    break $192$$174$26;
                  }
                  if (HEAP32[$2 + 68 >> 2] != 0) {
                    __label__ = 21;
                    break $192$$174$26;
                  }
                  if (!(HEAP32[$2 + 100 >> 2] != 0)) {
                    __label__ = 22;
                    break $193$$168$24;
                  }
                }
              } while (0);
              $nonZeroBs = 1;
            }
          } while (0);
          __label__ = 23;
          break $120$$113$21;
        }
      } while (0);
      $120$$194$32 : do {
        if (__label__ == 15) {
          HEAP32[$2 + 100 >> 2] = 4;
          HEAP32[$2 + 68 >> 2] = 4;
          HEAP32[$2 + 36 >> 2] = 4;
          HEAP32[$2 + 4 >> 2] = 4;
          $nonZeroBs = 1;
        }
      } while (0);
    } else if (__label__ == 24) {
      HEAP32[$2 + 100 >> 2] = 0;
      HEAP32[$2 + 68 >> 2] = 0;
      HEAP32[$2 + 36 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
    }
  } while (0);
  if (HEAPU32[$1 >> 2] > 5) {
    __label__ = 26;
  } else {
    __label__ = 27;
  }
  $213$$286$37 : do {
    if (__label__ == 26) {
      HEAP32[$2 + 120 >> 2] = 3;
      HEAP32[$2 + 112 >> 2] = 3;
      HEAP32[$2 + 104 >> 2] = 3;
      HEAP32[$2 + 96 >> 2] = 3;
      HEAP32[$2 + 88 >> 2] = 3;
      HEAP32[$2 + 80 >> 2] = 3;
      HEAP32[$2 + 72 >> 2] = 3;
      HEAP32[$2 + 64 >> 2] = 3;
      HEAP32[$2 + 56 >> 2] = 3;
      HEAP32[$2 + 48 >> 2] = 3;
      HEAP32[$2 + 40 >> 2] = 3;
      HEAP32[$2 + 32 >> 2] = 3;
      HEAP32[$2 + 124 >> 2] = 3;
      HEAP32[$2 + 116 >> 2] = 3;
      HEAP32[$2 + 108 >> 2] = 3;
      HEAP32[$2 + 92 >> 2] = 3;
      HEAP32[$2 + 84 >> 2] = 3;
      HEAP32[$2 + 76 >> 2] = 3;
      HEAP32[$2 + 60 >> 2] = 3;
      HEAP32[$2 + 52 >> 2] = 3;
      HEAP32[$2 + 44 >> 2] = 3;
      HEAP32[$2 + 28 >> 2] = 3;
      HEAP32[$2 + 20 >> 2] = 3;
      HEAP32[$2 + 12 >> 2] = 3;
      $nonZeroBs = 1;
    } else if (__label__ == 27) {
      var $289 = HEAP32[$1 >> 2];
      var $290 = _h264bsdNumMbPart($289);
      if ($290 == 1) {
        __label__ = 28;
      } else {
        __label__ = 29;
      }
      $292$$295$40 : do {
        if (__label__ == 28) {
          _GetBoundaryStrengthsA($1, $2);
        } else if (__label__ == 29) {
          if (HEAP32[$1 >> 2] == 2) {
            __label__ = 30;
          } else {
            __label__ = 71;
          }
          $300$$701$43 : do {
            if (__label__ == 30) {
              if (HEAP16[$1 + 32 >> 1] != 0) {
                var $315 = 1;
                __label__ = 32;
              } else {
                __label__ = 31;
              }
              $314$$307$45 : do {
                if (__label__ == 31) {
                  var $315 = HEAP16[$1 + 28 >> 1] != 0;
                }
              } while (0);
              var $315;
              var $316 = $315 ? 2 : 0;
              HEAP32[$2 + 32 >> 2] = $316;
              if (HEAP16[$1 + 34 >> 1] != 0) {
                var $334 = 1;
                __label__ = 34;
              } else {
                __label__ = 33;
              }
              $333$$326$48 : do {
                if (__label__ == 33) {
                  var $334 = HEAP16[$1 + 30 >> 1] != 0;
                }
              } while (0);
              var $334;
              var $335 = $334 ? 2 : 0;
              HEAP32[$2 + 40 >> 2] = $335;
              if (HEAP16[$1 + 40 >> 1] != 0) {
                var $353 = 1;
                __label__ = 36;
              } else {
                __label__ = 35;
              }
              $352$$345$51 : do {
                if (__label__ == 35) {
                  var $353 = HEAP16[$1 + 36 >> 1] != 0;
                }
              } while (0);
              var $353;
              var $354 = $353 ? 2 : 0;
              HEAP32[$2 + 48 >> 2] = $354;
              if (HEAP16[$1 + 42 >> 1] != 0) {
                var $372 = 1;
                __label__ = 38;
              } else {
                __label__ = 37;
              }
              $371$$364$54 : do {
                if (__label__ == 37) {
                  var $372 = HEAP16[$1 + 38 >> 1] != 0;
                }
              } while (0);
              var $372;
              var $373 = $372 ? 2 : 0;
              HEAP32[$2 + 56 >> 2] = $373;
              if (HEAP16[$1 + 48 >> 1] != 0) {
                var $391 = 1;
                __label__ = 40;
              } else {
                __label__ = 39;
              }
              $390$$383$57 : do {
                if (__label__ == 39) {
                  var $391 = HEAP16[$1 + 44 >> 1] != 0;
                }
              } while (0);
              var $391;
              var $392 = $391 ? 2 : 0;
              HEAP32[$2 + 96 >> 2] = $392;
              if (HEAP16[$1 + 50 >> 1] != 0) {
                var $410 = 1;
                __label__ = 42;
              } else {
                __label__ = 41;
              }
              $409$$402$60 : do {
                if (__label__ == 41) {
                  var $410 = HEAP16[$1 + 46 >> 1] != 0;
                }
              } while (0);
              var $410;
              var $411 = $410 ? 2 : 0;
              HEAP32[$2 + 104 >> 2] = $411;
              if (HEAP16[$1 + 56 >> 1] != 0) {
                var $429 = 1;
                __label__ = 44;
              } else {
                __label__ = 43;
              }
              $428$$421$63 : do {
                if (__label__ == 43) {
                  var $429 = HEAP16[$1 + 52 >> 1] != 0;
                }
              } while (0);
              var $429;
              var $430 = $429 ? 2 : 0;
              HEAP32[$2 + 112 >> 2] = $430;
              if (HEAP16[$1 + 58 >> 1] != 0) {
                var $448 = 1;
                __label__ = 46;
              } else {
                __label__ = 45;
              }
              $447$$440$66 : do {
                if (__label__ == 45) {
                  var $448 = HEAP16[$1 + 54 >> 1] != 0;
                }
              } while (0);
              var $448;
              var $449 = $448 ? 2 : 0;
              HEAP32[$2 + 120 >> 2] = $449;
              var $454 = _InnerBoundaryStrength($1, 8, 2);
              HEAP32[$2 + 64 >> 2] = $454;
              var $459 = _InnerBoundaryStrength($1, 9, 3);
              HEAP32[$2 + 72 >> 2] = $459;
              var $464 = _InnerBoundaryStrength($1, 12, 6);
              HEAP32[$2 + 80 >> 2] = $464;
              var $469 = _InnerBoundaryStrength($1, 13, 7);
              HEAP32[$2 + 88 >> 2] = $469;
              if (HEAP16[$1 + 30 >> 1] != 0) {
                var $487 = 1;
                __label__ = 48;
              } else {
                __label__ = 47;
              }
              $486$$479$69 : do {
                if (__label__ == 47) {
                  var $487 = HEAP16[$1 + 28 >> 1] != 0;
                }
              } while (0);
              var $487;
              var $488 = $487 ? 2 : 0;
              HEAP32[$2 + 12 >> 2] = $488;
              if (HEAP16[$1 + 36 >> 1] != 0) {
                var $506 = 1;
                __label__ = 50;
              } else {
                __label__ = 49;
              }
              $505$$498$72 : do {
                if (__label__ == 49) {
                  var $506 = HEAP16[$1 + 30 >> 1] != 0;
                }
              } while (0);
              var $506;
              var $507 = $506 ? 2 : 0;
              HEAP32[$2 + 20 >> 2] = $507;
              if (HEAP16[$1 + 38 >> 1] != 0) {
                var $525 = 1;
                __label__ = 52;
              } else {
                __label__ = 51;
              }
              $524$$517$75 : do {
                if (__label__ == 51) {
                  var $525 = HEAP16[$1 + 36 >> 1] != 0;
                }
              } while (0);
              var $525;
              var $526 = $525 ? 2 : 0;
              HEAP32[$2 + 28 >> 2] = $526;
              if (HEAP16[$1 + 34 >> 1] != 0) {
                var $544 = 1;
                __label__ = 54;
              } else {
                __label__ = 53;
              }
              $543$$536$78 : do {
                if (__label__ == 53) {
                  var $544 = HEAP16[$1 + 32 >> 1] != 0;
                }
              } while (0);
              var $544;
              var $545 = $544 ? 2 : 0;
              HEAP32[$2 + 44 >> 2] = $545;
              if (HEAP16[$1 + 40 >> 1] != 0) {
                var $563 = 1;
                __label__ = 56;
              } else {
                __label__ = 55;
              }
              $562$$555$81 : do {
                if (__label__ == 55) {
                  var $563 = HEAP16[$1 + 34 >> 1] != 0;
                }
              } while (0);
              var $563;
              var $564 = $563 ? 2 : 0;
              HEAP32[$2 + 52 >> 2] = $564;
              if (HEAP16[$1 + 42 >> 1] != 0) {
                var $582 = 1;
                __label__ = 58;
              } else {
                __label__ = 57;
              }
              $581$$574$84 : do {
                if (__label__ == 57) {
                  var $582 = HEAP16[$1 + 40 >> 1] != 0;
                }
              } while (0);
              var $582;
              var $583 = $582 ? 2 : 0;
              HEAP32[$2 + 60 >> 2] = $583;
              if (HEAP16[$1 + 46 >> 1] != 0) {
                var $601 = 1;
                __label__ = 60;
              } else {
                __label__ = 59;
              }
              $600$$593$87 : do {
                if (__label__ == 59) {
                  var $601 = HEAP16[$1 + 44 >> 1] != 0;
                }
              } while (0);
              var $601;
              var $602 = $601 ? 2 : 0;
              HEAP32[$2 + 76 >> 2] = $602;
              if (HEAP16[$1 + 52 >> 1] != 0) {
                var $620 = 1;
                __label__ = 62;
              } else {
                __label__ = 61;
              }
              $619$$612$90 : do {
                if (__label__ == 61) {
                  var $620 = HEAP16[$1 + 46 >> 1] != 0;
                }
              } while (0);
              var $620;
              var $621 = $620 ? 2 : 0;
              HEAP32[$2 + 84 >> 2] = $621;
              if (HEAP16[$1 + 54 >> 1] != 0) {
                var $639 = 1;
                __label__ = 64;
              } else {
                __label__ = 63;
              }
              $638$$631$93 : do {
                if (__label__ == 63) {
                  var $639 = HEAP16[$1 + 52 >> 1] != 0;
                }
              } while (0);
              var $639;
              var $640 = $639 ? 2 : 0;
              HEAP32[$2 + 92 >> 2] = $640;
              if (HEAP16[$1 + 50 >> 1] != 0) {
                var $658 = 1;
                __label__ = 66;
              } else {
                __label__ = 65;
              }
              $657$$650$96 : do {
                if (__label__ == 65) {
                  var $658 = HEAP16[$1 + 48 >> 1] != 0;
                }
              } while (0);
              var $658;
              var $659 = $658 ? 2 : 0;
              HEAP32[$2 + 108 >> 2] = $659;
              if (HEAP16[$1 + 56 >> 1] != 0) {
                var $677 = 1;
                __label__ = 68;
              } else {
                __label__ = 67;
              }
              $676$$669$99 : do {
                if (__label__ == 67) {
                  var $677 = HEAP16[$1 + 50 >> 1] != 0;
                }
              } while (0);
              var $677;
              var $678 = $677 ? 2 : 0;
              HEAP32[$2 + 116 >> 2] = $678;
              if (HEAP16[$1 + 58 >> 1] != 0) {
                var $696 = 1;
                __label__ = 70;
              } else {
                __label__ = 69;
              }
              $695$$688$102 : do {
                if (__label__ == 69) {
                  var $696 = HEAP16[$1 + 56 >> 1] != 0;
                }
              } while (0);
              var $696;
              var $697 = $696 ? 2 : 0;
              HEAP32[$2 + 124 >> 2] = $697;
            } else if (__label__ == 71) {
              if (HEAP32[$1 >> 2] == 3) {
                __label__ = 72;
              } else {
                __label__ = 113;
              }
              $706$$1107$106 : do {
                if (__label__ == 72) {
                  if (HEAP16[$1 + 32 >> 1] != 0) {
                    var $721 = 1;
                    __label__ = 74;
                  } else {
                    __label__ = 73;
                  }
                  $720$$713$108 : do {
                    if (__label__ == 73) {
                      var $721 = HEAP16[$1 + 28 >> 1] != 0;
                    }
                  } while (0);
                  var $721;
                  var $722 = $721 ? 2 : 0;
                  HEAP32[$2 + 32 >> 2] = $722;
                  if (HEAP16[$1 + 34 >> 1] != 0) {
                    var $740 = 1;
                    __label__ = 76;
                  } else {
                    __label__ = 75;
                  }
                  $739$$732$111 : do {
                    if (__label__ == 75) {
                      var $740 = HEAP16[$1 + 30 >> 1] != 0;
                    }
                  } while (0);
                  var $740;
                  var $741 = $740 ? 2 : 0;
                  HEAP32[$2 + 40 >> 2] = $741;
                  if (HEAP16[$1 + 40 >> 1] != 0) {
                    var $759 = 1;
                    __label__ = 78;
                  } else {
                    __label__ = 77;
                  }
                  $758$$751$114 : do {
                    if (__label__ == 77) {
                      var $759 = HEAP16[$1 + 36 >> 1] != 0;
                    }
                  } while (0);
                  var $759;
                  var $760 = $759 ? 2 : 0;
                  HEAP32[$2 + 48 >> 2] = $760;
                  if (HEAP16[$1 + 42 >> 1] != 0) {
                    var $778 = 1;
                    __label__ = 80;
                  } else {
                    __label__ = 79;
                  }
                  $777$$770$117 : do {
                    if (__label__ == 79) {
                      var $778 = HEAP16[$1 + 38 >> 1] != 0;
                    }
                  } while (0);
                  var $778;
                  var $779 = $778 ? 2 : 0;
                  HEAP32[$2 + 56 >> 2] = $779;
                  if (HEAP16[$1 + 44 >> 1] != 0) {
                    var $797 = 1;
                    __label__ = 82;
                  } else {
                    __label__ = 81;
                  }
                  $796$$789$120 : do {
                    if (__label__ == 81) {
                      var $797 = HEAP16[$1 + 32 >> 1] != 0;
                    }
                  } while (0);
                  var $797;
                  var $798 = $797 ? 2 : 0;
                  HEAP32[$2 + 64 >> 2] = $798;
                  if (HEAP16[$1 + 46 >> 1] != 0) {
                    var $816 = 1;
                    __label__ = 84;
                  } else {
                    __label__ = 83;
                  }
                  $815$$808$123 : do {
                    if (__label__ == 83) {
                      var $816 = HEAP16[$1 + 34 >> 1] != 0;
                    }
                  } while (0);
                  var $816;
                  var $817 = $816 ? 2 : 0;
                  HEAP32[$2 + 72 >> 2] = $817;
                  if (HEAP16[$1 + 52 >> 1] != 0) {
                    var $835 = 1;
                    __label__ = 86;
                  } else {
                    __label__ = 85;
                  }
                  $834$$827$126 : do {
                    if (__label__ == 85) {
                      var $835 = HEAP16[$1 + 40 >> 1] != 0;
                    }
                  } while (0);
                  var $835;
                  var $836 = $835 ? 2 : 0;
                  HEAP32[$2 + 80 >> 2] = $836;
                  if (HEAP16[$1 + 54 >> 1] != 0) {
                    var $854 = 1;
                    __label__ = 88;
                  } else {
                    __label__ = 87;
                  }
                  $853$$846$129 : do {
                    if (__label__ == 87) {
                      var $854 = HEAP16[$1 + 42 >> 1] != 0;
                    }
                  } while (0);
                  var $854;
                  var $855 = $854 ? 2 : 0;
                  HEAP32[$2 + 88 >> 2] = $855;
                  if (HEAP16[$1 + 48 >> 1] != 0) {
                    var $873 = 1;
                    __label__ = 90;
                  } else {
                    __label__ = 89;
                  }
                  $872$$865$132 : do {
                    if (__label__ == 89) {
                      var $873 = HEAP16[$1 + 44 >> 1] != 0;
                    }
                  } while (0);
                  var $873;
                  var $874 = $873 ? 2 : 0;
                  HEAP32[$2 + 96 >> 2] = $874;
                  if (HEAP16[$1 + 50 >> 1] != 0) {
                    var $892 = 1;
                    __label__ = 92;
                  } else {
                    __label__ = 91;
                  }
                  $891$$884$135 : do {
                    if (__label__ == 91) {
                      var $892 = HEAP16[$1 + 46 >> 1] != 0;
                    }
                  } while (0);
                  var $892;
                  var $893 = $892 ? 2 : 0;
                  HEAP32[$2 + 104 >> 2] = $893;
                  if (HEAP16[$1 + 56 >> 1] != 0) {
                    var $911 = 1;
                    __label__ = 94;
                  } else {
                    __label__ = 93;
                  }
                  $910$$903$138 : do {
                    if (__label__ == 93) {
                      var $911 = HEAP16[$1 + 52 >> 1] != 0;
                    }
                  } while (0);
                  var $911;
                  var $912 = $911 ? 2 : 0;
                  HEAP32[$2 + 112 >> 2] = $912;
                  if (HEAP16[$1 + 58 >> 1] != 0) {
                    var $930 = 1;
                    __label__ = 96;
                  } else {
                    __label__ = 95;
                  }
                  $929$$922$141 : do {
                    if (__label__ == 95) {
                      var $930 = HEAP16[$1 + 54 >> 1] != 0;
                    }
                  } while (0);
                  var $930;
                  var $931 = $930 ? 2 : 0;
                  HEAP32[$2 + 120 >> 2] = $931;
                  if (HEAP16[$1 + 30 >> 1] != 0) {
                    var $949 = 1;
                    __label__ = 98;
                  } else {
                    __label__ = 97;
                  }
                  $948$$941$144 : do {
                    if (__label__ == 97) {
                      var $949 = HEAP16[$1 + 28 >> 1] != 0;
                    }
                  } while (0);
                  var $949;
                  var $950 = $949 ? 2 : 0;
                  HEAP32[$2 + 12 >> 2] = $950;
                  if (HEAP16[$1 + 38 >> 1] != 0) {
                    var $968 = 1;
                    __label__ = 100;
                  } else {
                    __label__ = 99;
                  }
                  $967$$960$147 : do {
                    if (__label__ == 99) {
                      var $968 = HEAP16[$1 + 36 >> 1] != 0;
                    }
                  } while (0);
                  var $968;
                  var $969 = $968 ? 2 : 0;
                  HEAP32[$2 + 28 >> 2] = $969;
                  if (HEAP16[$1 + 34 >> 1] != 0) {
                    var $987 = 1;
                    __label__ = 102;
                  } else {
                    __label__ = 101;
                  }
                  $986$$979$150 : do {
                    if (__label__ == 101) {
                      var $987 = HEAP16[$1 + 32 >> 1] != 0;
                    }
                  } while (0);
                  var $987;
                  var $988 = $987 ? 2 : 0;
                  HEAP32[$2 + 44 >> 2] = $988;
                  if (HEAP16[$1 + 42 >> 1] != 0) {
                    var $1006 = 1;
                    __label__ = 104;
                  } else {
                    __label__ = 103;
                  }
                  $1005$$998$153 : do {
                    if (__label__ == 103) {
                      var $1006 = HEAP16[$1 + 40 >> 1] != 0;
                    }
                  } while (0);
                  var $1006;
                  var $1007 = $1006 ? 2 : 0;
                  HEAP32[$2 + 60 >> 2] = $1007;
                  if (HEAP16[$1 + 46 >> 1] != 0) {
                    var $1025 = 1;
                    __label__ = 106;
                  } else {
                    __label__ = 105;
                  }
                  $1024$$1017$156 : do {
                    if (__label__ == 105) {
                      var $1025 = HEAP16[$1 + 44 >> 1] != 0;
                    }
                  } while (0);
                  var $1025;
                  var $1026 = $1025 ? 2 : 0;
                  HEAP32[$2 + 76 >> 2] = $1026;
                  if (HEAP16[$1 + 54 >> 1] != 0) {
                    var $1044 = 1;
                    __label__ = 108;
                  } else {
                    __label__ = 107;
                  }
                  $1043$$1036$159 : do {
                    if (__label__ == 107) {
                      var $1044 = HEAP16[$1 + 52 >> 1] != 0;
                    }
                  } while (0);
                  var $1044;
                  var $1045 = $1044 ? 2 : 0;
                  HEAP32[$2 + 92 >> 2] = $1045;
                  if (HEAP16[$1 + 50 >> 1] != 0) {
                    var $1063 = 1;
                    __label__ = 110;
                  } else {
                    __label__ = 109;
                  }
                  $1062$$1055$162 : do {
                    if (__label__ == 109) {
                      var $1063 = HEAP16[$1 + 48 >> 1] != 0;
                    }
                  } while (0);
                  var $1063;
                  var $1064 = $1063 ? 2 : 0;
                  HEAP32[$2 + 108 >> 2] = $1064;
                  if (HEAP16[$1 + 58 >> 1] != 0) {
                    var $1082 = 1;
                    __label__ = 112;
                  } else {
                    __label__ = 111;
                  }
                  $1081$$1074$165 : do {
                    if (__label__ == 111) {
                      var $1082 = HEAP16[$1 + 56 >> 1] != 0;
                    }
                  } while (0);
                  var $1082;
                  var $1083 = $1082 ? 2 : 0;
                  HEAP32[$2 + 124 >> 2] = $1083;
                  var $1088 = _InnerBoundaryStrength($1, 4, 1);
                  HEAP32[$2 + 20 >> 2] = $1088;
                  var $1093 = _InnerBoundaryStrength($1, 6, 3);
                  HEAP32[$2 + 52 >> 2] = $1093;
                  var $1098 = _InnerBoundaryStrength($1, 12, 9);
                  HEAP32[$2 + 84 >> 2] = $1098;
                  var $1103 = _InnerBoundaryStrength($1, 14, 11);
                  HEAP32[$2 + 116 >> 2] = $1103;
                } else if (__label__ == 113) {
                  var $1109 = HEAP32[_mb4x4Index + 16 >> 2];
                  var $1110 = HEAP32[_mb4x4Index >> 2];
                  var $1111 = _InnerBoundaryStrength($1, $1109, $1110);
                  HEAP32[$2 + 32 >> 2] = $1111;
                  var $1116 = HEAP32[_mb4x4Index + 20 >> 2];
                  var $1117 = HEAP32[_mb4x4Index + 4 >> 2];
                  var $1118 = _InnerBoundaryStrength($1, $1116, $1117);
                  HEAP32[$2 + 40 >> 2] = $1118;
                  var $1123 = HEAP32[_mb4x4Index + 24 >> 2];
                  var $1124 = HEAP32[_mb4x4Index + 8 >> 2];
                  var $1125 = _InnerBoundaryStrength($1, $1123, $1124);
                  HEAP32[$2 + 48 >> 2] = $1125;
                  var $1130 = HEAP32[_mb4x4Index + 28 >> 2];
                  var $1131 = HEAP32[_mb4x4Index + 12 >> 2];
                  var $1132 = _InnerBoundaryStrength($1, $1130, $1131);
                  HEAP32[$2 + 56 >> 2] = $1132;
                  var $1137 = HEAP32[_mb4x4Index + 32 >> 2];
                  var $1138 = HEAP32[_mb4x4Index + 16 >> 2];
                  var $1139 = _InnerBoundaryStrength($1, $1137, $1138);
                  HEAP32[$2 + 64 >> 2] = $1139;
                  var $1144 = HEAP32[_mb4x4Index + 36 >> 2];
                  var $1145 = HEAP32[_mb4x4Index + 20 >> 2];
                  var $1146 = _InnerBoundaryStrength($1, $1144, $1145);
                  HEAP32[$2 + 72 >> 2] = $1146;
                  var $1151 = HEAP32[_mb4x4Index + 40 >> 2];
                  var $1152 = HEAP32[_mb4x4Index + 24 >> 2];
                  var $1153 = _InnerBoundaryStrength($1, $1151, $1152);
                  HEAP32[$2 + 80 >> 2] = $1153;
                  var $1158 = HEAP32[_mb4x4Index + 44 >> 2];
                  var $1159 = HEAP32[_mb4x4Index + 28 >> 2];
                  var $1160 = _InnerBoundaryStrength($1, $1158, $1159);
                  HEAP32[$2 + 88 >> 2] = $1160;
                  var $1165 = HEAP32[_mb4x4Index + 48 >> 2];
                  var $1166 = HEAP32[_mb4x4Index + 32 >> 2];
                  var $1167 = _InnerBoundaryStrength($1, $1165, $1166);
                  HEAP32[$2 + 96 >> 2] = $1167;
                  var $1172 = HEAP32[_mb4x4Index + 52 >> 2];
                  var $1173 = HEAP32[_mb4x4Index + 36 >> 2];
                  var $1174 = _InnerBoundaryStrength($1, $1172, $1173);
                  HEAP32[$2 + 104 >> 2] = $1174;
                  var $1179 = HEAP32[_mb4x4Index + 56 >> 2];
                  var $1180 = HEAP32[_mb4x4Index + 40 >> 2];
                  var $1181 = _InnerBoundaryStrength($1, $1179, $1180);
                  HEAP32[$2 + 112 >> 2] = $1181;
                  var $1186 = HEAP32[_mb4x4Index + 60 >> 2];
                  var $1187 = HEAP32[_mb4x4Index + 44 >> 2];
                  var $1188 = _InnerBoundaryStrength($1, $1186, $1187);
                  HEAP32[$2 + 120 >> 2] = $1188;
                  var $1193 = HEAP32[_mb4x4Index + 4 >> 2];
                  var $1194 = HEAP32[_mb4x4Index >> 2];
                  var $1195 = _InnerBoundaryStrength($1, $1193, $1194);
                  HEAP32[$2 + 12 >> 2] = $1195;
                  var $1200 = HEAP32[_mb4x4Index + 8 >> 2];
                  var $1201 = HEAP32[_mb4x4Index + 4 >> 2];
                  var $1202 = _InnerBoundaryStrength($1, $1200, $1201);
                  HEAP32[$2 + 20 >> 2] = $1202;
                  var $1207 = HEAP32[_mb4x4Index + 12 >> 2];
                  var $1208 = HEAP32[_mb4x4Index + 8 >> 2];
                  var $1209 = _InnerBoundaryStrength($1, $1207, $1208);
                  HEAP32[$2 + 28 >> 2] = $1209;
                  var $1214 = HEAP32[_mb4x4Index + 20 >> 2];
                  var $1215 = HEAP32[_mb4x4Index + 16 >> 2];
                  var $1216 = _InnerBoundaryStrength($1, $1214, $1215);
                  HEAP32[$2 + 44 >> 2] = $1216;
                  var $1221 = HEAP32[_mb4x4Index + 24 >> 2];
                  var $1222 = HEAP32[_mb4x4Index + 20 >> 2];
                  var $1223 = _InnerBoundaryStrength($1, $1221, $1222);
                  HEAP32[$2 + 52 >> 2] = $1223;
                  var $1228 = HEAP32[_mb4x4Index + 28 >> 2];
                  var $1229 = HEAP32[_mb4x4Index + 24 >> 2];
                  var $1230 = _InnerBoundaryStrength($1, $1228, $1229);
                  HEAP32[$2 + 60 >> 2] = $1230;
                  var $1235 = HEAP32[_mb4x4Index + 36 >> 2];
                  var $1236 = HEAP32[_mb4x4Index + 32 >> 2];
                  var $1237 = _InnerBoundaryStrength($1, $1235, $1236);
                  HEAP32[$2 + 76 >> 2] = $1237;
                  var $1242 = HEAP32[_mb4x4Index + 40 >> 2];
                  var $1243 = HEAP32[_mb4x4Index + 36 >> 2];
                  var $1244 = _InnerBoundaryStrength($1, $1242, $1243);
                  HEAP32[$2 + 84 >> 2] = $1244;
                  var $1249 = HEAP32[_mb4x4Index + 44 >> 2];
                  var $1250 = HEAP32[_mb4x4Index + 40 >> 2];
                  var $1251 = _InnerBoundaryStrength($1, $1249, $1250);
                  HEAP32[$2 + 92 >> 2] = $1251;
                  var $1256 = HEAP32[_mb4x4Index + 52 >> 2];
                  var $1257 = HEAP32[_mb4x4Index + 48 >> 2];
                  var $1258 = _InnerBoundaryStrength($1, $1256, $1257);
                  HEAP32[$2 + 108 >> 2] = $1258;
                  var $1263 = HEAP32[_mb4x4Index + 56 >> 2];
                  var $1264 = HEAP32[_mb4x4Index + 52 >> 2];
                  var $1265 = _InnerBoundaryStrength($1, $1263, $1264);
                  HEAP32[$2 + 116 >> 2] = $1265;
                  var $1270 = HEAP32[_mb4x4Index + 60 >> 2];
                  var $1271 = HEAP32[_mb4x4Index + 56 >> 2];
                  var $1272 = _InnerBoundaryStrength($1, $1270, $1271);
                  HEAP32[$2 + 124 >> 2] = $1272;
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
      if ($nonZeroBs != 0) {
        __label__ = 142;
      } else {
        __label__ = 117;
      }
      $1426$$1281$172 : do {
        if (__label__ == 117) {
          if (HEAP32[$2 + 32 >> 2] != 0) {
            __label__ = 141;
          } else {
            __label__ = 118;
          }
          $1425$$1287$174 : do {
            if (__label__ == 118) {
              if (HEAP32[$2 + 40 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 48 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 56 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 64 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 72 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 80 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 88 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 96 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 104 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 112 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 120 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 12 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 20 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 28 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 44 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 52 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 60 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 76 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 84 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 92 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 108 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (HEAP32[$2 + 116 >> 2] != 0) {
                __label__ = 141;
                break $1425$$1287$174;
              }
              if (!(HEAP32[$2 + 124 >> 2] != 0)) {
                __label__ = 142;
                break $1426$$1281$172;
              }
            }
          } while (0);
          $nonZeroBs = 1;
        }
      } while (0);
    }
  } while (0);
  var $1428 = $nonZeroBs;
  return $1428;
  return null;
}
_GetBoundaryStrengths["X"] = 1;
function _FilterLuma($data, $bS, $thresholds, $width) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $vblock;
  var $tmp;
  var $ptr;
  var $offset;
  $1 = $data;
  $2 = $bS;
  $3 = $thresholds;
  $4 = $width;
  $ptr = $1;
  $tmp = $2;
  $offset = 0;
  $vblock = 4;
  $7$17 : while (1) {
    var $8 = $vblock;
    var $9 = $8 - 1;
    $vblock = $9;
    if (!($8 != 0)) {
      __label__ = 26;
      break $7$17;
    }
    if (HEAP32[$tmp + 4 >> 2] != 0) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    $17$$26$20 : do {
      if (__label__ == 3) {
        var $22 = HEAP32[$tmp + 4 >> 2];
        _FilterVerLumaEdge($ptr, $22, $3 + 12, $4);
      }
    } while (0);
    if (HEAP32[$tmp + 12 >> 2] != 0) {
      __label__ = 5;
    } else {
      __label__ = 6;
    }
    $32$$42$23 : do {
      if (__label__ == 5) {
        var $38 = HEAP32[$tmp + 12 >> 2];
        _FilterVerLumaEdge($ptr + 4, $38, $3 + 24, $4);
      }
    } while (0);
    if (HEAP32[$tmp + 20 >> 2] != 0) {
      __label__ = 7;
    } else {
      __label__ = 8;
    }
    $48$$58$26 : do {
      if (__label__ == 7) {
        var $54 = HEAP32[$tmp + 20 >> 2];
        _FilterVerLumaEdge($ptr + 8, $54, $3 + 24, $4);
      }
    } while (0);
    if (HEAP32[$tmp + 28 >> 2] != 0) {
      __label__ = 9;
    } else {
      __label__ = 10;
    }
    $64$$74$29 : do {
      if (__label__ == 9) {
        var $70 = HEAP32[$tmp + 28 >> 2];
        _FilterVerLumaEdge($ptr + 12, $70, $3 + 24, $4);
      }
    } while (0);
    if (HEAP32[$tmp >> 2] == HEAP32[$tmp + 8 >> 2]) {
      __label__ = 11;
    } else {
      __label__ = 16;
    }
    $84$$121$32 : do {
      if (__label__ == 11) {
        if (!(HEAP32[$tmp + 8 >> 2] == HEAP32[$tmp + 16 >> 2])) {
          __label__ = 16;
          break $84$$121$32;
        }
        if (!(HEAP32[$tmp + 16 >> 2] == HEAP32[$tmp + 24 >> 2])) {
          __label__ = 16;
          break $84$$121$32;
        }
        if (HEAP32[$tmp >> 2] != 0) {
          __label__ = 14;
        } else {
          __label__ = 15;
        }
        $110$$120$36 : do {
          if (__label__ == 14) {
            var $115 = HEAP32[$tmp >> 2];
            _FilterHorLuma($ptr, $115, $3 + $offset * 12, $4);
          }
        } while (0);
        __label__ = 25;
        break $84$$121$32;
      }
    } while (0);
    $189$$121$39 : do {
      if (__label__ == 16) {
        if (HEAP32[$tmp >> 2] != 0) {
          __label__ = 17;
        } else {
          __label__ = 18;
        }
        $127$$137$41 : do {
          if (__label__ == 17) {
            var $132 = HEAP32[$tmp >> 2];
            _FilterHorLumaEdge($ptr, $132, $3 + $offset * 12, $4);
          }
        } while (0);
        if (HEAP32[$tmp + 8 >> 2] != 0) {
          __label__ = 19;
        } else {
          __label__ = 20;
        }
        $143$$154$44 : do {
          if (__label__ == 19) {
            var $149 = HEAP32[$tmp + 8 >> 2];
            _FilterHorLumaEdge($ptr + 4, $149, $3 + $offset * 12, $4);
          }
        } while (0);
        if (HEAP32[$tmp + 16 >> 2] != 0) {
          __label__ = 21;
        } else {
          __label__ = 22;
        }
        $160$$171$47 : do {
          if (__label__ == 21) {
            var $166 = HEAP32[$tmp + 16 >> 2];
            _FilterHorLumaEdge($ptr + 8, $166, $3 + $offset * 12, $4);
          }
        } while (0);
        if (HEAP32[$tmp + 24 >> 2] != 0) {
          __label__ = 23;
        } else {
          __label__ = 24;
        }
        $177$$188$50 : do {
          if (__label__ == 23) {
            var $183 = HEAP32[$tmp + 24 >> 2];
            _FilterHorLumaEdge($ptr + 12, $183, $3 + $offset * 12, $4);
          }
        } while (0);
      }
    } while (0);
    var $193 = $ptr + ($4 << 2);
    $ptr = $193;
    var $195 = $tmp + 32;
    $tmp = $195;
    $offset = 2;
  }
  return;
  return;
}
_FilterLuma["X"] = 1;
function _GetLumaEdgeThresholds($thresholds, $mb, $filteringFlags) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $indexA;
  var $indexB;
  var $qpAv;
  var $qp;
  var $qpTmp;
  $1 = $thresholds;
  $2 = $mb;
  $3 = $filteringFlags;
  $qp = HEAP32[$2 + 20 >> 2];
  var $11 = $qp + HEAP32[$2 + 12 >> 2];
  var $12 = _clip(0, 51, $11);
  $indexA = $12;
  var $17 = $qp + HEAP32[$2 + 16 >> 2];
  var $18 = _clip(0, 51, $17);
  $indexB = $18;
  HEAP32[$1 + 28 >> 2] = HEAPU8[_alphas + $indexA];
  HEAP32[$1 + 32 >> 2] = HEAPU8[_betas + $indexB];
  HEAP32[$1 + 24 >> 2] = _tc0 + $indexA * 3;
  if (($3 & 2) != 0) {
    __label__ = 1;
  } else {
    __label__ = 5;
  }
  $42$$112$2 : do {
    if (__label__ == 1) {
      $qpTmp = HEAP32[HEAP32[$2 + 204 >> 2] + 20 >> 2];
      if ($qpTmp != $qp) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      $51$$89$4 : do {
        if (__label__ == 2) {
          $qpAv = $qpTmp + ($qp + 1) >>> 1;
          var $61 = $qpAv + HEAP32[$2 + 12 >> 2];
          var $62 = _clip(0, 51, $61);
          $indexA = $62;
          var $67 = $qpAv + HEAP32[$2 + 16 >> 2];
          var $68 = _clip(0, 51, $67);
          $indexB = $68;
          HEAP32[$1 + 4 >> 2] = HEAPU8[_alphas + $indexA];
          HEAP32[$1 + 8 >> 2] = HEAPU8[_betas + $indexB];
          HEAP32[$1 >> 2] = _tc0 + $indexA * 3;
        } else if (__label__ == 3) {
          var $93 = HEAP32[$1 + 28 >> 2];
          HEAP32[$1 + 4 >> 2] = $93;
          var $100 = HEAP32[$1 + 32 >> 2];
          HEAP32[$1 + 8 >> 2] = $100;
          var $107 = HEAP32[$1 + 24 >> 2];
          HEAP32[$1 >> 2] = $107;
        }
      } while (0);
    }
  } while (0);
  if (($3 & 4) != 0) {
    __label__ = 6;
  } else {
    __label__ = 10;
  }
  $116$$186$9 : do {
    if (__label__ == 6) {
      $qpTmp = HEAP32[HEAP32[$2 + 200 >> 2] + 20 >> 2];
      if ($qpTmp != $qp) {
        __label__ = 7;
      } else {
        __label__ = 8;
      }
      $125$$163$11 : do {
        if (__label__ == 7) {
          $qpAv = $qpTmp + ($qp + 1) >>> 1;
          var $135 = $qpAv + HEAP32[$2 + 12 >> 2];
          var $136 = _clip(0, 51, $135);
          $indexA = $136;
          var $141 = $qpAv + HEAP32[$2 + 16 >> 2];
          var $142 = _clip(0, 51, $141);
          $indexB = $142;
          HEAP32[$1 + 16 >> 2] = HEAPU8[_alphas + $indexA];
          HEAP32[$1 + 20 >> 2] = HEAPU8[_betas + $indexB];
          HEAP32[$1 + 12 >> 2] = _tc0 + $indexA * 3;
        } else if (__label__ == 8) {
          var $167 = HEAP32[$1 + 28 >> 2];
          HEAP32[$1 + 16 >> 2] = $167;
          var $174 = HEAP32[$1 + 32 >> 2];
          HEAP32[$1 + 20 >> 2] = $174;
          var $181 = HEAP32[$1 + 24 >> 2];
          HEAP32[$1 + 12 >> 2] = $181;
        }
      } while (0);
    }
  } while (0);
  return;
  return;
}
_GetLumaEdgeThresholds["X"] = 1;
function _GetChromaEdgeThresholds($thresholds, $mb, $filteringFlags, $chromaQpIndexOffset) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $indexA;
  var $indexB;
  var $qpAv;
  var $qp;
  var $qpTmp;
  $1 = $thresholds;
  $2 = $mb;
  $3 = $filteringFlags;
  $4 = $chromaQpIndexOffset;
  $qp = HEAP32[$2 + 20 >> 2];
  var $11 = _clip(0, 51, $qp + $4);
  var $13 = HEAP32[_h264bsdQpC + ($11 << 2) >> 2];
  $qp = $13;
  var $18 = $qp + HEAP32[$2 + 12 >> 2];
  var $19 = _clip(0, 51, $18);
  $indexA = $19;
  var $24 = $qp + HEAP32[$2 + 16 >> 2];
  var $25 = _clip(0, 51, $24);
  $indexB = $25;
  HEAP32[$1 + 28 >> 2] = HEAPU8[_alphas + $indexA];
  HEAP32[$1 + 32 >> 2] = HEAPU8[_betas + $indexB];
  HEAP32[$1 + 24 >> 2] = _tc0 + $indexA * 3;
  if (($3 & 2) != 0) {
    __label__ = 1;
  } else {
    __label__ = 5;
  }
  $49$$127$56 : do {
    if (__label__ == 1) {
      $qpTmp = HEAP32[HEAP32[$2 + 204 >> 2] + 20 >> 2];
      if ($qpTmp != HEAP32[$2 + 20 >> 2]) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      $60$$104$58 : do {
        if (__label__ == 2) {
          var $64 = _clip(0, 51, $qpTmp + $4);
          var $66 = HEAP32[_h264bsdQpC + ($64 << 2) >> 2];
          $qpTmp = $66;
          $qpAv = $qpTmp + ($qp + 1) >>> 1;
          var $76 = $qpAv + HEAP32[$2 + 12 >> 2];
          var $77 = _clip(0, 51, $76);
          $indexA = $77;
          var $82 = $qpAv + HEAP32[$2 + 16 >> 2];
          var $83 = _clip(0, 51, $82);
          $indexB = $83;
          HEAP32[$1 + 4 >> 2] = HEAPU8[_alphas + $indexA];
          HEAP32[$1 + 8 >> 2] = HEAPU8[_betas + $indexB];
          HEAP32[$1 >> 2] = _tc0 + $indexA * 3;
        } else if (__label__ == 3) {
          var $108 = HEAP32[$1 + 28 >> 2];
          HEAP32[$1 + 4 >> 2] = $108;
          var $115 = HEAP32[$1 + 32 >> 2];
          HEAP32[$1 + 8 >> 2] = $115;
          var $122 = HEAP32[$1 + 24 >> 2];
          HEAP32[$1 >> 2] = $122;
        }
      } while (0);
    }
  } while (0);
  if (($3 & 4) != 0) {
    __label__ = 6;
  } else {
    __label__ = 10;
  }
  $131$$209$63 : do {
    if (__label__ == 6) {
      $qpTmp = HEAP32[HEAP32[$2 + 200 >> 2] + 20 >> 2];
      if ($qpTmp != HEAP32[$2 + 20 >> 2]) {
        __label__ = 7;
      } else {
        __label__ = 8;
      }
      $142$$186$65 : do {
        if (__label__ == 7) {
          var $146 = _clip(0, 51, $qpTmp + $4);
          var $148 = HEAP32[_h264bsdQpC + ($146 << 2) >> 2];
          $qpTmp = $148;
          $qpAv = $qpTmp + ($qp + 1) >>> 1;
          var $158 = $qpAv + HEAP32[$2 + 12 >> 2];
          var $159 = _clip(0, 51, $158);
          $indexA = $159;
          var $164 = $qpAv + HEAP32[$2 + 16 >> 2];
          var $165 = _clip(0, 51, $164);
          $indexB = $165;
          HEAP32[$1 + 16 >> 2] = HEAPU8[_alphas + $indexA];
          HEAP32[$1 + 20 >> 2] = HEAPU8[_betas + $indexB];
          HEAP32[$1 + 12 >> 2] = _tc0 + $indexA * 3;
        } else if (__label__ == 8) {
          var $190 = HEAP32[$1 + 28 >> 2];
          HEAP32[$1 + 16 >> 2] = $190;
          var $197 = HEAP32[$1 + 32 >> 2];
          HEAP32[$1 + 20 >> 2] = $197;
          var $204 = HEAP32[$1 + 24 >> 2];
          HEAP32[$1 + 12 >> 2] = $204;
        }
      } while (0);
    }
  } while (0);
  return;
  return;
}
_GetChromaEdgeThresholds["X"] = 1;
function _FilterChroma($dataCb, $dataCr, $bS, $thresholds, $width) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $vblock;
  var $tmp;
  var $offset;
  $1 = $dataCb;
  $2 = $dataCr;
  $3 = $bS;
  $4 = $thresholds;
  $5 = $width;
  $tmp = $3;
  $offset = 0;
  $vblock = 0;
  $7$2 : while (1) {
    if (!($vblock < 2)) {
      __label__ = 27;
      break $7$2;
    }
    if (HEAP32[$tmp + 4 >> 2] != 0) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    $16$$33$5 : do {
      if (__label__ == 3) {
        var $21 = HEAP32[$tmp + 4 >> 2];
        _FilterVerChromaEdge($1, $21, $4 + 12, $5);
        var $29 = HEAP32[$tmp + 4 >> 2];
        _FilterVerChromaEdge($2, $29, $4 + 12, $5);
      }
    } while (0);
    if (HEAP32[$tmp + 36 >> 2] != 0) {
      __label__ = 5;
    } else {
      __label__ = 6;
    }
    $39$$62$8 : do {
      if (__label__ == 5) {
        var $47 = HEAP32[$tmp + 36 >> 2];
        _FilterVerChromaEdge($1 + ($5 << 1), $47, $4 + 12, $5);
        var $58 = HEAP32[$tmp + 36 >> 2];
        _FilterVerChromaEdge($2 + ($5 << 1), $58, $4 + 12, $5);
      }
    } while (0);
    if (HEAP32[$tmp + 20 >> 2] != 0) {
      __label__ = 7;
    } else {
      __label__ = 8;
    }
    $68$$87$11 : do {
      if (__label__ == 7) {
        var $74 = HEAP32[$tmp + 20 >> 2];
        _FilterVerChromaEdge($1 + 4, $74, $4 + 24, $5);
        var $83 = HEAP32[$tmp + 20 >> 2];
        _FilterVerChromaEdge($2 + 4, $83, $4 + 24, $5);
      }
    } while (0);
    if (HEAP32[$tmp + 52 >> 2] != 0) {
      __label__ = 9;
    } else {
      __label__ = 10;
    }
    $93$$118$14 : do {
      if (__label__ == 9) {
        var $102 = HEAP32[$tmp + 52 >> 2];
        _FilterVerChromaEdge($1 + ($5 << 1) + 4, $102, $4 + 24, $5);
        var $114 = HEAP32[$tmp + 52 >> 2];
        _FilterVerChromaEdge($2 + ($5 << 1) + 4, $114, $4 + 24, $5);
      }
    } while (0);
    if (HEAP32[$tmp >> 2] == HEAP32[$tmp + 8 >> 2]) {
      __label__ = 11;
    } else {
      __label__ = 16;
    }
    $128$$174$17 : do {
      if (__label__ == 11) {
        if (!(HEAP32[$tmp + 8 >> 2] == HEAP32[$tmp + 16 >> 2])) {
          __label__ = 16;
          break $128$$174$17;
        }
        if (!(HEAP32[$tmp + 16 >> 2] == HEAP32[$tmp + 24 >> 2])) {
          __label__ = 16;
          break $128$$174$17;
        }
        if (HEAP32[$tmp >> 2] != 0) {
          __label__ = 14;
        } else {
          __label__ = 15;
        }
        $154$$173$21 : do {
          if (__label__ == 14) {
            var $159 = HEAP32[$tmp >> 2];
            _FilterHorChroma($1, $159, $4 + $offset * 12, $5);
            var $168 = HEAP32[$tmp >> 2];
            _FilterHorChroma($2, $168, $4 + $offset * 12, $5);
          }
        } while (0);
        __label__ = 25;
        break $128$$174$17;
      }
    } while (0);
    $281$$174$24 : do {
      if (__label__ == 16) {
        if (HEAP32[$tmp >> 2] != 0) {
          __label__ = 17;
        } else {
          __label__ = 18;
        }
        $180$$199$26 : do {
          if (__label__ == 17) {
            var $185 = HEAP32[$tmp >> 2];
            _FilterHorChromaEdge($1, $185, $4 + $offset * 12, $5);
            var $194 = HEAP32[$tmp >> 2];
            _FilterHorChromaEdge($2, $194, $4 + $offset * 12, $5);
          }
        } while (0);
        if (HEAP32[$tmp + 8 >> 2] != 0) {
          __label__ = 19;
        } else {
          __label__ = 20;
        }
        $205$$226$29 : do {
          if (__label__ == 19) {
            var $211 = HEAP32[$tmp + 8 >> 2];
            _FilterHorChromaEdge($1 + 2, $211, $4 + $offset * 12, $5);
            var $221 = HEAP32[$tmp + 8 >> 2];
            _FilterHorChromaEdge($2 + 2, $221, $4 + $offset * 12, $5);
          }
        } while (0);
        if (HEAP32[$tmp + 16 >> 2] != 0) {
          __label__ = 21;
        } else {
          __label__ = 22;
        }
        $232$$253$32 : do {
          if (__label__ == 21) {
            var $238 = HEAP32[$tmp + 16 >> 2];
            _FilterHorChromaEdge($1 + 4, $238, $4 + $offset * 12, $5);
            var $248 = HEAP32[$tmp + 16 >> 2];
            _FilterHorChromaEdge($2 + 4, $248, $4 + $offset * 12, $5);
          }
        } while (0);
        if (HEAP32[$tmp + 24 >> 2] != 0) {
          __label__ = 23;
        } else {
          __label__ = 24;
        }
        $259$$280$35 : do {
          if (__label__ == 23) {
            var $265 = HEAP32[$tmp + 24 >> 2];
            _FilterHorChromaEdge($1 + 6, $265, $4 + $offset * 12, $5);
            var $275 = HEAP32[$tmp + 24 >> 2];
            _FilterHorChromaEdge($2 + 6, $275, $4 + $offset * 12, $5);
          }
        } while (0);
      }
    } while (0);
    var $283 = $tmp + 64;
    $tmp = $283;
    var $287 = $1 + ($5 << 2);
    $1 = $287;
    var $291 = $2 + ($5 << 2);
    $2 = $291;
    $offset = 2;
    var $294 = $vblock + 1;
    $vblock = $294;
  }
  return;
  return;
}
_FilterChroma["X"] = 1;
function _GetBoundaryStrengthsA($mb, $bS) {
  var __label__;
  var $1;
  var $2;
  $1 = $mb;
  $2 = $bS;
  if (HEAP16[$1 + 32 >> 1] != 0) {
    var $17 = 1;
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $16$$9$42 : do {
    if (__label__ == 1) {
      var $17 = HEAP16[$1 + 28 >> 1] != 0;
    }
  } while (0);
  var $17;
  var $18 = $17 ? 2 : 0;
  HEAP32[$2 + 32 >> 2] = $18;
  if (HEAP16[$1 + 34 >> 1] != 0) {
    var $36 = 1;
    __label__ = 4;
  } else {
    __label__ = 3;
  }
  $35$$28$45 : do {
    if (__label__ == 3) {
      var $36 = HEAP16[$1 + 30 >> 1] != 0;
    }
  } while (0);
  var $36;
  var $37 = $36 ? 2 : 0;
  HEAP32[$2 + 40 >> 2] = $37;
  if (HEAP16[$1 + 40 >> 1] != 0) {
    var $55 = 1;
    __label__ = 6;
  } else {
    __label__ = 5;
  }
  $54$$47$48 : do {
    if (__label__ == 5) {
      var $55 = HEAP16[$1 + 36 >> 1] != 0;
    }
  } while (0);
  var $55;
  var $56 = $55 ? 2 : 0;
  HEAP32[$2 + 48 >> 2] = $56;
  if (HEAP16[$1 + 42 >> 1] != 0) {
    var $74 = 1;
    __label__ = 8;
  } else {
    __label__ = 7;
  }
  $73$$66$51 : do {
    if (__label__ == 7) {
      var $74 = HEAP16[$1 + 38 >> 1] != 0;
    }
  } while (0);
  var $74;
  var $75 = $74 ? 2 : 0;
  HEAP32[$2 + 56 >> 2] = $75;
  if (HEAP16[$1 + 44 >> 1] != 0) {
    var $93 = 1;
    __label__ = 10;
  } else {
    __label__ = 9;
  }
  $92$$85$54 : do {
    if (__label__ == 9) {
      var $93 = HEAP16[$1 + 32 >> 1] != 0;
    }
  } while (0);
  var $93;
  var $94 = $93 ? 2 : 0;
  HEAP32[$2 + 64 >> 2] = $94;
  if (HEAP16[$1 + 46 >> 1] != 0) {
    var $112 = 1;
    __label__ = 12;
  } else {
    __label__ = 11;
  }
  $111$$104$57 : do {
    if (__label__ == 11) {
      var $112 = HEAP16[$1 + 34 >> 1] != 0;
    }
  } while (0);
  var $112;
  var $113 = $112 ? 2 : 0;
  HEAP32[$2 + 72 >> 2] = $113;
  if (HEAP16[$1 + 52 >> 1] != 0) {
    var $131 = 1;
    __label__ = 14;
  } else {
    __label__ = 13;
  }
  $130$$123$60 : do {
    if (__label__ == 13) {
      var $131 = HEAP16[$1 + 40 >> 1] != 0;
    }
  } while (0);
  var $131;
  var $132 = $131 ? 2 : 0;
  HEAP32[$2 + 80 >> 2] = $132;
  if (HEAP16[$1 + 54 >> 1] != 0) {
    var $150 = 1;
    __label__ = 16;
  } else {
    __label__ = 15;
  }
  $149$$142$63 : do {
    if (__label__ == 15) {
      var $150 = HEAP16[$1 + 42 >> 1] != 0;
    }
  } while (0);
  var $150;
  var $151 = $150 ? 2 : 0;
  HEAP32[$2 + 88 >> 2] = $151;
  if (HEAP16[$1 + 48 >> 1] != 0) {
    var $169 = 1;
    __label__ = 18;
  } else {
    __label__ = 17;
  }
  $168$$161$66 : do {
    if (__label__ == 17) {
      var $169 = HEAP16[$1 + 44 >> 1] != 0;
    }
  } while (0);
  var $169;
  var $170 = $169 ? 2 : 0;
  HEAP32[$2 + 96 >> 2] = $170;
  if (HEAP16[$1 + 50 >> 1] != 0) {
    var $188 = 1;
    __label__ = 20;
  } else {
    __label__ = 19;
  }
  $187$$180$69 : do {
    if (__label__ == 19) {
      var $188 = HEAP16[$1 + 46 >> 1] != 0;
    }
  } while (0);
  var $188;
  var $189 = $188 ? 2 : 0;
  HEAP32[$2 + 104 >> 2] = $189;
  if (HEAP16[$1 + 56 >> 1] != 0) {
    var $207 = 1;
    __label__ = 22;
  } else {
    __label__ = 21;
  }
  $206$$199$72 : do {
    if (__label__ == 21) {
      var $207 = HEAP16[$1 + 52 >> 1] != 0;
    }
  } while (0);
  var $207;
  var $208 = $207 ? 2 : 0;
  HEAP32[$2 + 112 >> 2] = $208;
  if (HEAP16[$1 + 58 >> 1] != 0) {
    var $226 = 1;
    __label__ = 24;
  } else {
    __label__ = 23;
  }
  $225$$218$75 : do {
    if (__label__ == 23) {
      var $226 = HEAP16[$1 + 54 >> 1] != 0;
    }
  } while (0);
  var $226;
  var $227 = $226 ? 2 : 0;
  HEAP32[$2 + 120 >> 2] = $227;
  if (HEAP16[$1 + 30 >> 1] != 0) {
    var $245 = 1;
    __label__ = 26;
  } else {
    __label__ = 25;
  }
  $244$$237$78 : do {
    if (__label__ == 25) {
      var $245 = HEAP16[$1 + 28 >> 1] != 0;
    }
  } while (0);
  var $245;
  var $246 = $245 ? 2 : 0;
  HEAP32[$2 + 12 >> 2] = $246;
  if (HEAP16[$1 + 36 >> 1] != 0) {
    var $264 = 1;
    __label__ = 28;
  } else {
    __label__ = 27;
  }
  $263$$256$81 : do {
    if (__label__ == 27) {
      var $264 = HEAP16[$1 + 30 >> 1] != 0;
    }
  } while (0);
  var $264;
  var $265 = $264 ? 2 : 0;
  HEAP32[$2 + 20 >> 2] = $265;
  if (HEAP16[$1 + 38 >> 1] != 0) {
    var $283 = 1;
    __label__ = 30;
  } else {
    __label__ = 29;
  }
  $282$$275$84 : do {
    if (__label__ == 29) {
      var $283 = HEAP16[$1 + 36 >> 1] != 0;
    }
  } while (0);
  var $283;
  var $284 = $283 ? 2 : 0;
  HEAP32[$2 + 28 >> 2] = $284;
  if (HEAP16[$1 + 34 >> 1] != 0) {
    var $302 = 1;
    __label__ = 32;
  } else {
    __label__ = 31;
  }
  $301$$294$87 : do {
    if (__label__ == 31) {
      var $302 = HEAP16[$1 + 32 >> 1] != 0;
    }
  } while (0);
  var $302;
  var $303 = $302 ? 2 : 0;
  HEAP32[$2 + 44 >> 2] = $303;
  if (HEAP16[$1 + 40 >> 1] != 0) {
    var $321 = 1;
    __label__ = 34;
  } else {
    __label__ = 33;
  }
  $320$$313$90 : do {
    if (__label__ == 33) {
      var $321 = HEAP16[$1 + 34 >> 1] != 0;
    }
  } while (0);
  var $321;
  var $322 = $321 ? 2 : 0;
  HEAP32[$2 + 52 >> 2] = $322;
  if (HEAP16[$1 + 42 >> 1] != 0) {
    var $340 = 1;
    __label__ = 36;
  } else {
    __label__ = 35;
  }
  $339$$332$93 : do {
    if (__label__ == 35) {
      var $340 = HEAP16[$1 + 40 >> 1] != 0;
    }
  } while (0);
  var $340;
  var $341 = $340 ? 2 : 0;
  HEAP32[$2 + 60 >> 2] = $341;
  if (HEAP16[$1 + 46 >> 1] != 0) {
    var $359 = 1;
    __label__ = 38;
  } else {
    __label__ = 37;
  }
  $358$$351$96 : do {
    if (__label__ == 37) {
      var $359 = HEAP16[$1 + 44 >> 1] != 0;
    }
  } while (0);
  var $359;
  var $360 = $359 ? 2 : 0;
  HEAP32[$2 + 76 >> 2] = $360;
  if (HEAP16[$1 + 52 >> 1] != 0) {
    var $378 = 1;
    __label__ = 40;
  } else {
    __label__ = 39;
  }
  $377$$370$99 : do {
    if (__label__ == 39) {
      var $378 = HEAP16[$1 + 46 >> 1] != 0;
    }
  } while (0);
  var $378;
  var $379 = $378 ? 2 : 0;
  HEAP32[$2 + 84 >> 2] = $379;
  if (HEAP16[$1 + 54 >> 1] != 0) {
    var $397 = 1;
    __label__ = 42;
  } else {
    __label__ = 41;
  }
  $396$$389$102 : do {
    if (__label__ == 41) {
      var $397 = HEAP16[$1 + 52 >> 1] != 0;
    }
  } while (0);
  var $397;
  var $398 = $397 ? 2 : 0;
  HEAP32[$2 + 92 >> 2] = $398;
  if (HEAP16[$1 + 50 >> 1] != 0) {
    var $416 = 1;
    __label__ = 44;
  } else {
    __label__ = 43;
  }
  $415$$408$105 : do {
    if (__label__ == 43) {
      var $416 = HEAP16[$1 + 48 >> 1] != 0;
    }
  } while (0);
  var $416;
  var $417 = $416 ? 2 : 0;
  HEAP32[$2 + 108 >> 2] = $417;
  if (HEAP16[$1 + 56 >> 1] != 0) {
    var $435 = 1;
    __label__ = 46;
  } else {
    __label__ = 45;
  }
  $434$$427$108 : do {
    if (__label__ == 45) {
      var $435 = HEAP16[$1 + 50 >> 1] != 0;
    }
  } while (0);
  var $435;
  var $436 = $435 ? 2 : 0;
  HEAP32[$2 + 116 >> 2] = $436;
  if (HEAP16[$1 + 58 >> 1] != 0) {
    var $454 = 1;
    __label__ = 48;
  } else {
    __label__ = 47;
  }
  $453$$446$111 : do {
    if (__label__ == 47) {
      var $454 = HEAP16[$1 + 56 >> 1] != 0;
    }
  } while (0);
  var $454;
  var $455 = $454 ? 2 : 0;
  HEAP32[$2 + 124 >> 2] = $455;
  return;
  return;
}
_GetBoundaryStrengthsA["X"] = 1;
function _FilterVerChromaEdge($data, $bS, $thresholds, $width) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $delta;
  var $tc;
  var $p0;
  var $q0;
  var $p1;
  var $q1;
  var $clp;
  $1 = $data;
  $2 = $bS;
  $3 = $thresholds;
  $4 = $width;
  $clp = _h264bsdClip + 512;
  $p1 = HEAP8[$1 - 2];
  $p0 = HEAP8[$1 - 1];
  $q0 = HEAP8[$1];
  $q1 = HEAP8[$1 + 1];
  var $22 = _abs(($p0 & 255) - ($q0 & 255));
  if ($22 >>> 0 < HEAPU32[$3 + 4 >> 2] >>> 0) {
    __label__ = 1;
  } else {
    __label__ = 7;
  }
  $27$$130$2 : do {
    if (__label__ == 1) {
      var $33 = _abs(($p1 & 255) - ($p0 & 255));
      if (!($33 >>> 0 < HEAPU32[$3 + 8 >> 2] >>> 0)) {
        __label__ = 7;
        break $27$$130$2;
      }
      var $44 = _abs(($q1 & 255) - ($q0 & 255));
      if (!($44 >>> 0 < HEAPU32[$3 + 8 >> 2] >>> 0)) {
        __label__ = 7;
        break $27$$130$2;
      }
      if ($2 < 4) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      $52$$100$6 : do {
        if (__label__ == 4) {
          $tc = HEAPU8[HEAP32[$3 >> 2] + ($2 - 1)] + 1;
          var $79 = _clip(-$tc, $tc, (($q0 & 255) - ($p0 & 255) << 2) + (($p1 & 255) - ($q1 & 255)) + 4 >> 3);
          $delta = $79;
          var $86 = HEAP8[$clp + (($p0 & 255) + $delta)];
          $p0 = $86;
          var $93 = HEAP8[$clp + (($q0 & 255) - $delta)];
          $q0 = $93;
          HEAP8[$1 - 1] = $p0;
          HEAP8[$1] = $q0;
        } else if (__label__ == 5) {
          HEAP8[$1 - 1] = (($p1 & 255) << 1) + ($p0 & 255) + ($q1 & 255) + 2 >> 2 & 255;
          HEAP8[$1] = (($q1 & 255) << 1) + ($q0 & 255) + ($p1 & 255) + 2 >> 2 & 255;
        }
      } while (0);
    }
  } while (0);
  var $133 = $1 + $4;
  $1 = $133;
  $p1 = HEAP8[$1 - 2];
  $p0 = HEAP8[$1 - 1];
  $q0 = HEAP8[$1];
  $q1 = HEAP8[$1 + 1];
  var $151 = _abs(($p0 & 255) - ($q0 & 255));
  if ($151 >>> 0 < HEAPU32[$3 + 4 >> 2] >>> 0) {
    __label__ = 8;
  } else {
    __label__ = 14;
  }
  $156$$259$11 : do {
    if (__label__ == 8) {
      var $162 = _abs(($p1 & 255) - ($p0 & 255));
      if (!($162 >>> 0 < HEAPU32[$3 + 8 >> 2] >>> 0)) {
        __label__ = 14;
        break $156$$259$11;
      }
      var $173 = _abs(($q1 & 255) - ($q0 & 255));
      if (!($173 >>> 0 < HEAPU32[$3 + 8 >> 2] >>> 0)) {
        __label__ = 14;
        break $156$$259$11;
      }
      if ($2 < 4) {
        __label__ = 11;
      } else {
        __label__ = 12;
      }
      $181$$229$15 : do {
        if (__label__ == 11) {
          $tc = HEAPU8[HEAP32[$3 >> 2] + ($2 - 1)] + 1;
          var $208 = _clip(-$tc, $tc, (($q0 & 255) - ($p0 & 255) << 2) + (($p1 & 255) - ($q1 & 255)) + 4 >> 3);
          $delta = $208;
          var $215 = HEAP8[$clp + (($p0 & 255) + $delta)];
          $p0 = $215;
          var $222 = HEAP8[$clp + (($q0 & 255) - $delta)];
          $q0 = $222;
          HEAP8[$1 - 1] = $p0;
          HEAP8[$1] = $q0;
        } else if (__label__ == 12) {
          HEAP8[$1 - 1] = (($p1 & 255) << 1) + ($p0 & 255) + ($q1 & 255) + 2 >> 2 & 255;
          HEAP8[$1] = (($q1 & 255) << 1) + ($q0 & 255) + ($p1 & 255) + 2 >> 2 & 255;
        }
      } while (0);
    }
  } while (0);
  return;
  return;
}
_FilterVerChromaEdge["X"] = 1;
function _FilterHorChroma($data, $bS, $thresholds, $width) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $delta;
  var $tc;
  var $i;
  var $p0;
  var $q0;
  var $p1;
  var $q1;
  var $clp;
  $1 = $data;
  $2 = $bS;
  $3 = $thresholds;
  $4 = $width;
  $clp = _h264bsdClip + 512;
  if ($2 < 4) {
    __label__ = 1;
  } else {
    __label__ = 10;
  }
  $7$$119$21 : do {
    if (__label__ == 1) {
      $tc = HEAPU8[HEAP32[$3 >> 2] + ($2 - 1)] + 1;
      $i = 8;
      $17$23 : while (1) {
        if (!($i != 0)) {
          __label__ = 9;
          break $17$23;
        }
        $p1 = HEAP8[$1 + (-$4 << 1)];
        $p0 = HEAP8[$1 + -$4];
        $q0 = HEAP8[$1];
        $q1 = HEAP8[$1 + $4];
        var $44 = _abs(($p0 & 255) - ($q0 & 255));
        if ($44 >>> 0 < HEAPU32[$3 + 4 >> 2] >>> 0) {
          __label__ = 4;
        } else {
          __label__ = 7;
        }
        $49$$112$26 : do {
          if (__label__ == 4) {
            var $55 = _abs(($p1 & 255) - ($p0 & 255));
            if (!($55 >>> 0 < HEAPU32[$3 + 8 >> 2] >>> 0)) {
              __label__ = 7;
              break $49$$112$26;
            }
            var $66 = _abs(($q1 & 255) - ($q0 & 255));
            if (!($66 >>> 0 < HEAPU32[$3 + 8 >> 2] >>> 0)) {
              __label__ = 7;
              break $49$$112$26;
            }
            var $89 = _clip(-$tc, $tc, (($q0 & 255) - ($p0 & 255) << 2) + (($p1 & 255) - ($q1 & 255)) + 4 >> 3);
            $delta = $89;
            var $96 = HEAP8[$clp + (($p0 & 255) + $delta)];
            $p0 = $96;
            var $103 = HEAP8[$clp + (($q0 & 255) - $delta)];
            $q0 = $103;
            HEAP8[$1 + -$4] = $p0;
            HEAP8[$1] = $q0;
          }
        } while (0);
        var $115 = $i - 1;
        $i = $115;
        var $117 = $1 + 1;
        $1 = $117;
      }
    } else if (__label__ == 10) {
      $i = 8;
      $120$34 : while (1) {
        if (!($i != 0)) {
          __label__ = 18;
          break $120$34;
        }
        $p1 = HEAP8[$1 + (-$4 << 1)];
        $p0 = HEAP8[$1 + -$4];
        $q0 = HEAP8[$1];
        $q1 = HEAP8[$1 + $4];
        var $147 = _abs(($p0 & 255) - ($q0 & 255));
        if ($147 >>> 0 < HEAPU32[$3 + 4 >> 2] >>> 0) {
          __label__ = 13;
        } else {
          __label__ = 16;
        }
        $152$$205$37 : do {
          if (__label__ == 13) {
            var $158 = _abs(($p1 & 255) - ($p0 & 255));
            if (!($158 >>> 0 < HEAPU32[$3 + 8 >> 2] >>> 0)) {
              __label__ = 16;
              break $152$$205$37;
            }
            var $169 = _abs(($q1 & 255) - ($q0 & 255));
            if (!($169 >>> 0 < HEAPU32[$3 + 8 >> 2] >>> 0)) {
              __label__ = 16;
              break $152$$205$37;
            }
            HEAP8[$1 + -$4] = (($p1 & 255) << 1) + ($p0 & 255) + ($q1 & 255) + 2 >> 2 & 255;
            HEAP8[$1] = (($q1 & 255) << 1) + ($q0 & 255) + ($p1 & 255) + 2 >> 2 & 255;
          }
        } while (0);
        var $208 = $i - 1;
        $i = $208;
        var $210 = $1 + 1;
        $1 = $210;
      }
    }
  } while (0);
  return;
  return;
}
_FilterHorChroma["X"] = 1;
function _FilterHorChromaEdge($data, $bS, $thresholds, $width) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $delta;
  var $tc;
  var $i;
  var $p0;
  var $q0;
  var $p1;
  var $q1;
  var $clp;
  $1 = $data;
  $2 = $bS;
  $3 = $thresholds;
  $4 = $width;
  $clp = _h264bsdClip + 512;
  $tc = HEAPU8[HEAP32[$3 >> 2] + ($2 - 1)] + 1;
  $i = 2;
  $14$46 : while (1) {
    if (!($i != 0)) {
      __label__ = 8;
      break $14$46;
    }
    $p1 = HEAP8[$1 + (-$4 << 1)];
    $p0 = HEAP8[$1 + -$4];
    $q0 = HEAP8[$1];
    $q1 = HEAP8[$1 + $4];
    var $41 = _abs(($p0 & 255) - ($q0 & 255));
    if ($41 >>> 0 < HEAPU32[$3 + 4 >> 2] >>> 0) {
      __label__ = 3;
    } else {
      __label__ = 6;
    }
    $46$$109$49 : do {
      if (__label__ == 3) {
        var $52 = _abs(($p1 & 255) - ($p0 & 255));
        if (!($52 >>> 0 < HEAPU32[$3 + 8 >> 2] >>> 0)) {
          __label__ = 6;
          break $46$$109$49;
        }
        var $63 = _abs(($q1 & 255) - ($q0 & 255));
        if (!($63 >>> 0 < HEAPU32[$3 + 8 >> 2] >>> 0)) {
          __label__ = 6;
          break $46$$109$49;
        }
        var $86 = _clip(-$tc, $tc, (($q0 & 255) - ($p0 & 255) << 2) + (($p1 & 255) - ($q1 & 255)) + 4 >> 3);
        $delta = $86;
        var $93 = HEAP8[$clp + (($p0 & 255) + $delta)];
        $p0 = $93;
        var $100 = HEAP8[$clp + (($q0 & 255) - $delta)];
        $q0 = $100;
        HEAP8[$1 + -$4] = $p0;
        HEAP8[$1] = $q0;
      }
    } while (0);
    var $112 = $i - 1;
    $i = $112;
    var $114 = $1 + 1;
    $1 = $114;
  }
  return;
  return;
}
_FilterHorChromaEdge["X"] = 1;
function _FilterVerLumaEdge($data, $bS, $thresholds, $imageWidth) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $delta;
  var $tc;
  var $tmp;
  var $i;
  var $p0;
  var $q0;
  var $p1;
  var $q1;
  var $p2;
  var $q2;
  var $tmpFlag;
  var $clp;
  var $alpha;
  var $beta;
  var $val;
  $1 = $data;
  $2 = $bS;
  $3 = $thresholds;
  $4 = $imageWidth;
  $clp = _h264bsdClip + 512;
  $alpha = HEAP32[$3 + 4 >> 2];
  $beta = HEAP32[$3 + 8 >> 2];
  if ($2 < 4) {
    __label__ = 1;
  } else {
    __label__ = 14;
  }
  $13$$180$2 : do {
    if (__label__ == 1) {
      $tc = HEAPU8[HEAP32[$3 >> 2] + ($2 - 1)];
      $tmp = $tc;
      $i = 4;
      $23$4 : while (1) {
        if (!($i != 0)) {
          __label__ = 13;
          break $23$4;
        }
        $p1 = HEAPU8[$1 - 2];
        $p0 = HEAPU8[$1 - 1];
        $q0 = HEAPU8[$1];
        $q1 = HEAPU8[$1 + 1];
        var $46 = _abs($p0 - $q0);
        if ($46 < $alpha) {
          __label__ = 4;
        } else {
          __label__ = 11;
        }
        $49$$172$7 : do {
          if (__label__ == 4) {
            var $53 = _abs($p1 - $p0);
            if (!($53 < $beta)) {
              __label__ = 11;
              break $49$$172$7;
            }
            var $60 = _abs($q1 - $q0);
            if (!($60 < $beta)) {
              __label__ = 11;
              break $49$$172$7;
            }
            $p2 = HEAPU8[$1 - 3];
            $q2 = HEAPU8[$1 + 2];
            var $75 = _abs($p2 - $p0);
            if ($75 < $beta) {
              __label__ = 7;
            } else {
              __label__ = 8;
            }
            $78$$102$11 : do {
              if (__label__ == 7) {
                $val = $p2 + ($q0 + ($p0 + 1) >> 1) - ($p1 << 1) >> 1;
                var $90 = $p1;
                var $95 = _clip(-$tc, $tc, $val);
                HEAP8[$1 - 2] = $90 + $95 & 255;
                var $101 = $tmp + 1;
                $tmp = $101;
              }
            } while (0);
            var $106 = _abs($q2 - $q0);
            if ($106 < $beta) {
              __label__ = 9;
            } else {
              __label__ = 10;
            }
            $109$$133$14 : do {
              if (__label__ == 9) {
                $val = $q2 + ($q0 + ($p0 + 1) >> 1) - ($q1 << 1) >> 1;
                var $121 = $q1;
                var $126 = _clip(-$tc, $tc, $val);
                HEAP8[$1 + 1] = $121 + $126 & 255;
                var $132 = $tmp + 1;
                $tmp = $132;
              }
            } while (0);
            $val = ($q0 - $p0 << 2) + ($p1 - $q1) + 4 >> 3;
            var $148 = _clip(-$tmp, $tmp, $val);
            $delta = $148;
            var $155 = HEAPU8[$clp + ($p0 + $delta)];
            $p0 = $155;
            var $162 = HEAPU8[$clp + ($q0 - $delta)];
            $q0 = $162;
            $tmp = $tc;
            HEAP8[$1 - 1] = $p0 & 255;
            HEAP8[$1] = $q0 & 255;
          }
        } while (0);
        var $175 = $i - 1;
        $i = $175;
        var $178 = $1 + $4;
        $1 = $178;
      }
    } else if (__label__ == 14) {
      $i = 4;
      $181$21 : while (1) {
        if (!($i != 0)) {
          __label__ = 30;
          break $181$21;
        }
        $p1 = HEAPU8[$1 - 2];
        $p0 = HEAPU8[$1 - 1];
        $q0 = HEAPU8[$1];
        $q1 = HEAPU8[$1 + 1];
        var $204 = _abs($p0 - $q0);
        if ($204 < $alpha) {
          __label__ = 17;
        } else {
          __label__ = 28;
        }
        $207$$363$24 : do {
          if (__label__ == 17) {
            var $211 = _abs($p1 - $p0);
            if (!($211 < $beta)) {
              __label__ = 28;
              break $207$$363$24;
            }
            var $218 = _abs($q1 - $q0);
            if (!($218 < $beta)) {
              __label__ = 28;
              break $207$$363$24;
            }
            var $225 = _abs($p0 - $q0);
            var $230 = $225 < ($alpha >>> 2) + 2 ? 1 : 0;
            $tmpFlag = $230;
            $p2 = HEAPU8[$1 - 3];
            $q2 = HEAPU8[$1 + 2];
            if ($tmpFlag != 0) {
              __label__ = 20;
            } else {
              __label__ = 22;
            }
            $241$$288$28 : do {
              if (__label__ == 20) {
                var $245 = _abs($p2 - $p0);
                if (!($245 < $beta)) {
                  __label__ = 22;
                  break $241$$288$28;
                }
                $tmp = $p1 + $p0 + $q0;
                HEAP8[$1 - 1] = $p2 + ($tmp << 1) + $q1 + 4 >> 3 & 255;
                HEAP8[$1 - 2] = $tmp + ($p2 + 2) >> 2 & 255;
                HEAP8[$1 - 3] = (HEAPU8[$1 - 4] << 1) + $p2 * 3 + $tmp + 4 >> 3 & 255;
                __label__ = 23;
                break $241$$288$28;
              }
            } while (0);
            $300$$288$31 : do {
              if (__label__ == 22) {
                HEAP8[$1 - 1] = ($p1 << 1) + $p0 + $q1 + 2 >> 2 & 255;
              }
            } while (0);
            if ($tmpFlag != 0) {
              __label__ = 24;
            } else {
              __label__ = 26;
            }
            $303$$350$34 : do {
              if (__label__ == 24) {
                var $307 = _abs($q2 - $q0);
                if (!($307 < $beta)) {
                  __label__ = 26;
                  break $303$$350$34;
                }
                $tmp = $p0 + $q0 + $q1;
                HEAP8[$1] = $p1 + ($tmp << 1) + $q2 + 4 >> 3 & 255;
                HEAP8[$1 + 1] = $q2 + ($tmp + 2) >> 2 & 255;
                HEAP8[$1 + 2] = (HEAPU8[$1 + 3] << 1) + $q2 * 3 + $tmp + 4 >> 3 & 255;
                __label__ = 27;
                break $303$$350$34;
              }
            } while (0);
            $362$$350$37 : do {
              if (__label__ == 26) {
                HEAP8[$1] = ($q1 << 1) + $q0 + $p1 + 2 >> 2 & 255;
              }
            } while (0);
          }
        } while (0);
        var $366 = $i - 1;
        $i = $366;
        var $369 = $1 + $4;
        $1 = $369;
      }
    }
  } while (0);
  return;
  return;
}
_FilterVerLumaEdge["X"] = 1;
function _FilterHorLuma($data, $bS, $thresholds, $imageWidth) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $delta;
  var $tc;
  var $tmp;
  var $i;
  var $p0;
  var $q0;
  var $p1;
  var $q1;
  var $p2;
  var $q2;
  var $tmpFlag;
  var $clp;
  var $alpha;
  var $beta;
  var $val;
  $1 = $data;
  $2 = $bS;
  $3 = $thresholds;
  $4 = $imageWidth;
  $clp = _h264bsdClip + 512;
  $alpha = HEAP32[$3 + 4 >> 2];
  $beta = HEAP32[$3 + 8 >> 2];
  if ($2 < 4) {
    __label__ = 1;
  } else {
    __label__ = 14;
  }
  $13$$196$2 : do {
    if (__label__ == 1) {
      $tc = HEAPU8[HEAP32[$3 >> 2] + ($2 - 1)];
      $tmp = $tc;
      $i = 16;
      $23$4 : while (1) {
        if (!($i != 0)) {
          __label__ = 13;
          break $23$4;
        }
        $p1 = HEAPU8[$1 + (-$4 << 1)];
        $p0 = HEAPU8[$1 + -$4];
        $q0 = HEAPU8[$1];
        $q1 = HEAPU8[$1 + $4];
        var $52 = _abs($p0 - $q0);
        if ($52 < $alpha) {
          __label__ = 4;
        } else {
          __label__ = 11;
        }
        $55$$189$7 : do {
          if (__label__ == 4) {
            var $59 = _abs($p1 - $p0);
            if (!($59 < $beta)) {
              __label__ = 11;
              break $55$$189$7;
            }
            var $66 = _abs($q1 - $q0);
            if (!($66 < $beta)) {
              __label__ = 11;
              break $55$$189$7;
            }
            $p2 = HEAPU8[$1 + -$4 * 3];
            var $80 = _abs($p2 - $p0);
            if ($80 < $beta) {
              __label__ = 7;
            } else {
              __label__ = 8;
            }
            $83$$110$11 : do {
              if (__label__ == 7) {
                $val = $p2 + ($q0 + ($p0 + 1) >> 1) - ($p1 << 1) >> 1;
                var $95 = $p1;
                var $100 = _clip(-$tc, $tc, $val);
                HEAP8[$1 + (-$4 << 1)] = $95 + $100 & 255;
                var $109 = $tmp + 1;
                $tmp = $109;
              }
            } while (0);
            $q2 = HEAPU8[$1 + ($4 << 1)];
            var $120 = _abs($q2 - $q0);
            if ($120 < $beta) {
              __label__ = 9;
            } else {
              __label__ = 10;
            }
            $123$$148$14 : do {
              if (__label__ == 9) {
                $val = $q2 + ($q0 + ($p0 + 1) >> 1) - ($q1 << 1) >> 1;
                var $135 = $q1;
                var $140 = _clip(-$tc, $tc, $val);
                HEAP8[$1 + $4] = $135 + $140 & 255;
                var $147 = $tmp + 1;
                $tmp = $147;
              }
            } while (0);
            $val = ($q0 - $p0 << 2) + ($p1 - $q1) + 4 >> 3;
            var $163 = _clip(-$tmp, $tmp, $val);
            $delta = $163;
            var $170 = HEAPU8[$clp + ($p0 + $delta)];
            $p0 = $170;
            var $177 = HEAPU8[$clp + ($q0 - $delta)];
            $q0 = $177;
            $tmp = $tc;
            HEAP8[$1 + -$4] = $p0 & 255;
            HEAP8[$1] = $q0 & 255;
          }
        } while (0);
        var $192 = $i - 1;
        $i = $192;
        var $194 = $1 + 1;
        $1 = $194;
      }
    } else if (__label__ == 14) {
      $i = 16;
      $197$21 : while (1) {
        if (!($i != 0)) {
          __label__ = 30;
          break $197$21;
        }
        $p1 = HEAPU8[$1 + (-$4 << 1)];
        $p0 = HEAPU8[$1 + -$4];
        $q0 = HEAPU8[$1];
        $q1 = HEAPU8[$1 + $4];
        var $226 = _abs($p0 - $q0);
        if ($226 < $alpha) {
          __label__ = 17;
        } else {
          __label__ = 28;
        }
        $229$$408$24 : do {
          if (__label__ == 17) {
            var $233 = _abs($p1 - $p0);
            if (!($233 < $beta)) {
              __label__ = 28;
              break $229$$408$24;
            }
            var $240 = _abs($q1 - $q0);
            if (!($240 < $beta)) {
              __label__ = 28;
              break $229$$408$24;
            }
            var $247 = _abs($p0 - $q0);
            var $252 = $247 < ($alpha >>> 2) + 2 ? 1 : 0;
            $tmpFlag = $252;
            $p2 = HEAPU8[$1 + -$4 * 3];
            $q2 = HEAPU8[$1 + ($4 << 1)];
            if ($tmpFlag != 0) {
              __label__ = 20;
            } else {
              __label__ = 22;
            }
            $268$$326$28 : do {
              if (__label__ == 20) {
                var $272 = _abs($p2 - $p0);
                if (!($272 < $beta)) {
                  __label__ = 22;
                  break $268$$326$28;
                }
                $tmp = $p1 + $p0 + $q0;
                HEAP8[$1 + -$4] = $p2 + ($tmp << 1) + $q1 + 4 >> 3 & 255;
                HEAP8[$1 + (-$4 << 1)] = $tmp + ($p2 + 2) >> 2 & 255;
                HEAP8[$1 + -$4 * 3] = (HEAPU8[$1 + (-$4 << 2)] << 1) + $p2 * 3 + $tmp + 4 >> 3 & 255;
                __label__ = 23;
                break $268$$326$28;
              }
            } while (0);
            $340$$326$31 : do {
              if (__label__ == 22) {
                HEAP8[$1 + -$4] = ($p1 << 1) + $p0 + $q1 + 2 >> 2 & 255;
              }
            } while (0);
            if ($tmpFlag != 0) {
              __label__ = 24;
            } else {
              __label__ = 26;
            }
            $343$$395$34 : do {
              if (__label__ == 24) {
                var $347 = _abs($q2 - $q0);
                if (!($347 < $beta)) {
                  __label__ = 26;
                  break $343$$395$34;
                }
                $tmp = $p0 + $q0 + $q1;
                HEAP8[$1] = $p1 + ($tmp << 1) + $q2 + 4 >> 3 & 255;
                HEAP8[$1 + $4] = $q2 + ($tmp + 2) >> 2 & 255;
                HEAP8[$1 + ($4 << 1)] = (HEAPU8[$1 + $4 * 3] << 1) + $q2 * 3 + $tmp + 4 >> 3 & 255;
                __label__ = 27;
                break $343$$395$34;
              }
            } while (0);
            $407$$395$37 : do {
              if (__label__ == 26) {
                HEAP8[$1] = ($q1 << 1) + $q0 + $p1 + 2 >> 2 & 255;
              }
            } while (0);
          }
        } while (0);
        var $411 = $i - 1;
        $i = $411;
        var $413 = $1 + 1;
        $1 = $413;
      }
    }
  } while (0);
  return;
  return;
}
_FilterHorLuma["X"] = 1;
function _FilterHorLumaEdge($data, $bS, $thresholds, $imageWidth) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $delta;
  var $tc;
  var $tmp;
  var $i;
  var $p0;
  var $q0;
  var $p1;
  var $q1;
  var $p2;
  var $q2;
  var $clp;
  var $val;
  $1 = $data;
  $2 = $bS;
  $3 = $thresholds;
  $4 = $imageWidth;
  $clp = _h264bsdClip + 512;
  $tc = HEAPU8[HEAP32[$3 >> 2] + ($2 - 1)];
  $tmp = $tc;
  $i = 4;
  $14$45 : while (1) {
    if (!($i != 0)) {
      __label__ = 12;
      break $14$45;
    }
    $p1 = HEAP8[$1 + (-$4 << 1)];
    $p0 = HEAP8[$1 + -$4];
    $q0 = HEAP8[$1];
    $q1 = HEAP8[$1 + $4];
    var $41 = _abs(($p0 & 255) - ($q0 & 255));
    if ($41 >>> 0 < HEAPU32[$3 + 4 >> 2] >>> 0) {
      __label__ = 3;
    } else {
      __label__ = 10;
    }
    $46$$206$48 : do {
      if (__label__ == 3) {
        var $52 = _abs(($p1 & 255) - ($p0 & 255));
        if (!($52 >>> 0 < HEAPU32[$3 + 8 >> 2] >>> 0)) {
          __label__ = 10;
          break $46$$206$48;
        }
        var $63 = _abs(($q1 & 255) - ($q0 & 255));
        if (!($63 >>> 0 < HEAPU32[$3 + 8 >> 2] >>> 0)) {
          __label__ = 10;
          break $46$$206$48;
        }
        $p2 = HEAP8[$1 + -$4 * 3];
        var $80 = _abs(($p2 & 255) - ($p0 & 255));
        if ($80 >>> 0 < HEAPU32[$3 + 8 >> 2] >>> 0) {
          __label__ = 6;
        } else {
          __label__ = 7;
        }
        $85$$117$52 : do {
          if (__label__ == 6) {
            $val = ($p2 & 255) + (($p0 & 255) + ($q0 & 255) + 1 >> 1) - (($p1 & 255) << 1) >> 1;
            var $102 = $p1 & 255;
            var $107 = _clip(-$tc, $tc, $val);
            HEAP8[$1 + (-$4 << 1)] = $102 + $107 & 255;
            var $116 = $tmp + 1;
            $tmp = $116;
          }
        } while (0);
        $q2 = HEAP8[$1 + ($4 << 1)];
        var $128 = _abs(($q2 & 255) - ($q0 & 255));
        if ($128 >>> 0 < HEAPU32[$3 + 8 >> 2] >>> 0) {
          __label__ = 8;
        } else {
          __label__ = 9;
        }
        $133$$163$55 : do {
          if (__label__ == 8) {
            $val = ($q2 & 255) + (($p0 & 255) + ($q0 & 255) + 1 >> 1) - (($q1 & 255) << 1) >> 1;
            var $150 = $q1 & 255;
            var $155 = _clip(-$tc, $tc, $val);
            HEAP8[$1 + $4] = $150 + $155 & 255;
            var $162 = $tmp + 1;
            $tmp = $162;
          }
        } while (0);
        $val = (($q0 & 255) - ($p0 & 255) << 2) + (($p1 & 255) - ($q1 & 255)) + 4 >> 3;
        var $182 = _clip(-$tmp, $tmp, $val);
        $delta = $182;
        var $189 = HEAP8[$clp + (($p0 & 255) + $delta)];
        $p0 = $189;
        var $196 = HEAP8[$clp + (($q0 & 255) - $delta)];
        $q0 = $196;
        $tmp = $tc;
        HEAP8[$1 + -$4] = $p0;
        HEAP8[$1] = $q0;
      }
    } while (0);
    var $209 = $i - 1;
    $i = $209;
    var $211 = $1 + 1;
    $1 = $211;
  }
  return;
  return;
}
_FilterHorLumaEdge["X"] = 1;
function _EdgeBoundaryStrength($mb1, $mb2, $ind1, $ind2) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $2 = $mb1;
  $3 = $mb2;
  $4 = $ind1;
  $5 = $ind2;
  if (HEAP16[$2 + 28 + ($4 << 1) >> 1] != 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $21$$13$62 : do {
    if (__label__ == 1) {
      if (HEAP16[$3 + 28 + ($5 << 1) >> 1] != 0) {
        __label__ = 2;
        break $21$$13$62;
      }
      if (HEAP32[$2 + 116 + ($4 >>> 2 << 2) >> 2] != HEAP32[$3 + 116 + ($5 >>> 2 << 2) >> 2]) {
        __label__ = 6;
      } else {
        __label__ = 4;
      }
      $72$$36$65 : do {
        if (__label__ == 4) {
          var $51 = HEAP16[$2 + 132 + ($4 << 2) >> 1] - HEAP16[$3 + 132 + ($5 << 2) >> 1];
          var $52 = _abs($51);
          if ($52 >= 4) {
            __label__ = 6;
            break $72$$36$65;
          }
          var $69 = HEAP16[$2 + 132 + ($4 << 2) + 2 >> 1] - HEAP16[$3 + 132 + ($5 << 2) + 2 >> 1];
          var $70 = _abs($69);
          if ($70 >= 4) {
            __label__ = 6;
            break $72$$36$65;
          }
          $1 = 0;
          __label__ = 8;
          break $21$$13$62;
        }
      } while (0);
      $1 = 1;
      __label__ = 8;
      break $21$$13$62;
    }
  } while (0);
  $21$$74$70 : do {
    if (__label__ == 2) {
      $1 = 2;
    }
  } while (0);
  var $75 = $1;
  return $75;
  return null;
}
_EdgeBoundaryStrength["X"] = 1;
function _IsSliceBoundaryOnLeft($mb) {
  var __label__;
  var $1;
  var $2;
  $2 = $mb;
  if (HEAP32[$2 + 4 >> 2] != HEAP32[HEAP32[$2 + 200 >> 2] + 4 >> 2]) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $12$$13$14 : do {
    if (__label__ == 1) {
      $1 = 1;
    } else if (__label__ == 2) {
      $1 = 0;
    }
  } while (0);
  var $15 = $1;
  return $15;
  return null;
}
function _IsSliceBoundaryOnTop($mb) {
  var __label__;
  var $1;
  var $2;
  $2 = $mb;
  if (HEAP32[$2 + 4 >> 2] != HEAP32[HEAP32[$2 + 204 >> 2] + 4 >> 2]) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $12$$13$19 : do {
    if (__label__ == 1) {
      $1 = 1;
    } else if (__label__ == 2) {
      $1 = 0;
    }
  } while (0);
  var $15 = $1;
  return $15;
  return null;
}
function _InnerBoundaryStrength($mb1, $ind1, $ind2) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $tmp1;
  var $tmp2;
  var $mv1;
  var $mv2;
  var $mv3;
  var $mv4;
  $2 = $mb1;
  $3 = $ind1;
  $4 = $ind2;
  $tmp1 = HEAP16[$2 + 28 + ($3 << 1) >> 1];
  $tmp2 = HEAP16[$2 + 28 + ($4 << 1) >> 1];
  $mv1 = HEAP16[$2 + 132 + ($3 << 2) >> 1];
  $mv2 = HEAP16[$2 + 132 + ($4 << 2) >> 1];
  $mv3 = HEAP16[$2 + 132 + ($3 << 2) + 2 >> 1];
  $mv4 = HEAP16[$2 + 132 + ($4 << 2) + 2 >> 1];
  if ($tmp1 != 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $50$$47$2 : do {
    if (__label__ == 1) {
      if ($tmp2 != 0) {
        __label__ = 2;
        break $50$$47$2;
      }
      var $55 = _abs($mv1 - $mv2);
      if ($55 >= 4) {
        __label__ = 6;
      } else {
        __label__ = 4;
      }
      $77$$57$5 : do {
        if (__label__ == 4) {
          var $61 = _abs($mv3 - $mv4);
          if ($61 >= 4) {
            __label__ = 6;
            break $77$$57$5;
          }
          if (HEAP32[$2 + 116 + ($3 >>> 2 << 2) >> 2] != HEAP32[$2 + 116 + ($4 >>> 2 << 2) >> 2]) {
            __label__ = 6;
            break $77$$57$5;
          }
          $1 = 0;
          __label__ = 8;
          break $50$$47$2;
        }
      } while (0);
      $1 = 1;
      __label__ = 8;
      break $50$$47$2;
    }
  } while (0);
  $50$$79$10 : do {
    if (__label__ == 2) {
      $1 = 2;
    }
  } while (0);
  var $80 = $1;
  return $80;
  return null;
}
_InnerBoundaryStrength["X"] = 1;
function _h264bsdConceal($pStorage, $currImage, $sliceType) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $i;
  var $j;
  var $row;
  var $col;
  var $width;
  var $height;
  var $refData;
  var $mb;
  $2 = $pStorage;
  $3 = $currImage;
  $4 = $sliceType;
  $width = HEAP32[$3 + 4 >> 2];
  $height = HEAP32[$3 + 8 >> 2];
  $refData = 0;
  if ($4 == 0) {
    __label__ = 3;
  } else {
    __label__ = 1;
  }
  $21$$13$24 : do {
    if (__label__ == 1) {
      if ($4 == 5) {
        __label__ = 3;
        break $21$$13$24;
      }
      if (HEAP32[$2 + 3384 >> 2] != 0) {
        __label__ = 3;
        break $21$$13$24;
      } else {
        __label__ = 9;
        break $21$$13$24;
      }
    }
  } while (0);
  $21$$38$27 : do {
    if (__label__ == 3) {
      $i = 0;
      $22$29 : while (1) {
        var $27 = _h264bsdGetRefPicData($2 + 1220, $i);
        $refData = $27;
        var $29 = $i + 1;
        $i = $29;
        if ($i >= 16) {
          __label__ = 5;
          break $22$29;
        }
        if (!($refData == 0)) {
          __label__ = 8;
          break $22$29;
        }
      }
      $32$$37$33 : do {
        if (__label__ == 5) {}
      } while (0);
    }
  } while (0);
  $col = 0;
  $row = 0;
  $i = 0;
  $39$37 : while (1) {
    if ($i < HEAPU32[$2 + 1176 >> 2]) {
      __label__ = 11;
    } else {
      var $56 = 0;
      __label__ = 12;
    }
    $45$$55$39 : do {
      if (__label__ == 11) {
        var $56 = HEAP32[HEAP32[$2 + 1212 >> 2] + $i * 216 + 196 >> 2] != 0 ^ 1;
      }
    } while (0);
    var $56;
    if (!$56) {
      __label__ = 16;
      break $39$37;
    }
    var $59 = $i + 1;
    $i = $59;
    var $61 = $col + 1;
    $col = $61;
    if ($col == $width) {
      __label__ = 14;
    } else {
      __label__ = 15;
    }
    $65$$68$43 : do {
      if (__label__ == 14) {
        var $67 = $row + 1;
        $row = $67;
        $col = 0;
      }
    } while (0);
  }
  if ($i == HEAP32[$2 + 1176 >> 2]) {
    __label__ = 17;
  } else {
    __label__ = 28;
  }
  $75$$129$47 : do {
    if (__label__ == 17) {
      if ($4 == 2) {
        __label__ = 19;
      } else {
        __label__ = 18;
      }
      $81$$78$49 : do {
        if (__label__ == 18) {
          if ($4 == 7) {
            __label__ = 19;
            break $81$$78$49;
          } else {
            __label__ = 20;
            break $81$$78$49;
          }
        }
      } while (0);
      $81$$86$51 : do {
        if (__label__ == 19) {
          if (HEAP32[$2 + 3384 >> 2] == 0) {
            __label__ = 21;
            break $81$$86$51;
          } else {
            __label__ = 20;
            break $81$$86$51;
          }
        }
      } while (0);
      $89$$86$53 : do {
        if (__label__ == 20) {
          if ($refData == 0) {
            __label__ = 21;
            break $89$$86$53;
          }
          var $100 = HEAP32[$3 >> 2];
          _H264SwDecMemcpy($100, $refData, $width * $height * 384);
          __label__ = 23;
          break $89$$86$53;
        }
      } while (0);
      $89$$106$56 : do {
        if (__label__ == 21) {
          var $92 = HEAP32[$3 >> 2];
          _H264SwDecMemset($92, 128, $width * $height * 384);
        }
      } while (0);
      var $109 = HEAP32[$2 + 1176 >> 2];
      HEAP32[$2 + 1204 >> 2] = $109;
      $i = 0;
      $112$59 : while (1) {
        if (!($i < HEAPU32[$2 + 1176 >> 2])) {
          __label__ = 27;
          break $112$59;
        }
        var $124 = HEAP32[$2 + 1212 >> 2] + $i * 216 + 8;
        HEAP32[$124 >> 2] = 1;
        var $127 = $i + 1;
        $i = $127;
      }
      $1 = 0;
    } else if (__label__ == 28) {
      $mb = HEAP32[$2 + 1212 >> 2] + $row * $width * 216;
      $j = $col;
      $138$65 : while (1) {
        var $139 = $j;
        var $140 = $139 - 1;
        $j = $140;
        if (!($139 != 0)) {
          __label__ = 31;
          break $138$65;
        }
        var $151 = _ConcealMb($mb + $j * 216, $3, $row, $j, $4, $refData);
        HEAP32[$mb + $j * 216 + 196 >> 2] = 1;
        var $159 = HEAP32[$2 + 1204 >> 2] + 1;
        HEAP32[$2 + 1204 >> 2] = $159;
      }
      $j = $col + 1;
      $163$69 : while (1) {
        if (!($j < $width)) {
          __label__ = 37;
          break $163$69;
        }
        if (HEAP32[$mb + $j * 216 + 196 >> 2] != 0) {
          __label__ = 35;
        } else {
          __label__ = 34;
        }
        $192$$174$72 : do {
          if (__label__ == 34) {
            var $183 = _ConcealMb($mb + $j * 216, $3, $row, $j, $4, $refData);
            HEAP32[$mb + $j * 216 + 196 >> 2] = 1;
            var $191 = HEAP32[$2 + 1204 >> 2] + 1;
            HEAP32[$2 + 1204 >> 2] = $191;
          }
        } while (0);
        var $195 = $j + 1;
        $j = $195;
      }
      if ($row != 0) {
        __label__ = 38;
      } else {
        __label__ = 46;
      }
      $199$$243$77 : do {
        if (__label__ == 38) {
          $j = 0;
          $200$79 : while (1) {
            if (!($j < $width)) {
              __label__ = 45;
              break $200$79;
            }
            $i = $row - 1;
            $mb = HEAP32[$2 + 1212 >> 2] + $i * $width * 216 + $j * 216;
            $216$82 : while (1) {
              var $223 = _ConcealMb($mb, $3, $i, $j, $4, $refData);
              HEAP32[$mb + 196 >> 2] = 1;
              var $229 = HEAP32[$2 + 1204 >> 2] + 1;
              HEAP32[$2 + 1204 >> 2] = $229;
              var $233 = $mb + -$width * 216;
              $mb = $233;
              var $235 = $i;
              var $236 = $235 - 1;
              $i = $236;
              if (!($235 != 0)) {
                __label__ = 43;
                break $216$82;
              }
            }
            var $241 = $j + 1;
            $j = $241;
          }
        }
      } while (0);
      $i = $row + 1;
      $246$89 : while (1) {
        if (!($i < $height)) {
          __label__ = 56;
          break $246$89;
        }
        $mb = HEAP32[$2 + 1212 >> 2] + $i * $width * 216;
        $j = 0;
        $258$92 : while (1) {
          if (!($j < $width)) {
            __label__ = 54;
            break $258$92;
          }
          if (HEAP32[$mb + $j * 216 + 196 >> 2] != 0) {
            __label__ = 52;
          } else {
            __label__ = 51;
          }
          $287$$269$95 : do {
            if (__label__ == 51) {
              var $278 = _ConcealMb($mb + $j * 216, $3, $i, $j, $4, $refData);
              HEAP32[$mb + $j * 216 + 196 >> 2] = 1;
              var $286 = HEAP32[$2 + 1204 >> 2] + 1;
              HEAP32[$2 + 1204 >> 2] = $286;
            }
          } while (0);
          var $290 = $j + 1;
          $j = $290;
        }
        var $294 = $i + 1;
        $i = $294;
      }
      $1 = 0;
    }
  } while (0);
  var $297 = $1;
  return $297;
  return null;
}
_h264bsdConceal["X"] = 1;
function _ConcealMb($pMb, $currImage, $row, $col, $sliceType, $refData) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 540;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $i;
  var $j;
  var $comp;
  var $hor;
  var $ver;
  var $mbNum;
  var $width;
  var $height;
  var $mbPos;
  var $data = __stackBase__;
  var $pData;
  var $tmp;
  var $firstPhase = __stackBase__ + 384;
  var $pTmp;
  var $a = __stackBase__ + 448;
  var $b = __stackBase__ + 464;
  var $l = __stackBase__ + 480;
  var $r = __stackBase__ + 496;
  var $A;
  var $B;
  var $L;
  var $R;
  var $mv = __stackBase__ + 512;
  var $refImage = __stackBase__ + 516;
  $2 = $pMb;
  $3 = $currImage;
  $4 = $row;
  $5 = $col;
  $6 = $sliceType;
  $7 = $refData;
  $width = HEAP32[$3 + 4 >> 2];
  $height = HEAP32[$3 + 8 >> 2];
  $mbNum = $4 * $width + $5;
  _h264bsdSetCurrImageMbPointers($3, $mbNum);
  $mbPos = HEAP32[$3 >> 2] + (($4 << 4) * $width << 4) + ($5 << 4);
  $R = 0;
  $L = 0;
  $B = 0;
  $A = 0;
  HEAP32[$2 + 20 >> 2] = 40;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 >> 2] = 6;
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 24 >> 2] = 0;
  if ($6 == 2) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $50$$47$2 : do {
    if (__label__ == 1) {
      if ($6 == 7) {
        __label__ = 2;
        break $50$$47$2;
      }
      var dest, stop, stop4, value;
      dest = $mv;
      stop = dest + 4;
      value = 0;
      if (value < 0) value += 256;
      value = value + (value << 8) + (value << 16) + value * 16777216;
      while (dest % 4 !== 0 && dest < stop) {
        HEAP8[dest++] = 0;
      }
      dest >>= 2;
      stop4 = stop >> 2;
      while (dest < stop4) {
        HEAP32[dest++] = value;
      }
      dest <<= 2;
      while (dest < stop) {
        HEAP8[dest++] = 0;
      }
      HEAP32[$refImage + 4 >> 2] = $width;
      HEAP32[$refImage + 8 >> 2] = $height;
      HEAP32[$refImage >> 2] = $7;
      if (HEAP32[$refImage >> 2] != 0) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      $63$$71$5 : do {
        if (__label__ == 4) {
          var $64 = $data;
          _h264bsdPredictSamples($64, $mv, $refImage, $5 << 4, $4 << 4, 0, 0, 16, 16);
          var $70 = $data;
          _h264bsdWriteMacroblock($3, $70);
          $1 = 0;
          __label__ = 92;
          break $50$$47$2;
        } else if (__label__ == 5) {
          var $72 = $data;
          _H264SwDecMemset($72, 0, 384);
          __label__ = 7;
          break $50$$47$2;
        }
      } while (0);
    }
  } while (0);
  $50$$1481$$74$9 : do {
    if (__label__ == 2) {
      var $51 = $data;
      _H264SwDecMemset($51, 0, 384);
      __label__ = 7;
      break $50$$1481$$74$9;
    }
  } while (0);
  $74$$1481$11 : do {
    if (__label__ == 7) {
      var $76 = $firstPhase;
      _H264SwDecMemset($76, 0, 64);
      $j = 0;
      $ver = 0;
      $hor = 0;
      if ($4 != 0) {
        __label__ = 8;
      } else {
        __label__ = 10;
      }
      $79$$229$13 : do {
        if (__label__ == 8) {
          if (!(HEAP32[$2 + -$width * 216 + 196 >> 2] != 0)) {
            __label__ = 10;
            break $79$$229$13;
          }
          $A = 1;
          $pData = $mbPos + -($width << 4);
          var $93 = $pData;
          var $94 = $93 + 1;
          $pData = $94;
          HEAP32[$a >> 2] = HEAPU8[$93];
          var $98 = $pData;
          var $99 = $98 + 1;
          $pData = $99;
          var $104 = HEAP32[$a >> 2] + HEAPU8[$98];
          HEAP32[$a >> 2] = $104;
          var $105 = $pData;
          var $106 = $105 + 1;
          $pData = $106;
          var $111 = HEAP32[$a >> 2] + HEAPU8[$105];
          HEAP32[$a >> 2] = $111;
          var $112 = $pData;
          var $113 = $112 + 1;
          $pData = $113;
          var $118 = HEAP32[$a >> 2] + HEAPU8[$112];
          HEAP32[$a >> 2] = $118;
          var $119 = $pData;
          var $120 = $119 + 1;
          $pData = $120;
          HEAP32[$a + 4 >> 2] = HEAPU8[$119];
          var $124 = $pData;
          var $125 = $124 + 1;
          $pData = $125;
          var $130 = HEAP32[$a + 4 >> 2] + HEAPU8[$124];
          HEAP32[$a + 4 >> 2] = $130;
          var $131 = $pData;
          var $132 = $131 + 1;
          $pData = $132;
          var $137 = HEAP32[$a + 4 >> 2] + HEAPU8[$131];
          HEAP32[$a + 4 >> 2] = $137;
          var $138 = $pData;
          var $139 = $138 + 1;
          $pData = $139;
          var $144 = HEAP32[$a + 4 >> 2] + HEAPU8[$138];
          HEAP32[$a + 4 >> 2] = $144;
          var $145 = $pData;
          var $146 = $145 + 1;
          $pData = $146;
          HEAP32[$a + 8 >> 2] = HEAPU8[$145];
          var $150 = $pData;
          var $151 = $150 + 1;
          $pData = $151;
          var $156 = HEAP32[$a + 8 >> 2] + HEAPU8[$150];
          HEAP32[$a + 8 >> 2] = $156;
          var $157 = $pData;
          var $158 = $157 + 1;
          $pData = $158;
          var $163 = HEAP32[$a + 8 >> 2] + HEAPU8[$157];
          HEAP32[$a + 8 >> 2] = $163;
          var $164 = $pData;
          var $165 = $164 + 1;
          $pData = $165;
          var $170 = HEAP32[$a + 8 >> 2] + HEAPU8[$164];
          HEAP32[$a + 8 >> 2] = $170;
          var $171 = $pData;
          var $172 = $171 + 1;
          $pData = $172;
          HEAP32[$a + 12 >> 2] = HEAPU8[$171];
          var $176 = $pData;
          var $177 = $176 + 1;
          $pData = $177;
          var $182 = HEAP32[$a + 12 >> 2] + HEAPU8[$176];
          HEAP32[$a + 12 >> 2] = $182;
          var $183 = $pData;
          var $184 = $183 + 1;
          $pData = $184;
          var $189 = HEAP32[$a + 12 >> 2] + HEAPU8[$183];
          HEAP32[$a + 12 >> 2] = $189;
          var $190 = $pData;
          var $191 = $190 + 1;
          $pData = $191;
          var $196 = HEAP32[$a + 12 >> 2] + HEAPU8[$190];
          HEAP32[$a + 12 >> 2] = $196;
          var $198 = $j + 1;
          $j = $198;
          var $200 = $hor + 1;
          $hor = $200;
          var $214 = HEAP32[$firstPhase >> 2] + (HEAP32[$a >> 2] + HEAP32[$a + 4 >> 2] + HEAP32[$a + 8 >> 2] + HEAP32[$a + 12 >> 2]);
          HEAP32[$firstPhase >> 2] = $214;
          var $228 = HEAP32[$firstPhase + 4 >> 2] + (HEAP32[$a >> 2] + HEAP32[$a + 4 >> 2] - HEAP32[$a + 8 >> 2] - HEAP32[$a + 12 >> 2]);
          HEAP32[$firstPhase + 4 >> 2] = $228;
        }
      } while (0);
      if ($4 != $height - 1) {
        __label__ = 11;
      } else {
        __label__ = 13;
      }
      $234$$383$17 : do {
        if (__label__ == 11) {
          if (!(HEAP32[$2 + $width * 216 + 196 >> 2] != 0)) {
            __label__ = 13;
            break $234$$383$17;
          }
          $B = 1;
          $pData = $mbPos + ($width << 4 << 4);
          var $247 = $pData;
          var $248 = $247 + 1;
          $pData = $248;
          HEAP32[$b >> 2] = HEAPU8[$247];
          var $252 = $pData;
          var $253 = $252 + 1;
          $pData = $253;
          var $258 = HEAP32[$b >> 2] + HEAPU8[$252];
          HEAP32[$b >> 2] = $258;
          var $259 = $pData;
          var $260 = $259 + 1;
          $pData = $260;
          var $265 = HEAP32[$b >> 2] + HEAPU8[$259];
          HEAP32[$b >> 2] = $265;
          var $266 = $pData;
          var $267 = $266 + 1;
          $pData = $267;
          var $272 = HEAP32[$b >> 2] + HEAPU8[$266];
          HEAP32[$b >> 2] = $272;
          var $273 = $pData;
          var $274 = $273 + 1;
          $pData = $274;
          HEAP32[$b + 4 >> 2] = HEAPU8[$273];
          var $278 = $pData;
          var $279 = $278 + 1;
          $pData = $279;
          var $284 = HEAP32[$b + 4 >> 2] + HEAPU8[$278];
          HEAP32[$b + 4 >> 2] = $284;
          var $285 = $pData;
          var $286 = $285 + 1;
          $pData = $286;
          var $291 = HEAP32[$b + 4 >> 2] + HEAPU8[$285];
          HEAP32[$b + 4 >> 2] = $291;
          var $292 = $pData;
          var $293 = $292 + 1;
          $pData = $293;
          var $298 = HEAP32[$b + 4 >> 2] + HEAPU8[$292];
          HEAP32[$b + 4 >> 2] = $298;
          var $299 = $pData;
          var $300 = $299 + 1;
          $pData = $300;
          HEAP32[$b + 8 >> 2] = HEAPU8[$299];
          var $304 = $pData;
          var $305 = $304 + 1;
          $pData = $305;
          var $310 = HEAP32[$b + 8 >> 2] + HEAPU8[$304];
          HEAP32[$b + 8 >> 2] = $310;
          var $311 = $pData;
          var $312 = $311 + 1;
          $pData = $312;
          var $317 = HEAP32[$b + 8 >> 2] + HEAPU8[$311];
          HEAP32[$b + 8 >> 2] = $317;
          var $318 = $pData;
          var $319 = $318 + 1;
          $pData = $319;
          var $324 = HEAP32[$b + 8 >> 2] + HEAPU8[$318];
          HEAP32[$b + 8 >> 2] = $324;
          var $325 = $pData;
          var $326 = $325 + 1;
          $pData = $326;
          HEAP32[$b + 12 >> 2] = HEAPU8[$325];
          var $330 = $pData;
          var $331 = $330 + 1;
          $pData = $331;
          var $336 = HEAP32[$b + 12 >> 2] + HEAPU8[$330];
          HEAP32[$b + 12 >> 2] = $336;
          var $337 = $pData;
          var $338 = $337 + 1;
          $pData = $338;
          var $343 = HEAP32[$b + 12 >> 2] + HEAPU8[$337];
          HEAP32[$b + 12 >> 2] = $343;
          var $344 = $pData;
          var $345 = $344 + 1;
          $pData = $345;
          var $350 = HEAP32[$b + 12 >> 2] + HEAPU8[$344];
          HEAP32[$b + 12 >> 2] = $350;
          var $352 = $j + 1;
          $j = $352;
          var $354 = $hor + 1;
          $hor = $354;
          var $368 = HEAP32[$firstPhase >> 2] + (HEAP32[$b >> 2] + HEAP32[$b + 4 >> 2] + HEAP32[$b + 8 >> 2] + HEAP32[$b + 12 >> 2]);
          HEAP32[$firstPhase >> 2] = $368;
          var $382 = HEAP32[$firstPhase + 4 >> 2] + (HEAP32[$b >> 2] + HEAP32[$b + 4 >> 2] - HEAP32[$b + 8 >> 2] - HEAP32[$b + 12 >> 2]);
          HEAP32[$firstPhase + 4 >> 2] = $382;
        }
      } while (0);
      if ($5 != 0) {
        __label__ = 14;
      } else {
        __label__ = 16;
      }
      $386$$567$21 : do {
        if (__label__ == 14) {
          if (!(HEAP32[$2 - 216 + 196 >> 2] != 0)) {
            __label__ = 16;
            break $386$$567$21;
          }
          $L = 1;
          $pData = $mbPos - 1;
          HEAP32[$l >> 2] = HEAPU8[$pData];
          var $408 = HEAP32[$l >> 2] + HEAPU8[$pData + ($width << 4)];
          HEAP32[$l >> 2] = $408;
          var $417 = HEAP32[$l >> 2] + HEAPU8[$pData + ($width << 5)];
          HEAP32[$l >> 2] = $417;
          var $426 = HEAP32[$l >> 2] + HEAPU8[$pData + $width * 48];
          HEAP32[$l >> 2] = $426;
          var $430 = $pData + ($width << 6);
          $pData = $430;
          HEAP32[$l + 4 >> 2] = HEAPU8[$pData];
          var $444 = HEAP32[$l + 4 >> 2] + HEAPU8[$pData + ($width << 4)];
          HEAP32[$l + 4 >> 2] = $444;
          var $453 = HEAP32[$l + 4 >> 2] + HEAPU8[$pData + ($width << 5)];
          HEAP32[$l + 4 >> 2] = $453;
          var $462 = HEAP32[$l + 4 >> 2] + HEAPU8[$pData + $width * 48];
          HEAP32[$l + 4 >> 2] = $462;
          var $466 = $pData + ($width << 6);
          $pData = $466;
          HEAP32[$l + 8 >> 2] = HEAPU8[$pData];
          var $480 = HEAP32[$l + 8 >> 2] + HEAPU8[$pData + ($width << 4)];
          HEAP32[$l + 8 >> 2] = $480;
          var $489 = HEAP32[$l + 8 >> 2] + HEAPU8[$pData + ($width << 5)];
          HEAP32[$l + 8 >> 2] = $489;
          var $498 = HEAP32[$l + 8 >> 2] + HEAPU8[$pData + $width * 48];
          HEAP32[$l + 8 >> 2] = $498;
          var $502 = $pData + ($width << 6);
          $pData = $502;
          HEAP32[$l + 12 >> 2] = HEAPU8[$pData];
          var $516 = HEAP32[$l + 12 >> 2] + HEAPU8[$pData + ($width << 4)];
          HEAP32[$l + 12 >> 2] = $516;
          var $525 = HEAP32[$l + 12 >> 2] + HEAPU8[$pData + ($width << 5)];
          HEAP32[$l + 12 >> 2] = $525;
          var $534 = HEAP32[$l + 12 >> 2] + HEAPU8[$pData + $width * 48];
          HEAP32[$l + 12 >> 2] = $534;
          var $536 = $j + 1;
          $j = $536;
          var $538 = $ver + 1;
          $ver = $538;
          var $552 = HEAP32[$firstPhase >> 2] + (HEAP32[$l >> 2] + HEAP32[$l + 4 >> 2] + HEAP32[$l + 8 >> 2] + HEAP32[$l + 12 >> 2]);
          HEAP32[$firstPhase >> 2] = $552;
          var $566 = HEAP32[$firstPhase + 16 >> 2] + (HEAP32[$l >> 2] + HEAP32[$l + 4 >> 2] - HEAP32[$l + 8 >> 2] - HEAP32[$l + 12 >> 2]);
          HEAP32[$firstPhase + 16 >> 2] = $566;
        }
      } while (0);
      if ($5 != $width - 1) {
        __label__ = 17;
      } else {
        __label__ = 19;
      }
      $572$$753$25 : do {
        if (__label__ == 17) {
          if (!(HEAP32[$2 + 412 >> 2] != 0)) {
            __label__ = 19;
            break $572$$753$25;
          }
          $R = 1;
          $pData = $mbPos + 16;
          HEAP32[$r >> 2] = HEAPU8[$pData];
          var $594 = HEAP32[$r >> 2] + HEAPU8[$pData + ($width << 4)];
          HEAP32[$r >> 2] = $594;
          var $603 = HEAP32[$r >> 2] + HEAPU8[$pData + ($width << 5)];
          HEAP32[$r >> 2] = $603;
          var $612 = HEAP32[$r >> 2] + HEAPU8[$pData + $width * 48];
          HEAP32[$r >> 2] = $612;
          var $616 = $pData + ($width << 6);
          $pData = $616;
          HEAP32[$r + 4 >> 2] = HEAPU8[$pData];
          var $630 = HEAP32[$r + 4 >> 2] + HEAPU8[$pData + ($width << 4)];
          HEAP32[$r + 4 >> 2] = $630;
          var $639 = HEAP32[$r + 4 >> 2] + HEAPU8[$pData + ($width << 5)];
          HEAP32[$r + 4 >> 2] = $639;
          var $648 = HEAP32[$r + 4 >> 2] + HEAPU8[$pData + $width * 48];
          HEAP32[$r + 4 >> 2] = $648;
          var $652 = $pData + ($width << 6);
          $pData = $652;
          HEAP32[$r + 8 >> 2] = HEAPU8[$pData];
          var $666 = HEAP32[$r + 8 >> 2] + HEAPU8[$pData + ($width << 4)];
          HEAP32[$r + 8 >> 2] = $666;
          var $675 = HEAP32[$r + 8 >> 2] + HEAPU8[$pData + ($width << 5)];
          HEAP32[$r + 8 >> 2] = $675;
          var $684 = HEAP32[$r + 8 >> 2] + HEAPU8[$pData + $width * 48];
          HEAP32[$r + 8 >> 2] = $684;
          var $688 = $pData + ($width << 6);
          $pData = $688;
          HEAP32[$r + 12 >> 2] = HEAPU8[$pData];
          var $702 = HEAP32[$r + 12 >> 2] + HEAPU8[$pData + ($width << 4)];
          HEAP32[$r + 12 >> 2] = $702;
          var $711 = HEAP32[$r + 12 >> 2] + HEAPU8[$pData + ($width << 5)];
          HEAP32[$r + 12 >> 2] = $711;
          var $720 = HEAP32[$r + 12 >> 2] + HEAPU8[$pData + $width * 48];
          HEAP32[$r + 12 >> 2] = $720;
          var $722 = $j + 1;
          $j = $722;
          var $724 = $ver + 1;
          $ver = $724;
          var $738 = HEAP32[$firstPhase >> 2] + (HEAP32[$r >> 2] + HEAP32[$r + 4 >> 2] + HEAP32[$r + 8 >> 2] + HEAP32[$r + 12 >> 2]);
          HEAP32[$firstPhase >> 2] = $738;
          var $752 = HEAP32[$firstPhase + 16 >> 2] + (HEAP32[$r >> 2] + HEAP32[$r + 4 >> 2] - HEAP32[$r + 8 >> 2] - HEAP32[$r + 12 >> 2]);
          HEAP32[$firstPhase + 16 >> 2] = $752;
        }
      } while (0);
      if ($hor != 0) {
        __label__ = 23;
      } else {
        __label__ = 20;
      }
      $788$$756$29 : do {
        if (__label__ == 20) {
          if (!($L != 0)) {
            __label__ = 23;
            break $788$$756$29;
          }
          if (!($R != 0)) {
            __label__ = 23;
            break $788$$756$29;
          }
          var $786 = HEAP32[$l >> 2] + HEAP32[$l + 4 >> 2] + HEAP32[$l + 8 >> 2] + HEAP32[$l + 12 >> 2] - HEAP32[$r >> 2] - HEAP32[$r + 4 >> 2] - HEAP32[$r + 8 >> 2] - HEAP32[$r + 12 >> 2] >> 5;
          HEAP32[$firstPhase + 4 >> 2] = $786;
          __label__ = 26;
          break $788$$756$29;
        }
      } while (0);
      $788$$798$33 : do {
        if (__label__ == 23) {
          if ($hor != 0) {
            __label__ = 24;
          } else {
            __label__ = 25;
          }
          $791$$797$35 : do {
            if (__label__ == 24) {
              var $796 = HEAP32[$firstPhase + 4 >> 2] >> $hor + 3;
              HEAP32[$firstPhase + 4 >> 2] = $796;
            }
          } while (0);
        }
      } while (0);
      if ($ver != 0) {
        __label__ = 30;
      } else {
        __label__ = 27;
      }
      $833$$801$39 : do {
        if (__label__ == 27) {
          if (!($A != 0)) {
            __label__ = 30;
            break $833$$801$39;
          }
          if (!($B != 0)) {
            __label__ = 30;
            break $833$$801$39;
          }
          var $831 = HEAP32[$a >> 2] + HEAP32[$a + 4 >> 2] + HEAP32[$a + 8 >> 2] + HEAP32[$a + 12 >> 2] - HEAP32[$b >> 2] - HEAP32[$b + 4 >> 2] - HEAP32[$b + 8 >> 2] - HEAP32[$b + 12 >> 2] >> 5;
          HEAP32[$firstPhase + 16 >> 2] = $831;
          __label__ = 33;
          break $833$$801$39;
        }
      } while (0);
      $833$$843$43 : do {
        if (__label__ == 30) {
          if ($ver != 0) {
            __label__ = 31;
          } else {
            __label__ = 32;
          }
          $836$$842$45 : do {
            if (__label__ == 31) {
              var $841 = HEAP32[$firstPhase + 16 >> 2] >> $ver + 3;
              HEAP32[$firstPhase + 16 >> 2] = $841;
            }
          } while (0);
        }
      } while (0);
      if ($j == 1) {
        __label__ = 34;
      } else if ($j == 2) {
        __label__ = 35;
      } else if ($j == 3) {
        __label__ = 36;
      } else {
        __label__ = 37;
      }
      $859$$845$$849$$853$49 : do {
        if (__label__ == 37) {
          var $862 = HEAP32[$firstPhase >> 2] >> 6;
          HEAP32[$firstPhase >> 2] = $862;
        } else if (__label__ == 34) {
          var $848 = HEAP32[$firstPhase >> 2] >> 4;
          HEAP32[$firstPhase >> 2] = $848;
        } else if (__label__ == 35) {
          var $852 = HEAP32[$firstPhase >> 2] >> 5;
          HEAP32[$firstPhase >> 2] = $852;
        } else if (__label__ == 36) {
          var $857 = HEAP32[$firstPhase >> 2] * 21 >> 10;
          HEAP32[$firstPhase >> 2] = $857;
        }
      } while (0);
      var $864 = $firstPhase;
      _Transform($864);
      $i = 0;
      $pData = $data;
      $pTmp = $firstPhase;
      $867$55 : while (1) {
        if (!($i < 256)) {
          __label__ = 49;
          break $867$55;
        }
        $tmp = HEAP32[$pTmp + (($i & 15) >>> 2 << 2) >> 2];
        if ($tmp < 0) {
          __label__ = 41;
        } else {
          __label__ = 42;
        }
        $879$$880$58 : do {
          if (__label__ == 41) {
            var $889 = 0;
          } else if (__label__ == 42) {
            if ($tmp > 255) {
              __label__ = 43;
            } else {
              __label__ = 44;
            }
            $883$$884$61 : do {
              if (__label__ == 43) {
                var $887 = 255;
              } else if (__label__ == 44) {
                var $887 = $tmp;
              }
            } while (0);
            var $887;
            var $889 = $887;
          }
        } while (0);
        var $889;
        var $891 = $pData;
        var $892 = $891 + 1;
        $pData = $892;
        HEAP8[$891] = $889 & 255;
        var $894 = $i + 1;
        $i = $894;
        if (($i & 63) != 0) {
          __label__ = 48;
        } else {
          __label__ = 47;
        }
        $901$$898$66 : do {
          if (__label__ == 47) {
            var $900 = $pTmp + 16;
            $pTmp = $900;
          }
        } while (0);
      }
      $mbPos = HEAP32[$3 >> 2] + ($width * $height << 8) + (($4 << 3) * $width << 3) + ($5 << 3);
      $comp = 0;
      $920$70 : while (1) {
        if (!($comp < 2)) {
          __label__ = 91;
          break $920$70;
        }
        var $925 = $firstPhase;
        _H264SwDecMemset($925, 0, 64);
        $j = 0;
        $ver = 0;
        $hor = 0;
        if ($A != 0) {
          __label__ = 52;
        } else {
          __label__ = 53;
        }
        $928$$1014$73 : do {
          if (__label__ == 52) {
            $pData = $mbPos + -($width << 3);
            var $934 = $pData;
            var $935 = $934 + 1;
            $pData = $935;
            HEAP32[$a >> 2] = HEAPU8[$934];
            var $939 = $pData;
            var $940 = $939 + 1;
            $pData = $940;
            var $945 = HEAP32[$a >> 2] + HEAPU8[$939];
            HEAP32[$a >> 2] = $945;
            var $946 = $pData;
            var $947 = $946 + 1;
            $pData = $947;
            HEAP32[$a + 4 >> 2] = HEAPU8[$946];
            var $951 = $pData;
            var $952 = $951 + 1;
            $pData = $952;
            var $957 = HEAP32[$a + 4 >> 2] + HEAPU8[$951];
            HEAP32[$a + 4 >> 2] = $957;
            var $958 = $pData;
            var $959 = $958 + 1;
            $pData = $959;
            HEAP32[$a + 8 >> 2] = HEAPU8[$958];
            var $963 = $pData;
            var $964 = $963 + 1;
            $pData = $964;
            var $969 = HEAP32[$a + 8 >> 2] + HEAPU8[$963];
            HEAP32[$a + 8 >> 2] = $969;
            var $970 = $pData;
            var $971 = $970 + 1;
            $pData = $971;
            HEAP32[$a + 12 >> 2] = HEAPU8[$970];
            var $975 = $pData;
            var $976 = $975 + 1;
            $pData = $976;
            var $981 = HEAP32[$a + 12 >> 2] + HEAPU8[$975];
            HEAP32[$a + 12 >> 2] = $981;
            var $983 = $j + 1;
            $j = $983;
            var $985 = $hor + 1;
            $hor = $985;
            var $999 = HEAP32[$firstPhase >> 2] + (HEAP32[$a >> 2] + HEAP32[$a + 4 >> 2] + HEAP32[$a + 8 >> 2] + HEAP32[$a + 12 >> 2]);
            HEAP32[$firstPhase >> 2] = $999;
            var $1013 = HEAP32[$firstPhase + 4 >> 2] + (HEAP32[$a >> 2] + HEAP32[$a + 4 >> 2] - HEAP32[$a + 8 >> 2] - HEAP32[$a + 12 >> 2]);
            HEAP32[$firstPhase + 4 >> 2] = $1013;
          }
        } while (0);
        if ($B != 0) {
          __label__ = 54;
        } else {
          __label__ = 55;
        }
        $1017$$1103$76 : do {
          if (__label__ == 54) {
            $pData = $mbPos + ($width << 3 << 3);
            var $1023 = $pData;
            var $1024 = $1023 + 1;
            $pData = $1024;
            HEAP32[$b >> 2] = HEAPU8[$1023];
            var $1028 = $pData;
            var $1029 = $1028 + 1;
            $pData = $1029;
            var $1034 = HEAP32[$b >> 2] + HEAPU8[$1028];
            HEAP32[$b >> 2] = $1034;
            var $1035 = $pData;
            var $1036 = $1035 + 1;
            $pData = $1036;
            HEAP32[$b + 4 >> 2] = HEAPU8[$1035];
            var $1040 = $pData;
            var $1041 = $1040 + 1;
            $pData = $1041;
            var $1046 = HEAP32[$b + 4 >> 2] + HEAPU8[$1040];
            HEAP32[$b + 4 >> 2] = $1046;
            var $1047 = $pData;
            var $1048 = $1047 + 1;
            $pData = $1048;
            HEAP32[$b + 8 >> 2] = HEAPU8[$1047];
            var $1052 = $pData;
            var $1053 = $1052 + 1;
            $pData = $1053;
            var $1058 = HEAP32[$b + 8 >> 2] + HEAPU8[$1052];
            HEAP32[$b + 8 >> 2] = $1058;
            var $1059 = $pData;
            var $1060 = $1059 + 1;
            $pData = $1060;
            HEAP32[$b + 12 >> 2] = HEAPU8[$1059];
            var $1064 = $pData;
            var $1065 = $1064 + 1;
            $pData = $1065;
            var $1070 = HEAP32[$b + 12 >> 2] + HEAPU8[$1064];
            HEAP32[$b + 12 >> 2] = $1070;
            var $1072 = $j + 1;
            $j = $1072;
            var $1074 = $hor + 1;
            $hor = $1074;
            var $1088 = HEAP32[$firstPhase >> 2] + (HEAP32[$b >> 2] + HEAP32[$b + 4 >> 2] + HEAP32[$b + 8 >> 2] + HEAP32[$b + 12 >> 2]);
            HEAP32[$firstPhase >> 2] = $1088;
            var $1102 = HEAP32[$firstPhase + 4 >> 2] + (HEAP32[$b >> 2] + HEAP32[$b + 4 >> 2] - HEAP32[$b + 8 >> 2] - HEAP32[$b + 12 >> 2]);
            HEAP32[$firstPhase + 4 >> 2] = $1102;
          }
        } while (0);
        if ($L != 0) {
          __label__ = 56;
        } else {
          __label__ = 57;
        }
        $1106$$1209$79 : do {
          if (__label__ == 56) {
            $pData = $mbPos - 1;
            HEAP32[$l >> 2] = HEAPU8[$pData];
            var $1122 = HEAP32[$l >> 2] + HEAPU8[$pData + ($width << 3)];
            HEAP32[$l >> 2] = $1122;
            var $1126 = $pData + ($width << 4);
            $pData = $1126;
            HEAP32[$l + 4 >> 2] = HEAPU8[$pData];
            var $1140 = HEAP32[$l + 4 >> 2] + HEAPU8[$pData + ($width << 3)];
            HEAP32[$l + 4 >> 2] = $1140;
            var $1144 = $pData + ($width << 4);
            $pData = $1144;
            HEAP32[$l + 8 >> 2] = HEAPU8[$pData];
            var $1158 = HEAP32[$l + 8 >> 2] + HEAPU8[$pData + ($width << 3)];
            HEAP32[$l + 8 >> 2] = $1158;
            var $1162 = $pData + ($width << 4);
            $pData = $1162;
            HEAP32[$l + 12 >> 2] = HEAPU8[$pData];
            var $1176 = HEAP32[$l + 12 >> 2] + HEAPU8[$pData + ($width << 3)];
            HEAP32[$l + 12 >> 2] = $1176;
            var $1178 = $j + 1;
            $j = $1178;
            var $1180 = $ver + 1;
            $ver = $1180;
            var $1194 = HEAP32[$firstPhase >> 2] + (HEAP32[$l >> 2] + HEAP32[$l + 4 >> 2] + HEAP32[$l + 8 >> 2] + HEAP32[$l + 12 >> 2]);
            HEAP32[$firstPhase >> 2] = $1194;
            var $1208 = HEAP32[$firstPhase + 16 >> 2] + (HEAP32[$l >> 2] + HEAP32[$l + 4 >> 2] - HEAP32[$l + 8 >> 2] - HEAP32[$l + 12 >> 2]);
            HEAP32[$firstPhase + 16 >> 2] = $1208;
          }
        } while (0);
        if ($R != 0) {
          __label__ = 58;
        } else {
          __label__ = 59;
        }
        $1212$$1315$82 : do {
          if (__label__ == 58) {
            $pData = $mbPos + 8;
            HEAP32[$r >> 2] = HEAPU8[$pData];
            var $1228 = HEAP32[$r >> 2] + HEAPU8[$pData + ($width << 3)];
            HEAP32[$r >> 2] = $1228;
            var $1232 = $pData + ($width << 4);
            $pData = $1232;
            HEAP32[$r + 4 >> 2] = HEAPU8[$pData];
            var $1246 = HEAP32[$r + 4 >> 2] + HEAPU8[$pData + ($width << 3)];
            HEAP32[$r + 4 >> 2] = $1246;
            var $1250 = $pData + ($width << 4);
            $pData = $1250;
            HEAP32[$r + 8 >> 2] = HEAPU8[$pData];
            var $1264 = HEAP32[$r + 8 >> 2] + HEAPU8[$pData + ($width << 3)];
            HEAP32[$r + 8 >> 2] = $1264;
            var $1268 = $pData + ($width << 4);
            $pData = $1268;
            HEAP32[$r + 12 >> 2] = HEAPU8[$pData];
            var $1282 = HEAP32[$r + 12 >> 2] + HEAPU8[$pData + ($width << 3)];
            HEAP32[$r + 12 >> 2] = $1282;
            var $1284 = $j + 1;
            $j = $1284;
            var $1286 = $ver + 1;
            $ver = $1286;
            var $1300 = HEAP32[$firstPhase >> 2] + (HEAP32[$r >> 2] + HEAP32[$r + 4 >> 2] + HEAP32[$r + 8 >> 2] + HEAP32[$r + 12 >> 2]);
            HEAP32[$firstPhase >> 2] = $1300;
            var $1314 = HEAP32[$firstPhase + 16 >> 2] + (HEAP32[$r >> 2] + HEAP32[$r + 4 >> 2] - HEAP32[$r + 8 >> 2] - HEAP32[$r + 12 >> 2]);
            HEAP32[$firstPhase + 16 >> 2] = $1314;
          }
        } while (0);
        if ($hor != 0) {
          __label__ = 63;
        } else {
          __label__ = 60;
        }
        $1350$$1318$85 : do {
          if (__label__ == 60) {
            if (!($L != 0)) {
              __label__ = 63;
              break $1350$$1318$85;
            }
            if (!($R != 0)) {
              __label__ = 63;
              break $1350$$1318$85;
            }
            var $1348 = HEAP32[$l >> 2] + HEAP32[$l + 4 >> 2] + HEAP32[$l + 8 >> 2] + HEAP32[$l + 12 >> 2] - HEAP32[$r >> 2] - HEAP32[$r + 4 >> 2] - HEAP32[$r + 8 >> 2] - HEAP32[$r + 12 >> 2] >> 4;
            HEAP32[$firstPhase + 4 >> 2] = $1348;
            __label__ = 66;
            break $1350$$1318$85;
          }
        } while (0);
        $1350$$1360$89 : do {
          if (__label__ == 63) {
            if ($hor != 0) {
              __label__ = 64;
            } else {
              __label__ = 65;
            }
            $1353$$1359$91 : do {
              if (__label__ == 64) {
                var $1358 = HEAP32[$firstPhase + 4 >> 2] >> $hor + 2;
                HEAP32[$firstPhase + 4 >> 2] = $1358;
              }
            } while (0);
          }
        } while (0);
        if ($ver != 0) {
          __label__ = 70;
        } else {
          __label__ = 67;
        }
        $1395$$1363$95 : do {
          if (__label__ == 67) {
            if (!($A != 0)) {
              __label__ = 70;
              break $1395$$1363$95;
            }
            if (!($B != 0)) {
              __label__ = 70;
              break $1395$$1363$95;
            }
            var $1393 = HEAP32[$a >> 2] + HEAP32[$a + 4 >> 2] + HEAP32[$a + 8 >> 2] + HEAP32[$a + 12 >> 2] - HEAP32[$b >> 2] - HEAP32[$b + 4 >> 2] - HEAP32[$b + 8 >> 2] - HEAP32[$b + 12 >> 2] >> 4;
            HEAP32[$firstPhase + 16 >> 2] = $1393;
            __label__ = 73;
            break $1395$$1363$95;
          }
        } while (0);
        $1395$$1405$99 : do {
          if (__label__ == 70) {
            if ($ver != 0) {
              __label__ = 71;
            } else {
              __label__ = 72;
            }
            $1398$$1404$101 : do {
              if (__label__ == 71) {
                var $1403 = HEAP32[$firstPhase + 16 >> 2] >> $ver + 2;
                HEAP32[$firstPhase + 16 >> 2] = $1403;
              }
            } while (0);
          }
        } while (0);
        if ($j == 1) {
          __label__ = 74;
        } else if ($j == 2) {
          __label__ = 75;
        } else if ($j == 3) {
          __label__ = 76;
        } else {
          __label__ = 77;
        }
        $1421$$1407$$1411$$1415$105 : do {
          if (__label__ == 77) {
            var $1424 = HEAP32[$firstPhase >> 2] >> 5;
            HEAP32[$firstPhase >> 2] = $1424;
          } else if (__label__ == 74) {
            var $1410 = HEAP32[$firstPhase >> 2] >> 3;
            HEAP32[$firstPhase >> 2] = $1410;
          } else if (__label__ == 75) {
            var $1414 = HEAP32[$firstPhase >> 2] >> 4;
            HEAP32[$firstPhase >> 2] = $1414;
          } else if (__label__ == 76) {
            var $1419 = HEAP32[$firstPhase >> 2] * 21 >> 9;
            HEAP32[$firstPhase >> 2] = $1419;
          }
        } while (0);
        var $1426 = $firstPhase;
        _Transform($1426);
        $pData = $data + 256 + ($comp << 6);
        $i = 0;
        $pTmp = $firstPhase;
        $1433$111 : while (1) {
          if (!($i < 64)) {
            __label__ = 89;
            break $1433$111;
          }
          $tmp = HEAP32[$pTmp + (($i & 7) >>> 1 << 2) >> 2];
          if ($tmp < 0) {
            __label__ = 81;
          } else {
            __label__ = 82;
          }
          $1445$$1446$114 : do {
            if (__label__ == 81) {
              var $1455 = 0;
            } else if (__label__ == 82) {
              if ($tmp > 255) {
                __label__ = 83;
              } else {
                __label__ = 84;
              }
              $1449$$1450$117 : do {
                if (__label__ == 83) {
                  var $1453 = 255;
                } else if (__label__ == 84) {
                  var $1453 = $tmp;
                }
              } while (0);
              var $1453;
              var $1455 = $1453;
            }
          } while (0);
          var $1455;
          var $1457 = $pData;
          var $1458 = $1457 + 1;
          $pData = $1458;
          HEAP8[$1457] = $1455 & 255;
          var $1460 = $i + 1;
          $i = $1460;
          if (($i & 15) != 0) {
            __label__ = 88;
          } else {
            __label__ = 87;
          }
          $1467$$1464$122 : do {
            if (__label__ == 87) {
              var $1466 = $pTmp + 16;
              $pTmp = $1466;
            }
          } while (0);
        }
        var $1474 = $mbPos + ($width * $height << 6);
        $mbPos = $1474;
        var $1477 = $comp + 1;
        $comp = $1477;
      }
      var $1480 = $data;
      _h264bsdWriteMacroblock($3, $1480);
      $1 = 0;
    }
  } while (0);
  var $1482 = $1;
  STACKTOP = __stackBase__;
  return $1482;
  return null;
}
_ConcealMb["X"] = 1;
function _Transform($data) {
  var __label__;
  var $1;
  var $col;
  var $tmp0;
  var $tmp1;
  $1 = $data;
  if (HEAP32[$1 + 4 >> 2] != 0) {
    __label__ = 3;
  } else {
    __label__ = 1;
  }
  $45$$6$2 : do {
    if (__label__ == 1) {
      if (HEAP32[$1 + 16 >> 2] != 0) {
        __label__ = 3;
        break $45$$6$2;
      }
      var $14 = HEAP32[$1 >> 2];
      HEAP32[$1 + 60 >> 2] = $14;
      HEAP32[$1 + 56 >> 2] = $14;
      HEAP32[$1 + 52 >> 2] = $14;
      HEAP32[$1 + 48 >> 2] = $14;
      HEAP32[$1 + 44 >> 2] = $14;
      HEAP32[$1 + 40 >> 2] = $14;
      HEAP32[$1 + 36 >> 2] = $14;
      HEAP32[$1 + 32 >> 2] = $14;
      HEAP32[$1 + 28 >> 2] = $14;
      HEAP32[$1 + 24 >> 2] = $14;
      HEAP32[$1 + 20 >> 2] = $14;
      HEAP32[$1 + 16 >> 2] = $14;
      HEAP32[$1 + 12 >> 2] = $14;
      HEAP32[$1 + 8 >> 2] = $14;
      HEAP32[$1 + 4 >> 2] = $14;
      __label__ = 7;
      break $45$$6$2;
    }
  } while (0);
  $45$$122$5 : do {
    if (__label__ == 3) {
      $tmp0 = HEAP32[$1 >> 2];
      $tmp1 = HEAP32[$1 + 4 >> 2];
      HEAP32[$1 >> 2] = $tmp0 + $tmp1;
      HEAP32[$1 + 4 >> 2] = $tmp0 + ($tmp1 >> 1);
      HEAP32[$1 + 8 >> 2] = $tmp0 - ($tmp1 >> 1);
      HEAP32[$1 + 12 >> 2] = $tmp0 - $tmp1;
      $tmp0 = HEAP32[$1 + 16 >> 2];
      HEAP32[$1 + 20 >> 2] = $tmp0;
      HEAP32[$1 + 24 >> 2] = $tmp0;
      HEAP32[$1 + 28 >> 2] = $tmp0;
      $col = 4;
      $86$7 : while (1) {
        var $87 = $col;
        var $88 = $87 - 1;
        $col = $88;
        if (!($87 != 0)) {
          __label__ = 7;
          break $45$$122$5;
        }
        $tmp0 = HEAP32[$1 >> 2];
        $tmp1 = HEAP32[$1 + 16 >> 2];
        HEAP32[$1 >> 2] = $tmp0 + $tmp1;
        HEAP32[$1 + 16 >> 2] = $tmp0 + ($tmp1 >> 1);
        HEAP32[$1 + 32 >> 2] = $tmp0 - ($tmp1 >> 1);
        HEAP32[$1 + 48 >> 2] = $tmp0 - $tmp1;
        var $121 = $1 + 4;
        $1 = $121;
      }
    }
  } while (0);
  return;
  return;
}
_Transform["X"] = 1;
function _h264bsdDecodeVuiParameters($pStrmData, $pVuiParameters) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $tmp;
  $2 = $pStrmData;
  $3 = $pVuiParameters;
  _H264SwDecMemset($3, 0, 952);
  var $7 = _h264bsdGetBits($2, 1);
  $tmp = $7;
  if ($tmp == -1) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $10$$11$2 : do {
    if (__label__ == 1) {
      $1 = 1;
    } else if (__label__ == 2) {
      var $14 = $tmp == 1 ? 1 : 0;
      HEAP32[$3 >> 2] = $14;
      if (HEAP32[$3 >> 2] != 0) {
        __label__ = 3;
      } else {
        __label__ = 12;
      }
      $21$$55$5 : do {
        if (__label__ == 3) {
          var $23 = _h264bsdGetBits($2, 8);
          $tmp = $23;
          if ($tmp == -1) {
            __label__ = 4;
          } else {
            __label__ = 5;
          }
          $26$$27$7 : do {
            if (__label__ == 4) {
              $1 = 1;
              __label__ = 113;
              break $10$$11$2;
            } else if (__label__ == 5) {
              HEAP32[$3 + 4 >> 2] = $tmp;
              if (HEAP32[$3 + 4 >> 2] == 255) {
                __label__ = 6;
              } else {
                __label__ = 11;
              }
              $35$$54$10 : do {
                if (__label__ == 6) {
                  var $37 = _h264bsdGetBits($2, 16);
                  $tmp = $37;
                  if ($tmp == -1) {
                    __label__ = 7;
                  } else {
                    __label__ = 8;
                  }
                  $40$$41$12 : do {
                    if (__label__ == 7) {
                      $1 = 1;
                      __label__ = 113;
                      break $10$$11$2;
                    } else if (__label__ == 8) {
                      HEAP32[$3 + 8 >> 2] = $tmp;
                      var $46 = _h264bsdGetBits($2, 16);
                      $tmp = $46;
                      if ($tmp == -1) {
                        __label__ = 9;
                      } else {
                        __label__ = 10;
                      }
                      $49$$50$15 : do {
                        if (__label__ == 9) {
                          $1 = 1;
                          __label__ = 113;
                          break $10$$11$2;
                        } else if (__label__ == 10) {
                          HEAP32[$3 + 12 >> 2] = $tmp;
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
      var $57 = _h264bsdGetBits($2, 1);
      $tmp = $57;
      if ($tmp == -1) {
        __label__ = 13;
      } else {
        __label__ = 14;
      }
      $60$$61$20 : do {
        if (__label__ == 13) {
          $1 = 1;
        } else if (__label__ == 14) {
          var $64 = $tmp == 1 ? 1 : 0;
          HEAP32[$3 + 16 >> 2] = $64;
          if (HEAP32[$3 + 16 >> 2] != 0) {
            __label__ = 15;
          } else {
            __label__ = 18;
          }
          $71$$83$23 : do {
            if (__label__ == 15) {
              var $73 = _h264bsdGetBits($2, 1);
              $tmp = $73;
              if ($tmp == -1) {
                __label__ = 16;
              } else {
                __label__ = 17;
              }
              $76$$77$25 : do {
                if (__label__ == 16) {
                  $1 = 1;
                  __label__ = 113;
                  break $10$$11$2;
                } else if (__label__ == 17) {
                  var $80 = $tmp == 1 ? 1 : 0;
                  HEAP32[$3 + 20 >> 2] = $80;
                }
              } while (0);
            }
          } while (0);
          var $85 = _h264bsdGetBits($2, 1);
          $tmp = $85;
          if ($tmp == -1) {
            __label__ = 19;
          } else {
            __label__ = 20;
          }
          $88$$89$29 : do {
            if (__label__ == 19) {
              $1 = 1;
            } else if (__label__ == 20) {
              var $92 = $tmp == 1 ? 1 : 0;
              HEAP32[$3 + 24 >> 2] = $92;
              if (HEAP32[$3 + 24 >> 2] != 0) {
                __label__ = 21;
              } else {
                __label__ = 37;
              }
              $99$$171$32 : do {
                if (__label__ == 21) {
                  var $101 = _h264bsdGetBits($2, 3);
                  $tmp = $101;
                  if ($tmp == -1) {
                    __label__ = 22;
                  } else {
                    __label__ = 23;
                  }
                  $104$$105$34 : do {
                    if (__label__ == 22) {
                      $1 = 1;
                      __label__ = 113;
                      break $10$$11$2;
                    } else if (__label__ == 23) {
                      HEAP32[$3 + 28 >> 2] = $tmp;
                      var $110 = _h264bsdGetBits($2, 1);
                      $tmp = $110;
                      if ($tmp == -1) {
                        __label__ = 24;
                      } else {
                        __label__ = 25;
                      }
                      $113$$114$37 : do {
                        if (__label__ == 24) {
                          $1 = 1;
                          __label__ = 113;
                          break $10$$11$2;
                        } else if (__label__ == 25) {
                          var $117 = $tmp == 1 ? 1 : 0;
                          HEAP32[$3 + 32 >> 2] = $117;
                          var $121 = _h264bsdGetBits($2, 1);
                          $tmp = $121;
                          if ($tmp == -1) {
                            __label__ = 26;
                          } else {
                            __label__ = 27;
                          }
                          $124$$125$40 : do {
                            if (__label__ == 26) {
                              $1 = 1;
                              __label__ = 113;
                              break $10$$11$2;
                            } else if (__label__ == 27) {
                              var $128 = $tmp == 1 ? 1 : 0;
                              HEAP32[$3 + 36 >> 2] = $128;
                              if (HEAP32[$3 + 36 >> 2] != 0) {
                                __label__ = 28;
                              } else {
                                __label__ = 35;
                              }
                              $135$$163$43 : do {
                                if (__label__ == 28) {
                                  var $137 = _h264bsdGetBits($2, 8);
                                  $tmp = $137;
                                  if ($tmp == -1) {
                                    __label__ = 29;
                                  } else {
                                    __label__ = 30;
                                  }
                                  $140$$141$45 : do {
                                    if (__label__ == 29) {
                                      $1 = 1;
                                      __label__ = 113;
                                      break $10$$11$2;
                                    } else if (__label__ == 30) {
                                      HEAP32[$3 + 40 >> 2] = $tmp;
                                      var $146 = _h264bsdGetBits($2, 8);
                                      $tmp = $146;
                                      if ($tmp == -1) {
                                        __label__ = 31;
                                      } else {
                                        __label__ = 32;
                                      }
                                      $149$$150$48 : do {
                                        if (__label__ == 31) {
                                          $1 = 1;
                                          __label__ = 113;
                                          break $10$$11$2;
                                        } else if (__label__ == 32) {
                                          HEAP32[$3 + 44 >> 2] = $tmp;
                                          var $155 = _h264bsdGetBits($2, 8);
                                          $tmp = $155;
                                          if ($tmp == -1) {
                                            __label__ = 33;
                                          } else {
                                            __label__ = 34;
                                          }
                                          $158$$159$51 : do {
                                            if (__label__ == 33) {
                                              $1 = 1;
                                              __label__ = 113;
                                              break $10$$11$2;
                                            } else if (__label__ == 34) {
                                              HEAP32[$3 + 48 >> 2] = $tmp;
                                            }
                                          } while (0);
                                        }
                                      } while (0);
                                    }
                                  } while (0);
                                } else if (__label__ == 35) {
                                  HEAP32[$3 + 40 >> 2] = 2;
                                  HEAP32[$3 + 44 >> 2] = 2;
                                  HEAP32[$3 + 48 >> 2] = 2;
                                }
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                    }
                  } while (0);
                } else if (__label__ == 37) {
                  HEAP32[$3 + 28 >> 2] = 5;
                  HEAP32[$3 + 40 >> 2] = 2;
                  HEAP32[$3 + 44 >> 2] = 2;
                  HEAP32[$3 + 48 >> 2] = 2;
                }
              } while (0);
              var $182 = _h264bsdGetBits($2, 1);
              $tmp = $182;
              if ($tmp == -1) {
                __label__ = 39;
              } else {
                __label__ = 40;
              }
              $185$$186$58 : do {
                if (__label__ == 39) {
                  $1 = 1;
                } else if (__label__ == 40) {
                  var $189 = $tmp == 1 ? 1 : 0;
                  HEAP32[$3 + 52 >> 2] = $189;
                  if (HEAP32[$3 + 52 >> 2] != 0) {
                    __label__ = 41;
                  } else {
                    __label__ = 50;
                  }
                  $196$$227$61 : do {
                    if (__label__ == 41) {
                      var $200 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 56);
                      $tmp = $200;
                      if ($tmp != 0) {
                        __label__ = 42;
                      } else {
                        __label__ = 43;
                      }
                      $203$$205$63 : do {
                        if (__label__ == 42) {
                          $1 = $tmp;
                          __label__ = 113;
                          break $10$$11$2;
                        } else if (__label__ == 43) {
                          if (HEAPU32[$3 + 56 >> 2] > 5) {
                            __label__ = 44;
                          } else {
                            __label__ = 45;
                          }
                          $210$$211$66 : do {
                            if (__label__ == 44) {
                              $1 = 1;
                              __label__ = 113;
                              break $10$$11$2;
                            } else if (__label__ == 45) {
                              var $215 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 60);
                              $tmp = $215;
                              if ($tmp != 0) {
                                __label__ = 46;
                              } else {
                                __label__ = 47;
                              }
                              $218$$220$69 : do {
                                if (__label__ == 46) {
                                  $1 = $tmp;
                                  __label__ = 113;
                                  break $10$$11$2;
                                } else if (__label__ == 47) {
                                  if (HEAPU32[$3 + 60 >> 2] > 5) {
                                    __label__ = 48;
                                  } else {
                                    __label__ = 49;
                                  }
                                  $225$$226$72 : do {
                                    if (__label__ == 48) {
                                      $1 = 1;
                                      __label__ = 113;
                                      break $10$$11$2;
                                    } else if (__label__ == 49) {}
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                    }
                  } while (0);
                  var $229 = _h264bsdGetBits($2, 1);
                  $tmp = $229;
                  if ($tmp == -1) {
                    __label__ = 51;
                  } else {
                    __label__ = 52;
                  }
                  $232$$233$76 : do {
                    if (__label__ == 51) {
                      $1 = 1;
                    } else if (__label__ == 52) {
                      var $236 = $tmp == 1 ? 1 : 0;
                      HEAP32[$3 + 64 >> 2] = $236;
                      if (HEAP32[$3 + 64 >> 2] != 0) {
                        __label__ = 53;
                      } else {
                        __label__ = 64;
                      }
                      $243$$283$79 : do {
                        if (__label__ == 53) {
                          var $245 = _h264bsdShowBits32($2);
                          $tmp = $245;
                          var $247 = _h264bsdFlushBits($2, 32);
                          if ($247 == -1) {
                            __label__ = 54;
                          } else {
                            __label__ = 55;
                          }
                          $249$$250$81 : do {
                            if (__label__ == 54) {
                              $1 = 1;
                              __label__ = 113;
                              break $10$$11$2;
                            } else if (__label__ == 55) {
                              if ($tmp == 0) {
                                __label__ = 56;
                              } else {
                                __label__ = 57;
                              }
                              $253$$254$84 : do {
                                if (__label__ == 56) {
                                  $1 = 1;
                                  __label__ = 113;
                                  break $10$$11$2;
                                } else if (__label__ == 57) {
                                  HEAP32[$3 + 68 >> 2] = $tmp;
                                  var $259 = _h264bsdShowBits32($2);
                                  $tmp = $259;
                                  var $261 = _h264bsdFlushBits($2, 32);
                                  if ($261 == -1) {
                                    __label__ = 58;
                                  } else {
                                    __label__ = 59;
                                  }
                                  $263$$264$87 : do {
                                    if (__label__ == 58) {
                                      $1 = 1;
                                      __label__ = 113;
                                      break $10$$11$2;
                                    } else if (__label__ == 59) {
                                      if ($tmp == 0) {
                                        __label__ = 60;
                                      } else {
                                        __label__ = 61;
                                      }
                                      $267$$268$90 : do {
                                        if (__label__ == 60) {
                                          $1 = 1;
                                          __label__ = 113;
                                          break $10$$11$2;
                                        } else if (__label__ == 61) {
                                          HEAP32[$3 + 72 >> 2] = $tmp;
                                          var $273 = _h264bsdGetBits($2, 1);
                                          $tmp = $273;
                                          if ($tmp == -1) {
                                            __label__ = 62;
                                          } else {
                                            __label__ = 63;
                                          }
                                          $276$$277$93 : do {
                                            if (__label__ == 62) {
                                              $1 = 1;
                                              __label__ = 113;
                                              break $10$$11$2;
                                            } else if (__label__ == 63) {
                                              var $280 = $tmp == 1 ? 1 : 0;
                                              HEAP32[$3 + 76 >> 2] = $280;
                                            }
                                          } while (0);
                                        }
                                      } while (0);
                                    }
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                      var $285 = _h264bsdGetBits($2, 1);
                      $tmp = $285;
                      if ($tmp == -1) {
                        __label__ = 65;
                      } else {
                        __label__ = 66;
                      }
                      $288$$289$97 : do {
                        if (__label__ == 65) {
                          $1 = 1;
                        } else if (__label__ == 66) {
                          var $292 = $tmp == 1 ? 1 : 0;
                          HEAP32[$3 + 80 >> 2] = $292;
                          if (HEAP32[$3 + 80 >> 2] != 0) {
                            __label__ = 67;
                          } else {
                            __label__ = 70;
                          }
                          $299$$309$100 : do {
                            if (__label__ == 67) {
                              var $303 = _DecodeHrdParameters($2, $3 + 84);
                              $tmp = $303;
                              if ($tmp != 0) {
                                __label__ = 68;
                              } else {
                                __label__ = 69;
                              }
                              $306$$308$102 : do {
                                if (__label__ == 68) {
                                  $1 = $tmp;
                                  __label__ = 113;
                                  break $10$$11$2;
                                } else if (__label__ == 69) {}
                              } while (0);
                            } else if (__label__ == 70) {
                              HEAP32[$3 + 84 >> 2] = 1;
                              HEAP32[$3 + 96 >> 2] = 288000001;
                              HEAP32[$3 + 224 >> 2] = 288000001;
                              HEAP32[$3 + 480 >> 2] = 24;
                              HEAP32[$3 + 484 >> 2] = 24;
                              HEAP32[$3 + 488 >> 2] = 24;
                              HEAP32[$3 + 492 >> 2] = 24;
                            }
                          } while (0);
                          var $335 = _h264bsdGetBits($2, 1);
                          $tmp = $335;
                          if ($tmp == -1) {
                            __label__ = 72;
                          } else {
                            __label__ = 73;
                          }
                          $338$$339$107 : do {
                            if (__label__ == 72) {
                              $1 = 1;
                            } else if (__label__ == 73) {
                              var $342 = $tmp == 1 ? 1 : 0;
                              HEAP32[$3 + 496 >> 2] = $342;
                              if (HEAP32[$3 + 496 >> 2] != 0) {
                                __label__ = 74;
                              } else {
                                __label__ = 77;
                              }
                              $349$$359$110 : do {
                                if (__label__ == 74) {
                                  var $353 = _DecodeHrdParameters($2, $3 + 500);
                                  $tmp = $353;
                                  if ($tmp != 0) {
                                    __label__ = 75;
                                  } else {
                                    __label__ = 76;
                                  }
                                  $356$$358$112 : do {
                                    if (__label__ == 75) {
                                      $1 = $tmp;
                                      __label__ = 113;
                                      break $10$$11$2;
                                    } else if (__label__ == 76) {}
                                  } while (0);
                                } else if (__label__ == 77) {
                                  HEAP32[$3 + 500 >> 2] = 1;
                                  HEAP32[$3 + 512 >> 2] = 240000001;
                                  HEAP32[$3 + 640 >> 2] = 240000001;
                                  HEAP32[$3 + 896 >> 2] = 24;
                                  HEAP32[$3 + 900 >> 2] = 24;
                                  HEAP32[$3 + 904 >> 2] = 24;
                                  HEAP32[$3 + 908 >> 2] = 24;
                                }
                              } while (0);
                              if (HEAP32[$3 + 80 >> 2] != 0) {
                                __label__ = 80;
                              } else {
                                __label__ = 79;
                              }
                              $393$$388$117 : do {
                                if (__label__ == 79) {
                                  if (HEAP32[$3 + 496 >> 2] != 0) {
                                    __label__ = 80;
                                    break $393$$388$117;
                                  } else {
                                    __label__ = 83;
                                    break $393$$388$117;
                                  }
                                }
                              } while (0);
                              $393$$405$119 : do {
                                if (__label__ == 80) {
                                  var $395 = _h264bsdGetBits($2, 1);
                                  $tmp = $395;
                                  if ($tmp == -1) {
                                    __label__ = 81;
                                  } else {
                                    __label__ = 82;
                                  }
                                  $398$$399$121 : do {
                                    if (__label__ == 81) {
                                      $1 = 1;
                                      __label__ = 113;
                                      break $10$$11$2;
                                    } else if (__label__ == 82) {
                                      var $402 = $tmp == 1 ? 1 : 0;
                                      HEAP32[$3 + 912 >> 2] = $402;
                                    }
                                  } while (0);
                                }
                              } while (0);
                              var $407 = _h264bsdGetBits($2, 1);
                              $tmp = $407;
                              if ($tmp == -1) {
                                __label__ = 84;
                              } else {
                                __label__ = 85;
                              }
                              $410$$411$125 : do {
                                if (__label__ == 84) {
                                  $1 = 1;
                                } else if (__label__ == 85) {
                                  var $414 = $tmp == 1 ? 1 : 0;
                                  HEAP32[$3 + 916 >> 2] = $414;
                                  var $418 = _h264bsdGetBits($2, 1);
                                  $tmp = $418;
                                  if ($tmp == -1) {
                                    __label__ = 86;
                                  } else {
                                    __label__ = 87;
                                  }
                                  $421$$422$128 : do {
                                    if (__label__ == 86) {
                                      $1 = 1;
                                    } else if (__label__ == 87) {
                                      var $425 = $tmp == 1 ? 1 : 0;
                                      HEAP32[$3 + 920 >> 2] = $425;
                                      if (HEAP32[$3 + 920 >> 2] != 0) {
                                        __label__ = 88;
                                      } else {
                                        __label__ = 111;
                                      }
                                      $432$$522$131 : do {
                                        if (__label__ == 88) {
                                          var $434 = _h264bsdGetBits($2, 1);
                                          $tmp = $434;
                                          if ($tmp == -1) {
                                            __label__ = 89;
                                          } else {
                                            __label__ = 90;
                                          }
                                          $437$$438$133 : do {
                                            if (__label__ == 89) {
                                              $1 = 1;
                                              __label__ = 113;
                                              break $10$$11$2;
                                            } else if (__label__ == 90) {
                                              var $441 = $tmp == 1 ? 1 : 0;
                                              HEAP32[$3 + 924 >> 2] = $441;
                                              var $447 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 928);
                                              $tmp = $447;
                                              if ($tmp != 0) {
                                                __label__ = 91;
                                              } else {
                                                __label__ = 92;
                                              }
                                              $450$$452$136 : do {
                                                if (__label__ == 91) {
                                                  $1 = $tmp;
                                                  __label__ = 113;
                                                  break $10$$11$2;
                                                } else if (__label__ == 92) {
                                                  if (HEAPU32[$3 + 928 >> 2] > 16) {
                                                    __label__ = 93;
                                                  } else {
                                                    __label__ = 94;
                                                  }
                                                  $457$$458$139 : do {
                                                    if (__label__ == 93) {
                                                      $1 = 1;
                                                      __label__ = 113;
                                                      break $10$$11$2;
                                                    } else if (__label__ == 94) {
                                                      var $462 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 932);
                                                      $tmp = $462;
                                                      if ($tmp != 0) {
                                                        __label__ = 95;
                                                      } else {
                                                        __label__ = 96;
                                                      }
                                                      $465$$467$142 : do {
                                                        if (__label__ == 95) {
                                                          $1 = $tmp;
                                                          __label__ = 113;
                                                          break $10$$11$2;
                                                        } else if (__label__ == 96) {
                                                          if (HEAPU32[$3 + 932 >> 2] > 16) {
                                                            __label__ = 97;
                                                          } else {
                                                            __label__ = 98;
                                                          }
                                                          $472$$473$145 : do {
                                                            if (__label__ == 97) {
                                                              $1 = 1;
                                                              __label__ = 113;
                                                              break $10$$11$2;
                                                            } else if (__label__ == 98) {
                                                              var $477 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 936);
                                                              $tmp = $477;
                                                              if ($tmp != 0) {
                                                                __label__ = 99;
                                                              } else {
                                                                __label__ = 100;
                                                              }
                                                              $480$$482$148 : do {
                                                                if (__label__ == 99) {
                                                                  $1 = $tmp;
                                                                  __label__ = 113;
                                                                  break $10$$11$2;
                                                                } else if (__label__ == 100) {
                                                                  if (HEAPU32[$3 + 936 >> 2] > 16) {
                                                                    __label__ = 101;
                                                                  } else {
                                                                    __label__ = 102;
                                                                  }
                                                                  $487$$488$151 : do {
                                                                    if (__label__ == 101) {
                                                                      $1 = 1;
                                                                      __label__ = 113;
                                                                      break $10$$11$2;
                                                                    } else if (__label__ == 102) {
                                                                      var $492 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 940);
                                                                      $tmp = $492;
                                                                      if ($tmp != 0) {
                                                                        __label__ = 103;
                                                                      } else {
                                                                        __label__ = 104;
                                                                      }
                                                                      $495$$497$154 : do {
                                                                        if (__label__ == 103) {
                                                                          $1 = $tmp;
                                                                          __label__ = 113;
                                                                          break $10$$11$2;
                                                                        } else if (__label__ == 104) {
                                                                          if (HEAPU32[$3 + 940 >> 2] > 16) {
                                                                            __label__ = 105;
                                                                          } else {
                                                                            __label__ = 106;
                                                                          }
                                                                          $502$$503$157 : do {
                                                                            if (__label__ == 105) {
                                                                              $1 = 1;
                                                                              __label__ = 113;
                                                                              break $10$$11$2;
                                                                            } else if (__label__ == 106) {
                                                                              var $507 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 944);
                                                                              $tmp = $507;
                                                                              if ($tmp != 0) {
                                                                                __label__ = 107;
                                                                              } else {
                                                                                __label__ = 108;
                                                                              }
                                                                              $510$$512$160 : do {
                                                                                if (__label__ == 107) {
                                                                                  $1 = $tmp;
                                                                                  __label__ = 113;
                                                                                  break $10$$11$2;
                                                                                } else if (__label__ == 108) {
                                                                                  var $516 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 948);
                                                                                  $tmp = $516;
                                                                                  if ($tmp != 0) {
                                                                                    __label__ = 109;
                                                                                  } else {
                                                                                    __label__ = 110;
                                                                                  }
                                                                                  $519$$521$163 : do {
                                                                                    if (__label__ == 109) {
                                                                                      $1 = $tmp;
                                                                                      __label__ = 113;
                                                                                      break $10$$11$2;
                                                                                    } else if (__label__ == 110) {}
                                                                                  } while (0);
                                                                                }
                                                                              } while (0);
                                                                            }
                                                                          } while (0);
                                                                        }
                                                                      } while (0);
                                                                    }
                                                                  } while (0);
                                                                }
                                                              } while (0);
                                                            }
                                                          } while (0);
                                                        }
                                                      } while (0);
                                                    }
                                                  } while (0);
                                                }
                                              } while (0);
                                            }
                                          } while (0);
                                        } else if (__label__ == 111) {
                                          HEAP32[$3 + 924 >> 2] = 1;
                                          HEAP32[$3 + 928 >> 2] = 2;
                                          HEAP32[$3 + 932 >> 2] = 1;
                                          HEAP32[$3 + 936 >> 2] = 16;
                                          HEAP32[$3 + 940 >> 2] = 16;
                                          HEAP32[$3 + 944 >> 2] = 16;
                                          HEAP32[$3 + 948 >> 2] = 16;
                                        }
                                      } while (0);
                                      $1 = 0;
                                    }
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $539 = $1;
  return $539;
  return null;
}
_h264bsdDecodeVuiParameters["X"] = 1;
function _h264bsdDecodePicOrderCnt($poc, $sps, $pSliceHeader, $pNalUnit) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $i;
  var $picOrderCnt;
  var $frameNumOffset;
  var $absFrameNum;
  var $picOrderCntCycleCnt;
  var $frameNumInPicOrderCntCycle;
  var $expectedDeltaPicOrderCntCycle;
  var $containsMmco5;
  $1 = $poc;
  $2 = $sps;
  $3 = $pSliceHeader;
  $4 = $pNalUnit;
  $containsMmco5 = 0;
  if (HEAP32[$3 + 284 >> 2] != 0) {
    __label__ = 1;
  } else {
    __label__ = 7;
  }
  $10$$34$44 : do {
    if (__label__ == 1) {
      $i = 0;
      $11$46 : while (1) {
        if (!(HEAP32[$3 + 288 + $i * 20 >> 2] != 0)) {
          __label__ = 6;
          break $11$46;
        }
        if (HEAP32[$3 + 288 + $i * 20 >> 2] == 5) {
          __label__ = 4;
          break $11$46;
        }
        var $32 = $i + 1;
        $i = $32;
      }
      $33$$29$50 : do {
        if (__label__ == 4) {
          $containsMmco5 = 1;
        }
      } while (0);
    }
  } while (0);
  var $37 = HEAP32[$2 + 16 >> 2];
  if ($37 == 0) {
    __label__ = 8;
  } else if ($37 == 1) {
    __label__ = 31;
  } else {
    __label__ = 64;
  }
  $336$$38$$170$54 : do {
    if (__label__ == 64) {
      if (HEAP32[$4 >> 2] == 5) {
        __label__ = 65;
      } else {
        __label__ = 66;
      }
      $341$$342$56 : do {
        if (__label__ == 65) {
          $frameNumOffset = 0;
        } else if (__label__ == 66) {
          if (HEAPU32[$1 + 8 >> 2] > HEAPU32[$3 + 12 >> 2]) {
            __label__ = 67;
          } else {
            __label__ = 68;
          }
          $350$$358$59 : do {
            if (__label__ == 67) {
              $frameNumOffset = HEAP32[$1 + 12 >> 2] + HEAP32[$2 + 12 >> 2];
            } else if (__label__ == 68) {
              $frameNumOffset = HEAP32[$1 + 12 >> 2];
            }
          } while (0);
        }
      } while (0);
      if (HEAP32[$4 >> 2] == 5) {
        __label__ = 71;
      } else {
        __label__ = 72;
      }
      $368$$369$64 : do {
        if (__label__ == 71) {
          $picOrderCnt = 0;
        } else if (__label__ == 72) {
          if (HEAP32[$4 + 4 >> 2] == 0) {
            __label__ = 73;
          } else {
            __label__ = 74;
          }
          $374$$382$67 : do {
            if (__label__ == 73) {
              $picOrderCnt = ($frameNumOffset + HEAP32[$3 + 12 >> 2] << 1) - 1;
            } else if (__label__ == 74) {
              $picOrderCnt = $frameNumOffset + HEAP32[$3 + 12 >> 2] << 1;
            }
          } while (0);
        }
      } while (0);
      if ($containsMmco5 != 0) {
        __label__ = 78;
      } else {
        __label__ = 77;
      }
      $402$$393$72 : do {
        if (__label__ == 78) {
          HEAP32[$1 + 12 >> 2] = 0;
          HEAP32[$1 + 8 >> 2] = 0;
          $picOrderCnt = 0;
        } else if (__label__ == 77) {
          HEAP32[$1 + 12 >> 2] = $frameNumOffset;
          var $399 = HEAP32[$3 + 12 >> 2];
          HEAP32[$1 + 8 >> 2] = $399;
        }
      } while (0);
    } else if (__label__ == 8) {
      if (HEAP32[$4 >> 2] == 5) {
        __label__ = 9;
      } else {
        __label__ = 10;
      }
      $43$$48$77 : do {
        if (__label__ == 9) {
          HEAP32[$1 + 4 >> 2] = 0;
          HEAP32[$1 >> 2] = 0;
        }
      } while (0);
      if (HEAPU32[$3 + 20 >> 2] < HEAPU32[$1 >> 2]) {
        __label__ = 11;
      } else {
        __label__ = 13;
      }
      $56$$77$80 : do {
        if (__label__ == 11) {
          var $63 = HEAP32[$1 >> 2] - HEAP32[$3 + 20 >> 2];
          var $66 = HEAPU32[$2 + 20 >> 2];
          var $67 = Math.floor($66 / 2);
          if (!($63 >= $67)) {
            __label__ = 13;
            break $56$$77$80;
          }
          $picOrderCnt = HEAP32[$1 + 4 >> 2] + HEAP32[$2 + 20 >> 2];
          __label__ = 18;
          break $56$$77$80;
        }
      } while (0);
      $111$$77$83 : do {
        if (__label__ == 13) {
          if (HEAPU32[$3 + 20 >> 2] > HEAPU32[$1 >> 2]) {
            __label__ = 14;
          } else {
            __label__ = 16;
          }
          $85$$106$85 : do {
            if (__label__ == 14) {
              var $92 = HEAP32[$3 + 20 >> 2] - HEAP32[$1 >> 2];
              var $95 = HEAPU32[$2 + 20 >> 2];
              var $96 = Math.floor($95 / 2);
              if (!($92 > $96)) {
                __label__ = 16;
                break $85$$106$85;
              }
              $picOrderCnt = HEAP32[$1 + 4 >> 2] - HEAP32[$2 + 20 >> 2];
              __label__ = 17;
              break $85$$106$85;
            }
          } while (0);
          $110$$106$88 : do {
            if (__label__ == 16) {
              $picOrderCnt = HEAP32[$1 + 4 >> 2];
            }
          } while (0);
        }
      } while (0);
      if (HEAP32[$4 + 4 >> 2] != 0) {
        __label__ = 19;
      } else {
        __label__ = 20;
      }
      $116$$120$92 : do {
        if (__label__ == 19) {
          HEAP32[$1 + 4 >> 2] = $picOrderCnt;
        }
      } while (0);
      var $125 = $picOrderCnt + HEAP32[$3 + 20 >> 2];
      $picOrderCnt = $125;
      if (HEAP32[$3 + 24 >> 2] < 0) {
        __label__ = 21;
      } else {
        __label__ = 22;
      }
      $130$$136$95 : do {
        if (__label__ == 21) {
          var $135 = $picOrderCnt + HEAP32[$3 + 24 >> 2];
          $picOrderCnt = $135;
        }
      } while (0);
      if (HEAP32[$4 + 4 >> 2] != 0) {
        __label__ = 23;
      } else {
        __label__ = 30;
      }
      $141$$169$98 : do {
        if (__label__ == 23) {
          if ($containsMmco5 != 0) {
            __label__ = 24;
          } else {
            __label__ = 28;
          }
          $144$$162$100 : do {
            if (__label__ == 24) {
              HEAP32[$1 + 4 >> 2] = 0;
              if (HEAP32[$3 + 24 >> 2] < 0) {
                __label__ = 25;
              } else {
                __label__ = 26;
              }
              $151$$158$102 : do {
                if (__label__ == 25) {
                  var $155 = -HEAP32[$3 + 24 >> 2];
                  HEAP32[$1 >> 2] = $155;
                } else if (__label__ == 26) {
                  HEAP32[$1 >> 2] = 0;
                }
              } while (0);
              $picOrderCnt = 0;
            } else if (__label__ == 28) {
              var $165 = HEAP32[$3 + 20 >> 2];
              HEAP32[$1 >> 2] = $165;
            }
          } while (0);
        }
      } while (0);
    } else if (__label__ == 31) {
      if (HEAP32[$4 >> 2] == 5) {
        __label__ = 32;
      } else {
        __label__ = 33;
      }
      $175$$176$110 : do {
        if (__label__ == 32) {
          $frameNumOffset = 0;
        } else if (__label__ == 33) {
          if (HEAPU32[$1 + 8 >> 2] > HEAPU32[$3 + 12 >> 2]) {
            __label__ = 34;
          } else {
            __label__ = 35;
          }
          $184$$192$113 : do {
            if (__label__ == 34) {
              $frameNumOffset = HEAP32[$1 + 12 >> 2] + HEAP32[$2 + 12 >> 2];
            } else if (__label__ == 35) {
              $frameNumOffset = HEAP32[$1 + 12 >> 2];
            }
          } while (0);
        }
      } while (0);
      if (HEAP32[$2 + 36 >> 2] != 0) {
        __label__ = 38;
      } else {
        __label__ = 39;
      }
      $202$$208$118 : do {
        if (__label__ == 38) {
          $absFrameNum = $frameNumOffset + HEAP32[$3 + 12 >> 2];
        } else if (__label__ == 39) {
          $absFrameNum = 0;
        }
      } while (0);
      if (HEAP32[$4 + 4 >> 2] == 0) {
        __label__ = 41;
      } else {
        __label__ = 43;
      }
      $214$$220$122 : do {
        if (__label__ == 41) {
          if (!($absFrameNum > 0)) {
            __label__ = 43;
            break $214$$220$122;
          }
          var $219 = $absFrameNum - 1;
          $absFrameNum = $219;
        }
      } while (0);
      if ($absFrameNum > 0) {
        __label__ = 44;
      } else {
        __label__ = 45;
      }
      $223$$236$126 : do {
        if (__label__ == 44) {
          var $228 = HEAPU32[$2 + 36 >> 2];
          var $229 = Math.floor(($absFrameNum - 1) / $228);
          $picOrderCntCycleCnt = $229;
          $frameNumInPicOrderCntCycle = ($absFrameNum - 1) % HEAPU32[$2 + 36 >> 2];
        }
      } while (0);
      $expectedDeltaPicOrderCntCycle = 0;
      $i = 0;
      $237$129 : while (1) {
        if (!($i < HEAPU32[$2 + 36 >> 2])) {
          __label__ = 49;
          break $237$129;
        }
        var $251 = $expectedDeltaPicOrderCntCycle + HEAP32[HEAP32[$2 + 40 >> 2] + ($i << 2) >> 2];
        $expectedDeltaPicOrderCntCycle = $251;
        var $254 = $i + 1;
        $i = $254;
      }
      if ($absFrameNum > 0) {
        __label__ = 50;
      } else {
        __label__ = 55;
      }
      $258$$279$134 : do {
        if (__label__ == 50) {
          $picOrderCnt = $picOrderCntCycleCnt * $expectedDeltaPicOrderCntCycle;
          $i = 0;
          $262$136 : while (1) {
            if (!($i <= $frameNumInPicOrderCntCycle)) {
              __label__ = 54;
              break $262$136;
            }
            var $274 = $picOrderCnt + HEAP32[HEAP32[$2 + 40 >> 2] + ($i << 2) >> 2];
            $picOrderCnt = $274;
            var $277 = $i + 1;
            $i = $277;
          }
        } else if (__label__ == 55) {
          $picOrderCnt = 0;
        }
      } while (0);
      if (HEAP32[$4 + 4 >> 2] == 0) {
        __label__ = 57;
      } else {
        __label__ = 58;
      }
      $285$$291$143 : do {
        if (__label__ == 57) {
          var $290 = $picOrderCnt + HEAP32[$2 + 28 >> 2];
          $picOrderCnt = $290;
        }
      } while (0);
      var $297 = $picOrderCnt + HEAP32[$3 + 28 >> 2];
      $picOrderCnt = $297;
      if (HEAP32[$2 + 32 >> 2] + HEAP32[$3 + 32 >> 2] < 0) {
        __label__ = 59;
      } else {
        __label__ = 60;
      }
      $307$$318$146 : do {
        if (__label__ == 59) {
          var $317 = $picOrderCnt + (HEAP32[$2 + 32 >> 2] + HEAP32[$3 + 32 >> 2]);
          $picOrderCnt = $317;
        }
      } while (0);
      if ($containsMmco5 != 0) {
        __label__ = 62;
      } else {
        __label__ = 61;
      }
      $330$$321$149 : do {
        if (__label__ == 62) {
          HEAP32[$1 + 12 >> 2] = 0;
          HEAP32[$1 + 8 >> 2] = 0;
          $picOrderCnt = 0;
        } else if (__label__ == 61) {
          HEAP32[$1 + 12 >> 2] = $frameNumOffset;
          var $327 = HEAP32[$3 + 12 >> 2];
          HEAP32[$1 + 8 >> 2] = $327;
        }
      } while (0);
    }
  } while (0);
  var $409 = $picOrderCnt;
  return $409;
  return null;
}
_h264bsdDecodePicOrderCnt["X"] = 1;
function _DecodeHrdParameters($pStrmData, $pHrdParameters) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $tmp;
  var $i;
  $2 = $pStrmData;
  $3 = $pHrdParameters;
  var $7 = _h264bsdDecodeExpGolombUnsigned($2, $3);
  $tmp = $7;
  if ($tmp != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $10$$12$2 : do {
    if (__label__ == 1) {
      $1 = $tmp;
    } else if (__label__ == 2) {
      var $16 = HEAP32[$3 >> 2] + 1;
      HEAP32[$3 >> 2] = $16;
      if (HEAPU32[$3 >> 2] > 32) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $21$$22$5 : do {
        if (__label__ == 3) {
          $1 = 1;
        } else if (__label__ == 4) {
          var $24 = _h264bsdGetBits($2, 4);
          $tmp = $24;
          if ($tmp == -1) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $27$$28$8 : do {
            if (__label__ == 5) {
              $1 = 1;
            } else if (__label__ == 6) {
              HEAP32[$3 + 4 >> 2] = $tmp;
              var $33 = _h264bsdGetBits($2, 4);
              $tmp = $33;
              if ($tmp == -1) {
                __label__ = 7;
              } else {
                __label__ = 8;
              }
              $36$$37$11 : do {
                if (__label__ == 7) {
                  $1 = 1;
                } else if (__label__ == 8) {
                  HEAP32[$3 + 8 >> 2] = $tmp;
                  $i = 0;
                  $41$14 : while (1) {
                    if (!($i < HEAPU32[$3 >> 2])) {
                      __label__ = 22;
                      break $41$14;
                    }
                    var $53 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 12 + ($i << 2));
                    $tmp = $53;
                    if ($tmp != 0) {
                      __label__ = 11;
                      break $41$14;
                    }
                    if (HEAPU32[$3 + 12 + ($i << 2) >> 2] > 4294967294) {
                      __label__ = 13;
                      break $41$14;
                    }
                    var $72 = HEAP32[$3 + 12 + ($i << 2) >> 2] + 1;
                    HEAP32[$3 + 12 + ($i << 2) >> 2] = $72;
                    var $83 = HEAP32[$3 + 12 + ($i << 2) >> 2] * (1 << HEAP32[$3 + 4 >> 2] + 6);
                    HEAP32[$3 + 12 + ($i << 2) >> 2] = $83;
                    var $89 = _h264bsdDecodeExpGolombUnsigned($2, $3 + 140 + ($i << 2));
                    $tmp = $89;
                    if ($tmp != 0) {
                      __label__ = 15;
                      break $41$14;
                    }
                    if (HEAPU32[$3 + 140 + ($i << 2) >> 2] > 4294967294) {
                      __label__ = 17;
                      break $41$14;
                    }
                    var $108 = HEAP32[$3 + 140 + ($i << 2) >> 2] + 1;
                    HEAP32[$3 + 140 + ($i << 2) >> 2] = $108;
                    var $119 = HEAP32[$3 + 140 + ($i << 2) >> 2] * (1 << HEAP32[$3 + 8 >> 2] + 4);
                    HEAP32[$3 + 140 + ($i << 2) >> 2] = $119;
                    var $121 = _h264bsdGetBits($2, 1);
                    $tmp = $121;
                    if ($tmp == -1) {
                      __label__ = 19;
                      break $41$14;
                    }
                    var $128 = $tmp == 1 ? 1 : 0;
                    HEAP32[$3 + 268 + ($i << 2) >> 2] = $128;
                    var $135 = $i + 1;
                    $i = $135;
                  }
                  $136$$56$$65$$92$$101$$124$23 : do {
                    if (__label__ == 22) {
                      var $138 = _h264bsdGetBits($2, 5);
                      $tmp = $138;
                      if ($tmp == -1) {
                        __label__ = 23;
                      } else {
                        __label__ = 24;
                      }
                      $141$$142$25 : do {
                        if (__label__ == 23) {
                          $1 = 1;
                        } else if (__label__ == 24) {
                          HEAP32[$3 + 396 >> 2] = $tmp + 1;
                          var $148 = _h264bsdGetBits($2, 5);
                          $tmp = $148;
                          if ($tmp == -1) {
                            __label__ = 25;
                          } else {
                            __label__ = 26;
                          }
                          $151$$152$28 : do {
                            if (__label__ == 25) {
                              $1 = 1;
                            } else if (__label__ == 26) {
                              HEAP32[$3 + 400 >> 2] = $tmp + 1;
                              var $158 = _h264bsdGetBits($2, 5);
                              $tmp = $158;
                              if ($tmp == -1) {
                                __label__ = 27;
                              } else {
                                __label__ = 28;
                              }
                              $161$$162$31 : do {
                                if (__label__ == 27) {
                                  $1 = 1;
                                } else if (__label__ == 28) {
                                  HEAP32[$3 + 404 >> 2] = $tmp + 1;
                                  var $168 = _h264bsdGetBits($2, 5);
                                  $tmp = $168;
                                  if ($tmp == -1) {
                                    __label__ = 29;
                                  } else {
                                    __label__ = 30;
                                  }
                                  $171$$172$34 : do {
                                    if (__label__ == 29) {
                                      $1 = 1;
                                    } else if (__label__ == 30) {
                                      HEAP32[$3 + 408 >> 2] = $tmp;
                                      $1 = 0;
                                    }
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                    } else if (__label__ == 11) {
                      $1 = $tmp;
                    } else if (__label__ == 13) {
                      $1 = 1;
                    } else if (__label__ == 15) {
                      $1 = $tmp;
                    } else if (__label__ == 17) {
                      $1 = 1;
                    } else if (__label__ == 19) {
                      $1 = 1;
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $177 = $1;
  return $177;
  return null;
}
_DecodeHrdParameters["X"] = 1;
function _h264bsdInit($pStorage, $noOutputReordering) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $size;
  $2 = $pStorage;
  $3 = $noOutputReordering;
  _h264bsdInitStorage($2);
  $size = 2112;
  var $6 = _H264SwDecMalloc($size);
  HEAP32[$2 + 3376 >> 2] = $6;
  if (HEAP32[$2 + 3376 >> 2] != 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $15$$14$155 : do {
    if (__label__ == 2) {
      if ($3 != 0) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $18$$21$157 : do {
        if (__label__ == 3) {
          HEAP32[$2 + 1216 >> 2] = 1;
        }
      } while (0);
      $1 = 0;
    } else if (__label__ == 1) {
      $1 = 1;
    }
  } while (0);
  var $23 = $1;
  return $23;
  return null;
}
function _h264bsdDecode($pStorage, $byteStrm, $len, $picId, $readBytes) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 204;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $tmp;
  var $ppsId = __stackBase__;
  var $spsId;
  var $picOrderCnt;
  var $nalUnit = __stackBase__ + 4;
  var $seqParamSet = __stackBase__ + 12;
  var $picParamSet = __stackBase__ + 104;
  var $strm = __stackBase__ + 176;
  var $accessUnitBoundaryFlag = __stackBase__ + 196;
  var $picReady;
  var $oldSPS;
  var $newSPS;
  var $noOutputOfPriorPicsFlag = __stackBase__ + 200;
  $2 = $pStorage;
  $3 = $byteStrm;
  $4 = $len;
  $5 = $picId;
  $6 = $readBytes;
  HEAP32[$accessUnitBoundaryFlag >> 2] = 0;
  $picReady = 0;
  if (HEAP32[$2 + 3344 >> 2] != 0) {
    __label__ = 1;
  } else {
    __label__ = 3;
  }
  $11$$32$2 : do {
    if (__label__ == 1) {
      if (!($3 == HEAP32[$2 + 3348 >> 2])) {
        __label__ = 3;
        break $11$$32$2;
      }
      var $21 = $strm;
      var src, dest, stop, stop4;
      src = $2 + 3356;
      dest = $21;
      stop = src + 20;
      if (dest % 4 == src % 4 && 20 > 8) {
        while (src % 4 !== 0 && src < stop) {
          HEAP8[dest++] = HEAP8[src++];
        }
        src >>= 2;
        dest >>= 2;
        stop4 = stop >> 2;
        while (src < stop4) {
          HEAP32[dest++] = HEAP32[src++];
        }
        src <<= 2;
        dest <<= 2;
      }
      while (src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
      var $24 = HEAP32[$strm >> 2];
      HEAP32[$strm + 4 >> 2] = $24;
      HEAP32[$strm + 8 >> 2] = 0;
      HEAP32[$strm + 16 >> 2] = 0;
      var $30 = HEAP32[$2 + 3352 >> 2];
      HEAP32[$6 >> 2] = $30;
      __label__ = 6;
      break $11$$32$2;
    }
  } while (0);
  $53$$32$5 : do {
    if (__label__ == 3) {
      var $36 = _h264bsdExtractNalUnit($3, $4, $strm, $6);
      $tmp = $36;
      if ($tmp != 0) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      $39$$40$7 : do {
        if (__label__ == 4) {
          $1 = 3;
          __label__ = 87;
          break $53$$32$5;
        } else if (__label__ == 5) {
          var src, dest, stop, stop4;
          src = $strm;
          dest = $2 + 3356;
          stop = src + 20;
          if (dest % 4 == src % 4 && 20 > 8) {
            while (src % 4 !== 0 && src < stop) {
              HEAP8[dest++] = HEAP8[src++];
            }
            src >>= 2;
            dest >>= 2;
            stop4 = stop >> 2;
            while (src < stop4) {
              HEAP32[dest++] = HEAP32[src++];
            }
            src <<= 2;
            dest <<= 2;
          }
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
          var $47 = HEAP32[$6 >> 2];
          HEAP32[$2 + 3352 >> 2] = $47;
          HEAP32[$2 + 3348 >> 2] = $3;
          __label__ = 6;
          break $53$$32$5;
        }
      } while (0);
    }
  } while (0);
  $53$$564$10 : do {
    if (__label__ == 6) {
      HEAP32[$2 + 3344 >> 2] = 0;
      var $56 = _h264bsdDecodeNalUnit($strm, $nalUnit);
      $tmp = $56;
      if ($tmp != 0) {
        __label__ = 7;
      } else {
        __label__ = 8;
      }
      $59$$60$12 : do {
        if (__label__ == 7) {
          $1 = 3;
        } else if (__label__ == 8) {
          if (HEAP32[$nalUnit >> 2] == 0) {
            __label__ = 10;
          } else {
            __label__ = 9;
          }
          $68$$64$15 : do {
            if (__label__ == 9) {
              if (HEAPU32[$nalUnit >> 2] >= 13) {
                __label__ = 10;
                break $68$$64$15;
              }
              var $71 = _h264bsdCheckAccessUnitBoundary($strm, $nalUnit, $2, $accessUnitBoundaryFlag);
              $tmp = $71;
              if ($tmp != 0) {
                __label__ = 12;
              } else {
                __label__ = 15;
              }
              $74$$79$18 : do {
                if (__label__ == 12) {
                  if ($tmp == 65520) {
                    __label__ = 13;
                  } else {
                    __label__ = 14;
                  }
                  $77$$78$20 : do {
                    if (__label__ == 13) {
                      $1 = 4;
                      __label__ = 87;
                      break $53$$564$10;
                    } else if (__label__ == 14) {
                      $1 = 3;
                      __label__ = 87;
                      break $53$$564$10;
                    }
                  } while (0);
                } else if (__label__ == 15) {
                  if (HEAP32[$accessUnitBoundaryFlag >> 2] != 0) {
                    __label__ = 16;
                  } else {
                    __label__ = 26;
                  }
                  $82$$141$24 : do {
                    if (__label__ == 16) {
                      if (HEAP32[$2 + 1184 >> 2] != 0) {
                        __label__ = 17;
                      } else {
                        __label__ = 24;
                      }
                      $87$$135$26 : do {
                        if (__label__ == 17) {
                          if (!(HEAP32[$2 + 16 >> 2] != 0)) {
                            __label__ = 24;
                            break $87$$135$26;
                          }
                          if (HEAP32[$2 + 3380 >> 2] != 0) {
                            __label__ = 19;
                          } else {
                            __label__ = 20;
                          }
                          $97$$98$29 : do {
                            if (__label__ == 19) {
                              $1 = 3;
                              __label__ = 87;
                              break $53$$564$10;
                            } else if (__label__ == 20) {
                              if (HEAP32[$2 + 1188 >> 2] != 0) {
                                __label__ = 22;
                              } else {
                                __label__ = 21;
                              }
                              $120$$103$32 : do {
                                if (__label__ == 22) {
                                  var $129 = HEAP32[$2 + 1372 >> 2];
                                  var $130 = _h264bsdConceal($2, $2 + 1336, $129);
                                  $tmp = $130;
                                } else if (__label__ == 21) {
                                  var $107 = _h264bsdAllocateDpbImage($2 + 1220);
                                  HEAP32[$2 + 1336 >> 2] = $107;
                                  _h264bsdInitRefPicList($2 + 1220);
                                  var $119 = _h264bsdConceal($2, $2 + 1336, 0);
                                  $tmp = $119;
                                }
                              } while (0);
                              $picReady = 1;
                              HEAP32[$6 >> 2] = 0;
                              HEAP32[$2 + 3344 >> 2] = 1;
                              __label__ = 25;
                              break $87$$135$26;
                            }
                          } while (0);
                        }
                      } while (0);
                      $138$$135$36 : do {
                        if (__label__ == 24) {
                          HEAP32[$2 + 1188 >> 2] = 0;
                        }
                      } while (0);
                      HEAP32[$2 + 1180 >> 2] = 0;
                    }
                  } while (0);
                  if ($picReady != 0) {
                    __label__ = 79;
                  } else {
                    __label__ = 27;
                  }
                  $464$$144$40 : do {
                    if (__label__ == 27) {
                      var $146 = HEAP32[$nalUnit >> 2];
                      if ($146 == 7) {
                        __label__ = 28;
                      } else if ($146 == 8) {
                        __label__ = 31;
                      } else if ($146 == 5) {
                        __label__ = 34;
                      } else if ($146 == 1) {
                        __label__ = 35;
                      } else if ($146 == 6) {
                        __label__ = 76;
                      } else {
                        __label__ = 77;
                      }
                      $462$$147$$163$$187$$188$$461$42 : do {
                        if (__label__ == 77) {
                          __label__ = 78;
                          break $462$$147$$163$$187$$188$$461$42;
                        } else if (__label__ == 28) {
                          var $148 = _h264bsdDecodeSeqParamSet($strm, $seqParamSet);
                          $tmp = $148;
                          if ($tmp != 0) {
                            __label__ = 29;
                          } else {
                            __label__ = 30;
                          }
                          $151$$160$45 : do {
                            if (__label__ == 29) {
                              var $154 = HEAP32[$seqParamSet + 40 >> 2];
                              _H264SwDecFree($154);
                              HEAP32[$seqParamSet + 40 >> 2] = 0;
                              var $158 = HEAP32[$seqParamSet + 84 >> 2];
                              _H264SwDecFree($158);
                              HEAP32[$seqParamSet + 84 >> 2] = 0;
                              $1 = 3;
                              __label__ = 87;
                              break $53$$564$10;
                            } else if (__label__ == 30) {
                              var $162 = _h264bsdStoreSeqParamSet($2, $seqParamSet);
                              $tmp = $162;
                              __label__ = 78;
                              break $462$$147$$163$$187$$188$$461$42;
                            }
                          } while (0);
                        } else if (__label__ == 31) {
                          var $164 = _h264bsdDecodePicParamSet($strm, $picParamSet);
                          $tmp = $164;
                          if ($tmp != 0) {
                            __label__ = 32;
                          } else {
                            __label__ = 33;
                          }
                          $167$$184$49 : do {
                            if (__label__ == 32) {
                              var $170 = HEAP32[$picParamSet + 20 >> 2];
                              _H264SwDecFree($170);
                              HEAP32[$picParamSet + 20 >> 2] = 0;
                              var $174 = HEAP32[$picParamSet + 24 >> 2];
                              _H264SwDecFree($174);
                              HEAP32[$picParamSet + 24 >> 2] = 0;
                              var $178 = HEAP32[$picParamSet + 28 >> 2];
                              _H264SwDecFree($178);
                              HEAP32[$picParamSet + 28 >> 2] = 0;
                              var $182 = HEAP32[$picParamSet + 44 >> 2];
                              _H264SwDecFree($182);
                              HEAP32[$picParamSet + 44 >> 2] = 0;
                              $1 = 3;
                              __label__ = 87;
                              break $53$$564$10;
                            } else if (__label__ == 33) {
                              var $186 = _h264bsdStorePicParamSet($2, $picParamSet);
                              $tmp = $186;
                              __label__ = 78;
                              break $462$$147$$163$$187$$188$$461$42;
                            }
                          } while (0);
                        } else if (__label__ == 34) {
                          __label__ = 35;
                          break $462$$147$$163$$187$$188$$461$42;
                        } else if (__label__ == 76) {
                          __label__ = 78;
                          break $462$$147$$163$$187$$188$$461$42;
                        }
                      } while (0);
                      $463$$188$54 : do {
                        if (__label__ == 35) {
                          if (HEAP32[$2 + 1180 >> 2] != 0) {
                            __label__ = 36;
                          } else {
                            __label__ = 37;
                          }
                          $193$$194$56 : do {
                            if (__label__ == 36) {
                              $1 = 0;
                              __label__ = 87;
                              break $53$$564$10;
                            } else if (__label__ == 37) {
                              HEAP32[$2 + 1184 >> 2] = 1;
                              var $198 = _h264bsdIsStartOfPicture($2);
                              if ($198 != 0) {
                                __label__ = 38;
                              } else {
                                __label__ = 59;
                              }
                              $200$$328$59 : do {
                                if (__label__ == 38) {
                                  HEAP32[$2 + 1204 >> 2] = 0;
                                  HEAP32[$2 + 1208 >> 2] = $5;
                                  var $206 = _h264bsdCheckPpsId($strm, $ppsId);
                                  $tmp = $206;
                                  $spsId = HEAP32[$2 + 8 >> 2];
                                  var $211 = HEAP32[$ppsId >> 2];
                                  var $215 = HEAP32[$nalUnit >> 2] == 5 ? 1 : 0;
                                  var $216 = _h264bsdActivateParamSets($2, $211, $215);
                                  $tmp = $216;
                                  if ($tmp != 0) {
                                    __label__ = 39;
                                  } else {
                                    __label__ = 42;
                                  }
                                  $219$$234$61 : do {
                                    if (__label__ == 39) {
                                      HEAP32[$2 + 4 >> 2] = 256;
                                      HEAP32[$2 + 12 >> 2] = 0;
                                      HEAP32[$2 + 8 >> 2] = 32;
                                      HEAP32[$2 + 16 >> 2] = 0;
                                      HEAP32[$2 + 3380 >> 2] = 0;
                                      if ($tmp == 65535) {
                                        __label__ = 40;
                                      } else {
                                        __label__ = 41;
                                      }
                                      $232$$233$63 : do {
                                        if (__label__ == 40) {
                                          $1 = 5;
                                          __label__ = 87;
                                          break $53$$564$10;
                                        } else if (__label__ == 41) {
                                          $1 = 4;
                                          __label__ = 87;
                                          break $53$$564$10;
                                        }
                                      } while (0);
                                    } else if (__label__ == 42) {
                                      if ($spsId != HEAP32[$2 + 8 >> 2]) {
                                        __label__ = 43;
                                      } else {
                                        __label__ = 58;
                                      }
                                      $240$$327$67 : do {
                                        if (__label__ == 43) {
                                          $oldSPS = 0;
                                          $newSPS = HEAP32[$2 + 16 >> 2];
                                          HEAP32[$noOutputOfPriorPicsFlag >> 2] = 1;
                                          if (HEAPU32[$2 >> 2] < 32) {
                                            __label__ = 44;
                                          } else {
                                            __label__ = 45;
                                          }
                                          $248$$256$69 : do {
                                            if (__label__ == 44) {
                                              $oldSPS = HEAP32[$2 + 20 + (HEAP32[$2 >> 2] << 2) >> 2];
                                            }
                                          } while (0);
                                          HEAP32[$6 >> 2] = 0;
                                          HEAP32[$2 + 3344 >> 2] = 1;
                                          if (HEAP32[$nalUnit >> 2] == 5) {
                                            __label__ = 46;
                                          } else {
                                            __label__ = 47;
                                          }
                                          $263$$271$72 : do {
                                            if (__label__ == 46) {
                                              var $267 = HEAP32[$2 + 12 >> 2];
                                              var $269 = HEAP32[$nalUnit >> 2];
                                              var $270 = _h264bsdCheckPriorPicsFlag($noOutputOfPriorPicsFlag, $strm, $newSPS, $267, $269);
                                              $tmp = $270;
                                            } else if (__label__ == 47) {
                                              $tmp = 1;
                                            }
                                          } while (0);
                                          if ($tmp != 0) {
                                            __label__ = 55;
                                          } else {
                                            __label__ = 49;
                                          }
                                          $312$$275$76 : do {
                                            if (__label__ == 49) {
                                              if (HEAP32[$noOutputOfPriorPicsFlag >> 2] != 0) {
                                                __label__ = 55;
                                                break $312$$275$76;
                                              }
                                              if (HEAP32[$2 + 1276 >> 2] != 0) {
                                                __label__ = 55;
                                                break $312$$275$76;
                                              }
                                              if ($oldSPS == 0) {
                                                __label__ = 55;
                                                break $312$$275$76;
                                              }
                                              if (HEAP32[$oldSPS + 52 >> 2] != HEAP32[$newSPS + 52 >> 2]) {
                                                __label__ = 55;
                                                break $312$$275$76;
                                              }
                                              if (HEAP32[$oldSPS + 56 >> 2] != HEAP32[$newSPS + 56 >> 2]) {
                                                __label__ = 55;
                                                break $312$$275$76;
                                              }
                                              if (HEAP32[$oldSPS + 88 >> 2] != HEAP32[$newSPS + 88 >> 2]) {
                                                __label__ = 55;
                                                break $312$$275$76;
                                              }
                                              _h264bsdFlushDpb($2 + 1220);
                                              __label__ = 57;
                                              break $312$$275$76;
                                            }
                                          } while (0);
                                          $312$$321$84 : do {
                                            if (__label__ == 55) {
                                              HEAP32[$2 + 1280 >> 2] = 0;
                                            }
                                          } while (0);
                                          var $324 = HEAP32[$2 + 8 >> 2];
                                          HEAP32[$2 >> 2] = $324;
                                          $1 = 2;
                                          __label__ = 87;
                                          break $53$$564$10;
                                        } else if (__label__ == 58) {}
                                      } while (0);
                                    }
                                  } while (0);
                                }
                              } while (0);
                              if (HEAP32[$2 + 3380 >> 2] != 0) {
                                __label__ = 60;
                              } else {
                                __label__ = 61;
                              }
                              $333$$334$89 : do {
                                if (__label__ == 60) {
                                  $1 = 3;
                                  __label__ = 87;
                                  break $53$$564$10;
                                } else if (__label__ == 61) {
                                  var $341 = HEAP32[$2 + 16 >> 2];
                                  var $344 = HEAP32[$2 + 12 >> 2];
                                  var $345 = _h264bsdDecodeSliceHeader($strm, $2 + 2356, $341, $344, $nalUnit);
                                  $tmp = $345;
                                  if ($tmp != 0) {
                                    __label__ = 62;
                                  } else {
                                    __label__ = 63;
                                  }
                                  $348$$349$92 : do {
                                    if (__label__ == 62) {
                                      $1 = 3;
                                      __label__ = 87;
                                      break $53$$564$10;
                                    } else if (__label__ == 63) {
                                      var $351 = _h264bsdIsStartOfPicture($2);
                                      if ($351 != 0) {
                                        __label__ = 64;
                                      } else {
                                        __label__ = 69;
                                      }
                                      $353$$389$95 : do {
                                        if (__label__ == 64) {
                                          if (HEAP32[$nalUnit >> 2] == 5) {
                                            __label__ = 68;
                                          } else {
                                            __label__ = 65;
                                          }
                                          $380$$357$97 : do {
                                            if (__label__ == 65) {
                                              var $365 = HEAP32[$2 + 2368 >> 2];
                                              var $369 = HEAP32[$nalUnit + 4 >> 2] != 0 ? 1 : 0;
                                              var $374 = HEAP32[HEAP32[$2 + 16 >> 2] + 48 >> 2];
                                              var $375 = _h264bsdCheckGapsInFrameNum($2 + 1220, $365, $369, $374);
                                              $tmp = $375;
                                              if ($tmp != 0) {
                                                __label__ = 66;
                                              } else {
                                                __label__ = 67;
                                              }
                                              $378$$379$99 : do {
                                                if (__label__ == 66) {
                                                  $1 = 3;
                                                  __label__ = 87;
                                                  break $53$$564$10;
                                                } else if (__label__ == 67) {}
                                              } while (0);
                                            }
                                          } while (0);
                                          var $384 = _h264bsdAllocateDpbImage($2 + 1220);
                                          HEAP32[$2 + 1336 >> 2] = $384;
                                        }
                                      } while (0);
                                      var src, dest, stop, stop4;
                                      src = $2 + 2356;
                                      dest = $2 + 1368;
                                      stop = src + 988;
                                      if (dest % 4 == src % 4 && 988 > 8) {
                                        while (src % 4 !== 0 && src < stop) {
                                          HEAP8[dest++] = HEAP8[src++];
                                        }
                                        src >>= 2;
                                        dest >>= 2;
                                        stop4 = stop >> 2;
                                        while (src < stop4) {
                                          HEAP32[dest++] = HEAP32[src++];
                                        }
                                        src <<= 2;
                                        dest <<= 2;
                                      }
                                      while (src < stop) {
                                        HEAP8[dest++] = HEAP8[src++];
                                      }
                                      HEAP32[$2 + 1188 >> 2] = 1;
                                      var src, dest, stop, stop4;
                                      src = $nalUnit;
                                      dest = $2 + 1360;
                                      stop = src + 8;
                                      if (dest % 4 == src % 4 && 8 > 8) {
                                        while (src % 4 !== 0 && src < stop) {
                                          HEAP8[dest++] = HEAP8[src++];
                                        }
                                        src >>= 2;
                                        dest >>= 2;
                                        stop4 = stop >> 2;
                                        while (src < stop4) {
                                          HEAP32[dest++] = HEAP32[src++];
                                        }
                                        src <<= 2;
                                        dest <<= 2;
                                      }
                                      while (src < stop) {
                                        HEAP8[dest++] = HEAP8[src++];
                                      }
                                      var $410 = HEAP32[$2 + 1432 >> 2];
                                      _h264bsdComputeSliceGroupMap($2, $410);
                                      _h264bsdInitRefPicList($2 + 1220);
                                      var $425 = HEAP32[$2 + 1380 >> 2];
                                      var $430 = HEAP32[$2 + 1412 >> 2];
                                      var $431 = _h264bsdReorderRefPicList($2 + 1220, $2 + 1436, $425, $430);
                                      $tmp = $431;
                                      if ($tmp != 0) {
                                        __label__ = 70;
                                      } else {
                                        __label__ = 71;
                                      }
                                      $434$$435$104 : do {
                                        if (__label__ == 70) {
                                          $1 = 3;
                                          __label__ = 87;
                                          break $53$$564$10;
                                        } else if (__label__ == 71) {
                                          var $443 = _h264bsdDecodeSliceData($strm, $2, $2 + 1336, $2 + 1368);
                                          $tmp = $443;
                                          if ($tmp != 0) {
                                            __label__ = 72;
                                          } else {
                                            __label__ = 73;
                                          }
                                          $446$$453$107 : do {
                                            if (__label__ == 72) {
                                              var $452 = HEAP32[$2 + 1368 >> 2];
                                              _h264bsdMarkSliceCorrupted($2, $452);
                                              $1 = 3;
                                              __label__ = 87;
                                              break $53$$564$10;
                                            } else if (__label__ == 73) {
                                              var $455 = _h264bsdIsEndOfPicture($2);
                                              if ($455 != 0) {
                                                __label__ = 74;
                                              } else {
                                                __label__ = 75;
                                              }
                                              $457$$460$110 : do {
                                                if (__label__ == 74) {
                                                  $picReady = 1;
                                                  HEAP32[$2 + 1180 >> 2] = 1;
                                                }
                                              } while (0);
                                            }
                                          } while (0);
                                        }
                                      } while (0);
                                    }
                                  } while (0);
                                }
                              } while (0);
                            }
                          } while (0);
                        }
                      } while (0);
                    }
                  } while (0);
                  if ($picReady != 0) {
                    __label__ = 80;
                  } else {
                    __label__ = 86;
                  }
                  $467$$563$115 : do {
                    if (__label__ == 80) {
                      var $473 = HEAP32[$2 + 1212 >> 2];
                      _h264bsdFilterPicture($2 + 1336, $473);
                      _h264bsdResetStorage($2);
                      var $480 = HEAP32[$2 + 16 >> 2];
                      var $487 = _h264bsdDecodePicOrderCnt($2 + 1284, $480, $2 + 1368, $2 + 1360);
                      $picOrderCnt = $487;
                      if (HEAP32[$2 + 1188 >> 2] != 0) {
                        __label__ = 81;
                      } else {
                        __label__ = 85;
                      }
                      $492$$558$117 : do {
                        if (__label__ == 81) {
                          if (HEAP32[$2 + 1364 >> 2] != 0) {
                            __label__ = 82;
                          } else {
                            __label__ = 83;
                          }
                          $499$$530$119 : do {
                            if (__label__ == 82) {
                              var $514 = HEAP32[$2 + 1380 >> 2];
                              var $522 = HEAP32[$2 + 1360 >> 2] == 5 ? 1 : 0;
                              var $525 = HEAP32[$2 + 1208 >> 2];
                              var $528 = HEAP32[$2 + 1204 >> 2];
                              var $529 = _h264bsdMarkDecRefPic($2 + 1220, $2 + 1644, $2 + 1336, $514, $picOrderCnt, $522, $525, $528);
                              $tmp = $529;
                            } else if (__label__ == 83) {
                              var $541 = HEAP32[$2 + 1380 >> 2];
                              var $549 = HEAP32[$2 + 1360 >> 2] == 5 ? 1 : 0;
                              var $552 = HEAP32[$2 + 1208 >> 2];
                              var $555 = HEAP32[$2 + 1204 >> 2];
                              var $556 = _h264bsdMarkDecRefPic($2 + 1220, 0, $2 + 1336, $541, $picOrderCnt, $549, $552, $555);
                              $tmp = $556;
                            }
                          } while (0);
                        }
                      } while (0);
                      HEAP32[$2 + 1184 >> 2] = 0;
                      HEAP32[$2 + 1188 >> 2] = 0;
                      $1 = 1;
                      __label__ = 87;
                      break $53$$564$10;
                    } else if (__label__ == 86) {
                      $1 = 0;
                      __label__ = 87;
                      break $53$$564$10;
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
          $1 = 0;
        }
      } while (0);
    }
  } while (0);
  var $565 = $1;
  STACKTOP = __stackBase__;
  return $565;
  return null;
}
_h264bsdDecode["X"] = 1;
function _h264bsdShutdown($pStorage) {
  var __label__;
  var $1;
  var $i;
  $1 = $pStorage;
  $i = 0;
  $2$2 : while (1) {
    if (!($i < 32)) {
      __label__ = 6;
      break $2$2;
    }
    if (HEAP32[$1 + 20 + ($i << 2) >> 2] != 0) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    $12$$51$5 : do {
      if (__label__ == 3) {
        var $20 = HEAP32[HEAP32[$1 + 20 + ($i << 2) >> 2] + 40 >> 2];
        _H264SwDecFree($20);
        var $26 = HEAP32[$1 + 20 + ($i << 2) >> 2] + 40;
        HEAP32[$26 >> 2] = 0;
        var $34 = HEAP32[HEAP32[$1 + 20 + ($i << 2) >> 2] + 84 >> 2];
        _H264SwDecFree($34);
        var $40 = HEAP32[$1 + 20 + ($i << 2) >> 2] + 84;
        HEAP32[$40 >> 2] = 0;
        var $46 = HEAP32[$1 + 20 + ($i << 2) >> 2];
        _H264SwDecFree($46);
        HEAP32[$1 + 20 + ($i << 2) >> 2] = 0;
      }
    } while (0);
    var $54 = $i + 1;
    $i = $54;
  }
  $i = 0;
  $56$10 : while (1) {
    if (!($i < 256)) {
      __label__ = 12;
      break $56$10;
    }
    if (HEAP32[$1 + 148 + ($i << 2) >> 2] != 0) {
      __label__ = 9;
    } else {
      __label__ = 10;
    }
    $66$$133$13 : do {
      if (__label__ == 9) {
        var $74 = HEAP32[HEAP32[$1 + 148 + ($i << 2) >> 2] + 20 >> 2];
        _H264SwDecFree($74);
        var $80 = HEAP32[$1 + 148 + ($i << 2) >> 2] + 20;
        HEAP32[$80 >> 2] = 0;
        var $88 = HEAP32[HEAP32[$1 + 148 + ($i << 2) >> 2] + 24 >> 2];
        _H264SwDecFree($88);
        var $94 = HEAP32[$1 + 148 + ($i << 2) >> 2] + 24;
        HEAP32[$94 >> 2] = 0;
        var $102 = HEAP32[HEAP32[$1 + 148 + ($i << 2) >> 2] + 28 >> 2];
        _H264SwDecFree($102);
        var $108 = HEAP32[$1 + 148 + ($i << 2) >> 2] + 28;
        HEAP32[$108 >> 2] = 0;
        var $116 = HEAP32[HEAP32[$1 + 148 + ($i << 2) >> 2] + 44 >> 2];
        _H264SwDecFree($116);
        var $122 = HEAP32[$1 + 148 + ($i << 2) >> 2] + 44;
        HEAP32[$122 >> 2] = 0;
        var $128 = HEAP32[$1 + 148 + ($i << 2) >> 2];
        _H264SwDecFree($128);
        HEAP32[$1 + 148 + ($i << 2) >> 2] = 0;
      }
    } while (0);
    var $136 = $i + 1;
    $i = $136;
  }
  var $141 = HEAP32[$1 + 3376 >> 2];
  _H264SwDecFree($141);
  HEAP32[$1 + 3376 >> 2] = 0;
  var $147 = HEAP32[$1 + 1212 >> 2];
  _H264SwDecFree($147);
  HEAP32[$1 + 1212 >> 2] = 0;
  var $153 = HEAP32[$1 + 1172 >> 2];
  _H264SwDecFree($153);
  HEAP32[$1 + 1172 >> 2] = 0;
  _h264bsdFreeDpb($1 + 1220);
  return;
  return;
}
_h264bsdShutdown["X"] = 1;
function _h264bsdPicWidth($pStorage) {
  var __label__;
  var $1;
  var $2;
  $2 = $pStorage;
  if (HEAP32[$2 + 16 >> 2] != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $7$$13$24 : do {
    if (__label__ == 1) {
      $1 = HEAP32[HEAP32[$2 + 16 >> 2] + 52 >> 2];
    } else if (__label__ == 2) {
      $1 = 0;
    }
  } while (0);
  var $15 = $1;
  return $15;
  return null;
}
function _h264bsdPicHeight($pStorage) {
  var __label__;
  var $1;
  var $2;
  $2 = $pStorage;
  if (HEAP32[$2 + 16 >> 2] != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $7$$13$29 : do {
    if (__label__ == 1) {
      $1 = HEAP32[HEAP32[$2 + 16 >> 2] + 56 >> 2];
    } else if (__label__ == 2) {
      $1 = 0;
    }
  } while (0);
  var $15 = $1;
  return $15;
  return null;
}
function _h264bsdFlushBuffer($pStorage) {
  var $1;
  $1 = $pStorage;
  _h264bsdFlushDpb($1 + 1220);
  return;
  return;
}
function _h264bsdVideoRange($pStorage) {
  var __label__;
  var $1;
  var $2;
  $2 = $pStorage;
  if (HEAP32[$2 + 16 >> 2] != 0) {
    __label__ = 1;
  } else {
    __label__ = 6;
  }
  $7$$40$36 : do {
    if (__label__ == 1) {
      if (!(HEAP32[HEAP32[$2 + 16 >> 2] + 80 >> 2] != 0)) {
        __label__ = 6;
        break $7$$40$36;
      }
      if (!(HEAP32[HEAP32[$2 + 16 >> 2] + 84 >> 2] != 0)) {
        __label__ = 6;
        break $7$$40$36;
      }
      if (!(HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 84 >> 2] + 24 >> 2] != 0)) {
        __label__ = 6;
        break $7$$40$36;
      }
      if (!(HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 84 >> 2] + 32 >> 2] != 0)) {
        __label__ = 6;
        break $7$$40$36;
      }
      $1 = 1;
      __label__ = 7;
      break $7$$40$36;
    }
  } while (0);
  $41$$40$42 : do {
    if (__label__ == 6) {
      $1 = 0;
    }
  } while (0);
  var $42 = $1;
  return $42;
  return null;
}
function _h264bsdMatrixCoefficients($pStorage) {
  var __label__;
  var $1;
  var $2;
  $2 = $pStorage;
  if (HEAP32[$2 + 16 >> 2] != 0) {
    __label__ = 1;
  } else {
    __label__ = 6;
  }
  $7$$47$46 : do {
    if (__label__ == 1) {
      if (!(HEAP32[HEAP32[$2 + 16 >> 2] + 80 >> 2] != 0)) {
        __label__ = 6;
        break $7$$47$46;
      }
      if (!(HEAP32[HEAP32[$2 + 16 >> 2] + 84 >> 2] != 0)) {
        __label__ = 6;
        break $7$$47$46;
      }
      if (!(HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 84 >> 2] + 24 >> 2] != 0)) {
        __label__ = 6;
        break $7$$47$46;
      }
      if (!(HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 84 >> 2] + 36 >> 2] != 0)) {
        __label__ = 6;
        break $7$$47$46;
      }
      $1 = HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 84 >> 2] + 48 >> 2];
      __label__ = 7;
      break $7$$47$46;
    }
  } while (0);
  $48$$47$52 : do {
    if (__label__ == 6) {
      $1 = 2;
    }
  } while (0);
  var $49 = $1;
  return $49;
  return null;
}
_h264bsdMatrixCoefficients["X"] = 1;
function _h264bsdCroppingParams($pStorage, $croppingFlag, $leftOffset, $width, $topOffset, $height) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  $1 = $pStorage;
  $2 = $croppingFlag;
  $3 = $leftOffset;
  $4 = $width;
  $5 = $topOffset;
  $6 = $height;
  if (HEAP32[$1 + 16 >> 2] != 0) {
    __label__ = 1;
  } else {
    __label__ = 3;
  }
  $11$$74$56 : do {
    if (__label__ == 1) {
      if (!(HEAP32[HEAP32[$1 + 16 >> 2] + 60 >> 2] != 0)) {
        __label__ = 3;
        break $11$$74$56;
      }
      HEAP32[$2 >> 2] = 1;
      var $25 = HEAP32[HEAP32[$1 + 16 >> 2] + 64 >> 2] << 1;
      HEAP32[$3 >> 2] = $25;
      var $45 = (HEAP32[HEAP32[$1 + 16 >> 2] + 52 >> 2] << 4) - (HEAP32[HEAP32[$1 + 16 >> 2] + 64 >> 2] + HEAP32[HEAP32[$1 + 16 >> 2] + 68 >> 2] << 1);
      HEAP32[$4 >> 2] = $45;
      var $52 = HEAP32[HEAP32[$1 + 16 >> 2] + 72 >> 2] << 1;
      HEAP32[$5 >> 2] = $52;
      var $72 = (HEAP32[HEAP32[$1 + 16 >> 2] + 56 >> 2] << 4) - (HEAP32[HEAP32[$1 + 16 >> 2] + 72 >> 2] + HEAP32[HEAP32[$1 + 16 >> 2] + 76 >> 2] << 1);
      HEAP32[$6 >> 2] = $72;
      __label__ = 4;
      break $11$$74$56;
    }
  } while (0);
  $80$$74$59 : do {
    if (__label__ == 3) {
      HEAP32[$2 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$6 >> 2] = 0;
    }
  } while (0);
  return;
  return;
}
_h264bsdCroppingParams["X"] = 1;
function _h264bsdSampleAspectRatio($pStorage, $sarWidth, $sarHeight) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $w;
  var $h;
  $1 = $pStorage;
  $2 = $sarWidth;
  $3 = $sarHeight;
  $w = 1;
  $h = 1;
  if (HEAP32[$1 + 16 >> 2] != 0) {
    __label__ = 1;
  } else {
    __label__ = 25;
  }
  $8$$77$63 : do {
    if (__label__ == 1) {
      if (!(HEAP32[HEAP32[$1 + 16 >> 2] + 80 >> 2] != 0)) {
        __label__ = 25;
        break $8$$77$63;
      }
      if (!(HEAP32[HEAP32[$1 + 16 >> 2] + 84 >> 2] != 0)) {
        __label__ = 25;
        break $8$$77$63;
      }
      if (!(HEAP32[HEAP32[HEAP32[$1 + 16 >> 2] + 84 >> 2] >> 2] != 0)) {
        __label__ = 25;
        break $8$$77$63;
      }
      var $38 = HEAP32[HEAP32[HEAP32[$1 + 16 >> 2] + 84 >> 2] + 4 >> 2];
      if ($38 == 0) {
        __label__ = 5;
      } else if ($38 == 1) {
        __label__ = 6;
      } else if ($38 == 2) {
        __label__ = 7;
      } else if ($38 == 3) {
        __label__ = 8;
      } else if ($38 == 4) {
        __label__ = 9;
      } else if ($38 == 5) {
        __label__ = 10;
      } else if ($38 == 6) {
        __label__ = 11;
      } else if ($38 == 7) {
        __label__ = 12;
      } else if ($38 == 8) {
        __label__ = 13;
      } else if ($38 == 9) {
        __label__ = 14;
      } else if ($38 == 10) {
        __label__ = 15;
      } else if ($38 == 11) {
        __label__ = 16;
      } else if ($38 == 12) {
        __label__ = 17;
      } else if ($38 == 13) {
        __label__ = 18;
      } else if ($38 == 255) {
        __label__ = 19;
      } else {
        __label__ = 23;
      }
      $75$$39$$40$$41$$42$$43$$44$$45$$46$$47$$48$$49$$50$$51$$52$$53$68 : do {
        if (__label__ == 23) {
          $w = 0;
          $h = 0;
        } else if (__label__ == 5) {
          $w = 0;
          $h = 0;
        } else if (__label__ == 6) {
          $w = 1;
          $h = 1;
        } else if (__label__ == 7) {
          $w = 12;
          $h = 11;
        } else if (__label__ == 8) {
          $w = 10;
          $h = 11;
        } else if (__label__ == 9) {
          $w = 16;
          $h = 11;
        } else if (__label__ == 10) {
          $w = 40;
          $h = 33;
        } else if (__label__ == 11) {
          $w = 24;
          $h = 11;
        } else if (__label__ == 12) {
          $w = 20;
          $h = 11;
        } else if (__label__ == 13) {
          $w = 32;
          $h = 11;
        } else if (__label__ == 14) {
          $w = 80;
          $h = 33;
        } else if (__label__ == 15) {
          $w = 18;
          $h = 11;
        } else if (__label__ == 16) {
          $w = 15;
          $h = 11;
        } else if (__label__ == 17) {
          $w = 64;
          $h = 33;
        } else if (__label__ == 18) {
          $w = 160;
          $h = 99;
        } else if (__label__ == 19) {
          $w = HEAP32[HEAP32[HEAP32[$1 + 16 >> 2] + 84 >> 2] + 8 >> 2];
          $h = HEAP32[HEAP32[HEAP32[$1 + 16 >> 2] + 84 >> 2] + 12 >> 2];
          if ($w == 0) {
            __label__ = 21;
          } else {
            __label__ = 20;
          }
          $73$$70$85 : do {
            if (__label__ == 20) {
              if ($h == 0) {
                __label__ = 21;
                break $73$$70$85;
              } else {
                __label__ = 22;
                break $73$$70$85;
              }
            }
          } while (0);
          $73$$74$87 : do {
            if (__label__ == 21) {
              $h = 0;
              $w = 0;
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  HEAP32[$2 >> 2] = $w;
  HEAP32[$3 >> 2] = $h;
  return;
  return;
}
_h264bsdSampleAspectRatio["X"] = 1;
function _h264bsdProfile($pStorage) {
  var __label__;
  var $1;
  var $2;
  $2 = $pStorage;
  if (HEAP32[$2 + 16 >> 2] != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $7$$13$93 : do {
    if (__label__ == 1) {
      $1 = HEAP32[HEAP32[$2 + 16 >> 2] >> 2];
    } else if (__label__ == 2) {
      $1 = 0;
    }
  } while (0);
  var $15 = $1;
  return $15;
  return null;
}
function _H264SwDecRelease($decInst) {
  var __label__;
  var $1;
  var $pDecCont;
  $1 = $decInst;
  if ($1 == 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $4$$5$109 : do {
    if (__label__ == 1) {} else if (__label__ == 2) {
      $pDecCont = $1;
      _h264bsdShutdown($pDecCont + 8);
      _H264SwDecFree($pDecCont);
    }
  } while (0);
  return;
  return;
}
function _h264bsdNextOutputPicture($pStorage, $picId, $isIdrPic, $numErrMbs) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $pOut;
  $2 = $pStorage;
  $3 = $picId;
  $4 = $isIdrPic;
  $5 = $numErrMbs;
  var $9 = _h264bsdDpbOutputPicture($2 + 1220);
  $pOut = $9;
  if ($pOut != 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $12$$28$19 : do {
    if (__label__ == 1) {
      var $15 = HEAP32[$pOut + 4 >> 2];
      HEAP32[$3 >> 2] = $15;
      var $19 = HEAP32[$pOut + 12 >> 2];
      HEAP32[$4 >> 2] = $19;
      var $23 = HEAP32[$pOut + 8 >> 2];
      HEAP32[$5 >> 2] = $23;
      $1 = HEAP32[$pOut >> 2];
    } else if (__label__ == 2) {
      $1 = 0;
    }
  } while (0);
  var $30 = $1;
  return $30;
  return null;
}
function _h264bsdCheckValidParamSets($pStorage) {
  var $1;
  $1 = $pStorage;
  var $3 = _h264bsdValidParamSets($1);
  var $5 = $3 == 0 ? 1 : 0;
  return $5;
  return null;
}
function _H264SwDecInit($decInst, $noOutputReordering) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $rv;
  var $pDecCont;
  $2 = $decInst;
  $3 = $noOutputReordering;
  $rv = 0;
  if ($2 == 0) {
    __label__ = 1;
  } else {
    __label__ = 2;
  }
  $6$$7$98 : do {
    if (__label__ == 1) {
      $1 = -1;
    } else if (__label__ == 2) {
      var $8 = _H264SwDecMalloc(3396);
      $pDecCont = $8;
      if ($pDecCont == 0) {
        __label__ = 3;
      } else {
        __label__ = 4;
      }
      $12$$13$101 : do {
        if (__label__ == 3) {
          $1 = -4;
        } else if (__label__ == 4) {
          var $17 = _h264bsdInit($pDecCont + 8, $3);
          $rv = $17;
          if ($rv != 0) {
            __label__ = 5;
          } else {
            __label__ = 6;
          }
          $20$$23$104 : do {
            if (__label__ == 5) {
              _H264SwDecRelease($pDecCont);
              $1 = -4;
            } else if (__label__ == 6) {
              HEAP32[$pDecCont >> 2] = 1;
              HEAP32[$pDecCont + 4 >> 2] = 0;
              HEAP32[$2 >> 2] = $pDecCont;
              $1 = 0;
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $32 = $1;
  return $32;
  return null;
}
function _H264SwDecGetAPIVersion() {
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var $1 = __stackBase__;
  var $ver = __stackBase__ + 8;
  HEAP32[$ver >> 2] = 2;
  HEAP32[$ver + 4 >> 2] = 3;
  var $4 = $1;
  var src, dest, stop, stop4;
  src = $ver;
  dest = $4;
  stop = src + 8;
  if (dest % 4 == src % 4 && 8 > 8) {
    while (src % 4 !== 0 && src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    src >>= 2;
    dest >>= 2;
    stop4 = stop >> 2;
    while (src < stop4) {
      HEAP32[dest++] = HEAP32[src++];
    }
    src <<= 2;
    dest <<= 2;
  }
  while (src < stop) {
    HEAP8[dest++] = HEAP8[src++];
  }
  var $7 = [ HEAPU32[$1 >> 2], HEAPU32[$1 + 4 >> 2] ];
  STACKTOP = __stackBase__;
  return $7.slice(0);
  return null;
}
function _NextPacket($pStrm) {
  var __label__;
  var $1;
  var $2;
  var $index;
  var $maxIndex;
  var $zeroCount;
  var $stream;
  var $byte;
  $2 = $pStrm;
  if (HEAP32[_packetize >> 2] != 0) {
    __label__ = 3;
  } else {
    __label__ = 1;
  }
  $9$$5$130 : do {
    if (__label__ == 1) {
      if (HEAP32[_nalUnitStream >> 2] != 0) {
        __label__ = 3;
        break $9$$5$130;
      }
      $1 = 0;
      __label__ = 33;
      break $9$$5$130;
    }
  } while (0);
  $9$$113$133 : do {
    if (__label__ == 3) {
      $index = 0;
      $stream = HEAP32[$2 >> 2] + HEAP32[_NextPacket_prevIndex >> 2];
      $maxIndex = HEAP32[_streamStop >> 2] - $stream;
      if ($maxIndex == 0) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      $21$$22$135 : do {
        if (__label__ == 4) {
          $1 = 0;
        } else if (__label__ == 5) {
          $23$138 : while (1) {
            var $24 = $index;
            var $25 = $24 + 1;
            $index = $25;
            $byte = HEAP8[$stream + $24];
            if ($byte != 1) {
              __label__ = 8;
            } else {
              var $38 = 0;
              __label__ = 9;
            }
            $33$$37$141 : do {
              if (__label__ == 8) {
                var $38 = $index < $maxIndex;
              }
            } while (0);
            var $38;
            if (!$38) {
              __label__ = 10;
              break $23$138;
            }
          }
          if ($index == $maxIndex) {
            __label__ = 12;
          } else {
            __label__ = 11;
          }
          $46$$43$145 : do {
            if (__label__ == 11) {
              if ($index < 3) {
                __label__ = 12;
                break $46$$43$145;
              }
              if (HEAP32[_nalUnitStream >> 2] != 0) {
                __label__ = 14;
              } else {
                __label__ = 15;
              }
              $50$$57$148 : do {
                if (__label__ == 14) {
                  var $53 = $stream + $index;
                  $stream = $53;
                  var $56 = $maxIndex - $index;
                  $maxIndex = $56;
                  $index = 0;
                }
              } while (0);
              $zeroCount = 0;
              $58$151 : while (1) {
                var $59 = $index;
                var $60 = $59 + 1;
                $index = $60;
                $byte = HEAP8[$stream + $59];
                if ($byte != 0) {
                  __label__ = 18;
                } else {
                  __label__ = 17;
                }
                $69$$66$153 : do {
                  if (__label__ == 17) {
                    var $68 = $zeroCount + 1;
                    $zeroCount = $68;
                  }
                } while (0);
                if ($byte == 1) {
                  __label__ = 19;
                } else {
                  __label__ = 24;
                }
                $73$$90$156 : do {
                  if (__label__ == 19) {
                    if ($zeroCount >= 2) {
                      __label__ = 20;
                      break $58$151;
                    }
                  }
                } while (0);
                if ($byte != 0) {
                  __label__ = 25;
                } else {
                  __label__ = 26;
                }
                $93$$94$159 : do {
                  if (__label__ == 25) {
                    $zeroCount = 0;
                  }
                } while (0);
                if ($index == $maxIndex) {
                  __label__ = 28;
                  break $58$151;
                }
              }
              $76$$99$164 : do {
                if (__label__ == 20) {
                  if ($zeroCount > 3) {
                    __label__ = 21;
                  } else {
                    __label__ = 22;
                  }
                  $79$$84$166 : do {
                    if (__label__ == 21) {
                      var $81 = $index - 4;
                      $index = $81;
                      var $83 = $zeroCount - 3;
                      $zeroCount = $83;
                    } else if (__label__ == 22) {
                      var $88 = $index - ($zeroCount + 1);
                      $index = $88;
                      $zeroCount = 0;
                    }
                  } while (0);
                } else if (__label__ == 28) {}
              } while (0);
              HEAP32[$2 >> 2] = $stream;
              HEAP32[_NextPacket_prevIndex >> 2] = $index;
              if (HEAP32[_nalUnitStream >> 2] != 0) {
                __label__ = 31;
              } else {
                __label__ = 32;
              }
              $107$$111$172 : do {
                if (__label__ == 31) {
                  var $110 = $index - $zeroCount;
                  $index = $110;
                }
              } while (0);
              $1 = $index;
              __label__ = 33;
              break $9$$113$133;
            }
          } while (0);
          _exit(100);
          throw "Reached an unreachable!";
        }
      } while (0);
    }
  } while (0);
  var $114 = $1;
  return $114;
  return null;
}
_NextPacket["X"] = 1;
function _H264SwDecGetInfo($decInst, $pDecInfo) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $pStorage;
  $2 = $decInst;
  $3 = $pDecInfo;
  if ($2 == 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $9$$6$2 : do {
    if (__label__ == 1) {
      if ($3 == 0) {
        __label__ = 2;
        break $9$$6$2;
      }
      $pStorage = $2 + 8;
      if (HEAP32[$pStorage + 16 >> 2] == 0) {
        __label__ = 5;
      } else {
        __label__ = 4;
      }
      $23$$18$5 : do {
        if (__label__ == 4) {
          if (HEAP32[$pStorage + 12 >> 2] == 0) {
            __label__ = 5;
            break $23$$18$5;
          }
          var $26 = _h264bsdPicWidth($pStorage);
          HEAP32[$3 + 4 >> 2] = $26 << 4;
          var $31 = _h264bsdPicHeight($pStorage);
          HEAP32[$3 + 8 >> 2] = $31 << 4;
          var $36 = _h264bsdVideoRange($pStorage);
          HEAP32[$3 + 12 >> 2] = $36;
          var $40 = _h264bsdMatrixCoefficients($pStorage);
          HEAP32[$3 + 16 >> 2] = $40;
          _h264bsdCroppingParams($pStorage, $3 + 28, $3 + 32, $3 + 36, $3 + 40, $3 + 44);
          _h264bsdSampleAspectRatio($pStorage, $3 + 20, $3 + 24);
          var $64 = _h264bsdProfile($pStorage);
          HEAP32[$3 >> 2] = $64;
          $1 = 0;
          __label__ = 7;
          break $9$$6$2;
        }
      } while (0);
      $1 = -6;
      __label__ = 7;
      break $9$$6$2;
    }
  } while (0);
  $9$$67$9 : do {
    if (__label__ == 2) {
      $1 = -1;
    }
  } while (0);
  var $68 = $1;
  return $68;
  return null;
}
_H264SwDecGetInfo["X"] = 1;
function _H264SwDecDecode($decInst, $pInput, $pOutput) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $pDecCont;
  var $strmLen;
  var $numReadBytes = __stackBase__;
  var $tmpStream;
  var $decResult;
  var $returnValue;
  $2 = $decInst;
  $3 = $pInput;
  $4 = $pOutput;
  $decResult = 0;
  $returnValue = 1;
  if ($3 == 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $10$$7$13 : do {
    if (__label__ == 1) {
      if ($4 == 0) {
        __label__ = 2;
        break $10$$7$13;
      }
      if (HEAP32[$3 >> 2] == 0) {
        __label__ = 5;
      } else {
        __label__ = 4;
      }
      $21$$16$16 : do {
        if (__label__ == 4) {
          if (HEAP32[$3 + 4 >> 2] == 0) {
            __label__ = 5;
            break $21$$16$16;
          }
          $pDecCont = $2;
          if ($2 == 0) {
            __label__ = 8;
          } else {
            __label__ = 7;
          }
          $32$$27$19 : do {
            if (__label__ == 7) {
              if (HEAP32[$pDecCont >> 2] == 0) {
                __label__ = 8;
                break $32$$27$19;
              }
              HEAP32[$4 >> 2] = 0;
              HEAP32[$numReadBytes >> 2] = 0;
              $strmLen = HEAP32[$3 + 4 >> 2];
              $tmpStream = HEAP32[$3 >> 2];
              var $44 = HEAP32[$3 + 12 >> 2];
              HEAP32[$pDecCont + 3392 >> 2] = $44;
              $48$22 : while (1) {
                if (HEAP32[$pDecCont >> 2] == 2) {
                  __label__ = 11;
                } else {
                  __label__ = 12;
                }
                $53$$56$24 : do {
                  if (__label__ == 11) {
                    $decResult = 2;
                    HEAP32[$pDecCont >> 2] = 1;
                  } else if (__label__ == 12) {
                    var $63 = HEAP32[$3 + 8 >> 2];
                    var $64 = _h264bsdDecode($pDecCont + 8, $tmpStream, $strmLen, $63, $numReadBytes);
                    $decResult = $64;
                  }
                } while (0);
                var $68 = $tmpStream + HEAP32[$numReadBytes >> 2];
                $tmpStream = $68;
                if ($strmLen - HEAP32[$numReadBytes >> 2] >= 0) {
                  __label__ = 14;
                } else {
                  __label__ = 15;
                }
                $73$$77$28 : do {
                  if (__label__ == 14) {
                    var $76 = $strmLen - HEAP32[$numReadBytes >> 2];
                    $strmLen = $76;
                  } else if (__label__ == 15) {
                    $strmLen = 0;
                  }
                } while (0);
                HEAP32[$4 >> 2] = $tmpStream;
                var $82 = $decResult;
                if ($82 == 2) {
                  __label__ = 17;
                } else if ($82 == 1) {
                  __label__ = 22;
                } else if ($82 == 4) {
                  __label__ = 26;
                } else if ($82 == 5) {
                  __label__ = 30;
                } else {
                  __label__ = 31;
                }
                $136$$83$$115$$125$$135$32 : do {
                  if (__label__ == 31) {} else if (__label__ == 17) {
                    if (HEAP32[$pDecCont + 1288 >> 2] != 0) {
                      __label__ = 18;
                    } else {
                      __label__ = 20;
                    }
                    $91$$113$35 : do {
                      if (__label__ == 18) {
                        if (!(HEAP32[$pDecCont + 1244 >> 2] != HEAP32[$pDecCont + 1248 >> 2])) {
                          __label__ = 20;
                          break $91$$113$35;
                        }
                        HEAP32[$pDecCont + 1288 >> 2] = 0;
                        HEAP32[$pDecCont >> 2] = 2;
                        $returnValue = 3;
                        $strmLen = 0;
                        __label__ = 21;
                        break $91$$113$35;
                      }
                    } while (0);
                    $114$$113$38 : do {
                      if (__label__ == 20) {
                        $returnValue = 4;
                        $strmLen = 0;
                      }
                    } while (0);
                  } else if (__label__ == 22) {
                    var $119 = HEAP32[$pDecCont + 4 >> 2] + 1;
                    HEAP32[$pDecCont + 4 >> 2] = $119;
                    if ($strmLen == 0) {
                      __label__ = 23;
                    } else {
                      __label__ = 24;
                    }
                    $122$$123$42 : do {
                      if (__label__ == 23) {
                        $returnValue = 2;
                      } else if (__label__ == 24) {
                        $returnValue = 3;
                      }
                    } while (0);
                    $strmLen = 0;
                  } else if (__label__ == 26) {
                    var $128 = _h264bsdCheckValidParamSets($pDecCont + 8);
                    if ($128 != 0) {
                      __label__ = 29;
                    } else {
                      __label__ = 27;
                    }
                    $134$$130$47 : do {
                      if (__label__ == 27) {
                        if (!($strmLen == 0)) {
                          __label__ = 29;
                          break $134$$130$47;
                        }
                        $returnValue = -2;
                      }
                    } while (0);
                  } else if (__label__ == 30) {
                    $returnValue = -4;
                    $strmLen = 0;
                  }
                } while (0);
                if (!($strmLen != 0)) {
                  __label__ = 34;
                  break $48$22;
                }
              }
              $1 = $returnValue;
              __label__ = 35;
              break $10$$7$13;
            }
          } while (0);
          $1 = -3;
          __label__ = 35;
          break $10$$7$13;
        }
      } while (0);
      $1 = -1;
      __label__ = 35;
      break $10$$7$13;
    }
  } while (0);
  $10$$143$57 : do {
    if (__label__ == 2) {
      $1 = -1;
    }
  } while (0);
  var $144 = $1;
  STACKTOP = __stackBase__;
  return $144;
  return null;
}
_H264SwDecDecode["X"] = 1;
function _H264SwDecNextPicture($decInst, $pOutput, $flushBuffer) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $pDecCont;
  var $numErrMbs = __stackBase__;
  var $isIdrPic = __stackBase__ + 4;
  var $picId = __stackBase__ + 8;
  var $pOutPic;
  $2 = $decInst;
  $3 = $pOutput;
  $4 = $flushBuffer;
  if ($2 == 0) {
    __label__ = 2;
  } else {
    __label__ = 1;
  }
  $10$$7$62 : do {
    if (__label__ == 1) {
      if ($3 == 0) {
        __label__ = 2;
        break $10$$7$62;
      }
      $pDecCont = $2;
      if ($4 != 0) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      $16$$19$65 : do {
        if (__label__ == 4) {
          _h264bsdFlushBuffer($pDecCont + 8);
        }
      } while (0);
      var $22 = _h264bsdNextOutputPicture($pDecCont + 8, $picId, $isIdrPic, $numErrMbs);
      $pOutPic = $22;
      if ($pOutPic == 0) {
        __label__ = 6;
      } else {
        __label__ = 7;
      }
      $26$$27$68 : do {
        if (__label__ == 6) {
          $1 = 0;
          __label__ = 8;
          break $10$$7$62;
        } else if (__label__ == 7) {
          HEAP32[$3 >> 2] = $pOutPic;
          var $31 = HEAP32[$picId >> 2];
          HEAP32[$3 + 4 >> 2] = $31;
          var $34 = HEAP32[$isIdrPic >> 2];
          HEAP32[$3 + 8 >> 2] = $34;
          var $37 = HEAP32[$numErrMbs >> 2];
          HEAP32[$3 + 12 >> 2] = $37;
          $1 = 2;
          __label__ = 8;
          break $10$$7$62;
        }
      } while (0);
    }
  } while (0);
  $10$$40$71 : do {
    if (__label__ == 2) {
      $1 = -1;
    }
  } while (0);
  var $41 = $1;
  STACKTOP = __stackBase__;
  return $41;
  return null;
}
_H264SwDecNextPicture["X"] = 1;
function _runMainLoop() {
  var __label__;
  $1$75 : while (1) {
    var $2 = _mainLoopIteration();
    if (!(HEAPU32[_decInput + 4 >> 2] > 0)) {
      __label__ = 3;
      break $1$75;
    }
  }
  return;
  return;
}
function _main($argc, $argv) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 256;
  var __label__;
  var $1;
  var $2;
  var $3;
  var $finput;
  var $outFileName = __stackBase__;
  $1 = 0;
  $2 = $argc;
  $3 = $argv;
  var dest, stop, stop4, value;
  dest = $outFileName;
  stop = dest + 256;
  value = 0;
  if (value < 0) value += 256;
  value = value + (value << 8) + (value << 16) + value * 16777216;
  while (dest % 4 !== 0 && dest < stop) {
    HEAP8[dest++] = 0;
  }
  dest >>= 2;
  stop4 = stop >> 2;
  while (dest < stop4) {
    HEAP32[dest++] = value;
  }
  dest <<= 2;
  while (dest < stop) {
    HEAP8[dest++] = 0;
  }
  var $5 = _H264SwDecGetAPIVersion();
  HEAP32[_decVer >> 2] = $5.slice(0).slice(0)[0], HEAP32[_decVer + 4 >> 2] = $5.slice(0).slice(0)[1];
  if ($2 > 1) {
    __label__ = 1;
  } else {
    __label__ = 3;
  }
  $8$$15$80 : do {
    if (__label__ == 1) {
      var $11 = HEAP32[$3 + 4 >> 2];
      var $12 = _strcmp($11, __str);
      if (!($12 == 0)) {
        __label__ = 3;
        break $8$$15$80;
      }
      $1 = 0;
      __label__ = 35;
      break $8$$15$80;
    }
  } while (0);
  $142$$15$83 : do {
    if (__label__ == 3) {
      if ($2 < 2) {
        __label__ = 4;
      } else {
        __label__ = 5;
      }
      $18$$19$85 : do {
        if (__label__ == 4) {
          $1 = 0;
        } else if (__label__ == 5) {
          HEAP32[_i >> 2] = 1;
          $20$88 : while (1) {
            if (!(HEAPU32[_i >> 2] < $2 - 1)) {
              __label__ = 26;
              break $20$88;
            }
            var $29 = HEAP32[$3 + (HEAP32[_i >> 2] << 2) >> 2];
            var $30 = _strncmp($29, __str1, 2);
            if ($30 == 0) {
              __label__ = 8;
            } else {
              __label__ = 9;
            }
            $32$$39$91 : do {
              if (__label__ == 8) {
                var $37 = HEAP32[$3 + (HEAP32[_i >> 2] << 2) >> 2] + 2;
                var $38 = _atoi($37);
                HEAP32[_maxNumPics >> 2] = $38;
              } else if (__label__ == 9) {
                var $43 = HEAP32[$3 + (HEAP32[_i >> 2] << 2) >> 2];
                var $44 = _strncmp($43, __str2, 2);
                if ($44 == 0) {
                  __label__ = 10;
                } else {
                  __label__ = 11;
                }
                $46$$54$94 : do {
                  if (__label__ == 10) {
                    var $47 = $outFileName;
                    var $52 = HEAP32[$3 + (HEAP32[_i >> 2] << 2) >> 2] + 2;
                    var $53 = _strcpy($47, $52);
                  } else if (__label__ == 11) {
                    var $58 = HEAP32[$3 + (HEAP32[_i >> 2] << 2) >> 2];
                    var $59 = _strcmp($58, __str3);
                    if ($59 == 0) {
                      __label__ = 12;
                    } else {
                      __label__ = 13;
                    }
                    $61$$62$97 : do {
                      if (__label__ == 12) {
                        HEAP32[_packetize >> 2] = 1;
                      } else if (__label__ == 13) {
                        var $66 = HEAP32[$3 + (HEAP32[_i >> 2] << 2) >> 2];
                        var $67 = _strcmp($66, __str4);
                        if ($67 == 0) {
                          __label__ = 14;
                        } else {
                          __label__ = 15;
                        }
                        $69$$70$100 : do {
                          if (__label__ == 14) {
                            HEAP32[_nalUnitStream >> 2] = 1;
                          } else if (__label__ == 15) {
                            var $74 = HEAP32[$3 + (HEAP32[_i >> 2] << 2) >> 2];
                            var $75 = _strcmp($74, __str5);
                            if ($75 == 0) {
                              __label__ = 16;
                            } else {
                              __label__ = 17;
                            }
                            $77$$78$103 : do {
                              if (__label__ == 16) {
                                HEAP32[_cropDisplay >> 2] = 1;
                              } else if (__label__ == 17) {
                                var $82 = HEAP32[$3 + (HEAP32[_i >> 2] << 2) >> 2];
                                var $83 = _strcmp($82, __str6);
                                if ($83 == 0) {
                                  __label__ = 18;
                                } else {
                                  __label__ = 19;
                                }
                                $85$$86$106 : do {
                                  if (__label__ == 18) {
                                    HEAP32[_disableOutputReordering >> 2] = 1;
                                  }
                                } while (0);
                              }
                            } while (0);
                          }
                        } while (0);
                      }
                    } while (0);
                  }
                } while (0);
              }
            } while (0);
            var $94 = HEAP32[_i >> 2] + 1;
            HEAP32[_i >> 2] = $94;
          }
          var $100 = HEAP32[$3 + ($2 - 1 << 2) >> 2];
          var $101 = _fopen($100, __str7);
          $finput = $101;
          if ($finput == 0) {
            __label__ = 27;
          } else {
            __label__ = 28;
          }
          $104$$105$116 : do {
            if (__label__ == 27) {
              $1 = -1;
            } else if (__label__ == 28) {
              var $107 = _fseek($finput, 0, 2);
              var $109 = _ftell($finput);
              HEAP32[_strmLen >> 2] = $109;
              _rewind($finput);
              var $112 = HEAP32[_strmLen >> 2];
              var $113 = _malloc($112);
              HEAP32[_byteStrmStart >> 2] = $113;
              if (HEAP32[_byteStrmStart >> 2] == 0) {
                __label__ = 29;
              } else {
                __label__ = 30;
              }
              $116$$117$119 : do {
                if (__label__ == 29) {
                  $1 = -1;
                } else if (__label__ == 30) {
                  var $118 = HEAP32[_byteStrmStart >> 2];
                  var $119 = HEAP32[_strmLen >> 2];
                  var $121 = _fread($118, 1, $119, $finput);
                  var $123 = _fclose($finput);
                  var $124 = HEAP32[_disableOutputReordering >> 2];
                  var $125 = _H264SwDecInit(_decInst, $124);
                  HEAP32[_ret >> 2] = $125;
                  if (HEAP32[_ret >> 2] != 0) {
                    __label__ = 31;
                  } else {
                    __label__ = 32;
                  }
                  $128$$130$122 : do {
                    if (__label__ == 31) {
                      $1 = -1;
                    } else if (__label__ == 32) {
                      var $131 = _SDL_Init(32);
                      var $134 = HEAP32[_byteStrmStart >> 2] + HEAP32[_strmLen >> 2];
                      HEAP32[_streamStop >> 2] = $134;
                      var $135 = HEAP32[_byteStrmStart >> 2];
                      HEAP32[_decInput >> 2] = $135;
                      var $136 = HEAP32[_strmLen >> 2];
                      HEAP32[_decInput + 4 >> 2] = $136;
                      HEAP32[_decInput + 12 >> 2] = 0;
                      var $137 = _NextPacket(_decInput);
                      HEAP32[_tmp >> 2] = $137;
                      if ($137 != 0) {
                        __label__ = 33;
                      } else {
                        __label__ = 34;
                      }
                      $139$$141$125 : do {
                        if (__label__ == 33) {
                          var $140 = HEAP32[_tmp >> 2];
                          HEAP32[_decInput + 4 >> 2] = $140;
                        }
                      } while (0);
                      HEAP32[_picDisplayNumber >> 2] = 1;
                      HEAP32[_picDecodeNumber >> 2] = 1;
                      _runMainLoop();
                      $1 = 0;
                    }
                  } while (0);
                }
              } while (0);
            }
          } while (0);
        }
      } while (0);
    }
  } while (0);
  var $143 = $1;
  STACKTOP = __stackBase__;
  return $143;
  return null;
}
Module["_main"] = _main;
_main["X"] = 1;
function _CropPicture($pOutImage, $pInImage, $picWidth, $picHeight, $pCropParams) {
  var __label__;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $i;
  var $j;
  var $outWidth;
  var $outHeight;
  var $pOut;
  var $pIn;
  $2 = $pOutImage;
  $3 = $pInImage;
  $4 = $picWidth;
  $5 = $picHeight;
  $6 = $pCropParams;
  if ($2 == 0) {
    __label__ = 5;
  } else {
    __label__ = 1;
  }
  $21$$9$31 : do {
    if (__label__ == 1) {
      if ($3 == 0) {
        __label__ = 5;
        break $21$$9$31;
      }
      if ($6 == 0) {
        __label__ = 5;
        break $21$$9$31;
      }
      if (!($4 != 0)) {
        __label__ = 5;
        break $21$$9$31;
      }
      if (!($5 != 0)) {
        __label__ = 5;
        break $21$$9$31;
      }
      if (HEAP32[$6 >> 2] + HEAP32[$6 + 4 >> 2] > $4) {
        __label__ = 8;
      } else {
        __label__ = 7;
      }
      $43$$33$37 : do {
        if (__label__ == 7) {
          if (HEAP32[$6 + 8 >> 2] + HEAP32[$6 + 12 >> 2] > $5) {
            __label__ = 8;
            break $43$$33$37;
          }
          $outWidth = HEAP32[$6 + 4 >> 2];
          $outHeight = HEAP32[$6 + 12 >> 2];
          $pIn = $3 + HEAP32[$6 + 8 >> 2] * $4 + HEAP32[$6 >> 2];
          $pOut = $2;
          $i = $outHeight;
          $65$40 : while (1) {
            if (!($i != 0)) {
              __label__ = 17;
              break $65$40;
            }
            $j = $outWidth;
            $70$43 : while (1) {
              if (!($j != 0)) {
                __label__ = 15;
                break $70$43;
              }
              var $74 = $pIn;
              var $75 = $74 + 1;
              $pIn = $75;
              var $76 = HEAP8[$74];
              var $77 = $pOut;
              var $78 = $77 + 1;
              $pOut = $78;
              HEAP8[$77] = $76;
              var $81 = $j - 1;
              $j = $81;
            }
            var $87 = $pIn + ($4 - $outWidth);
            $pIn = $87;
            var $90 = $i - 1;
            $i = $90;
          }
          var $93 = $outWidth >>> 1;
          $outWidth = $93;
          var $95 = $outHeight >>> 1;
          $outHeight = $95;
          var $100 = $3 + $4 * $5;
          var $105 = HEAP32[$6 + 8 >> 2] * $4;
          var $106 = Math.floor($105 / 4);
          var $107 = $100 + $106;
          var $110 = HEAPU32[$6 >> 2];
          var $111 = Math.floor($110 / 2);
          $pIn = $107 + $111;
          $i = $outHeight;
          $114$50 : while (1) {
            if (!($i != 0)) {
              __label__ = 25;
              break $114$50;
            }
            $j = $outWidth;
            $119$53 : while (1) {
              if (!($j != 0)) {
                __label__ = 23;
                break $119$53;
              }
              var $123 = $pIn;
              var $124 = $123 + 1;
              $pIn = $124;
              var $125 = HEAP8[$123];
              var $126 = $pOut;
              var $127 = $126 + 1;
              $pOut = $127;
              HEAP8[$126] = $125;
              var $130 = $j - 1;
              $j = $130;
            }
            var $133 = Math.floor($4 / 2);
            var $137 = $pIn + ($133 - $outWidth);
            $pIn = $137;
            var $140 = $i - 1;
            $i = $140;
          }
          var $142 = $3;
          var $147 = Math.floor($4 * 5 * $5 / 4);
          var $148 = $142 + $147;
          var $153 = HEAP32[$6 + 8 >> 2] * $4;
          var $154 = Math.floor($153 / 4);
          var $155 = $148 + $154;
          var $158 = HEAPU32[$6 >> 2];
          var $159 = Math.floor($158 / 2);
          $pIn = $155 + $159;
          $i = $outHeight;
          $162$60 : while (1) {
            if (!($i != 0)) {
              __label__ = 33;
              break $162$60;
            }
            $j = $outWidth;
            $167$63 : while (1) {
              if (!($j != 0)) {
                __label__ = 31;
                break $167$63;
              }
              var $171 = $pIn;
              var $172 = $171 + 1;
              $pIn = $172;
              var $173 = HEAP8[$171];
              var $174 = $pOut;
              var $175 = $174 + 1;
              $pOut = $175;
              HEAP8[$174] = $173;
              var $178 = $j - 1;
              $j = $178;
            }
            var $181 = Math.floor($4 / 2);
            var $185 = $pIn + ($181 - $outWidth);
            $pIn = $185;
            var $188 = $i - 1;
            $i = $188;
          }
          $1 = 0;
          __label__ = 34;
          break $21$$9$31;
        }
      } while (0);
      $1 = 1;
      __label__ = 34;
      break $21$$9$31;
    }
  } while (0);
  $21$$190$71 : do {
    if (__label__ == 5) {
      $1 = 1;
    }
  } while (0);
  var $191 = $1;
  return $191;
  return null;
}
_CropPicture["X"] = 1;
function _DrawOutput($data, $picWidth, $picHeight) {
  var $1;
  var $2;
  var $3;
  var $size;
  $1 = $data;
  $2 = $picWidth;
  $3 = $picHeight;
  $size = $2 * $3;
  _paint($1, $1 + $size, $1 + $size + ($size >>> 2), $2, $3);
  _broadwayOnFrameDecoded();
  return;
  return;
}
function _terminate() {
  var __label__;
  var $1;
  $2$2 : while (1) {
    var $3 = HEAP32[_decInst >> 2];
    var $4 = _H264SwDecNextPicture($3, _decPicture, 1);
    if (!($4 == 2)) {
      __label__ = 14;
      break $2$2;
    }
    if (HEAP32[_picDisplayNumber >> 2] != HEAP32[_decPicture + 4 >> 2]) {
      __label__ = 3;
    } else {
      __label__ = 4;
    }
    $10$$11$5 : do {
      if (__label__ == 3) {}
    } while (0);
    if (HEAP32[_decPicture + 12 >> 2] != 0) {
      __label__ = 5;
    } else {
      __label__ = 6;
    }
    $14$$15$8 : do {
      if (__label__ == 5) {} else if (__label__ == 6) {}
    } while (0);
    var $19 = HEAP32[_numErrors >> 2] + HEAP32[_decPicture + 12 >> 2];
    HEAP32[_numErrors >> 2] = $19;
    var $21 = HEAP32[_picDisplayNumber >> 2] + 1;
    HEAP32[_picDisplayNumber >> 2] = $21;
    var $23 = HEAP32[_decPicture >> 2];
    HEAP32[_imageData >> 2] = $23;
    if (HEAP32[_cropDisplay >> 2] != 0) {
      __label__ = 8;
    } else {
      __label__ = 12;
    }
    $26$$42$12 : do {
      if (__label__ == 8) {
        if (!(HEAP32[_decInfo + 28 >> 2] != 0)) {
          __label__ = 12;
          break $26$$42$12;
        }
        var $30 = HEAP32[_tmpImage >> 2];
        var $31 = HEAP32[_imageData >> 2];
        var $32 = HEAP32[_decInfo + 4 >> 2];
        var $33 = HEAP32[_decInfo + 8 >> 2];
        var $34 = _CropPicture($30, $31, $32, $33, _decInfo + 32);
        HEAP32[_tmp >> 2] = $34;
        if (HEAP32[_tmp >> 2] != 0) {
          __label__ = 10;
          break $2$2;
        }
        var $39 = HEAP32[_tmpImage >> 2];
        var $40 = HEAP32[_decInfo + 4 >> 2];
        var $41 = HEAP32[_decInfo + 8 >> 2];
        _DrawOutput($39, $40, $41);
        __label__ = 13;
        break $26$$42$12;
      }
    } while (0);
    $46$$42$16 : do {
      if (__label__ == 12) {
        var $43 = HEAP32[_imageData >> 2];
        var $44 = HEAP32[_decInfo + 4 >> 2];
        var $45 = HEAP32[_decInfo + 8 >> 2];
        _DrawOutput($43, $44, $45);
      }
    } while (0);
  }
  $47$$37$19 : do {
    if (__label__ == 14) {
      _SDL_Quit();
      var $48 = HEAP32[_decInst >> 2];
      _H264SwDecRelease($48);
      if (HEAP32[_foutput >> 2] != 0) {
        __label__ = 15;
      } else {
        __label__ = 16;
      }
      $51$$54$21 : do {
        if (__label__ == 15) {
          var $52 = HEAP32[_foutput >> 2];
          var $53 = _fclose($52);
        }
      } while (0);
      if (HEAP32[_numErrors >> 2] != 0) {
        __label__ = 18;
      } else {
        __label__ = 17;
      }
      $62$$59$24 : do {
        if (__label__ == 17) {
          if (HEAP32[_picDecodeNumber >> 2] == 1) {
            __label__ = 18;
            break $62$$59$24;
          }
          $1 = 0;
          __label__ = 20;
          break $47$$37$19;
        }
      } while (0);
      $1 = 1;
    } else if (__label__ == 10) {
      $1 = -1;
    }
  } while (0);
  var $65 = $1;
  return $65;
  return null;
}
_terminate["X"] = 1;
function _mainLoopIteration() {
  var __label__;
  var $1;
  var $2 = HEAP32[_picDecodeNumber >> 2];
  HEAP32[_decInput + 8 >> 2] = $2;
  var $3 = HEAP32[_decInst >> 2];
  var $4 = _H264SwDecDecode($3, _decInput, _decOutput);
  HEAP32[_ret >> 2] = $4;
  var $5 = HEAP32[_ret >> 2];
  if ($5 == 4) {
    __label__ = 1;
  } else if ($5 == 3) {
    __label__ = 12;
  } else if ($5 == 2) {
    __label__ = 13;
  } else if ($5 == 1) {
    __label__ = 33;
  } else if ($5 == -2) {
    __label__ = 33;
  } else {
    __label__ = 34;
  }
  $127$$6$$54$$63$$125$76 : do {
    if (__label__ == 34) {
      $1 = -1;
      __label__ = 35;
      break $127$$6$$54$$63$$125$76;
    } else if (__label__ == 1) {
      var $7 = HEAP32[_decInst >> 2];
      var $8 = _H264SwDecGetInfo($7, _decInfo);
      HEAP32[_ret >> 2] = $8;
      if (HEAP32[_ret >> 2] != 0) {
        __label__ = 2;
      } else {
        __label__ = 3;
      }
      $11$$12$79 : do {
        if (__label__ == 2) {
          $1 = -1;
          __label__ = 35;
          break $127$$6$$54$$63$$125$76;
        } else if (__label__ == 3) {
          if (HEAP32[_screen >> 2] != 0) {
            __label__ = 5;
          } else {
            __label__ = 4;
          }
          $19$$15$82 : do {
            if (__label__ == 4) {
              var $16 = HEAP32[_decInfo + 4 >> 2];
              var $17 = HEAP32[_decInfo + 8 >> 2];
              var $18 = _SDL_SetVideoMode($16, $17, 32, 150994945);
              HEAP32[_screen >> 2] = $18;
            }
          } while (0);
          if (HEAP32[_cropDisplay >> 2] != 0) {
            __label__ = 6;
          } else {
            __label__ = 10;
          }
          $22$$38$85 : do {
            if (__label__ == 6) {
              if (!(HEAP32[_decInfo + 28 >> 2] != 0)) {
                __label__ = 10;
                break $22$$38$85;
              }
              var $28 = HEAP32[_decInfo + 36 >> 2] * HEAP32[_decInfo + 44 >> 2];
              HEAP32[_picSize >> 2] = $28;
              var $30 = HEAP32[_picSize >> 2] * 3;
              var $31 = Math.floor($30 / 2);
              HEAP32[_picSize >> 2] = $31;
              var $32 = HEAP32[_picSize >> 2];
              var $33 = _malloc($32);
              HEAP32[_tmpImage >> 2] = $33;
              if (HEAP32[_tmpImage >> 2] == 0) {
                __label__ = 8;
              } else {
                __label__ = 9;
              }
              $36$$37$88 : do {
                if (__label__ == 8) {
                  $1 = -1;
                  __label__ = 35;
                  break $127$$6$$54$$63$$125$76;
                } else if (__label__ == 9) {
                  __label__ = 11;
                  break $22$$38$85;
                }
              } while (0);
            }
          } while (0);
          $45$$38$91 : do {
            if (__label__ == 10) {
              var $41 = HEAP32[_decInfo + 4 >> 2] * HEAP32[_decInfo + 8 >> 2];
              HEAP32[_picSize >> 2] = $41;
              var $43 = HEAP32[_picSize >> 2] * 3;
              var $44 = Math.floor($43 / 2);
              HEAP32[_picSize >> 2] = $44;
            }
          } while (0);
          var $52 = HEAP32[_decInput + 4 >> 2] - (HEAP32[_decOutput >> 2] - HEAP32[_decInput >> 2]);
          HEAP32[_decInput + 4 >> 2] = $52;
          var $53 = HEAP32[_decOutput >> 2];
          HEAP32[_decInput >> 2] = $53;
          __label__ = 35;
          break $127$$6$$54$$63$$125$76;
        }
      } while (0);
    } else if (__label__ == 12) {
      var $61 = HEAP32[_decInput + 4 >> 2] - (HEAP32[_decOutput >> 2] - HEAP32[_decInput >> 2]);
      HEAP32[_decInput + 4 >> 2] = $61;
      var $62 = HEAP32[_decOutput >> 2];
      HEAP32[_decInput >> 2] = $62;
      __label__ = 13;
      break $127$$6$$54$$63$$125$76;
    } else if (__label__ == 33) {
      var $126 = _NextPacket(_decInput);
      HEAP32[_decInput + 4 >> 2] = $126;
      __label__ = 35;
      break $127$$6$$54$$63$$125$76;
    }
  } while (0);
  $128$$63$96 : do {
    if (__label__ == 13) {
      if (HEAP32[_ret >> 2] == 2) {
        __label__ = 14;
      } else {
        __label__ = 15;
      }
      $66$$68$98 : do {
        if (__label__ == 14) {
          var $67 = _NextPacket(_decInput);
          HEAP32[_decInput + 4 >> 2] = $67;
        }
      } while (0);
      if (HEAP32[_maxNumPics >> 2] != 0) {
        __label__ = 16;
      } else {
        __label__ = 18;
      }
      $71$$76$101 : do {
        if (__label__ == 16) {
          if (!(HEAP32[_picDecodeNumber >> 2] == HEAP32[_maxNumPics >> 2])) {
            __label__ = 18;
            break $71$$76$101;
          }
          HEAP32[_decInput + 4 >> 2] = 0;
        }
      } while (0);
      var $78 = HEAP32[_picDecodeNumber >> 2] + 1;
      HEAP32[_picDecodeNumber >> 2] = $78;
      $79$105 : while (1) {
        var $80 = HEAP32[_decInst >> 2];
        var $81 = _H264SwDecNextPicture($80, _decPicture, 0);
        if (!($81 == 2)) {
          __label__ = 32;
          break $79$105;
        }
        if (HEAP32[_picDisplayNumber >> 2] != HEAP32[_decPicture + 4 >> 2]) {
          __label__ = 21;
        } else {
          __label__ = 22;
        }
        $87$$88$108 : do {
          if (__label__ == 21) {}
        } while (0);
        if (HEAP32[_decPicture + 12 >> 2] != 0) {
          __label__ = 23;
        } else {
          __label__ = 24;
        }
        $91$$92$111 : do {
          if (__label__ == 23) {} else if (__label__ == 24) {}
        } while (0);
        var $96 = HEAP32[_numErrors >> 2] + HEAP32[_decPicture + 12 >> 2];
        HEAP32[_numErrors >> 2] = $96;
        var $98 = HEAP32[_picDisplayNumber >> 2] + 1;
        HEAP32[_picDisplayNumber >> 2] = $98;
        var $100 = HEAP32[_decPicture >> 2];
        HEAP32[_imageData >> 2] = $100;
        if (HEAP32[_cropDisplay >> 2] != 0) {
          __label__ = 26;
        } else {
          __label__ = 30;
        }
        $103$$119$115 : do {
          if (__label__ == 26) {
            if (!(HEAP32[_decInfo + 28 >> 2] != 0)) {
              __label__ = 30;
              break $103$$119$115;
            }
            var $107 = HEAP32[_tmpImage >> 2];
            var $108 = HEAP32[_imageData >> 2];
            var $109 = HEAP32[_decInfo + 4 >> 2];
            var $110 = HEAP32[_decInfo + 8 >> 2];
            var $111 = _CropPicture($107, $108, $109, $110, _decInfo + 32);
            HEAP32[_tmp >> 2] = $111;
            if (HEAP32[_tmp >> 2] != 0) {
              __label__ = 28;
              break $79$105;
            }
            var $116 = HEAP32[_tmpImage >> 2];
            var $117 = HEAP32[_decInfo + 4 >> 2];
            var $118 = HEAP32[_decInfo + 8 >> 2];
            _DrawOutput($116, $117, $118);
            __label__ = 31;
            break $103$$119$115;
          }
        } while (0);
        $123$$119$119 : do {
          if (__label__ == 30) {
            var $120 = HEAP32[_imageData >> 2];
            var $121 = HEAP32[_decInfo + 4 >> 2];
            var $122 = HEAP32[_decInfo + 8 >> 2];
            _DrawOutput($120, $121, $122);
          }
        } while (0);
      }
      $124$$114$122 : do {
        if (__label__ == 32) {} else if (__label__ == 28) {
          $1 = -1;
        }
      } while (0);
    }
  } while (0);
  var $129 = $1;
  return $129;
  return null;
}
_mainLoopIteration["X"] = 1;
function _broadwayOnFrameDecoded() {
  var $1 = _printf(__str8, allocate(1, "i32", ALLOC_STACK));
  return;
  return;
}
function _broadwaySetPosition($position) {
  var $1;
  $1 = $position;
  var $4 = _printf(__str9, allocate([ $1, 0, 0, 0, 0, 0, 0, 0 ], [ "double", 0, 0, 0, 0, 0, 0, 0 ], ALLOC_STACK));
  return;
  return;
}
function _broadwayGetPosition() {
  var $1 = _printf(__str10, allocate(1, "i32", ALLOC_STACK));
  return 0;
  return null;
}
function _H264SwDecTrace($string) {
  var $1;
  $1 = $string;
  var $3 = _printf(__str11, allocate([ $1, 0, 0, 0 ], [ "i8*", 0, 0, 0 ], ALLOC_STACK));
  return;
  return;
}
function _H264SwDecFree($ptr) {
  var $1;
  $1 = $ptr;
  return;
  return;
}
function _H264SwDecMemcpy($dest, $src, $count) {
  var $1;
  var $2;
  var $3;
  $1 = $dest;
  $2 = $src;
  $3 = $count;
  var src, dest, stop, stop4;
  src = $2;
  dest = $1;
  stop = src + $3;
  if (dest % 4 == src % 4 && $3 > 8) {
    while (src % 4 !== 0 && src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    src >>= 2;
    dest >>= 2;
    stop4 = stop >> 2;
    while (src < stop4) {
      HEAP32[dest++] = HEAP32[src++];
    }
    src <<= 2;
    dest <<= 2;
  }
  while (src < stop) {
    HEAP8[dest++] = HEAP8[src++];
  }
  return;
  return;
}
function _H264SwDecMemset($ptr, $value, $count) {
  var $1;
  var $2;
  var $3;
  $1 = $ptr;
  $2 = $value;
  $3 = $count;
  var $6 = $2 & 255;
  var dest, stop, stop4, value;
  dest = $1;
  stop = dest + $3;
  value = $6;
  if (value < 0) value += 256;
  value = value + (value << 8) + (value << 16) + value * 16777216;
  while (dest % 4 !== 0 && dest < stop) {
    HEAP8[dest++] = $6;
  }
  dest >>= 2;
  stop4 = stop >> 2;
  while (dest < stop4) {
    HEAP32[dest++] = value;
  }
  dest <<= 2;
  while (dest < stop) {
    HEAP8[dest++] = $6;
  }
  return;
  return;
}
function _H264SwDecMalloc($size) {
  var $1;
  $1 = $size;
  var $3 = _malloc($1);
  return $3;
  return null;
}
var _llvm_dbg_declare;
function _memcpy(dest, src, num, idunno) {
  var src, dest, stop, stop4;
  src = src;
  dest = dest;
  stop = src + num;
  if (dest % 4 == src % 4 && num > 8) {
    while (src % 4 !== 0 && src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    src >>= 2;
    dest >>= 2;
    stop4 = stop >> 2;
    while (src < stop4) {
      HEAP32[dest++] = HEAP32[src++];
    }
    src <<= 2;
    dest <<= 2;
  }
  while (src < stop) {
    HEAP8[dest++] = HEAP8[src++];
  }
}
var _llvm_memcpy_p0i8_p0i8_i32 = _memcpy;
function _memset(ptr, value, num) {
  var dest, stop, stop4, fast, value;
  dest = ptr;
  stop = dest + num;
  value = value;
  if (value < 0) value += 256;
  value = value + (value << 8) + (value << 16) + value * 16777216;
  while (dest % 4 !== 0 && dest < stop) {
    HEAP8[dest++] = value;
  }
  dest >>= 2;
  stop4 = stop >> 2;
  while (dest < stop4) {
    HEAP32[dest++] = value;
  }
  dest <<= 2;
  while (dest < stop) {
    HEAP8[dest++] = value;
  }
}
var _llvm_memset_p0i8_i32 = _memset;
function _strncmp(px, py, n) {
  var i = 0;
  while (i < n) {
    var x = HEAP8[px + i];
    var y = HEAP8[py + i];
    if (x == y && x == 0) return 0;
    if (x == 0) return -1;
    if (y == 0) return 1;
    if (x == y) {
      i++;
      continue;
    } else {
      return x > y ? 1 : -1;
    }
  }
  return 0;
}
function _strcmp(px, py) {
  return _strncmp(px, py, TOTAL_MEMORY);
}
function _isspace(chr) {
  return chr in {
    32: 0,
    9: 0,
    10: 0,
    11: 0,
    12: 0,
    13: 0
  };
}
function _isdigit(chr) {
  return chr >= "0".charCodeAt(0) && chr <= "9".charCodeAt(0);
}
function _atoi(s) {
  var c;
  while ((c = HEAP8[s]) && _isspace(c)) s++;
  if (!c || !_isdigit(c)) return 0;
  var e = s;
  while ((c = HEAP8[e]) && _isdigit(c)) e++;
  return Math.floor(Number(Pointer_stringify(s).substr(0, e - s)));
}
function _strcpy(pdest, psrc) {
  var i = 0;
  do {
    var src, dest, stop, stop4;
    src = psrc + i;
    dest = pdest + i;
    stop = src + 1;
    if (dest % 4 == src % 4 && 1 > 8) {
      while (src % 4 !== 0 && src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
      src >>= 2;
      dest >>= 2;
      stop4 = stop >> 2;
      while (src < stop4) {
        HEAP32[dest++] = HEAP32[src++];
      }
      src <<= 2;
      dest <<= 2;
    }
    while (src < stop) {
      HEAP8[dest++] = HEAP8[src++];
    }
    i++;
  } while (HEAP8[psrc + i - 1] != 0);
  return pdest;
}
var ERRNO_CODES = {
  E2BIG: 7,
  EACCES: 13,
  EADDRINUSE: 98,
  EADDRNOTAVAIL: 99,
  EAFNOSUPPORT: 97,
  EAGAIN: 11,
  EALREADY: 114,
  EBADF: 9,
  EBADMSG: 74,
  EBUSY: 16,
  ECANCELED: 125,
  ECHILD: 10,
  ECONNABORTED: 103,
  ECONNREFUSED: 111,
  ECONNRESET: 104,
  EDEADLK: 35,
  EDESTADDRREQ: 89,
  EDOM: 33,
  EDQUOT: 122,
  EEXIST: 17,
  EFAULT: 14,
  EFBIG: 27,
  EHOSTUNREACH: 113,
  EIDRM: 43,
  EILSEQ: 84,
  EINPROGRESS: 115,
  EINTR: 4,
  EINVAL: 22,
  EIO: 5,
  EISCONN: 106,
  EISDIR: 21,
  ELOOP: 40,
  EMFILE: 24,
  EMLINK: 31,
  EMSGSIZE: 90,
  EMULTIHOP: 72,
  ENAMETOOLONG: 36,
  ENETDOWN: 100,
  ENETRESET: 102,
  ENETUNREACH: 101,
  ENFILE: 23,
  ENOBUFS: 105,
  ENODATA: 61,
  ENODEV: 19,
  ENOENT: 2,
  ENOEXEC: 8,
  ENOLCK: 37,
  ENOLINK: 67,
  ENOMEM: 12,
  ENOMSG: 42,
  ENOPROTOOPT: 92,
  ENOSPC: 28,
  ENOSR: 63,
  ENOSTR: 60,
  ENOSYS: 38,
  ENOTCONN: 107,
  ENOTDIR: 20,
  ENOTEMPTY: 39,
  ENOTRECOVERABLE: 131,
  ENOTSOCK: 88,
  ENOTSUP: 95,
  ENOTTY: 25,
  ENXIO: 6,
  EOVERFLOW: 75,
  EOWNERDEAD: 130,
  EPERM: 1,
  EPIPE: 32,
  EPROTO: 71,
  EPROTONOSUPPORT: 93,
  EPROTOTYPE: 91,
  ERANGE: 34,
  EROFS: 30,
  ESPIPE: 29,
  ESRCH: 3,
  ESTALE: 116,
  ETIME: 62,
  ETIMEDOUT: 110,
  ETXTBSY: 26,
  EWOULDBLOCK: 11,
  EXDEV: 18
};
function ___setErrNo(value) {
  if (!___setErrNo.ret) ___setErrNo.ret = allocate([ 0 ], "i32", ALLOC_STATIC);
  HEAP32[___setErrNo.ret >> 2] = value;
  return value;
}
var _stdin = 0;
var _stdout = 0;
var _stderr = 0;
var __impure_ptr = 0;
var FS = {
  currentPath: "/",
  nextInode: 2,
  streams: [ null ],
  ignorePermissions: true,
  absolutePath: (function(relative, base) {
    if (typeof relative !== "string") return null;
    if (base === undefined) base = FS.currentPath;
    if (relative && relative[0] == "/") base = "";
    var full = base + "/" + relative;
    var parts = full.split("/").reverse();
    var absolute = [ "" ];
    while (parts.length) {
      var part = parts.pop();
      if (part == "" || part == ".") {} else if (part == "..") {
        if (absolute.length > 1) absolute.pop();
      } else {
        absolute.push(part);
      }
    }
    return absolute.length == 1 ? "/" : absolute.join("/");
  }),
  analyzePath: (function(path, dontResolveLastLink, linksVisited) {
    var ret = {
      isRoot: false,
      exists: false,
      error: 0,
      name: null,
      path: null,
      object: null,
      parentExists: false,
      parentPath: null,
      parentObject: null
    };
    path = FS.absolutePath(path);
    if (path == "/") {
      ret.isRoot = true;
      ret.exists = ret.parentExists = true;
      ret.name = "/";
      ret.path = ret.parentPath = "/";
      ret.object = ret.parentObject = FS.root;
    } else if (path !== null) {
      linksVisited = linksVisited || 0;
      path = path.slice(1).split("/");
      var current = FS.root;
      var traversed = [ "" ];
      while (path.length) {
        if (path.length == 1 && current.isFolder) {
          ret.parentExists = true;
          ret.parentPath = traversed.length == 1 ? "/" : traversed.join("/");
          ret.parentObject = current;
          ret.name = path[0];
        }
        var target = path.shift();
        if (!current.isFolder) {
          ret.error = ERRNO_CODES.ENOTDIR;
          break;
        } else if (!current.read) {
          ret.error = ERRNO_CODES.EACCES;
          break;
        } else if (!current.contents.hasOwnProperty(target)) {
          ret.error = ERRNO_CODES.ENOENT;
          break;
        }
        current = current.contents[target];
        if (current.link && !(dontResolveLastLink && path.length == 0)) {
          if (linksVisited > 40) {
            ret.error = ERRNO_CODES.ELOOP;
            break;
          }
          var link = FS.absolutePath(current.link, traversed.join("/"));
          return FS.analyzePath([ link ].concat(path).join("/"), dontResolveLastLink, linksVisited + 1);
        }
        traversed.push(target);
        if (path.length == 0) {
          ret.exists = true;
          ret.path = traversed.join("/");
          ret.object = current;
        }
      }
      return ret;
    }
    return ret;
  }),
  findObject: (function(path, dontResolveLastLink) {
    FS.ensureRoot();
    var ret = FS.analyzePath(path, dontResolveLastLink);
    if (ret.exists) {
      return ret.object;
    } else {
      ___setErrNo(ret.error);
      return null;
    }
  }),
  createObject: (function(parent, name, properties, canRead, canWrite) {
    if (!parent) parent = "/";
    if (typeof parent === "string") parent = FS.findObject(parent);
    if (!parent) {
      ___setErrNo(ERRNO_CODES.EACCES);
      throw new Error("Parent path must exist.");
    }
    if (!parent.isFolder) {
      ___setErrNo(ERRNO_CODES.ENOTDIR);
      throw new Error("Parent must be a folder.");
    }
    if (!parent.write && !FS.ignorePermissions) {
      ___setErrNo(ERRNO_CODES.EACCES);
      throw new Error("Parent folder must be writeable.");
    }
    if (!name || name == "." || name == "..") {
      ___setErrNo(ERRNO_CODES.ENOENT);
      throw new Error("Name must not be empty.");
    }
    if (parent.contents.hasOwnProperty(name)) {
      ___setErrNo(ERRNO_CODES.EEXIST);
      throw new Error("Can't overwrite object.");
    }
    parent.contents[name] = {
      read: canRead === undefined ? true : canRead,
      write: canWrite === undefined ? false : canWrite,
      timestamp: Date.now(),
      inodeNumber: FS.nextInode++
    };
    for (var key in properties) {
      if (properties.hasOwnProperty(key)) {
        parent.contents[name][key] = properties[key];
      }
    }
    return parent.contents[name];
  }),
  createFolder: (function(parent, name, canRead, canWrite) {
    var properties = {
      isFolder: true,
      isDevice: false,
      contents: {}
    };
    return FS.createObject(parent, name, properties, canRead, canWrite);
  }),
  createPath: (function(parent, path, canRead, canWrite) {
    var current = FS.findObject(parent);
    if (current === null) throw new Error("Invalid parent.");
    path = path.split("/").reverse();
    while (path.length) {
      var part = path.pop();
      if (!part) continue;
      if (!current.contents.hasOwnProperty(part)) {
        FS.createFolder(current, part, canRead, canWrite);
      }
      current = current.contents[part];
    }
    return current;
  }),
  createFile: (function(parent, name, properties, canRead, canWrite) {
    properties.isFolder = false;
    return FS.createObject(parent, name, properties, canRead, canWrite);
  }),
  createDataFile: (function(parent, name, data, canRead, canWrite) {
    if (typeof data === "string") {
      var dataArray = [];
      for (var i = 0; i < data.length; i++) dataArray.push(data.charCodeAt(i));
      data = dataArray;
    }
    var properties = {
      isDevice: false,
      contents: data
    };
    return FS.createFile(parent, name, properties, canRead, canWrite);
  }),
  createLazyFile: (function(parent, name, url, canRead, canWrite) {
    var properties = {
      isDevice: false,
      url: url
    };
    return FS.createFile(parent, name, properties, canRead, canWrite);
  }),
  createLink: (function(parent, name, target, canRead, canWrite) {
    var properties = {
      isDevice: false,
      link: target
    };
    return FS.createFile(parent, name, properties, canRead, canWrite);
  }),
  createDevice: (function(parent, name, input, output) {
    if (!(input || output)) {
      throw new Error("A device must have at least one callback defined.");
    }
    var ops = {
      isDevice: true,
      input: input,
      output: output
    };
    return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
  }),
  forceLoadFile: (function(obj) {
    if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
    var success = true;
    if (typeof XMLHttpRequest !== "undefined") {
      var xhr = new XMLHttpRequest;
      xhr.open("GET", obj.url, false);
      if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer";
      if (xhr.overrideMimeType) {
        xhr.overrideMimeType("text/plain; charset=x-user-defined");
      }
      xhr.send(null);
      if (xhr.status != 200 && xhr.status != 0) success = false;
      if (xhr.response !== undefined) {
        obj.contents = new Uint8Array(xhr.response || []);
      } else {
        obj.contents = intArrayFromString(xhr.responseText || "", true);
      }
    } else if (typeof read !== "undefined") {
      try {
        obj.contents = intArrayFromString(read(obj.url), true);
      } catch (e) {
        success = false;
      }
    } else {
      throw new Error("Cannot load without read() or XMLHttpRequest.");
    }
    if (!success) ___setErrNo(ERRNO_CODES.EIO);
    return success;
  }),
  ensureRoot: (function() {
    if (FS.root) return;
    FS.root = {
      read: true,
      write: false,
      isFolder: true,
      isDevice: false,
      timestamp: Date.now(),
      inodeNumber: 1,
      contents: {}
    };
  }),
  init: (function(input, output, error) {
    if (FS.init.initialized) return;
    FS.init.initialized = true;
    FS.ensureRoot();
    if (!input) input = (function() {
      if (!input.cache || !input.cache.length) {
        var result;
        if (typeof window != "undefined" && typeof window.prompt == "function") {
          result = window.prompt("Input: ");
        } else if (typeof readline == "function") {
          result = readline();
        }
        if (!result) result = "";
        input.cache = intArrayFromString(result + "\n", true);
      }
      return input.cache.shift();
    });
    if (!output) output = (function(val) {
      if (val === null || val === "\n".charCodeAt(0)) {
        output.printer(output.buffer.join(""));
        output.buffer = [];
      } else {
        output.buffer.push(String.fromCharCode(val));
      }
    });
    if (!output.printer) output.printer = print;
    if (!output.buffer) output.buffer = [];
    if (!error) error = output;
    FS.createFolder("/", "tmp", true, true);
    var devFolder = FS.createFolder("/", "dev", true, false);
    var stdin = FS.createDevice(devFolder, "stdin", input);
    var stdout = FS.createDevice(devFolder, "stdout", null, output);
    var stderr = FS.createDevice(devFolder, "stderr", null, error);
    FS.createDevice(devFolder, "tty", input, output);
    FS.streams[1] = {
      path: "/dev/stdin",
      object: stdin,
      position: 0,
      isRead: true,
      isWrite: false,
      isAppend: false,
      error: false,
      eof: false,
      ungotten: []
    };
    FS.streams[2] = {
      path: "/dev/stdout",
      object: stdout,
      position: 0,
      isRead: false,
      isWrite: true,
      isAppend: false,
      error: false,
      eof: false,
      ungotten: []
    };
    FS.streams[3] = {
      path: "/dev/stderr",
      object: stderr,
      position: 0,
      isRead: false,
      isWrite: true,
      isAppend: false,
      error: false,
      eof: false,
      ungotten: []
    };
    _stdin = allocate([ 1 ], "void*", ALLOC_STATIC);
    _stdout = allocate([ 2 ], "void*", ALLOC_STATIC);
    _stderr = allocate([ 3 ], "void*", ALLOC_STATIC);
    FS.streams[_stdin] = FS.streams[1];
    FS.streams[_stdout] = FS.streams[2];
    FS.streams[_stderr] = FS.streams[3];
    __impure_ptr = allocate([ allocate([ 0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0 ], "void*", ALLOC_STATIC) ], "void*", ALLOC_STATIC);
  }),
  quit: (function() {
    if (!FS.init.initialized) return;
    if (FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output("\n".charCodeAt(0));
    if (FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output("\n".charCodeAt(0));
  })
};
var ___dirent_struct_layout = null;
function _open(path, oflag, varargs) {
  var mode = HEAP32[varargs >> 2];
  var accessMode = oflag & 3;
  var isWrite = accessMode != 0;
  var isRead = accessMode != 1;
  var isCreate = Boolean(oflag & 512);
  var isExistCheck = Boolean(oflag & 2048);
  var isTruncate = Boolean(oflag & 1024);
  var isAppend = Boolean(oflag & 8);
  var origPath = path;
  path = FS.analyzePath(Pointer_stringify(path));
  if (!path.parentExists) {
    ___setErrNo(path.error);
    return -1;
  }
  var target = path.object || null;
  var finalPath;
  if (target) {
    if (isCreate && isExistCheck) {
      ___setErrNo(ERRNO_CODES.EEXIST);
      return -1;
    }
    if ((isWrite || isCreate || isTruncate) && target.isFolder) {
      ___setErrNo(ERRNO_CODES.EISDIR);
      return -1;
    }
    if (isRead && !target.read || isWrite && !target.write) {
      ___setErrNo(ERRNO_CODES.EACCES);
      return -1;
    }
    if (isTruncate && !target.isDevice) {
      target.contents = [];
    } else {
      if (!FS.forceLoadFile(target)) {
        ___setErrNo(ERRNO_CODES.EIO);
        return -1;
      }
    }
    finalPath = path.path;
  } else {
    if (!isCreate) {
      ___setErrNo(ERRNO_CODES.ENOENT);
      return -1;
    }
    if (!path.parentObject.write) {
      ___setErrNo(ERRNO_CODES.EACCES);
      return -1;
    }
    target = FS.createDataFile(path.parentObject, path.name, [], mode & 256, mode & 128);
    finalPath = path.parentPath + "/" + path.name;
  }
  var id = FS.streams.length;
  if (target.isFolder) {
    var entryBuffer = 0;
    if (___dirent_struct_layout) {
      entryBuffer = _malloc(___dirent_struct_layout.__size__);
    }
    var contents = [];
    for (var key in target.contents) contents.push(key);
    FS.streams[id] = {
      path: finalPath,
      object: target,
      position: -2,
      isRead: true,
      isWrite: false,
      isAppend: false,
      error: false,
      eof: false,
      ungotten: [],
      contents: contents,
      currentEntry: entryBuffer
    };
  } else {
    FS.streams[id] = {
      path: finalPath,
      object: target,
      position: 0,
      isRead: isRead,
      isWrite: isWrite,
      isAppend: isAppend,
      error: false,
      eof: false,
      ungotten: []
    };
  }
  return id;
}
function _fopen(filename, mode) {
  var flags;
  mode = Pointer_stringify(mode);
  if (mode[0] == "r") {
    if (mode.indexOf("+") != -1) {
      flags = 2;
    } else {
      flags = 0;
    }
  } else if (mode[0] == "w") {
    if (mode.indexOf("+") != -1) {
      flags = 2;
    } else {
      flags = 1;
    }
    flags |= 512;
    flags |= 1024;
  } else if (mode[0] == "a") {
    if (mode.indexOf("+") != -1) {
      flags = 2;
    } else {
      flags = 1;
    }
    flags |= 512;
    flags |= 8;
  } else {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return 0;
  }
  var ret = _open(filename, flags, allocate([ 511, 0, 0, 0 ], "i32", ALLOC_STACK));
  return ret == -1 ? 0 : ret;
}
function _lseek(fildes, offset, whence) {
  if (FS.streams[fildes] && !FS.streams[fildes].isDevice) {
    var stream = FS.streams[fildes];
    var position = offset;
    if (whence === 1) {
      position += stream.position;
    } else if (whence === 2) {
      position += stream.object.contents.length;
    }
    if (position < 0) {
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    } else {
      stream.ungotten = [];
      stream.position = position;
      return position;
    }
  } else {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
}
function _fseek(stream, offset, whence) {
  var ret = _lseek(stream, offset, whence);
  if (ret == -1) {
    return -1;
  } else {
    FS.streams[stream].eof = false;
    return 0;
  }
}
function _ftell(stream) {
  if (stream in FS.streams) {
    stream = FS.streams[stream];
    if (stream.object.isDevice) {
      ___setErrNo(ERRNO_CODES.ESPIPE);
      return -1;
    } else {
      return stream.position;
    }
  } else {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
}
function _rewind(stream) {
  _fseek(stream, 0, 0);
  if (stream in FS.streams) FS.streams[stream].error = false;
}
function _malloc(bytes) {
  return Runtime.staticAlloc(bytes || 1);
}
function _pread(fildes, buf, nbyte, offset) {
  var stream = FS.streams[fildes];
  if (!stream || stream.object.isDevice) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isRead) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (stream.object.isFolder) {
    ___setErrNo(ERRNO_CODES.EISDIR);
    return -1;
  } else if (nbyte < 0 || offset < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    var bytesRead = 0;
    while (stream.ungotten.length && nbyte > 0) {
      HEAP8[buf++] = stream.ungotten.pop();
      nbyte--;
      bytesRead++;
    }
    var contents = stream.object.contents;
    var size = Math.min(contents.length - offset, nbyte);
    for (var i = 0; i < size; i++) {
      HEAP8[buf + i] = contents[offset + i];
      bytesRead++;
    }
    return bytesRead;
  }
}
function _read(fildes, buf, nbyte) {
  var stream = FS.streams[fildes];
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isRead) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (nbyte < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    var bytesRead;
    if (stream.object.isDevice) {
      if (stream.object.input) {
        bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[buf++] = stream.ungotten.pop();
          nbyte--;
          bytesRead++;
        }
        for (var i = 0; i < nbyte; i++) {
          try {
            var result = stream.object.input();
          } catch (e) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
          if (result === null || result === undefined) break;
          bytesRead++;
          HEAP8[buf + i] = result;
        }
        return bytesRead;
      } else {
        ___setErrNo(ERRNO_CODES.ENXIO);
        return -1;
      }
    } else {
      var ungotSize = stream.ungotten.length;
      bytesRead = _pread(fildes, buf, nbyte, stream.position);
      if (bytesRead != -1) {
        stream.position += stream.ungotten.length - ungotSize + bytesRead;
      }
      return bytesRead;
    }
  }
}
function _fread(ptr, size, nitems, stream) {
  var bytesToRead = nitems * size;
  if (bytesToRead == 0) return 0;
  var bytesRead = _read(stream, ptr, bytesToRead);
  var streamObj = FS.streams[stream];
  if (bytesRead == -1) {
    if (streamObj) streamObj.error = true;
    return -1;
  } else {
    if (bytesRead < bytesToRead) streamObj.eof = true;
    return Math.floor(bytesRead / size);
  }
}
function _close(fildes) {
  if (FS.streams[fildes]) {
    if (FS.streams[fildes].currentEntry) {
      _free(FS.streams[fildes].currentEntry);
    }
    delete FS.streams[fildes];
    return 0;
  } else {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
}
function _fsync(fildes) {
  if (FS.streams[fildes]) {
    return 0;
  } else {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  }
}
function _fclose(stream) {
  _fsync(stream);
  return _close(stream);
}
function _free() {}
var Browser = {
  decodeImage: (function(pixels, format) {
    function encodeBase64(data) {
      var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var PAD = "=";
      var ret = "";
      var leftchar = 0;
      var leftbits = 0;
      for (var i = 0; i < data.length; i++) {
        leftchar = leftchar << 8 | data[i];
        leftbits += 8;
        while (leftbits >= 6) {
          var curr = leftchar >> leftbits - 6 & 63;
          leftbits -= 6;
          ret += BASE[curr];
        }
      }
      if (leftbits == 2) {
        ret += BASE[(leftchar & 3) << 4];
        ret += PAD + PAD;
      } else if (leftbits == 4) {
        ret += BASE[(leftchar & 15) << 2];
        ret += PAD;
      }
      return ret;
    }
    var img = new Image;
    var canvas = document.createElement("canvas");
    img.src = "data:image/" + format + ";base64," + encodeBase64(pixels);
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    return imageData;
  })
};
var SDL = {
  defaults: {
    width: 320,
    height: 200,
    copyScreenOnLock: false
  },
  surfaces: {},
  events: [],
  keyCodes: {
    16: 304,
    17: 305,
    18: 308,
    37: 276,
    38: 273,
    39: 275,
    40: 274,
    109: 45
  },
  structs: {
    Rect: {
      __size__: 8,
      x: 0,
      y: 2,
      w: 4,
      h: 6
    },
    PixelFormat: {
      __size__: 32,
      palette: 0,
      BitsPerPixel: 4,
      BytesPerPixel: 5,
      Rloss: 6,
      Gloss: 7,
      Bloss: 8,
      Aloss: 9,
      Rshift: 10,
      Gshift: 11,
      Bshift: 12,
      Ashift: 13,
      Rmask: 16,
      Gmask: 20,
      Bmask: 24,
      Amask: 28
    },
    KeyboardEvent: {
      __size__: 8,
      type: 0,
      which: 1,
      state: 2,
      keysym: 4
    },
    keysym: {
      __size__: 16,
      scancode: 0,
      sym: 4,
      mod: 8,
      unicode: 12
    },
    AudioSpec: {
      __size__: 24,
      freq: 0,
      format: 4,
      channels: 6,
      silence: 7,
      samples: 8,
      size: 12,
      callback: 16,
      userdata: 20
    }
  },
  makeSurface: (function(width, height, flags) {
    var surf = _malloc(14 * Runtime.QUANTUM_SIZE);
    var buffer = _malloc(width * height * 4);
    var pixelFormat = _malloc(18 * Runtime.QUANTUM_SIZE);
    flags |= 1;
    HEAP32[surf + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
    HEAP32[surf + Runtime.QUANTUM_SIZE * 1 >> 2] = pixelFormat;
    HEAP32[surf + Runtime.QUANTUM_SIZE * 2 >> 2] = width;
    HEAP32[surf + Runtime.QUANTUM_SIZE * 3 >> 2] = height;
    HEAP16[surf + Runtime.QUANTUM_SIZE * 4 >> 1] = width * 4;
    HEAP32[surf + Runtime.QUANTUM_SIZE * 5 >> 2] = buffer;
    HEAP32[surf + Runtime.QUANTUM_SIZE * 6 >> 2] = 0;
    HEAP32[pixelFormat + SDL.structs.PixelFormat.palette >> 2] = 0;
    HEAP8[pixelFormat + SDL.structs.PixelFormat.BitsPerPixel] = 32;
    HEAP8[pixelFormat + SDL.structs.PixelFormat.BytesPerPixel] = 4;
    HEAP32[pixelFormat + SDL.structs.PixelFormat.Rmask >> 2] = 255;
    HEAP32[pixelFormat + SDL.structs.PixelFormat.Gmask >> 2] = 255;
    HEAP32[pixelFormat + SDL.structs.PixelFormat.Bmask >> 2] = 255;
    HEAP32[pixelFormat + SDL.structs.PixelFormat.Amask >> 2] = 255;
    SDL.surfaces[surf] = {
      width: width,
      height: height,
      canvas: Module["canvas"],
      ctx: Module["ctx2D"],
      surf: surf,
      buffer: buffer,
      pixelFormat: pixelFormat,
      alpha: 255
    };
    return surf;
  }),
  freeSurface: (function(surf) {
    _free(SDL.surfaces[surf].buffer);
    _free(SDL.surfaces[surf].pixelFormat);
    _free(surf);
    delete SDL.surfaces[surf];
  }),
  receiveEvent: (function(event) {
    switch (event.type) {
     case "keydown":
     case "keyup":
      SDL.events.push(event);
    }
    return false;
  }),
  makeCEvent: (function(event, ptr) {
    if (typeof event === "number") {
      _memcpy(ptr, event, SDL.structs.KeyboardEvent.__size__);
      return;
    }
    switch (event.type) {
     case "keydown":
     case "keyup":
      var down = event.type === "keydown";
      var key = SDL.keyCodes[event.keyCode] || event.keyCode;
      if (key >= 65 && key <= 90) {
        key = String.fromCharCode(key).toLowerCase().charCodeAt(0);
      }
      HEAP8[ptr + SDL.structs.KeyboardEvent.type] = down ? 2 : 3;
      HEAP8[ptr + SDL.structs.KeyboardEvent.which] = 1;
      HEAP8[ptr + SDL.structs.KeyboardEvent.state] = down ? 1 : 0;
      HEAP8[ptr + SDL.structs.KeyboardEvent.keysym + SDL.structs.keysym.scancode] = key;
      HEAP32[ptr + SDL.structs.KeyboardEvent.keysym + SDL.structs.keysym.sym >> 2] = key;
      HEAP32[ptr + SDL.structs.KeyboardEvent.keysym + SDL.structs.keysym.mod >> 2] = 0;
      break;
     case "keypress":
      break;
     default:
      throw "Unhandled SDL event: " + event.type;
    }
  })
};
function _SDL_Init(what) {
  SDL.startTime = Date.now();
  [ "keydown", "keyup", "keypress" ].forEach((function(event) {
    addEventListener(event, SDL.receiveEvent, true);
  }));
  return 0;
}
function _SDL_Quit() {
  print("SDL_Quit called (and ignored)");
}
function _SDL_SetVideoMode(width, height, depth, flags) {
  Module["canvas"].width = width;
  Module["canvas"].height = height;
  return SDL.screen = SDL.makeSurface(width, height, flags);
}
function _SDL_LockSurface(surf) {
  var surfData = SDL.surfaces[surf];
  if (!surfData.image) {
    surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
    var data = surfData.image.data;
    var num = data.length;
    for (var i = 0; i < num / 4; i++) {
      data[i * 4 + 3] = 255;
    }
  }
  if (SDL.defaults.copyScreenOnLock) {
    var num2 = surfData.image.data.length;
    for (var i = 0; i < num2; i++) {
      HEAP8[surfData.buffer + i] = surfData.image.data[i];
    }
  }
  HEAP32[surf + 5 * Runtime.QUANTUM_SIZE >> 2] = surfData.buffer;
}
function _SDL_MapRGB(fmt, r, g, b) {
  return r + (g << 8) + (b << 16);
}
function _SDL_UnlockSurface(surf) {
  var surfData = SDL.surfaces[surf];
  var num = surfData.image.data.length;
  if (!surfData.colors) {
    var data = surfData.image.data;
    var buffer = surfData.buffer;
    assert(buffer % 4 == 0, "Invalid buffer offset: " + buffer);
    var src = buffer >> 2;
    var dst = 0;
    while (dst < num) {
      var val = HEAP32[src];
      data[dst] = val & 255;
      data[dst + 1] = val >> 8 & 255;
      data[dst + 2] = val >> 16 & 255;
      data[dst + 3] = 255;
      src++;
      dst += 4;
    }
  } else {
    var width = Module["canvas"].width;
    var height = Module["canvas"].height;
    var s = surfData.buffer;
    var data = surfData.image.data;
    var colors = surfData.colors;
    for (var y = 0; y < height; y++) {
      var base = y * width * 4;
      for (var x = 0; x < width; x++) {
        var val = HEAP8[s++] & 255;
        var color = colors[val] || [ Math.floor(Math.random() * 255), Math.floor(Math.random() * 255), Math.floor(Math.random() * 255) ];
        var start = base + x * 4;
        data[start] = color[0];
        data[start + 1] = color[1];
        data[start + 2] = color[2];
      }
      s += width * 3;
    }
  }
  surfData.ctx.putImageData(surfData.image, 0, 0);
}
function _SDL_Flip(surf) {}
function _pwrite(fildes, buf, nbyte, offset) {
  var stream = FS.streams[fildes];
  if (!stream || stream.object.isDevice) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isWrite) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (stream.object.isFolder) {
    ___setErrNo(ERRNO_CODES.EISDIR);
    return -1;
  } else if (nbyte < 0 || offset < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    var contents = stream.object.contents;
    while (contents.length < offset) contents.push(0);
    for (var i = 0; i < nbyte; i++) {
      contents[offset + i] = HEAPU8[buf + i];
    }
    stream.object.timestamp = Date.now();
    return i;
  }
}
function _write(fildes, buf, nbyte) {
  var stream = FS.streams[fildes];
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isWrite) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (nbyte < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    if (stream.object.isDevice) {
      if (stream.object.output) {
        for (var i = 0; i < nbyte; i++) {
          try {
            stream.object.output(HEAP8[buf + i]);
          } catch (e) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        stream.object.timestamp = Date.now();
        return i;
      } else {
        ___setErrNo(ERRNO_CODES.ENXIO);
        return -1;
      }
    } else {
      var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
      if (bytesWritten != -1) stream.position += bytesWritten;
      return bytesWritten;
    }
  }
}
function _fwrite(ptr, size, nitems, stream) {
  var bytesToWrite = nitems * size;
  if (bytesToWrite == 0) return 0;
  var bytesWritten = _write(stream, ptr, bytesToWrite);
  if (bytesWritten == -1) {
    if (FS.streams[stream]) FS.streams[stream].error = true;
    return -1;
  } else {
    return Math.floor(bytesWritten / size);
  }
}
function __formatString(format, varargs) {
  var textIndex = format;
  var argIndex = 0;
  function getNextArg(type) {
    var ret;
    if (type === "float" || type === "double") {
      ret = (tempDoubleI32[0] = HEAP32[varargs + argIndex >> 2], tempDoubleI32[1] = HEAP32[varargs + argIndex + 4 >> 2], tempDoubleF64[0]);
    } else if (type == "i64") {
      ret = [ HEAP32[varargs + argIndex >> 2], HEAP32[varargs + argIndex + 4 >> 2] ];
      ret = unSign(ret[0], 32) + unSign(ret[1], 32) * Math.pow(2, 32);
    } else {
      ret = HEAP32[varargs + argIndex >> 2];
    }
    argIndex += Runtime.getNativeFieldSize(type);
    return Number(ret);
  }
  var ret = [];
  var curr, next, currArg;
  while (1) {
    var startTextIndex = textIndex;
    curr = HEAP8[textIndex];
    if (curr === 0) break;
    next = HEAP8[textIndex + 1];
    if (curr == "%".charCodeAt(0)) {
      var flagAlwaysSigned = false;
      var flagLeftAlign = false;
      var flagAlternative = false;
      var flagZeroPad = false;
      flagsLoop : while (1) {
        switch (next) {
         case "+".charCodeAt(0):
          flagAlwaysSigned = true;
          break;
         case "-".charCodeAt(0):
          flagLeftAlign = true;
          break;
         case "#".charCodeAt(0):
          flagAlternative = true;
          break;
         case "0".charCodeAt(0):
          if (flagZeroPad) {
            break flagsLoop;
          } else {
            flagZeroPad = true;
            break;
          }
         default:
          break flagsLoop;
        }
        textIndex++;
        next = HEAP8[textIndex + 1];
      }
      var width = 0;
      if (next == "*".charCodeAt(0)) {
        width = getNextArg("i32");
        textIndex++;
        next = HEAP8[textIndex + 1];
      } else {
        while (next >= "0".charCodeAt(0) && next <= "9".charCodeAt(0)) {
          width = width * 10 + (next - "0".charCodeAt(0));
          textIndex++;
          next = HEAP8[textIndex + 1];
        }
      }
      var precisionSet = false;
      if (next == ".".charCodeAt(0)) {
        var precision = 0;
        precisionSet = true;
        textIndex++;
        next = HEAP8[textIndex + 1];
        if (next == "*".charCodeAt(0)) {
          precision = getNextArg("i32");
          textIndex++;
        } else {
          while (1) {
            var precisionChr = HEAP8[textIndex + 1];
            if (precisionChr < "0".charCodeAt(0) || precisionChr > "9".charCodeAt(0)) break;
            precision = precision * 10 + (precisionChr - "0".charCodeAt(0));
            textIndex++;
          }
        }
        next = HEAP8[textIndex + 1];
      } else {
        var precision = 6;
      }
      var argSize;
      switch (String.fromCharCode(next)) {
       case "h":
        var nextNext = HEAP8[textIndex + 2];
        if (nextNext == "h".charCodeAt(0)) {
          textIndex++;
          argSize = 1;
        } else {
          argSize = 2;
        }
        break;
       case "l":
        var nextNext = HEAP8[textIndex + 2];
        if (nextNext == "l".charCodeAt(0)) {
          textIndex++;
          argSize = 8;
        } else {
          argSize = 4;
        }
        break;
       case "L":
       case "q":
       case "j":
        argSize = 8;
        break;
       case "z":
       case "t":
       case "I":
        argSize = 4;
        break;
       default:
        argSize = null;
      }
      if (argSize) textIndex++;
      next = HEAP8[textIndex + 1];
      if ([ "d", "i", "u", "o", "x", "X", "p" ].indexOf(String.fromCharCode(next)) != -1) {
        var signed = next == "d".charCodeAt(0) || next == "i".charCodeAt(0);
        argSize = argSize || 4;
        var currArg = getNextArg("i" + argSize * 8);
        if (argSize <= 4) {
          var limit = Math.pow(256, argSize) - 1;
          currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
        }
        var currAbsArg = Math.abs(currArg);
        var argText;
        var prefix = "";
        if (next == "d".charCodeAt(0) || next == "i".charCodeAt(0)) {
          argText = reSign(currArg, 8 * argSize, 1).toString(10);
        } else if (next == "u".charCodeAt(0)) {
          argText = unSign(currArg, 8 * argSize, 1).toString(10);
          currArg = Math.abs(currArg);
        } else if (next == "o".charCodeAt(0)) {
          argText = (flagAlternative ? "0" : "") + currAbsArg.toString(8);
        } else if (next == "x".charCodeAt(0) || next == "X".charCodeAt(0)) {
          prefix = flagAlternative ? "0x" : "";
          if (currArg < 0) {
            currArg = -currArg;
            argText = (currAbsArg - 1).toString(16);
            var buffer = [];
            for (var i = 0; i < argText.length; i++) {
              buffer.push((15 - parseInt(argText[i], 16)).toString(16));
            }
            argText = buffer.join("");
            while (argText.length < argSize * 2) argText = "f" + argText;
          } else {
            argText = currAbsArg.toString(16);
          }
          if (next == "X".charCodeAt(0)) {
            prefix = prefix.toUpperCase();
            argText = argText.toUpperCase();
          }
        } else if (next == "p".charCodeAt(0)) {
          if (currAbsArg === 0) {
            argText = "(nil)";
          } else {
            prefix = "0x";
            argText = currAbsArg.toString(16);
          }
        }
        if (precisionSet) {
          while (argText.length < precision) {
            argText = "0" + argText;
          }
        }
        if (flagAlwaysSigned) {
          if (currArg < 0) {
            prefix = "-" + prefix;
          } else {
            prefix = "+" + prefix;
          }
        }
        while (prefix.length + argText.length < width) {
          if (flagLeftAlign) {
            argText += " ";
          } else {
            if (flagZeroPad) {
              argText = "0" + argText;
            } else {
              prefix = " " + prefix;
            }
          }
        }
        argText = prefix + argText;
        argText.split("").forEach((function(chr) {
          ret.push(chr.charCodeAt(0));
        }));
      } else if ([ "f", "F", "e", "E", "g", "G" ].indexOf(String.fromCharCode(next)) != -1) {
        var currArg = getNextArg(argSize === 4 ? "float" : "double");
        var argText;
        if (isNaN(currArg)) {
          argText = "nan";
          flagZeroPad = false;
        } else if (!isFinite(currArg)) {
          argText = (currArg < 0 ? "-" : "") + "inf";
          flagZeroPad = false;
        } else {
          var isGeneral = false;
          var effectivePrecision = Math.min(precision, 20);
          if (next == "g".charCodeAt(0) || next == "G".charCodeAt(0)) {
            isGeneral = true;
            precision = precision || 1;
            var exponent = parseInt(currArg.toExponential(effectivePrecision).split("e")[1], 10);
            if (precision > exponent && exponent >= -4) {
              next = (next == "g".charCodeAt(0) ? "f" : "F").charCodeAt(0);
              precision -= exponent + 1;
            } else {
              next = (next == "g".charCodeAt(0) ? "e" : "E").charCodeAt(0);
              precision--;
            }
            effectivePrecision = Math.min(precision, 20);
          }
          if (next == "e".charCodeAt(0) || next == "E".charCodeAt(0)) {
            argText = currArg.toExponential(effectivePrecision);
            if (/[eE][-+]\d$/.test(argText)) {
              argText = argText.slice(0, -1) + "0" + argText.slice(-1);
            }
          } else if (next == "f".charCodeAt(0) || next == "F".charCodeAt(0)) {
            argText = currArg.toFixed(effectivePrecision);
          }
          var parts = argText.split("e");
          if (isGeneral && !flagAlternative) {
            while (parts[0].length > 1 && parts[0].indexOf(".") != -1 && (parts[0].slice(-1) == "0" || parts[0].slice(-1) == ".")) {
              parts[0] = parts[0].slice(0, -1);
            }
          } else {
            if (flagAlternative && argText.indexOf(".") == -1) parts[0] += ".";
            while (precision > effectivePrecision++) parts[0] += "0";
          }
          argText = parts[0] + (parts.length > 1 ? "e" + parts[1] : "");
          if (next == "E".charCodeAt(0)) argText = argText.toUpperCase();
          if (flagAlwaysSigned && currArg >= 0) {
            argText = "+" + argText;
          }
        }
        while (argText.length < width) {
          if (flagLeftAlign) {
            argText += " ";
          } else {
            if (flagZeroPad && (argText[0] == "-" || argText[0] == "+")) {
              argText = argText[0] + "0" + argText.slice(1);
            } else {
              argText = (flagZeroPad ? "0" : " ") + argText;
            }
          }
        }
        if (next < "a".charCodeAt(0)) argText = argText.toUpperCase();
        argText.split("").forEach((function(chr) {
          ret.push(chr.charCodeAt(0));
        }));
      } else if (next == "s".charCodeAt(0)) {
        var arg = getNextArg("i8*");
        var copiedString;
        if (arg) {
          copiedString = String_copy(arg);
          if (precisionSet && copiedString.length > precision) {
            copiedString = copiedString.slice(0, precision);
          }
        } else {
          copiedString = intArrayFromString("(null)", true);
        }
        if (!flagLeftAlign) {
          while (copiedString.length < width--) {
            ret.push(" ".charCodeAt(0));
          }
        }
        ret = ret.concat(copiedString);
        if (flagLeftAlign) {
          while (copiedString.length < width--) {
            ret.push(" ".charCodeAt(0));
          }
        }
      } else if (next == "c".charCodeAt(0)) {
        if (flagLeftAlign) ret.push(getNextArg("i8"));
        while (--width > 0) {
          ret.push(" ".charCodeAt(0));
        }
        if (!flagLeftAlign) ret.push(getNextArg("i8"));
      } else if (next == "n".charCodeAt(0)) {
        var ptr = getNextArg("i32*");
        HEAP32[ptr >> 2] = ret.length;
      } else if (next == "%".charCodeAt(0)) {
        ret.push(curr);
      } else {
        for (var i = startTextIndex; i < textIndex + 2; i++) {
          ret.push(HEAP8[i]);
        }
      }
      textIndex += 2;
    } else {
      ret.push(curr);
      textIndex += 1;
    }
  }
  return ret;
}
function _fprintf(stream, format, varargs) {
  var result = __formatString(format, varargs);
  var stack = Runtime.stackSave();
  var ret = _fwrite(allocate(result, "i8", ALLOC_STACK), 1, result.length, stream);
  Runtime.stackRestore(stack);
  return ret;
}
function _printf(format, varargs) {
  var stdout = HEAP32[_stdout >> 2];
  return _fprintf(stdout, format, varargs);
}
function __exit(status) {
  __shutdownRuntime__();
  ABORT = true;
  throw "exit(" + status + ") called, at " + (new Error).stack;
}
function _exit(status) {
  __exit(status);
}
FS.init();
__ATEXIT__.push({
  func: (function() {
    FS.quit();
  })
});
___setErrNo(0);
Module.callMain = function callMain(args) {
  var argc = args.length + 1;
  function pad() {
    for (var i = 0; i < 4 - 1; i++) {
      argv.push(0);
    }
  }
  var argv = [ allocate(intArrayFromString("/bin/this.program"), "i8", ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc - 1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, "i32", ALLOC_STATIC);
  return _main(argc, argv, 0);
};
var _qpDiv6;
var _qpMod6;
var _levelScale;
var _h264bsdQpC;
var _stuffingTable;
var _CeilLog2NumSliceGroups;
var _dcCoeffIndex;
var _codedBlockPatternIntra4x4;
var _codedBlockPatternInter;
var _runBefore_1;
var _runBefore_2;
var _runBefore_3;
var _runBefore_4;
var _runBefore_5;
var _runBefore_6;
var _totalZeros_1_0;
var _totalZeros_1_1;
var _totalZeros_2;
var _totalZeros_3;
var _totalZeros_4;
var _totalZeros_5;
var _totalZeros_6;
var _totalZeros_7;
var _totalZeros_8;
var _totalZeros_9;
var _totalZeros_10;
var _totalZeros_11;
var _totalZeros_12;
var _totalZeros_13;
var _totalZeros_14;
var _coeffToken0_0;
var _coeffToken0_1;
var _coeffToken0_2;
var _coeffToken0_3;
var _coeffToken2_0;
var _coeffToken2_1;
var _coeffToken2_2;
var _coeffToken4_0;
var _coeffToken4_1;
var _coeffToken8;
var _coeffTokenMinus1_0;
var _coeffTokenMinus1_1;
var _N_D_4x4B;
var _N_C_4x4B;
var _N_B_4x4B;
var _N_A_4x4B;
var _h264bsdBlockX;
var _h264bsdBlockY;
var _h264bsdClip;
var _N_D_SUB_PART;
var _N_C_SUB_PART;
var _N_B_SUB_PART;
var _N_A_SUB_PART;
var _lumaFracPos;
var _sample;
var _hashA;
var _hashB;
var _hashC;
var _hashD;
var _alphas;
var _betas;
var _tc0;
var _mb4x4Index;
var _tagName;
var _streamStop;
var _packetize;
var _nalUnitStream;
var _foutput;
var _screen;
var _maxNumPics;
var _tmpImage;
var _numErrors;
var _cropDisplay;
var _disableOutputReordering;
var _decInput;
var _decVer;
var __str;
var _i;
var __str1;
var __str2;
var __str3;
var __str4;
var __str5;
var __str6;
var __str7;
var _strmLen;
var _byteStrmStart;
var _decInst;
var _ret;
var _tmp;
var _picDisplayNumber;
var _picDecodeNumber;
var _decPicture;
var _imageData;
var _decInfo;
var _decOutput;
var _picSize;
var __str8;
var __str9;
var __str10;
var _NextPacket_prevIndex;
var __str11;
_qpDiv6 = allocate([ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8 ], "i8", ALLOC_STATIC);
_qpMod6 = allocate([ 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3 ], "i8", ALLOC_STATIC);
_levelScale = allocate([ 10, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 18, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 14, 0, 0, 0, 18, 0, 0, 0, 23, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 25, 0, 0, 0, 18, 0, 0, 0, 23, 0, 0, 0, 29, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
_h264bsdQpC = allocate([ 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 34, 0, 0, 0, 35, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 36, 0, 0, 0, 37, 0, 0, 0, 37, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 39, 0, 0, 0, 39, 0, 0, 0, 39, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
_stuffingTable = allocate([ 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 128, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
_CeilLog2NumSliceGroups = allocate([ 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
_dcCoeffIndex = allocate([ 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
_codedBlockPatternIntra4x4 = allocate([ 47, 31, 15, 0, 23, 27, 29, 30, 7, 11, 13, 14, 39, 43, 45, 46, 16, 3, 5, 10, 12, 19, 21, 26, 28, 35, 37, 42, 44, 1, 2, 4, 8, 17, 18, 20, 24, 6, 9, 22, 25, 32, 33, 34, 36, 40, 38, 41 ], "i8", ALLOC_STATIC);
_codedBlockPatternInter = allocate([ 0, 16, 1, 2, 4, 8, 32, 3, 5, 10, 12, 15, 47, 7, 11, 13, 14, 6, 9, 31, 35, 37, 42, 44, 33, 34, 36, 40, 39, 43, 45, 46, 17, 18, 20, 24, 19, 21, 26, 28, 23, 27, 29, 30, 22, 25, 38, 41 ], "i8", ALLOC_STATIC);
_runBefore_1 = allocate([ 17, 1 ], "i8", ALLOC_STATIC);
_runBefore_2 = allocate([ 34, 18, 1, 1 ], "i8", ALLOC_STATIC);
_runBefore_3 = allocate([ 50, 34, 18, 2 ], "i8", ALLOC_STATIC);
_runBefore_4 = allocate([ 67, 51, 34, 34, 18, 18, 2, 2 ], "i8", ALLOC_STATIC);
_runBefore_5 = allocate([ 83, 67, 51, 35, 18, 18, 2, 2 ], "i8", ALLOC_STATIC);
_runBefore_6 = allocate([ 19, 35, 67, 51, 99, 83, 2, 2 ], "i8", ALLOC_STATIC);
_totalZeros_1_0 = allocate([ 0, 0, 101, 85, 68, 68, 52, 52, 35, 35, 35, 35, 19, 19, 19, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], "i8", ALLOC_STATIC);
_totalZeros_1_1 = allocate([ 0, 249, 233, 217, 200, 200, 184, 184, 167, 167, 167, 167, 151, 151, 151, 151, 134, 134, 134, 134, 134, 134, 134, 134, 118, 118, 118, 118, 118, 118, 118, 118 ], "i8", ALLOC_STATIC);
_totalZeros_2 = allocate([ 230, 214, 198, 182, 165, 165, 149, 149, 132, 132, 132, 132, 116, 116, 116, 116, 100, 100, 100, 100, 84, 84, 84, 84, 67, 67, 67, 67, 67, 67, 67, 67, 51, 51, 51, 51, 51, 51, 51, 51, 35, 35, 35, 35, 35, 35, 35, 35, 19, 19, 19, 19, 19, 19, 19, 19, 3, 3, 3, 3, 3, 3, 3, 3 ], "i8", ALLOC_STATIC);
_totalZeros_3 = allocate([ 214, 182, 197, 197, 165, 165, 149, 149, 132, 132, 132, 132, 84, 84, 84, 84, 68, 68, 68, 68, 4, 4, 4, 4, 115, 115, 115, 115, 115, 115, 115, 115, 99, 99, 99, 99, 99, 99, 99, 99, 51, 51, 51, 51, 51, 51, 51, 51, 35, 35, 35, 35, 35, 35, 35, 35, 19, 19, 19, 19, 19, 19, 19, 19 ], "i8", ALLOC_STATIC);
_totalZeros_4 = allocate([ 197, 181, 165, 5, 148, 148, 116, 116, 52, 52, 36, 36, 131, 131, 131, 131, 99, 99, 99, 99, 83, 83, 83, 83, 67, 67, 67, 67, 19, 19, 19, 19 ], "i8", ALLOC_STATIC);
_totalZeros_5 = allocate([ 181, 149, 164, 164, 132, 132, 36, 36, 20, 20, 4, 4, 115, 115, 115, 115, 99, 99, 99, 99, 83, 83, 83, 83, 67, 67, 67, 67, 51, 51, 51, 51 ], "i8", ALLOC_STATIC);
_totalZeros_6 = allocate([ 166, 6, 21, 21, 132, 132, 132, 132, 147, 147, 147, 147, 147, 147, 147, 147, 115, 115, 115, 115, 115, 115, 115, 115, 99, 99, 99, 99, 99, 99, 99, 99, 83, 83, 83, 83, 83, 83, 83, 83, 67, 67, 67, 67, 67, 67, 67, 67, 51, 51, 51, 51, 51, 51, 51, 51, 35, 35, 35, 35, 35, 35, 35, 35 ], "i8", ALLOC_STATIC);
_totalZeros_7 = allocate([ 150, 6, 21, 21, 116, 116, 116, 116, 131, 131, 131, 131, 131, 131, 131, 131, 99, 99, 99, 99, 99, 99, 99, 99, 67, 67, 67, 67, 67, 67, 67, 67, 51, 51, 51, 51, 51, 51, 51, 51, 35, 35, 35, 35, 35, 35, 35, 35, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82 ], "i8", ALLOC_STATIC);
_totalZeros_8 = allocate([ 134, 6, 37, 37, 20, 20, 20, 20, 115, 115, 115, 115, 115, 115, 115, 115, 99, 99, 99, 99, 99, 99, 99, 99, 51, 51, 51, 51, 51, 51, 51, 51, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66 ], "i8", ALLOC_STATIC);
_totalZeros_9 = allocate([ 22, 6, 117, 117, 36, 36, 36, 36, 83, 83, 83, 83, 83, 83, 83, 83, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50 ], "i8", ALLOC_STATIC);
_totalZeros_10 = allocate([ 21, 5, 100, 100, 35, 35, 35, 35, 82, 82, 82, 82, 82, 82, 82, 82, 66, 66, 66, 66, 66, 66, 66, 66, 50, 50, 50, 50, 50, 50, 50, 50 ], "i8", ALLOC_STATIC);
_totalZeros_11 = allocate([ 4, 20, 35, 35, 51, 51, 83, 83, 65, 65, 65, 65, 65, 65, 65, 65 ], "i8", ALLOC_STATIC);
_totalZeros_12 = allocate([ 4, 20, 67, 67, 34, 34, 34, 34, 49, 49, 49, 49, 49, 49, 49, 49 ], "i8", ALLOC_STATIC);
_totalZeros_13 = allocate([ 3, 19, 50, 50, 33, 33, 33, 33 ], "i8", ALLOC_STATIC);
_totalZeros_14 = allocate([ 2, 18, 33, 33 ], "i8", ALLOC_STATIC);
_coeffToken0_0 = allocate([ 0, 0, 0, 0, 0, 0, 8294, 0, 4134, 0, 2054, 0, 6245, 0, 6245, 0, 4163, 0, 4163, 0, 4163, 0, 4163, 0, 4163, 0, 4163, 0, 4163, 0, 4163, 0, 2082, 0, 2082, 0, 2082, 0, 2082, 0, 2082, 0, 2082, 0, 2082, 0, 2082, 0, 2082, 0, 2082, 0, 2082, 0, 2082, 0, 2082, 0, 2082, 0, 2082, 0, 2082, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);
_coeffToken0_1 = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 16490, 0, 12362, 0, 10282, 0, 8202, 0, 14441, 0, 14441, 0, 10313, 0, 10313, 0, 8233, 0, 8233, 0, 6153, 0, 6153, 0, 12392, 0, 12392, 0, 12392, 0, 12392, 0, 8264, 0, 8264, 0, 8264, 0, 8264, 0, 6184, 0, 6184, 0, 6184, 0, 6184, 0, 4104, 0, 4104, 0, 4104, 0, 4104, 0, 10343, 0, 10343, 0, 10343, 0, 10343, 0, 10343, 0, 10343, 0, 10343, 0, 10343, 0, 6215, 0, 6215, 0, 6215, 0, 6215, 0, 6215, 0, 6215, 0, 6215, 0, 6215, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);
_coeffToken0_2 = allocate([ 24686, 0, 22606, 0, 20526, 0, 20494, 0, 22638, 0, 20558, 0, 18478, 0, 18446, 0, 16397, 0, 16397, 0, 18509, 0, 18509, 0, 16429, 0, 16429, 0, 14349, 0, 14349, 0, 20589, 0, 20589, 0, 16461, 0, 16461, 0, 14381, 0, 14381, 0, 12301, 0, 12301, 0, 18539, 0, 18539, 0, 18539, 0, 18539, 0, 18539, 0, 18539, 0, 18539, 0, 18539, 0, 14411, 0, 14411, 0, 14411, 0, 14411, 0, 14411, 0, 14411, 0, 14411, 0, 14411, 0, 12331, 0, 12331, 0, 12331, 0, 12331, 0, 12331, 0, 12331, 0, 12331, 0, 12331, 0, 10251, 0, 10251, 0, 10251, 0, 10251, 0, 10251, 0, 10251, 0, 10251, 0, 10251, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);
_coeffToken0_3 = allocate([ 0, 0, 0, 0, 26671, 0, 26671, 0, -32752, 0, -32688, 0, -32720, 0, 30736, 0, -32656, 0, 30800, 0, 30768, 0, 28688, 0, 30832, 0, 28752, 0, 28720, 0, 26640, 0, 28783, 0, 28783, 0, 26703, 0, 26703, 0, 24623, 0, 24623, 0, 24591, 0, 24591, 0, 26735, 0, 26735, 0, 24655, 0, 24655, 0, 22575, 0, 22575, 0, 22543, 0, 22543, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);
_coeffToken2_0 = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 14438, 0, 8262, 0, 8230, 0, 4102, 0, 12390, 0, 6214, 0, 6182, 0, 2054, 0, 10341, 0, 10341, 0, 4133, 0, 4133, 0, 8292, 0, 8292, 0, 8292, 0, 8292, 0, 6244, 0, 6244, 0, 6244, 0, 6244, 0, 4163, 0, 4163, 0, 4163, 0, 4163, 0, 4163, 0, 4163, 0, 4163, 0, 4163, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);
_coeffToken2_1 = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 18537, 0, 14409, 0, 14377, 0, 12297, 0, 10248, 0, 10248, 0, 12360, 0, 12360, 0, 12328, 0, 12328, 0, 8200, 0, 8200, 0, 16487, 0, 16487, 0, 16487, 0, 16487, 0, 10311, 0, 10311, 0, 10311, 0, 10311, 0, 10279, 0, 10279, 0, 10279, 0, 10279, 0, 6151, 0, 6151, 0, 6151, 0, 6151, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);
_coeffToken2_2 = allocate([ 0, 0, 0, 0, 30829, 0, 30829, 0, -32658, 0, -32690, 0, -32722, 0, -32754, 0, 30766, 0, 30734, 0, 30798, 0, 28718, 0, 28749, 0, 28749, 0, 28685, 0, 28685, 0, 28781, 0, 28781, 0, 26701, 0, 26701, 0, 26669, 0, 26669, 0, 26637, 0, 26637, 0, 26733, 0, 26733, 0, 24653, 0, 24653, 0, 24621, 0, 24621, 0, 24589, 0, 24589, 0, 22540, 0, 22540, 0, 22540, 0, 22540, 0, 22604, 0, 22604, 0, 22604, 0, 22604, 0, 22572, 0, 22572, 0, 22572, 0, 22572, 0, 20492, 0, 20492, 0, 20492, 0, 20492, 0, 24684, 0, 24684, 0, 24684, 0, 24684, 0, 20556, 0, 20556, 0, 20556, 0, 20556, 0, 20524, 0, 20524, 0, 20524, 0, 20524, 0, 18444, 0, 18444, 0, 18444, 0, 18444, 0, 22635, 0, 22635, 0, 22635, 0, 22635, 0, 22635, 0, 22635, 0, 22635, 0, 22635, 0, 18507, 0, 18507, 0, 18507, 0, 18507, 0, 18507, 0, 18507, 0, 18507, 0, 18507, 0, 18475, 0, 18475, 0, 18475, 0, 18475, 0, 18475, 0, 18475, 0, 18475, 0, 18475, 0, 16395, 0, 16395, 0, 16395, 0, 16395, 0, 16395, 0, 16395, 0, 16395, 0, 16395, 0, 20587, 0, 20587, 0, 20587, 0, 20587, 0, 20587, 0, 20587, 0, 20587, 0, 20587, 0, 16459, 0, 16459, 0, 16459, 0, 16459, 0, 16459, 0, 16459, 0, 16459, 0, 16459, 0, 16427, 0, 16427, 0, 16427, 0, 16427, 0, 16427, 0, 16427, 0, 16427, 0, 16427, 0, 14347, 0, 14347, 0, 14347, 0, 14347, 0, 14347, 0, 14347, 0, 14347, 0, 14347, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);
_coeffToken4_0 = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6150, 0, 14406, 0, 14374, 0, 4102, 0, 18534, 0, 12358, 0, 12326, 0, 2054, 0, 10277, 0, 10277, 0, 10309, 0, 10309, 0, 8229, 0, 8229, 0, 8261, 0, 8261, 0, 6181, 0, 6181, 0, 16485, 0, 16485, 0, 6213, 0, 6213, 0, 4133, 0, 4133, 0, 14436, 0, 14436, 0, 14436, 0, 14436, 0, 12388, 0, 12388, 0, 12388, 0, 12388, 0, 10340, 0, 10340, 0, 10340, 0, 10340, 0, 8292, 0, 8292, 0, 8292, 0, 8292, 0, 6244, 0, 6244, 0, 6244, 0, 6244, 0, 4164, 0, 4164, 0, 4164, 0, 4164, 0, 2084, 0, 2084, 0, 2084, 0, 2084, 0, 4, 0, 4, 0, 4, 0, 4, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);
_coeffToken4_1 = allocate([ 0, 0, -32758, 0, -32662, 0, -32694, 0, -32726, 0, 30730, 0, 30826, 0, 30794, 0, 30762, 0, 28682, 0, 28778, 0, 28746, 0, 28714, 0, 26634, 0, 26665, 0, 26665, 0, 24585, 0, 24585, 0, 26697, 0, 26697, 0, 24617, 0, 24617, 0, 22537, 0, 22537, 0, 26729, 0, 26729, 0, 24649, 0, 24649, 0, 22569, 0, 22569, 0, 20489, 0, 20489, 0, 24680, 0, 24680, 0, 24680, 0, 24680, 0, 22600, 0, 22600, 0, 22600, 0, 22600, 0, 20520, 0, 20520, 0, 20520, 0, 20520, 0, 18440, 0, 18440, 0, 18440, 0, 18440, 0, 22632, 0, 22632, 0, 22632, 0, 22632, 0, 20552, 0, 20552, 0, 20552, 0, 20552, 0, 18472, 0, 18472, 0, 18472, 0, 18472, 0, 16392, 0, 16392, 0, 16392, 0, 16392, 0, 14343, 0, 14343, 0, 14343, 0, 14343, 0, 14343, 0, 14343, 0, 14343, 0, 14343, 0, 12295, 0, 12295, 0, 12295, 0, 12295, 0, 12295, 0, 12295, 0, 12295, 0, 12295, 0, 18503, 0, 18503, 0, 18503, 0, 18503, 0, 18503, 0, 18503, 0, 18503, 0, 18503, 0, 10247, 0, 10247, 0, 10247, 0, 10247, 0, 10247, 0, 10247, 0, 10247, 0, 10247, 0, 20583, 0, 20583, 0, 20583, 0, 20583, 0, 20583, 0, 20583, 0, 20583, 0, 20583, 0, 16455, 0, 16455, 0, 16455, 0, 16455, 0, 16455, 0, 16455, 0, 16455, 0, 16455, 0, 16423, 0, 16423, 0, 16423, 0, 16423, 0, 16423, 0, 16423, 0, 16423, 0, 16423, 0, 8199, 0, 8199, 0, 8199, 0, 8199, 0, 8199, 0, 8199, 0, 8199, 0, 8199, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);
_coeffToken8 = allocate([ 2054, 0, 2086, 0, 0, 0, 6, 0, 4102, 0, 4134, 0, 4166, 0, 0, 0, 6150, 0, 6182, 0, 6214, 0, 6246, 0, 8198, 0, 8230, 0, 8262, 0, 8294, 0, 10246, 0, 10278, 0, 10310, 0, 10342, 0, 12294, 0, 12326, 0, 12358, 0, 12390, 0, 14342, 0, 14374, 0, 14406, 0, 14438, 0, 16390, 0, 16422, 0, 16454, 0, 16486, 0, 18438, 0, 18470, 0, 18502, 0, 18534, 0, 20486, 0, 20518, 0, 20550, 0, 20582, 0, 22534, 0, 22566, 0, 22598, 0, 22630, 0, 24582, 0, 24614, 0, 24646, 0, 24678, 0, 26630, 0, 26662, 0, 26694, 0, 26726, 0, 28678, 0, 28710, 0, 28742, 0, 28774, 0, 30726, 0, 30758, 0, 30790, 0, 30822, 0, -32762, 0, -32730, 0, -32698, 0, -32666, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);
_coeffTokenMinus1_0 = allocate([ 0, 0, 4163, 0, 2, 0, 2, 0, 2081, 0, 2081, 0, 2081, 0, 2081, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);
_coeffTokenMinus1_1 = allocate([ 8295, 0, 8295, 0, 8264, 0, 8232, 0, 6215, 0, 6215, 0, 6183, 0, 6183, 0, 8198, 0, 8198, 0, 8198, 0, 8198, 0, 6150, 0, 6150, 0, 6150, 0, 6150, 0, 4102, 0, 4102, 0, 4102, 0, 4102, 0, 6246, 0, 6246, 0, 6246, 0, 6246, 0, 4134, 0, 4134, 0, 4134, 0, 4134, 0, 2054, 0, 2054, 0, 2054, 0, 2054, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);
_N_D_4x4B = allocate([ 3, 0, 0, 0, 15, undef, 0, 0, 1, 0, 0, 0, 10, undef, 0, 0, 0, 0, 0, 0, 5, undef, 0, 0, 4, 0, 0, 0, 0, undef, 0, 0, 1, 0, 0, 0, 11, undef, 0, 0, 1, 0, 0, 0, 14, undef, 0, 0, 4, 0, 0, 0, 1, undef, 0, 0, 4, 0, 0, 0, 4, undef, 0, 0, 0, 0, 0, 0, 7, undef, 0, 0, 4, 0, 0, 0, 2, undef, 0, 0, 0, 0, 0, 0, 13, undef, 0, 0, 4, 0, 0, 0, 8, undef, 0, 0, 4, 0, 0, 0, 3, undef, 0, 0, 4, 0, 0, 0, 6, undef, 0, 0, 4, 0, 0, 0, 9, undef, 0, 0, 4, 0, 0, 0, 12, undef, 0, 0, 3, 0, 0, 0, 19, undef, 0, 0, 1, 0, 0, 0, 18, undef, 0, 0, 0, 0, 0, 0, 17, undef, 0, 0, 4, 0, 0, 0, 16, undef, 0, 0, 3, 0, 0, 0, 23, undef, 0, 0, 1, 0, 0, 0, 22, undef, 0, 0, 0, 0, 0, 0, 21, undef, 0, 0, 4, 0, 0, 0, 20, undef, 0, 0 ], [ "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8" ], ALLOC_STATIC);
_N_C_4x4B = allocate([ 1, 0, 0, 0, 11, undef, 0, 0, 1, 0, 0, 0, 14, undef, 0, 0, 4, 0, 0, 0, 1, undef, 0, 0, 255, 0, 0, 0, 4, undef, 0, 0, 1, 0, 0, 0, 15, undef, 0, 0, 2, 0, 0, 0, 10, undef, 0, 0, 4, 0, 0, 0, 5, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 3, undef, 0, 0, 4, 0, 0, 0, 6, undef, 0, 0, 4, 0, 0, 0, 9, undef, 0, 0, 255, 0, 0, 0, 12, undef, 0, 0, 4, 0, 0, 0, 7, undef, 0, 0, 255, 0, 0, 0, 2, undef, 0, 0, 4, 0, 0, 0, 13, undef, 0, 0, 255, 0, 0, 0, 8, undef, 0, 0, 1, 0, 0, 0, 19, undef, 0, 0, 2, 0, 0, 0, 18, undef, 0, 0, 4, 0, 0, 0, 17, undef, 0, 0, 255, 0, 0, 0, 16, undef, 0, 0, 1, 0, 0, 0, 23, undef, 0, 0, 2, 0, 0, 0, 22, undef, 0, 0, 4, 0, 0, 0, 21, undef, 0, 0, 255, 0, 0, 0, 20, undef, 0, 0 ], [ "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8" ], ALLOC_STATIC);
_N_B_4x4B = allocate([ 1, 0, 0, 0, 10, undef, 0, 0, 1, 0, 0, 0, 11, undef, 0, 0, 4, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 1, undef, 0, 0, 1, 0, 0, 0, 14, undef, 0, 0, 1, 0, 0, 0, 15, undef, 0, 0, 4, 0, 0, 0, 4, undef, 0, 0, 4, 0, 0, 0, 5, undef, 0, 0, 4, 0, 0, 0, 2, undef, 0, 0, 4, 0, 0, 0, 3, undef, 0, 0, 4, 0, 0, 0, 8, undef, 0, 0, 4, 0, 0, 0, 9, undef, 0, 0, 4, 0, 0, 0, 6, undef, 0, 0, 4, 0, 0, 0, 7, undef, 0, 0, 4, 0, 0, 0, 12, undef, 0, 0, 4, 0, 0, 0, 13, undef, 0, 0, 1, 0, 0, 0, 18, undef, 0, 0, 1, 0, 0, 0, 19, undef, 0, 0, 4, 0, 0, 0, 16, undef, 0, 0, 4, 0, 0, 0, 17, undef, 0, 0, 1, 0, 0, 0, 22, undef, 0, 0, 1, 0, 0, 0, 23, undef, 0, 0, 4, 0, 0, 0, 20, undef, 0, 0, 4, 0, 0, 0, 21, undef, 0, 0 ], [ "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8" ], ALLOC_STATIC);
_N_A_4x4B = allocate([ 0, 0, 0, 0, 5, undef, 0, 0, 4, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 7, undef, 0, 0, 4, 0, 0, 0, 2, undef, 0, 0, 4, 0, 0, 0, 1, undef, 0, 0, 4, 0, 0, 0, 4, undef, 0, 0, 4, 0, 0, 0, 3, undef, 0, 0, 4, 0, 0, 0, 6, undef, 0, 0, 0, 0, 0, 0, 13, undef, 0, 0, 4, 0, 0, 0, 8, undef, 0, 0, 0, 0, 0, 0, 15, undef, 0, 0, 4, 0, 0, 0, 10, undef, 0, 0, 4, 0, 0, 0, 9, undef, 0, 0, 4, 0, 0, 0, 12, undef, 0, 0, 4, 0, 0, 0, 11, undef, 0, 0, 4, 0, 0, 0, 14, undef, 0, 0, 0, 0, 0, 0, 17, undef, 0, 0, 4, 0, 0, 0, 16, undef, 0, 0, 0, 0, 0, 0, 19, undef, 0, 0, 4, 0, 0, 0, 18, undef, 0, 0, 0, 0, 0, 0, 21, undef, 0, 0, 4, 0, 0, 0, 20, undef, 0, 0, 0, 0, 0, 0, 23, undef, 0, 0, 4, 0, 0, 0, 22, undef, 0, 0 ], [ "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8" ], ALLOC_STATIC);
_h264bsdBlockX = allocate([ 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
_h264bsdBlockY = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
_h264bsdClip = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 ], "i8", ALLOC_STATIC);
_N_D_SUB_PART = allocate([ 3, 0, 0, 0, 15, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 3, 0, 0, 0, 15, undef, 0, 0, 0, 0, 0, 0, 5, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 3, 0, 0, 0, 15, undef, 0, 0, 1, 0, 0, 0, 10, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 3, 0, 0, 0, 15, undef, 0, 0, 1, 0, 0, 0, 10, undef, 0, 0, 0, 0, 0, 0, 5, undef, 0, 0, 4, 0, 0, 0, 0, undef, 0, 0, 1, 0, 0, 0, 11, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 1, 0, 0, 0, 11, undef, 0, 0, 4, 0, 0, 0, 1, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 1, 0, 0, 0, 11, undef, 0, 0, 1, 0, 0, 0, 14, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 1, 0, 0, 0, 11, undef, 0, 0, 1, 0, 0, 0, 14, undef, 0, 0, 4, 0, 0, 0, 1, undef, 0, 0, 4, 0, 0, 0, 4, undef, 0, 0, 0, 0, 0, 0, 7, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 7, undef, 0, 0, 0, 0, 0, 0, 13, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 7, undef, 0, 0, 4, 0, 0, 0, 2, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 7, undef, 0, 0, 4, 0, 0, 0, 2, undef, 0, 0, 0, 0, 0, 0, 13, undef, 0, 0, 4, 0, 0, 0, 8, undef, 0, 0, 4, 0, 0, 0, 3, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 3, undef, 0, 0, 4, 0, 0, 0, 9, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 3, undef, 0, 0, 4, 0, 0, 0, 6, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 3, undef, 0, 0, 4, 0, 0, 0, 6, undef, 0, 0, 4, 0, 0, 0, 9, undef, 0, 0, 4, 0, 0, 0, 12, undef, 0, 0 ], [ "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8" ], ALLOC_STATIC);
_N_C_SUB_PART = allocate([ 1, 0, 0, 0, 14, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 1, 0, 0, 0, 14, undef, 0, 0, 255, 0, 0, 0, 4, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 1, 0, 0, 0, 11, undef, 0, 0, 1, 0, 0, 0, 14, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 1, 0, 0, 0, 11, undef, 0, 0, 1, 0, 0, 0, 14, undef, 0, 0, 4, 0, 0, 0, 1, undef, 0, 0, 255, 0, 0, 0, 4, undef, 0, 0, 2, 0, 0, 0, 10, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 2, 0, 0, 0, 10, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 1, 0, 0, 0, 15, undef, 0, 0, 2, 0, 0, 0, 10, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 1, 0, 0, 0, 15, undef, 0, 0, 2, 0, 0, 0, 10, undef, 0, 0, 4, 0, 0, 0, 5, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 6, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 6, undef, 0, 0, 255, 0, 0, 0, 12, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 3, undef, 0, 0, 4, 0, 0, 0, 6, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 3, undef, 0, 0, 4, 0, 0, 0, 6, undef, 0, 0, 4, 0, 0, 0, 9, undef, 0, 0, 255, 0, 0, 0, 12, undef, 0, 0, 255, 0, 0, 0, 2, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 2, undef, 0, 0, 255, 0, 0, 0, 8, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 7, undef, 0, 0, 255, 0, 0, 0, 2, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 7, undef, 0, 0, 255, 0, 0, 0, 2, undef, 0, 0, 4, 0, 0, 0, 13, undef, 0, 0, 255, 0, 0, 0, 8, undef, 0, 0 ], [ "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8" ], ALLOC_STATIC);
_N_B_SUB_PART = allocate([ 1, 0, 0, 0, 10, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 1, 0, 0, 0, 10, undef, 0, 0, 4, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 1, 0, 0, 0, 10, undef, 0, 0, 1, 0, 0, 0, 11, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 1, 0, 0, 0, 10, undef, 0, 0, 1, 0, 0, 0, 11, undef, 0, 0, 4, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 1, undef, 0, 0, 1, 0, 0, 0, 14, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 1, 0, 0, 0, 14, undef, 0, 0, 4, 0, 0, 0, 4, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 1, 0, 0, 0, 14, undef, 0, 0, 1, 0, 0, 0, 15, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 1, 0, 0, 0, 14, undef, 0, 0, 1, 0, 0, 0, 15, undef, 0, 0, 4, 0, 0, 0, 4, undef, 0, 0, 4, 0, 0, 0, 5, undef, 0, 0, 4, 0, 0, 0, 2, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 2, undef, 0, 0, 4, 0, 0, 0, 8, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 2, undef, 0, 0, 4, 0, 0, 0, 3, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 2, undef, 0, 0, 4, 0, 0, 0, 3, undef, 0, 0, 4, 0, 0, 0, 8, undef, 0, 0, 4, 0, 0, 0, 9, undef, 0, 0, 4, 0, 0, 0, 6, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 6, undef, 0, 0, 4, 0, 0, 0, 12, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 6, undef, 0, 0, 4, 0, 0, 0, 7, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 6, undef, 0, 0, 4, 0, 0, 0, 7, undef, 0, 0, 4, 0, 0, 0, 12, undef, 0, 0, 4, 0, 0, 0, 13, undef, 0, 0 ], [ "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8" ], ALLOC_STATIC);
_N_A_SUB_PART = allocate([ 0, 0, 0, 0, 5, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 5, undef, 0, 0, 0, 0, 0, 0, 7, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 5, undef, 0, 0, 4, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 5, undef, 0, 0, 4, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 7, undef, 0, 0, 4, 0, 0, 0, 2, undef, 0, 0, 4, 0, 0, 0, 1, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 1, undef, 0, 0, 4, 0, 0, 0, 3, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 1, undef, 0, 0, 4, 0, 0, 0, 4, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 1, undef, 0, 0, 4, 0, 0, 0, 4, undef, 0, 0, 4, 0, 0, 0, 3, undef, 0, 0, 4, 0, 0, 0, 6, undef, 0, 0, 0, 0, 0, 0, 13, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 13, undef, 0, 0, 0, 0, 0, 0, 15, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 13, undef, 0, 0, 4, 0, 0, 0, 8, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 13, undef, 0, 0, 4, 0, 0, 0, 8, undef, 0, 0, 0, 0, 0, 0, 15, undef, 0, 0, 4, 0, 0, 0, 10, undef, 0, 0, 4, 0, 0, 0, 9, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 9, undef, 0, 0, 4, 0, 0, 0, 11, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 9, undef, 0, 0, 4, 0, 0, 0, 12, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 255, 0, 0, 0, 0, undef, 0, 0, 4, 0, 0, 0, 9, undef, 0, 0, 4, 0, 0, 0, 12, undef, 0, 0, 4, 0, 0, 0, 11, undef, 0, 0, 4, 0, 0, 0, 14, undef, 0, 0 ], [ "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8", "i8", "i8", "i8" ], ALLOC_STATIC);
_lumaFracPos = allocate([ 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
_sample = allocate(1, "i32", ALLOC_STATIC);
_hashA = allocate(1, "i32", ALLOC_STATIC);
_hashB = allocate(1, "i32", ALLOC_STATIC);
_hashC = allocate(1, "i32", ALLOC_STATIC);
_hashD = allocate(1, "i32", ALLOC_STATIC);
_alphas = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 20, 22, 25, 28, 32, 36, 40, 45, 50, 56, 63, 71, 80, 90, 101, 113, 127, 144, 162, 182, 203, 226, 255, 255 ], "i8", ALLOC_STATIC);
_betas = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18 ], "i8", ALLOC_STATIC);
_tc0 = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 3, 1, 2, 3, 2, 2, 3, 2, 2, 4, 2, 3, 4, 2, 3, 4, 3, 3, 5, 3, 4, 6, 3, 4, 6, 4, 5, 7, 4, 5, 8, 4, 6, 9, 5, 7, 10, 6, 8, 11, 6, 8, 13, 7, 10, 14, 8, 11, 16, 9, 12, 18, 10, 13, 20, 11, 15, 23, 13, 17, 25 ], "i8", ALLOC_STATIC);
_mb4x4Index = allocate([ 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
_tagName = allocate([ 36, 78, 97, 109, 101, 58, 32, 70, 73, 82, 83, 84, 95, 65, 78, 68, 82, 79, 73, 68, 95, 67, 79, 80, 89, 82, 73, 71, 72, 84, 32, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], "i8", ALLOC_STATIC);
_streamStop = allocate(1, "i8*", ALLOC_STATIC);
_packetize = allocate(1, "i32", ALLOC_STATIC);
_nalUnitStream = allocate(1, "i32", ALLOC_STATIC);
_foutput = allocate(1, "%struct.__sFILE*", ALLOC_STATIC);
_screen = allocate(1, "%struct.SDL_Surface*", ALLOC_STATIC);
_maxNumPics = allocate(1, "i32", ALLOC_STATIC);
_tmpImage = allocate(1, "i8*", ALLOC_STATIC);
_numErrors = allocate(1, "i32", ALLOC_STATIC);
_cropDisplay = allocate(1, "i32", ALLOC_STATIC);
_disableOutputReordering = allocate(1, "i32", ALLOC_STATIC);
_decInput = allocate(16, [ "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
_decVer = allocate(8, "i32", ALLOC_STATIC);
__str = allocate([ 45, 84, 0 ], "i8", ALLOC_STATIC);
_i = allocate(1, "i32", ALLOC_STATIC);
__str1 = allocate([ 45, 78, 0 ], "i8", ALLOC_STATIC);
__str2 = allocate([ 45, 79, 0 ], "i8", ALLOC_STATIC);
__str3 = allocate([ 45, 80, 0 ], "i8", ALLOC_STATIC);
__str4 = allocate([ 45, 85, 0 ], "i8", ALLOC_STATIC);
__str5 = allocate([ 45, 67, 0 ], "i8", ALLOC_STATIC);
__str6 = allocate([ 45, 82, 0 ], "i8", ALLOC_STATIC);
__str7 = allocate([ 114, 98, 0 ], "i8", ALLOC_STATIC);
_strmLen = allocate(1, "i32", ALLOC_STATIC);
_byteStrmStart = allocate(1, "i8*", ALLOC_STATIC);
_decInst = allocate(1, "i8*", ALLOC_STATIC);
_ret = allocate(1, "i32", ALLOC_STATIC);
_tmp = allocate(1, "i32", ALLOC_STATIC);
_picDisplayNumber = allocate(1, "i32", ALLOC_STATIC);
_picDecodeNumber = allocate(1, "i32", ALLOC_STATIC);
_decPicture = allocate(16, [ "i32*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);
_imageData = allocate(1, "i8*", ALLOC_STATIC);
_decInfo = allocate(48, "i32", ALLOC_STATIC);
_decOutput = allocate(4, "i8*", ALLOC_STATIC);
_picSize = allocate(1, "i32", ALLOC_STATIC);
__str8 = allocate([ 79, 110, 70, 114, 97, 109, 101, 68, 101, 99, 111, 100, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);
__str9 = allocate([ 83, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 32, 37, 102, 10, 0 ], "i8", ALLOC_STATIC);
__str10 = allocate([ 71, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 10, 0 ], "i8", ALLOC_STATIC);
_NextPacket_prevIndex = allocate(1, "i32", ALLOC_STATIC);
__str11 = allocate([ 37, 115, 10, 0 ], "i8", ALLOC_STATIC);
FUNCTION_TABLE = [ 0, 0, _FillRow1, 0, _h264bsdFillRow7, 0 ];
Module["FUNCTION_TABLE"] = FUNCTION_TABLE;
function run(args) {
  args = args || Module["arguments"];
  __globalConstructor__();
  var ret = null;
  if (Module["_main"]) {
    ret = Module.callMain(args);
    __shutdownRuntime__();
  }
  return ret;
}
Module["run"] = run;
try {
  FS.ignorePermissions = false;
} catch (e) {}
Module["noInitialRun"] = true;
if (!Module["noInitialRun"]) {
  var ret = run();
}
Module["FS"] = FS;
Module["HEAPU8"] = HEAPU8;
Module["CorrectionsMonitor"] = CorrectionsMonitor;
FS["createDataFile"] = FS.createDataFile;
var breakLoop = false;
_runMainLoop = (function() {
  window.addEventListener("message", (function() {
    _mainLoopIteration();
    if (!breakLoop) {
      window.postMessage(0, "*");
    }
  }), false);
});
Module["play"] = (function() {
  breakLoop = false;
  window.postMessage(0, "*");
});
Module["stop"] = (function() {
  breakLoop = true;
});
Module["onFrameDecoded"] = (function() {});
_broadwayOnFrameDecoded = (function() {
  Module["onFrameDecoded"]();
});
Module["setPosition"] = _broadwaySetPosition;
Module["getPosition"] = _broadwayGetPosition;
var patches = Module["patches"] = {};
function getGlobalScope() {
  return (function() {
    return this;
  }).call(null);
}
assert = (function(condition, message) {
  if (!condition) {
    throw "Assertion: " + message;
  }
});
Module["patch"] = (function(scope, name, value) {
  assert(typeof value == "function");
  if (!scope) {
    scope = getGlobalScope();
  }
  if (Module["CC_VARIABLE_MAP"]) {
    name = Module["CC_VARIABLE_MAP"][name];
  }
  assert(name in scope && typeof scope[name] == "function", "Can only patch functions.");
  patches[name] = scope[name];
  scope[name] = value;
  return patches[name];
});
Module["unpatch"] = (function(scope, name) {
  if (!scope) {
    scope = getGlobalScope();
  }
  if (Module["CC_VARIABLE_MAP"]) {
    name = Module["CC_VARIABLE_MAP"][name];
  }
  assert(name in scope && typeof scope[name] == "function");
  if (name in patches) {
    scope[name] = patches[name];
  }
});
function getSurface() {
  var surface = SDL.surfaces[SDL.screen];
  if (!surface.image) {
    surface.image = surface.ctx.getImageData(0, 0, surface.width, surface.height);
    var data = surface.image.data;
    var num = data.length;
    for (var i = 0; i < num / 4; i++) {
      data[i * 4 + 3] = 255;
    }
  }
  return surface;
}
Module["paint"] = (function($luma, $cb, $cr, w, h) {
  for (var y1, y2, u, v, ruv, guv, buv, j, w_2 = w >> 1, W = w * 4, surface = getSurface(), d = surface.image.data, r = 0; h -= 2; ) {
    for (j = w_2; j--; ) {
      u = HEAPU8[$cr++];
      v = HEAPU8[$cb++];
      ruv = 409 * u - 56992;
      guv = 34784 - 208 * u - 100 * v;
      buv = 516 * v - 70688;
      y2 = HEAPU8[$luma + w] * 298;
      y1 = HEAPU8[$luma++] * 298;
      d[r + W] = y2 + ruv >> 8;
      d[r++] = y1 + ruv >> 8;
      d[r + W] = y2 + guv >> 8;
      d[r++] = y1 + guv >> 8;
      d[r + W] = y2 + buv >> 8;
      d[r++] = y1 + buv >> 8;
      r++;
      y2 = HEAPU8[$luma + w] * 298;
      y1 = HEAPU8[$luma++] * 298;
      d[r + W] = y2 + ruv >> 8;
      d[r++] = y1 + ruv >> 8;
      d[r + W] = y2 + guv >> 8;
      d[r++] = y1 + guv >> 8;
      d[r + W] = y2 + buv >> 8;
      d[r++] = y1 + buv >> 8;
      r++;
    }
    r += W;
    $luma += w;
  }
  surface.ctx.putImageData(surface.image, 0, 0);
});
_paint = (function($luma, $cb, $cr, w, h) {
  Module["paint"]($luma, $cb, $cr, w, h);
});
// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_h264bsdProcessBlock","_h264bsdCountLeadingZeros","_abs","_clip","_h264bsdProcessLumaDc","_h264bsdProcessChromaDc","_h264bsdNextMbAddress","_h264bsdSetCurrImageMbPointers","_h264bsdRbspTrailingBits","_h264bsdMoreRbspData","_h264bsdExtractNalUnit","_GetDpbSize","_h264bsdDecodeSeqParamSet","_h264bsdCompareSeqParamSets","_h264bsdDecodePicParamSet","_h264bsdDecodeSliceHeader","_NumSliceGroupChangeCycleBits","_RefPicListReordering","_DecRefPicMarking","_h264bsdCheckPpsId","_h264bsdCheckFrameNum","_h264bsdCheckIdrPicId","_h264bsdCheckPicOrderCntLsb","_h264bsdCheckDeltaPicOrderCntBottom","_h264bsdCheckDeltaPicOrderCnt","_h264bsdCheckRedundantPicCnt","_SetMbParams","_h264bsdCheckPriorPicsFlag","_h264bsdDecodeSliceData","_h264bsdMarkSliceCorrupted","_h264bsdNumMbPart","_h264bsdMbPartPredMode","_CbpIntra16x16","_h264bsdDecodeMacroblockLayer","_DecodeSubMbPred","_DecodeMbPred","_h264bsdNumSubMbPart","_h264bsdPredModeIntra16x16","_DecodeResidual","_h264bsdDecodeMacroblock","_h264bsdSubMbPartMode","_h264bsdShowBits32","_h264bsdFlushBits","_h264bsdIsByteAligned","_ProcessResidual","_DetermineNc","_h264bsdGetBits","_h264bsdDecodeExpGolombUnsigned","_h264bsdDecodeExpGolombSigned","_h264bsdDecodeExpGolombMapped","_h264bsdDecodeExpGolombTruncated","_DecodeCoeffToken","_h264bsdDecodeResidualBlockCavlc","_DecodeLevelPrefix","_DecodeTotalZeros","_DecodeRunBefore","_h264bsdInitMbNeighbours","_h264bsdDecodeNalUnit","_h264bsdGetNeighbourMb","_h264bsdNeighbour4x4BlockA","_h264bsdNeighbour4x4BlockB","_h264bsdNeighbour4x4BlockC","_h264bsdNeighbour4x4BlockD","_h264bsdIsNeighbourAvailable","_h264bsdInitStorage","_h264bsdStoreSeqParamSet","_h264bsdStorePicParamSet","_CheckPps","_h264bsdResetStorage","_h264bsdIsStartOfPicture","_h264bsdIsEndOfPicture","_h264bsdComputeSliceGroupMap","_h264bsdActivateParamSets","_h264bsdDecodeSliceGroupMap","_DecodeInterleavedMap","_h264bsdCheckAccessUnitBoundary","_h264bsdValidParamSets","_DecodeDispersedMap","_DecodeForegroundLeftOverMap","_DecodeBoxOutMap","_DecodeRasterScanMap","_DecodeWipeMap","_h264bsdIntraPrediction","_h264bsdGetNeighbourPels","_h264bsdIntra16x16Prediction","_Intra16x16VerticalPrediction","_Intra16x16HorizontalPrediction","_h264bsdIntra4x4Prediction","_h264bsdIntraChromaPrediction","_Intra16x16DcPrediction","_Intra16x16PlanePrediction","_h264bsdAddResidual","_DetermineIntra4x4PredMode","_Get4x4NeighbourPels","_Intra4x4VerticalPrediction","_Intra4x4HorizontalPrediction","_Intra4x4DcPrediction","_Intra4x4DiagonalDownLeftPrediction","_Intra4x4DiagonalDownRightPrediction","_Intra4x4VerticalRightPrediction","_Intra4x4HorizontalDownPrediction","_Intra4x4VerticalLeftPrediction","_Intra4x4HorizontalUpPrediction","_Write4x4To16x16","_IntraChromaDcPrediction","_IntraChromaHorizontalPrediction","_IntraChromaVerticalPrediction","_IntraChromaPlanePrediction","_h264bsdInterPrediction","_MvPrediction16x16","_MvPrediction16x8","_MvPrediction8x16","_MvPrediction8x8","_MedianFilter","_GetInterNeighbour","_h264bsdInterpolateChromaHor","_MvPrediction","_GetPredictionMv","_h264bsdFillBlock","_h264bsdInterpolateChromaVer","_h264bsdInterpolateChromaHorVer","_h264bsdInterpolateVerHalf","_h264bsdInterpolateVerQuarter","_h264bsdInterpolateHorHalf","_h264bsdInterpolateHorQuarter","_h264bsdInterpolateHorVerQuarter","_h264bsdInterpolateMidHalf","_h264bsdInterpolateMidVerQuarter","_h264bsdInterpolateMidHorQuarter","_FillRow1","_h264bsdPredictSamples","_PredictChroma","_h264bsdFillRow7","_SetPicNums","_FindDpbPic","_h264bsdReorderRefPicList","_h264bsdMarkDecRefPic","_Mmcop5","_Mmcop1","_Mmcop2","_Mmcop3","_Mmcop4","_Mmcop6","_SlidingWindowRefPicMarking","_h264bsdGetRefPicData","_h264bsdAllocateDpbImage","_OutputPicture","_ShellSort","_h264bsdInitDpb","_h264bsdResetDpb","_h264bsdFreeDpb","_h264bsdInitRefPicList","_h264bsdDpbOutputPicture","_ComparePictures","_FindSmallestPicOrderCnt","_h264bsdCheckGapsInFrameNum","_h264bsdFlushDpb","_h264bsdWriteMacroblock","_h264bsdWriteOutputBlocks","_InnerBoundaryStrength2","_h264bsdFilterPicture","_GetMbFilteringFlags","_GetBoundaryStrengths","_FilterLuma","_GetLumaEdgeThresholds","_GetChromaEdgeThresholds","_FilterChroma","_GetBoundaryStrengthsA","_FilterVerChromaEdge","_FilterHorChroma","_FilterHorChromaEdge","_FilterVerLumaEdge","_FilterHorLuma","_FilterHorLumaEdge","_EdgeBoundaryStrength","_IsSliceBoundaryOnLeft","_IsSliceBoundaryOnTop","_InnerBoundaryStrength","_h264bsdConceal","_ConcealMb","_Transform","_h264bsdDecodeVuiParameters","_h264bsdDecodePicOrderCnt","_DecodeHrdParameters","_h264bsdInit","_h264bsdDecode","_h264bsdShutdown","_h264bsdPicWidth","_h264bsdPicHeight","_h264bsdFlushBuffer","_h264bsdVideoRange","_h264bsdMatrixCoefficients","_h264bsdCroppingParams","_h264bsdSampleAspectRatio","_h264bsdProfile","_H264SwDecRelease","_h264bsdNextOutputPicture","_h264bsdCheckValidParamSets","_H264SwDecInit","_H264SwDecGetAPIVersion","_NextPacket","_H264SwDecGetInfo","_H264SwDecDecode","_H264SwDecNextPicture","_runMainLoop","_main","_CropPicture","_DrawOutput","_terminate","_mainLoopIteration","_broadwayOnFrameDecoded","_broadwaySetPosition","_broadwayGetPosition","_H264SwDecTrace","_H264SwDecFree","_H264SwDecMemcpy","_H264SwDecMemset","_H264SwDecMalloc"]
